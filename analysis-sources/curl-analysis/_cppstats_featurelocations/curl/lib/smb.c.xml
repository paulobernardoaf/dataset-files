<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\smb.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_SMB</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>CURL_SIZEOF_CURL_OFF_T</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILDING_CURL_SMB_C</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PROCESS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_WINDOWS_APP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getpid</name></cpp:macro> <cpp:value>GetCurrentProcessId</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getpid</name></cpp:macro> <cpp:value>_getpid</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"smb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transfer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_ntlm_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"escape.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_endian.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_connection_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_request_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>smb_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_parse_url_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_smb</name> <init>= <expr><block>{
<expr><literal type="string">"SMB"</literal></expr>, 
<expr><name>smb_setup_connection</name></expr>, 
<expr><name>smb_do</name></expr>, 
<expr><name>smb_done</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>smb_connect</name></expr>, 
<expr><name>smb_connection_state</name></expr>, 
<expr><name>smb_request_state</name></expr>, 
<expr><name>smb_getsock</name></expr>, 
<expr><name>smb_getsock</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>smb_disconnect</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>PORT_SMB</name></expr>, 
<expr><name>CURLPROTO_SMB</name></expr>, 
<expr><name>PROTOPT_NONE</name></expr> 
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_smbs</name> <init>= <expr><block>{
<expr><literal type="string">"SMBS"</literal></expr>, 
<expr><name>smb_setup_connection</name></expr>, 
<expr><name>smb_do</name></expr>, 
<expr><name>smb_done</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>smb_connect</name></expr>, 
<expr><name>smb_connection_state</name></expr>, 
<expr><name>smb_request_state</name></expr>, 
<expr><name>smb_getsock</name></expr>, 
<expr><name>smb_getsock</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>smb_disconnect</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>PORT_SMBS</name></expr>, 
<expr><name>CURLPROTO_SMBS</name></expr>, 
<expr><name>PROTOPT_SSL</name></expr> 
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PAYLOAD_SIZE</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MESSAGE_SIZE</name></cpp:macro> <cpp:value>(MAX_PAYLOAD_SIZE + 0x1000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENTNAME</name></cpp:macro> <cpp:value>"curl"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVICENAME</name></cpp:macro> <cpp:value>"?????"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSGCAT</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strcpy(p, (str)); p += strlen(str);</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSGCATNULL</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strcpy(p, (str)); p += strlen(str) + 1;</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__BYTE_ORDER__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__BYTE_ORDER__</name> <operator>==</operator> <name>__ORDER_BIG_ENDIAN__</name><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__OS400__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name>smb_swap16</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>smb_swap32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>curl_off_t</name></type> <name>smb_swap64</name><parameter_list>(<parameter><decl><type><name>curl_off_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>curl_off_t</name><operator>)</operator> <call><name>smb_swap32</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator>
<call><name>smb_swap32</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>smb_swap16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>smb_swap32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>smb_swap64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<enum>enum <name>smb_req_state</name> <block>{
<decl><name>SMB_REQUESTING</name></decl>,
<decl><name>SMB_TREE_CONNECT</name></decl>,
<decl><name>SMB_OPEN</name></decl>,
<decl><name>SMB_DOWNLOAD</name></decl>,
<decl><name>SMB_UPLOAD</name></decl>,
<decl><name>SMB_CLOSE</name></decl>,
<decl><name>SMB_TREE_DISCONNECT</name></decl>,
<decl><name>SMB_DONE</name></decl>
}</block>;</enum>


<struct>struct <name>smb_request</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>smb_req_state</name></name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>tid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>fid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>conn_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>smb_conn_state</name></name></type> <name>newstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_conn</name></name> <modifier>*</modifier></type><name>smbc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smbc</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"SMB_NOT_CONNECTED"</literal></expr>,
<expr><literal type="string">"SMB_CONNECTING"</literal></expr>,
<expr><literal type="string">"SMB_NEGOTIATE"</literal></expr>,
<expr><literal type="string">"SMB_SETUP"</literal></expr>,
<expr><literal type="string">"SMB_CONNECTED"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>smbc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>newstate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SMB conn %p state change from %s to %s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>smbc</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name><name>smbc</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>newstate</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>newstate</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>request_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>smb_req_state</name></name></type> <name>newstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"SMB_REQUESTING"</literal></expr>,
<expr><literal type="string">"SMB_TREE_CONNECT"</literal></expr>,
<expr><literal type="string">"SMB_OPEN"</literal></expr>,
<expr><literal type="string">"SMB_DOWNLOAD"</literal></expr>,
<expr><literal type="string">"SMB_UPLOAD"</literal></expr>,
<expr><literal type="string">"SMB_CLOSE"</literal></expr>,
<expr><literal type="string">"SMB_TREE_DISCONNECT"</literal></expr>,
<expr><literal type="string">"SMB_DONE"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>newstate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SMB request %p state change from %s to %s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>req</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name><name>req</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>newstate</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>newstate</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_request</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name> <operator>=</operator> <name>req</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>smb_request</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>req</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><call><name>smb_parse_url_path</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_conn</name></name> <modifier>*</modifier></type><name>smbc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smbc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>done</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_LOGIN_DENIED</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>SMB_CONNECTING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>recv_buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>MAX_MESSAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>smbc</name><operator>-&gt;</operator><name>recv_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>connkeep</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SMB default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>slash</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>slash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>slash</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>domain</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>smbc</name><operator>-&gt;</operator><name>domain</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>domain</name><index>[<expr><name>slash</name> <operator>-</operator> <name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>domain</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>smbc</name><operator>-&gt;</operator><name>domain</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_recv_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_conn</name></name> <modifier>*</modifier></type><name>smbc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smbc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>smbc</name><operator>-&gt;</operator><name>recv_buf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nbt_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>msg_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>MAX_MESSAGE_SIZE</name> <operator>-</operator> <name><name>smbc</name><operator>-&gt;</operator><name>got</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_read</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name><name>smbc</name><operator>-&gt;</operator><name>got</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>bytes_read</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>got</name></name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>smbc</name><operator>-&gt;</operator><name>got</name></name> <operator>&lt;</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nbt_size</name> <operator>=</operator> <call><name>Curl_read16_be</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator>
<operator>(</operator><name>buf</name> <operator>+</operator> sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator>
sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>smbc</name><operator>-&gt;</operator><name>got</name></name> <operator>&lt;</operator> <name>nbt_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>msg_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>smb_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>nbt_size</name> <operator>&gt;=</operator> <name>msg_size</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msg_size</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>buf</name><index>[<expr><name>msg_size</name></expr>]</index></name><operator>)</operator> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>nbt_size</name> <operator>&gt;=</operator> <name>msg_size</name> <operator>+</operator> sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msg_size</name> <operator>+=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <operator>+</operator>
<call><name>Curl_read16_le</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>msg_size</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>nbt_size</name> <operator>&lt;</operator> <name>msg_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_READ_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smb_pop_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_conn</name></name> <modifier>*</modifier></type><name>smbc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smbc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>got</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smb_format_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>smb_header</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_conn</name></name> <modifier>*</modifier></type><name>smbc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smbc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>nbt_length</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>+</operator>
<name>len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><literal type="string">"\xffSMB"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>SMB_FLAGS_CANONICAL_PATHNAMES</name> <operator>|</operator> <name>SMB_FLAGS_CASELESS_PATHNAMES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>flags2</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><name>SMB_FLAGS2_IS_LONG_NAME</name> <operator>|</operator> <name>SMB_FLAGS2_KNOWS_LONG_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pid_high</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><name>pid</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>upload_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_conn</name></name> <modifier>*</modifier></type><name>smbc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smbc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ulbuf</name></name></expr></argument>,
<argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>bytes_written</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>send_size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>sent</name></name> <operator>=</operator> <name>bytes_written</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>upload_size</name></name> <operator>=</operator> <name>upload_size</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_conn</name></name> <modifier>*</modifier></type><name>smbc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smbc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><name><name>smbc</name><operator>-&gt;</operator><name>send_size</name></name> <operator>-</operator> <name><name>smbc</name><operator>-&gt;</operator><name>sent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>smbc</name><operator>-&gt;</operator><name>send_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ulbuf</name></name> <operator>+</operator> <name><name>smbc</name><operator>-&gt;</operator><name>sent</name></name></expr></argument>,
<argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>bytes_written</name> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>sent</name></name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>send_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_send_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>cmd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>msg_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_get_upload_buffer</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>smb_format_message</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>smb_header</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ulbuf</name></name></expr></argument>,
<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>msg_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ulbuf</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>smb_header</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msg_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>smb_send</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>smb_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>msg_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_send_negotiate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><literal type="string">"\x00\x0c\x00\x02NT LM 0.12"</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>smb_send_message</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMB_COM_NEGOTIATE</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_send_setup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_conn</name></name> <modifier>*</modifier></type><name>smbc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smbc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_setup</name></name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>lm_hash</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>lm</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>nt_hash</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>nt</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>byte_count</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>lm</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nt</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>byte_count</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>byte_count</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>OS</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>CLIENTNAME</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>byte_count</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>msg</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_FILESIZE_EXCEEDED</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_ntlm_core_mk_lm_hash</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>, <argument><expr><name>lm_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_ntlm_core_lm_resp</name><argument_list>(<argument><expr><name>lm_hash</name></expr></argument>, <argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>challenge</name></name></expr></argument>, <argument><expr><name>lm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTRESPONSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Curl_ntlm_core_mk_nt_hash</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>, <argument><expr><name>nt_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_ntlm_core_lm_resp</name><argument_list>(<argument><expr><name>nt_hash</name></expr></argument>, <argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>challenge</name></name></expr></argument>, <argument><expr><name>nt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>word_count</name></name> <operator>=</operator> <name>SMB_WC_SETUP_ANDX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>andx</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>SMB_COM_NO_ANDX_COMMAND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>max_buffer_size</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><name>MAX_MESSAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>max_mpx_count</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>vc_number</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>session_key</name></name> <operator>=</operator> <call><name>smb_swap32</name><argument_list>(<argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>session_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>capabilities</name></name> <operator>=</operator> <call><name>smb_swap32</name><argument_list>(<argument><expr><name>SMB_CAP_LARGE_FILES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>lengths</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>lm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lm</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nt</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MSGCATNULL</name><argument_list>(<argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MSGCATNULL</name><argument_list>(<argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MSGCATNULL</name><argument_list>(<argument><expr><name>OS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MSGCATNULL</name><argument_list>(<argument><expr><name>CLIENTNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>byte_count</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>msg</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>byte_count</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>smb_send_message</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMB_COM_SETUP_ANDX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>msg</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>byte_count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_send_tree_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_tree_connect</name></name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_conn</name></name> <modifier>*</modifier></type><name>smbc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smbc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>msg</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>byte_count</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>share</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>byte_count</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>SERVICENAME</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>byte_count</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>msg</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_FILESIZE_EXCEEDED</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>word_count</name></name> <operator>=</operator> <name>SMB_WC_TREE_CONNECT_ANDX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>andx</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>SMB_COM_NO_ANDX_COMMAND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>pw_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MSGCAT</name><argument_list>(<argument><expr><literal type="string">"\\\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MSGCAT</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MSGCAT</name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MSGCATNULL</name><argument_list>(<argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>share</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MSGCATNULL</name><argument_list>(<argument><expr><name>SERVICENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>byte_count</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>msg</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>byte_count</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>smb_send_message</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMB_COM_TREE_CONNECT_ANDX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>msg</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>byte_count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_send_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_nt_create</name></name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>byte_count</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>msg</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_FILESIZE_EXCEEDED</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>word_count</name></name> <operator>=</operator> <name>SMB_WC_NT_CREATE_ANDX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>andx</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>SMB_COM_NO_ANDX_COMMAND</name></expr>;</expr_stmt>
<expr_stmt><expr><name>byte_count</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>name_length</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>share_access</name></name> <operator>=</operator> <call><name>smb_swap32</name><argument_list>(<argument><expr><name>SMB_FILE_SHARE_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>access</name></name> <operator>=</operator> <call><name>smb_swap32</name><argument_list>(<argument><expr><name>SMB_GENERIC_READ</name> <operator>|</operator> <name>SMB_GENERIC_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>create_disposition</name></name> <operator>=</operator> <call><name>smb_swap32</name><argument_list>(<argument><expr><name>SMB_FILE_OVERWRITE_IF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>access</name></name> <operator>=</operator> <call><name>smb_swap32</name><argument_list>(<argument><expr><name>SMB_GENERIC_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>create_disposition</name></name> <operator>=</operator> <call><name>smb_swap32</name><argument_list>(<argument><expr><name>SMB_FILE_OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>byte_count</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <operator>++</operator><name>byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>msg</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>smb_send_message</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMB_COM_NT_CREATE_ANDX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>msg</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>byte_count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_send_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_close</name></name></type> <name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>word_count</name></name> <operator>=</operator> <name>SMB_WC_CLOSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>fid</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>smb_send_message</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMB_COM_CLOSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_send_tree_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_tree_disconnect</name></name></type> <name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>smb_send_message</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMB_COM_TREE_DISCONNECT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_send_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>offset</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_read</name></name></type> <name>msg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>word_count</name></name> <operator>=</operator> <name>SMB_WC_READ_ANDX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>andx</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>SMB_COM_NO_ANDX_COMMAND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>fid</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <call><name>smb_swap32</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>offset_high</name></name> <operator>=</operator> <call><name>smb_swap32</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>min_bytes</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><name>MAX_PAYLOAD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>max_bytes</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><name>MAX_PAYLOAD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>smb_send_message</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMB_COM_READ_ANDX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_send_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_write</name></name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>offset</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>upload_size</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_get_upload_buffer</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <operator>(</operator>struct <name>smb_write</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ulbuf</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>upload_size</name> <operator>&gt;=</operator> <name>MAX_PAYLOAD_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>upload_size</name> <operator>=</operator> <name>MAX_PAYLOAD_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>word_count</name></name> <operator>=</operator> <name>SMB_WC_WRITE_ANDX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>andx</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>SMB_COM_NO_ANDX_COMMAND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>fid</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>smb_swap32</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>offset_high</name></name> <operator>=</operator> <call><name>smb_swap32</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>data_length</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>upload_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>msg</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>byte_count</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <operator>(</operator><name>upload_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smb_format_message</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>SMB_COM_WRITE_ANDX</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>msg</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>upload_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>smb_send</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>upload_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_send_and_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_conn</name></name> <modifier>*</modifier></type><name>smbc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smbc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>smbc</name><operator>-&gt;</operator><name>send_size</name></name> <operator>&amp;&amp;</operator> <name><name>smbc</name><operator>-&gt;</operator><name>upload_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name> <init>= <expr><ternary><condition><expr><name><name>smbc</name><operator>-&gt;</operator><name>upload_size</name></name> <operator>&gt;</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload_buffer_size</name></name></expr> ?</condition><then>
<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload_buffer_size</name></name></expr> </then><else>:
<expr><name><name>smbc</name><operator>-&gt;</operator><name>upload_size</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_fromhere</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ulbuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_fillreadbuffer</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <name>CURLE_AGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nread</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>upload_size</name></name> <operator>-=</operator> <name>nread</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>send_size</name></name> <operator>=</operator> <name>nread</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>smbc</name><operator>-&gt;</operator><name>send_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smb_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>smbc</name><operator>-&gt;</operator><name>send_size</name></name> <operator>||</operator> <name><name>smbc</name><operator>-&gt;</operator><name>upload_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_AGAIN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>smb_recv_message</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_connection_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_conn</name></name> <modifier>*</modifier></type><name>smbc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smbc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_negotiate_response</name></name> <modifier>*</modifier></type><name>nrsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_header</name></name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>smbc</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>SMB_CONNECTING</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_SSL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ssl_done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ssl_connect_nonblocking</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssl_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <name>CURLE_AGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ssl_done</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smb_send_negotiate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SMB: failed to send negotiate message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>conn_state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMB_NEGOTIATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smb_send_and_recv</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <name>CURLE_AGAIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SMB: failed to communicate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>smbc</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SMB_NEGOTIATE</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>smbc</name><operator>-&gt;</operator><name>got</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nrsp</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>challenge</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<name><name>h</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SMB: negotiation failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nrsp</name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>challenge</name></name></expr></argument>, <argument><expr><name><name>nrsp</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>challenge</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>session_key</name></name> <operator>=</operator> <call><name>smb_swap32</name><argument_list>(<argument><expr><name><name>nrsp</name><operator>-&gt;</operator><name>session_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smb_send_setup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SMB: failed to send setup message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>conn_state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMB_SETUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMB_SETUP</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SMB: authentication failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_LOGIN_DENIED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>conn_state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMB_CONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>smb_pop_message</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return> 
</block_content>}</block></switch>

<expr_stmt><expr><call><name>smb_pop_message</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>get_posix_time</name><parameter_list>(<parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>timestamp</name> <operator>-=</operator> <literal type="number">116444736000000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>timestamp</name> <operator>/=</operator> <literal type="number">10000000</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_TIME_T</name> <operator>&lt;</operator> <name>SIZEOF_CURL_OFF_T</name></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>timestamp</name> <operator>&gt;</operator> <name>TIME_T_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>TIME_T_MAX</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>timestamp</name> <operator>&lt;</operator> <name>TIME_T_MIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>TIME_T_MIN</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <name>timestamp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_request_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_header</name></name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_conn</name></name> <modifier>*</modifier></type><name>smbc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smbc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>smb_req_state</name></name></type> <name>next_state</name> <init>= <expr><name>SMB_DONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>smb_nt_create_response</name></name> <modifier>*</modifier></type><name>smb_m</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>SMB_REQUESTING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smb_send_tree_connect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SMB: failed to send tree connect message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>request_state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMB_TREE_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smb_send_and_recv</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <name>CURLE_AGAIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SMB: failed to communicate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SMB_TREE_CONNECT</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>CURLE_REMOTE_FILE_NOT_FOUND</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <call><name>smb_swap32</name><argument_list>(<argument><expr><name>SMB_ERR_NOACCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>CURLE_REMOTE_ACCESS_DENIED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>SMB_OPEN</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMB_OPEN</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>status</name></name> <operator>||</operator> <name><name>smbc</name><operator>-&gt;</operator><name>got</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>smb_nt_create_response</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>CURLE_REMOTE_FILE_NOT_FOUND</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <call><name>smb_swap32</name><argument_list>(<argument><expr><name>SMB_ERR_NOACCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>CURLE_REMOTE_ACCESS_DENIED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>SMB_TREE_DISCONNECT</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>smb_m</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> struct <name>smb_nt_create_response</name><operator>*</operator><operator>)</operator> <name>msg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>fid</name></name> <operator>=</operator> <call><name>smb_swap16</name><argument_list>(<argument><expr><name><name>smb_m</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>SMB_UPLOAD</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>smb_m</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> struct <name>smb_nt_create_response</name><operator>*</operator><operator>)</operator> <name>msg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>smb_swap64</name><argument_list>(<argument><expr><name><name>smb_m</name><operator>-&gt;</operator><name>end_of_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>CURLE_WEIRD_SERVER_REPLY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>SMB_CLOSE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>get_filetime</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_posix_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>filetime</name></name></expr></argument>, <argument><expr><name><name>smb_m</name><operator>-&gt;</operator><name>last_change_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>SMB_DOWNLOAD</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>SMB_DOWNLOAD</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>status</name></name> <operator>||</operator> <name><name>smbc</name><operator>-&gt;</operator><name>got</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>smb_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>SMB_CLOSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>Curl_read16_le</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>msg</name><operator>)</operator> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr>struct <name>smb_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>Curl_read16_le</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>msg</name><operator>)</operator> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr>struct <name>smb_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>off</name> <operator>+</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>smbc</name><operator>-&gt;</operator><name>got</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid input packet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>msg</name> <operator>+</operator> <name>off</name> <operator>+</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>,
<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>SMB_CLOSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_pgrsSetDownloadCounter</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>len</name> <operator>&lt;</operator> <name>MAX_PAYLOAD_SIZE</name><operator>)</operator></expr> ?</condition><then> <expr><name>SMB_CLOSE</name></expr> </then><else>: <expr><name>SMB_DOWNLOAD</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMB_UPLOAD</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>status</name></name> <operator>||</operator> <name><name>smbc</name><operator>-&gt;</operator><name>got</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>smb_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>CURLE_UPLOAD_FAILED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>SMB_CLOSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>Curl_read16_le</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>msg</name><operator>)</operator> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr>struct <name>smb_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_pgrsSetUploadCounter</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name> <operator>&gt;=</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>SMB_CLOSE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>SMB_UPLOAD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>SMB_CLOSE</name></expr>:</case>

<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>SMB_TREE_DISCONNECT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMB_TREE_DISCONNECT</name></expr>:</case>
<expr_stmt><expr><name>next_state</name> <operator>=</operator> <name>SMB_DONE</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>smb_pop_message</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return> 
</block_content>}</block></switch>

<expr_stmt><expr><call><name>smb_pop_message</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>next_state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SMB_OPEN</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smb_send_open</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMB_DOWNLOAD</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smb_send_read</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMB_UPLOAD</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smb_send_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMB_CLOSE</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smb_send_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMB_TREE_DISCONNECT</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smb_send_tree_disconnect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMB_DONE</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>result</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SMB: failed to send message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>request_state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>next_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>premature</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_conn</name></name> <modifier>*</modifier></type><name>smbc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smbc</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dead</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>share</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>recv_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>smb_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>socks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><call><name>GETSOCK_READSOCK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>GETSOCK_WRITESOCK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_conn</name></name> <modifier>*</modifier></type><name>smbc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smbc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>smbc</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smb_parse_url_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smb_conn</name></name> <modifier>*</modifier></type><name>smbc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smbc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_urldecode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>smbc</name><operator>-&gt;</operator><name>share</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>path</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>path</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>smbc</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>share</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>slash</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>share</name></name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>slash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>smbc</name><operator>-&gt;</operator><name>share</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><operator>*</operator><name>slash</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>slash</name></expr>;</expr_stmt>

<for>for<control>(<init>;</init> <condition><expr><operator>*</operator><name>slash</name></expr>;</condition> <incr><expr><name>slash</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>slash</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>slash</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
