<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\idn_win32.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_IDN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_multibyte.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WANT_IDN_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_SAL_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>WINNORMALIZEAPI</name> <name>int</name> <name>WINAPI</name></type>
<name>IdnToAscii</name><argument_list>(<argument><expr><name>_In_</name> <name>DWORD</name> <name>dwFlags</name></expr></argument>,
<argument><expr><macro><name>_In_reads_</name><argument_list>(<argument>cchUnicodeChar</argument>)</argument_list></macro> <name>LPCWSTR</name> <name>lpUnicodeCharStr</name></expr></argument>,
<argument><expr><name>_In_</name> <name>int</name> <name>cchUnicodeChar</name></expr></argument>,
<argument><expr><macro><name>_Out_writes_opt_</name><argument_list>(<argument>cchASCIIChar</argument>)</argument_list></macro> <name>LPWSTR</name> <name>lpASCIICharStr</name></expr></argument>,
<argument><expr><name>_In_</name> <name>int</name> <name>cchASCIIChar</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WINNORMALIZEAPI</name> <name>int</name> <name>WINAPI</name></type>
<name>IdnToUnicode</name><argument_list>(<argument><expr><name>_In_</name> <name>DWORD</name> <name>dwFlags</name></expr></argument>,
<argument><expr><macro><name>_In_reads_</name><argument_list>(<argument>cchASCIIChar</argument>)</argument_list></macro> <name>LPCWSTR</name> <name>lpASCIICharStr</name></expr></argument>,
<argument><expr><name>_In_</name> <name>int</name> <name>cchASCIIChar</name></expr></argument>,
<argument><expr><macro><name>_Out_writes_opt_</name><argument_list>(<argument>cchUnicodeChar</argument>)</argument_list></macro> <name>LPWSTR</name> <name>lpUnicodeCharStr</name></expr></argument>,
<argument><expr><name>_In_</name> <name>int</name> <name>cchUnicodeChar</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>WINBASEAPI</name> <name>int</name> <name>WINAPI</name></type> <name>IdnToAscii</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>lpUnicodeCharStr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cchUnicodeChar</name></decl></parameter>,
<parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>lpASCIICharStr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cchASCIIChar</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>WINBASEAPI</name> <name>int</name> <name>WINAPI</name></type> <name>IdnToUnicode</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>lpASCIICharStr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cchASCIIChar</name></decl></parameter>,
<parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>lpUnicodeCharStr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cchUnicodeChar</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDN_MAX_LENGTH</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>

<function_decl><type><name>bool</name></type> <name>curl_win32_idn_to_ascii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>curl_win32_ascii_to_idn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>curl_win32_idn_to_ascii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>in_w</name> <init>= <expr><call><name>Curl_convert_UTF8_to_wchar</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>in_w</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>punycode</name><index>[<expr><name>IDN_MAX_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chars</name> <init>= <expr><call><name>IdnToAscii</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>in_w</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>punycode</name></expr></argument>, <argument><expr><name>IDN_MAX_LENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>in_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>chars</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name>Curl_convert_wchar_to_UTF8</name><argument_list>(<argument><expr><name>punycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>curl_win32_ascii_to_idn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>in_w</name> <init>= <expr><call><name>Curl_convert_UTF8_to_wchar</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>in_w</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>in_len</name> <init>= <expr><call><name>wcslen</name><argument_list>(<argument><expr><name>in_w</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>unicode</name><index>[<expr><name>IDN_MAX_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chars</name> <init>= <expr><call><name>IdnToUnicode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>in_w</name></expr></argument>, <argument><expr><call><name>curlx_uztosi</name><argument_list>(<argument><expr><name>in_len</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>unicode</name></expr></argument>, <argument><expr><name>IDN_MAX_LENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>in_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>chars</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name>Curl_convert_wchar_to_UTF8</name><argument_list>(<argument><expr><name>unicode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
