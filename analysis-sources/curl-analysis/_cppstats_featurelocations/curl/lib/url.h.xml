<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\url.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEADER_CURL_URL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_CURL_URL_H</name></cpp:macro></cpp:define>





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READBUFFER_SIZE</name></cpp:macro> <cpp:value>CURL_MAX_WRITE_SIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READBUFFER_MAX</name></cpp:macro> <cpp:value>CURL_MAX_READ_SIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READBUFFER_MIN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPLOADBUFFER_DEFAULT</name></cpp:macro> <cpp:value>65536</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPLOADBUFFER_MAX</name></cpp:macro> <cpp:value>(2*1024*1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPLOADBUFFER_MIN</name></cpp:macro> <cpp:value>CURL_MAX_WRITE_SIZE</cpp:value></cpp:define>





<function_decl><type><name>CURLcode</name></type> <name>Curl_init_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURLcode</name></type> <name>Curl_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>curl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURLcode</name></type> <name>Curl_init_userdefined</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Curl_freeset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURLcode</name></type> <name>Curl_uc_to_curlcode</name><parameter_list>(<parameter><decl><type><name>CURLUcode</name></type> <name>uc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURLcode</name></type> <name>Curl_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>datap</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>CURLcode</name></type> <name>Curl_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>async</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>protocol_connect</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURLcode</name></type> <name>Curl_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURLcode</name></type> <name>Curl_setup_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>protocol_done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Curl_free_request_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURLcode</name></type> <name>Curl_parse_login_details</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>login</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>userptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>passwdptr</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>optionsptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name> <modifier>*</modifier></type><name>Curl_builtin_scheme</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scheme</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Curl_is_ASCII_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURLcode</name></type> <name>Curl_idnconvert_hostname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>hostname</name></name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Curl_free_idnconverted_hostname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hostname</name></name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_DEFAULT_PROXY_PORT</name></cpp:macro> <cpp:value>1080</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_DEFAULT_HTTPS_PROXY_PORT</name></cpp:macro> <cpp:value>443</cpp:value></cpp:define> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Curl_verboseconnect</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>void</name></type> <name>Curl_verboseconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONNECT_PROXY_SSL</name><parameter_list>()</parameter_list></cpp:macro><cpp:value>(conn-&gt;http_proxy.proxytype == CURLPROXY_HTTPS &amp;&amp;!conn-&gt;bits.proxy_ssl_connected[sockindex])</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONNECT_FIRSTSOCKET_PROXY_SSL</name><parameter_list>()</parameter_list></cpp:macro><cpp:value>(conn-&gt;http_proxy.proxytype == CURLPROXY_HTTPS &amp;&amp;!conn-&gt;bits.proxy_ssl_connected[FIRSTSOCKET])</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONNECT_SECONDARYSOCKET_PROXY_SSL</name><parameter_list>()</parameter_list></cpp:macro><cpp:value>(conn-&gt;http_proxy.proxytype == CURLPROXY_HTTPS &amp;&amp;!conn-&gt;bits.proxy_ssl_connected[SECONDARYSOCKET])</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
