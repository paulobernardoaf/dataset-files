<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\file.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NET_IF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_IOCTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_PARAM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtoofft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"escape.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"speedcheck.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transfer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parsedate.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_range.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__EMX__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SYMBIAN32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOS_FILESYSTEM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPEN_NEEDS_ARG3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>open_readonly</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>open((p),(f),(0))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>open_readonly</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>open((p),(f))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>file_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>file_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>file_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>file_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>file_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>





<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_file</name> <init>= <expr><block>{
<expr><literal type="string">"FILE"</literal></expr>, 
<expr><name>file_setup_connection</name></expr>, 
<expr><name>file_do</name></expr>, 
<expr><name>file_done</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>file_connect</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>file_disconnect</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><name>CURLPROTO_FILE</name></expr>, 
<expr><name>PROTOPT_NONETWORK</name> <operator>|</operator> <name>PROTOPT_NOURLQUERY</name></expr> 
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>file_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>FILEPROTO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>file_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>real_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>FILEPROTO</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOS_FILESYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>actual_path</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>size_t</name></type> <name>real_path_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_urldecode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>real_path</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>real_path_len</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOS_FILESYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>














<expr_stmt><expr><name>actual_path</name> <operator>=</operator> <name>real_path</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>actual_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>actual_path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>actual_path</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <name><name>actual_path</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>actual_path</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>actual_path</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>real_path_len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>real_path_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name><name>actual_path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>actual_path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>actual_path</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>real_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"\\\\"</literal></expr></argument>, <argument><expr><name>actual_path</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open_readonly</name><argument_list>(<argument><expr><name>actual_path</name></expr></argument>, <argument><expr><name>O_RDONLY</name><operator>|</operator><name>O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>actual_path</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><call><name>memchr</name><argument_list>(<argument><expr><name>real_path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>real_path_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>real_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open_readonly</name><argument_list>(<argument><expr><name>real_path</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>real_path</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>freepath</name></name> <operator>=</operator> <name>real_path</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Couldn't open file %s"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_done</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CURLE_FILE_COULDNT_READ_FILE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_FILE_COULDNT_READ_FILE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>file_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>FILEPROTO</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>status</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premature</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>freepath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>file_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>FILEPROTO</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dead_connection</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>freepath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOS_FILESYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRSEP</name></cpp:macro> <cpp:value>'\\'</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRSEP</name></cpp:macro> <cpp:value>'/'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>file_upload</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>FILEPROTO</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>DIRSEP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>bytecount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>struct_stat</name></type> <name>file_stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf2</name></decl>;</decl_stmt>





<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_fromhere</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_FILE_COULDNT_READ_FILE</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>dir</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_FILE_COULDNT_READ_FILE</name></expr>;</return></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_DEFAULT</name></cpp:macro> <cpp:value>O_WRONLY|O_CREAT|O_BINARY</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_DEFAULT</name></cpp:macro> <cpp:value>O_WRONLY|O_CREAT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_DEFAULT</name><operator>|</operator><name>O_APPEND</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MODE_DEFAULT</name><operator>|</operator><name>O_TRUNC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>new_file_perms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Can't open %s for writing"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_WRITE_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_stat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Can't get the size of %s"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_WRITE_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>=</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator><name><name>file_stat</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nwrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>readcount</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_fillreadbuffer</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>readcount</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <name>readcount</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><name>nread</name> <operator>&lt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>-=</operator> <name>nread</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nread</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf2</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>buf2</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nread</name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>buf2</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>nwrite</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>nwrite</name> <operator>!=</operator> <name>nread</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytecount</name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bytecount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsUpdate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_speedcheck</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <call><name>Curl_pgrsUpdate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>file_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>struct_stat</name></type> <name>statbuf</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>curl_off_t</name></type> <name>expected_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>size_known</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>fstated</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>bytecount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>FILEPROTO</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>Curl_pgrsStartNow</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>file_upload</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>expected_size</name> <operator>=</operator> <name><name>statbuf</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>filetime</name></name> <operator>=</operator> <name><name>statbuf</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fstated</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>fstated</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>range</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timecondition</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_meets_timecondition</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>filetime</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>fstated</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>filetime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name> <init>= <expr><operator>&amp;</operator><name>buffer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>header</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Content-Length: %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"\r\n"</literal></expr></argument>,
<argument><expr><name>expected_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_HEADER</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_HEADER</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"Accept-ranges: bytes\r\n"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>filetime</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><name><name>statbuf</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_gmtime</name><argument_list>(<argument><expr><name>filetime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Last-Modified: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n%s"</literal></expr></argument>,
<argument><expr><name><name>Curl_wkday</name><index>[<expr><ternary><condition><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_wday</name></name></expr>?</condition><then><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_wday</name></name><operator>-</operator><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">6</literal></expr></else></ternary></expr>]</index></name></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>,
<argument><expr><name><name>Curl_month</name><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr></then><else>: <expr><literal type="string">"\r\n"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_HEADER</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>expected_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_range</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fstated</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Can't get the size of file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_READ_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>+=</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator><name><name>statbuf</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>&lt;=</operator> <name>expected_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>expected_size</name> <operator>-=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed to resume file:// transfer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_BAD_DOWNLOAD_RESUME</name></expr>;</return>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>maxdownload</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>expected_size</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>maxdownload</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fstated</name> <operator>||</operator> <operator>(</operator><name>expected_size</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size_known</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>size_known</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>





<if_stmt><if>if<condition>(<expr><name>fstated</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>expected_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>!=</operator>
<call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_DOWNLOAD_RESUME</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_pgrsTime</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>TIMER_STARTTRANSFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytestoread</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>size_known</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bytestoread</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>expected_size</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name><operator>)</operator></expr> ?</condition><then>
<expr><call><name>curlx_sotouz</name><argument_list>(<argument><expr><name>expected_size</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bytestoread</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytestoread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>nread</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_known</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>expected_size</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bytecount</name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>size_known</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>expected_size</name> <operator>-=</operator> <name>nread</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bytecount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsUpdate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_speedcheck</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsUpdate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
