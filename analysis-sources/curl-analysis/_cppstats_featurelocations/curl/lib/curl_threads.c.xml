<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\curl_threads.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_THREADS_POSIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTHREAD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_THREADS_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PROCESS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_threads.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_THREADS_POSIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<struct>struct <name>curl_actual_call</name> <block>{
<function_decl><type><name>unsigned</name> <name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>curl_thread_create_thunk</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_actual_call</name></name> <modifier>*</modifier></type> <name>ac</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<function_decl><type><name>unsigned</name> <name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>func</name></name></expr></init>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>real_arg</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>real_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>curl_thread_t</name></type> <name>Curl_thread_create</name><argument_list>(<argument><expr><name>unsigned</name> <call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>func</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>arg</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>curl_thread_t</name></type> <name>t</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pthread_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_actual_call</name></name> <modifier>*</modifier></type><name>ac</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>curl_actual_call</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>ac</name> <operator>&amp;&amp;</operator> <name>t</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>pthread_create</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>curl_thread_create_thunk</name></expr></argument>, <argument><expr><name>ac</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>t</name></expr>;</return>

<label><name>err</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>curl_thread_t_null</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>Curl_thread_destroy</name><parameter_list>(<parameter><decl><type><name>curl_thread_t</name></type> <name>hnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>hnd</name> <operator>!=</operator> <name>curl_thread_t_null</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_detach</name><argument_list>(<argument><expr><operator>*</operator><name>hnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_thread_join</name><parameter_list>(<parameter><decl><type><name>curl_thread_t</name> <modifier>*</modifier></type><name>hnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>(</operator><call><name>pthread_join</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>hnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>hnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>hnd</name> <operator>=</operator> <name>curl_thread_t_null</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_THREADS_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<decl_stmt><decl><type><name>curl_thread_t</name></type> <name>Curl_thread_create</name><argument_list>(<argument><expr><name>unsigned</name> <call><call><name>int</name> <argument_list>(<argument><expr><name>CURL_STDCALL</name> <operator>*</operator><name>func</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>void</name> <operator>*</operator><name>arg</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>HANDLE</name></type> <name>curl_win_thread_handle_t</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>curl_win_thread_handle_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>uintptr_t</name></type> <name>curl_win_thread_handle_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>curl_thread_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_win_thread_handle_t</name></type> <name>thread_handle</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>thread_handle</name> <operator>=</operator> <call><name>CreateThread</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>thread_handle</name> <operator>=</operator> <call><name>_beginthreadex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>curl_thread_t</name><operator>)</operator><name>thread_handle</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>t</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>t</name> <operator>==</operator> <call><name>LongToHandle</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>DWORD</name></type> <name>gle</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>gle</name> <operator>==</operator> <name>ERROR_ACCESS_DENIED</name> <operator>||</operator>
<name>gle</name> <operator>==</operator> <name>ERROR_NOT_ENOUGH_MEMORY</name><operator>)</operator></expr> ?</condition><then>
<expr><name>EACCES</name></expr> </then><else>: <expr><name>EINVAL</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>curl_thread_t_null</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>Curl_thread_destroy</name><parameter_list>(<parameter><decl><type><name>curl_thread_t</name></type> <name>hnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_thread_join</name><parameter_list>(<parameter><decl><type><name>curl_thread_t</name> <modifier>*</modifier></type><name>hnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WINNT</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WINNT_VISTA</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>_WIN32_WINNT</name> <operator>&lt;</operator> <name>_WIN32_WINNT_VISTA</name><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>(</operator><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><operator>*</operator><name>hnd</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>WAIT_OBJECT_0</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>(</operator><call><name>WaitForSingleObjectEx</name><argument_list>(<argument><expr><operator>*</operator><name>hnd</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>WAIT_OBJECT_0</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>Curl_thread_destroy</name><argument_list>(<argument><expr><operator>*</operator><name>hnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>hnd</name> <operator>=</operator> <name>curl_thread_t_null</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
