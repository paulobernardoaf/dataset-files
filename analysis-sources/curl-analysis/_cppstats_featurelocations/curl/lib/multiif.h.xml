<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\multiif.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEADER_CURL_MULTIIF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_CURL_MULTIIF_H</name></cpp:macro></cpp:define>


























<function_decl><type><name>void</name></type> <name>Curl_updatesocket</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Curl_expire</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>timediff_t</name></type> <name>milli</name></decl></parameter>, <parameter><decl><type><name>expire_id</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Curl_expire_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Curl_expire_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>expire_id</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Curl_update_timer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_multi</name></name> <modifier>*</modifier></type><name>multi</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Curl_attach_connnection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>Curl_multiplex_wanted</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_multi</name></name> <modifier>*</modifier></type><name>multi</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Curl_set_in_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>Curl_is_in_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>easy</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name><name>struct</name> <name>Curl_multi</name></name> <modifier>*</modifier></type><name>Curl_multi_handle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hashsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chashsize</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETSOCK_WRITEBITSTART</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETSOCK_BLANK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETSOCK_WRITESOCK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1 &lt;&lt; (GETSOCK_WRITEBITSTART + (x)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETSOCK_READSOCK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1 &lt;&lt; (x))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function_decl><type><name>void</name></type> <name>Curl_multi_dump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_multi</name></name> <modifier>*</modifier></type><name>multi</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><name>size_t</name></type> <name>Curl_multi_max_host_connections</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_multi</name></name> <modifier>*</modifier></type><name>multi</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>size_t</name></type> <name>Curl_multi_max_total_connections</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_multi</name></name> <modifier>*</modifier></type><name>multi</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Curl_multiuse_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bundlestate</name></decl></parameter>)</parameter_list>;</function_decl> 











<function_decl><type><name>void</name></type> <name>Curl_multi_closed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CURLMcode</name></type> <name>Curl_multi_add_perform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_multi</name></name> <modifier>*</modifier></type><name>multi</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>unsigned</name> <name>int</name></type> <name>Curl_multi_max_concurrent_streams</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_multi</name></name> <modifier>*</modifier></type><name>multi</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
