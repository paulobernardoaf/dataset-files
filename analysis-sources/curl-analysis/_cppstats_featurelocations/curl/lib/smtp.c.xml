<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\smtp.c">






































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_SMTP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTSNAME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NOVELL_LIBC__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>in_addr_t</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in_addr_t</name></cpp:macro> <cpp:value>unsigned long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hostip.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transfer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"escape.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"socks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"smtp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtoofft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_gethostname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_sasl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_regular_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_multi_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>smtp_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_doing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_parse_url_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_parse_url_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_parse_custom_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_parse_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fqma</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hostname</name></name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_perform_auth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mech</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>initresp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_continue_auth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>smtp_get_message</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outptr</name></decl></parameter>)</parameter_list>;</function_decl>





<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_smtp</name> <init>= <expr><block>{
<expr><literal type="string">"SMTP"</literal></expr>, 
<expr><name>smtp_setup_connection</name></expr>, 
<expr><name>smtp_do</name></expr>, 
<expr><name>smtp_done</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>smtp_connect</name></expr>, 
<expr><name>smtp_multi_statemach</name></expr>, 
<expr><name>smtp_doing</name></expr>, 
<expr><name>smtp_getsock</name></expr>, 
<expr><name>smtp_getsock</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>smtp_disconnect</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>PORT_SMTP</name></expr>, 
<expr><name>CURLPROTO_SMTP</name></expr>, 
<expr><name>PROTOPT_CLOSEACTION</name> <operator>|</operator> <name>PROTOPT_NOURLQUERY</name> <operator>|</operator> 
<name>PROTOPT_URLOPTIONS</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>




<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_smtps</name> <init>= <expr><block>{
<expr><literal type="string">"SMTPS"</literal></expr>, 
<expr><name>smtp_setup_connection</name></expr>, 
<expr><name>smtp_do</name></expr>, 
<expr><name>smtp_done</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>smtp_connect</name></expr>, 
<expr><name>smtp_multi_statemach</name></expr>, 
<expr><name>smtp_doing</name></expr>, 
<expr><name>smtp_getsock</name></expr>, 
<expr><name>smtp_getsock</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>smtp_disconnect</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>PORT_SMTPS</name></expr>, 
<expr><name>CURLPROTO_SMTPS</name></expr>, 
<expr><name>PROTOPT_CLOSEACTION</name> <operator>|</operator> <name>PROTOPT_SSL</name>
<operator>|</operator> <name>PROTOPT_NOURLQUERY</name> <operator>|</operator> <name>PROTOPT_URLOPTIONS</name></expr> 
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>SASLproto</name></name></type> <name>saslsmtp</name> <init>= <expr><block>{
<expr><literal type="string">"smtp"</literal></expr>, 
<expr><literal type="number">334</literal></expr>, 
<expr><literal type="number">235</literal></expr>, 
<expr><literal type="number">512</literal> <operator>-</operator> <literal type="number">8</literal></expr>, 
<expr><name>smtp_perform_auth</name></expr>, 
<expr><name>smtp_continue_auth</name></expr>, 
<expr><name>smtp_get_message</name></expr> 
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>smtp_to_smtps</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <operator>&amp;</operator><name>Curl_handler_smtps</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>tls_upgraded</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>smtp_to_smtps</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function><type><specifier>static</specifier> <name>bool</name></type> <name>smtp_endofresp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smtp_conn</name></name> <modifier>*</modifier></type><name>smtpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if<condition>(<expr><name><name>line</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmpline</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmpline</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpline</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmpline</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>len</name> <operator>==</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>resp</name> <operator>=</operator> <call><name>curlx_sltosi</name><argument_list>(<argument><expr><call><name>strtol</name><argument_list>(<argument><expr><name>tmpline</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>*</operator><name>resp</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>resp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>line</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>SMTP_EHLO</name> <operator>||</operator> <name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>SMTP_COMMAND</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>resp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>smtp_get_message</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>message</name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><operator>*</operator><name>message</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>message</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>;</condition>
<incr><expr><name>message</name><operator>++</operator></expr><operator>,</operator> <expr><name>len</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>


<for>for<control>(<init>;</init> <condition><expr><name>len</name><operator>--</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name><name>message</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name><name>message</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>message</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator>
<name><name>message</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>


<if_stmt><if>if<condition>(<expr><operator>++</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>message</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>message</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>outptr</name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>smtpstate</name></type> <name>newstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smtp_conn</name></name> <modifier>*</modifier></type><name>smtpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"STOP"</literal></expr>,
<expr><literal type="string">"SERVERGREET"</literal></expr>,
<expr><literal type="string">"EHLO"</literal></expr>,
<expr><literal type="string">"HELO"</literal></expr>,
<expr><literal type="string">"STARTTLS"</literal></expr>,
<expr><literal type="string">"UPGRADETLS"</literal></expr>,
<expr><literal type="string">"AUTH"</literal></expr>,
<expr><literal type="string">"COMMAND"</literal></expr>,
<expr><literal type="string">"MAIL"</literal></expr>,
<expr><literal type="string">"RCPT"</literal></expr>,
<expr><literal type="string">"DATA"</literal></expr>,
<expr><literal type="string">"POSTDATA"</literal></expr>,
<expr><literal type="string">"QUIT"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>newstate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SMTP %p state change from %s to %s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>smtpc</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>newstate</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>newstate</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_perform_ehlo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smtp_conn</name></name> <modifier>*</modifier></type><name>smtpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>smtpc</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>authmechs</name></name> <operator>=</operator> <name>SASL_AUTH_NONE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>smtpc</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>authused</name></name> <operator>=</operator> <name>SASL_AUTH_NONE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>smtpc</name><operator>-&gt;</operator><name>tls_supported</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>smtpc</name><operator>-&gt;</operator><name>auth_supported</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smtpc</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"EHLO %s"</literal></expr></argument>, <argument><expr><name><name>smtpc</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_EHLO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_perform_helo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smtp_conn</name></name> <modifier>*</modifier></type><name>smtpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>smtpc</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>authused</name></name> <operator>=</operator> <name>SASL_AUTH_NONE</name></expr>;</expr_stmt> 



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smtpc</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"HELO %s"</literal></expr></argument>, <argument><expr><name><name>smtpc</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_HELO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_perform_starttls</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"STARTTLS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_STARTTLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_perform_upgrade_tls</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>smtp_conn</name></name> <modifier>*</modifier></type><name>smtpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_ssl_connect_nonblocking</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>smtpc</name><operator>-&gt;</operator><name>ssldone</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>SMTP_UPGRADETLS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_UPGRADETLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>smtpc</name><operator>-&gt;</operator><name>ssldone</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>smtp_to_smtps</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_perform_ehlo</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_perform_auth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mech</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>initresp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smtp_conn</name></name> <modifier>*</modifier></type><name>smtpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>initresp</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smtpc</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"AUTH %s %s"</literal></expr></argument>, <argument><expr><name>mech</name></expr></argument>, <argument><expr><name>initresp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smtpc</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"AUTH %s"</literal></expr></argument>, <argument><expr><name>mech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_continue_auth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smtp_conn</name></name> <modifier>*</modifier></type><name>smtpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smtpc</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_perform_authentication</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smtp_conn</name></name> <modifier>*</modifier></type><name>smtpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saslprogress</name></type> <name>progress</name></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>smtpc</name><operator>-&gt;</operator><name>auth_supported</name></name> <operator>||</operator>
<operator>!</operator><call><name>Curl_sasl_can_authenticate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smtpc</name><operator>-&gt;</operator><name>sasl</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_sasl_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smtpc</name><operator>-&gt;</operator><name>sasl</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>progress</name> <operator>==</operator> <name>SASL_INPROGRESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_AUTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"No known authentication mechanisms supported!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_LOGIN_DENIED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_perform_command</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SMTP</name></name> <modifier>*</modifier></type><name>smtp</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>smtp</name><operator>-&gt;</operator><name>rcpt</name></name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>bool</name></type> <name>utf8</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>!</operator><name><name>smtp</name><operator>-&gt;</operator><name>custom</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>smtp</name><operator>-&gt;</operator><name>custom</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hostname</name></name></type> <name>host</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_parse_address</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>smtp</name><operator>-&gt;</operator><name>rcpt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>utf8</name> <operator>=</operator> <operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name><operator>.</operator><name>utf8_supported</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>host</name><operator>.</operator><name>encalloc</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>Curl_is_ASCII_name</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><call><name>Curl_is_ASCII_name</name><argument_list>(<argument><expr><name><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"VRFY %s%s%s%s"</literal></expr></argument>,
<argument><expr><name>address</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>host</name><operator>.</operator><name>name</name></name></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>host</name><operator>.</operator><name>name</name></name></expr> ?</condition><then> <expr><name><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>utf8</name></expr> ?</condition><then> <expr><literal type="string">" SMTPUTF8"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_free_idnconverted_hostname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>


<expr_stmt><expr><name>utf8</name> <operator>=</operator> <operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name><operator>.</operator><name>utf8_supported</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>smtp</name><operator>-&gt;</operator><name>custom</name></name></expr></argument>, <argument><expr><literal type="string">"EXPN"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"%s %s%s"</literal></expr></argument>, <argument><expr><name><name>smtp</name><operator>-&gt;</operator><name>custom</name></name></expr></argument>,
<argument><expr><name><name>smtp</name><operator>-&gt;</operator><name>rcpt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>utf8</name></expr> ?</condition><then> <expr><literal type="string">" SMTPUTF8"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>smtp</name><operator>-&gt;</operator><name>custom</name></name> <operator>&amp;&amp;</operator> <name><name>smtp</name><operator>-&gt;</operator><name>custom</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> ?</condition><then>
<expr><name><name>smtp</name><operator>-&gt;</operator><name>custom</name></name></expr> </then><else>: <expr><literal type="string">"HELP"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_perform_mail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>from</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>auth</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>size</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>utf8</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_MAIL_FROM</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hostname</name></name></type> <name>host</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_parse_address</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_MAIL_FROM</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>utf8</name> <operator>=</operator> <operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name><operator>.</operator><name>utf8_supported</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>host</name><operator>.</operator><name>encalloc</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>Curl_is_ASCII_name</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><call><name>Curl_is_ASCII_name</name><argument_list>(<argument><expr><name><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>host</name><operator>.</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"&lt;%s@%s&gt;"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_free_idnconverted_hostname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>


<expr_stmt><expr><name>from</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"&lt;%s&gt;"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>from</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"&lt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>from</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_MAIL_AUTH</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name><operator>.</operator><name>sasl</name><operator>.</operator><name>authused</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_MAIL_AUTH</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hostname</name></name></type> <name>host</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_parse_address</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_MAIL_AUTH</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>!</operator><name>utf8</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name><operator>.</operator><name>utf8_supported</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>host</name><operator>.</operator><name>encalloc</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>Curl_is_ASCII_name</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><call><name>Curl_is_ASCII_name</name><argument_list>(<argument><expr><name><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>utf8</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>host</name><operator>.</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>from</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"&lt;%s@%s&gt;"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_free_idnconverted_hostname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>


<expr_stmt><expr><name>auth</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"&lt;%s&gt;"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>from</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>auth</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"&lt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>auth</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name><operator>.</operator><name>kind</name></name> <operator>!=</operator> <name>MIMEKIND_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MIME_BODY_ONLY</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>curl_mime_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>headers</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_mime_prepare_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MIMESTRATEGY_MAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Mime-Version"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_mime_add_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name><operator>.</operator><name>curlheaders</name></name></expr></argument>,
<argument><expr><literal type="string">"Mime-Version: 1.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_mime_rewind</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>=</operator> <call><name>Curl_mime_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fread_func</name></name> <operator>=</operator> <operator>(</operator><name>curl_read_callback</name><operator>)</operator> <name>Curl_mime_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>in</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name><operator>.</operator><name>size_supported</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name><operator>.</operator><name>utf8_supported</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>utf8</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>SMTP</name></name> <modifier>*</modifier></type><name>smtp</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>rcpt</name> <init>= <expr><name><name>smtp</name><operator>-&gt;</operator><name>rcpt</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>rcpt</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>utf8</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_is_ASCII_name</name><argument_list>(<argument><expr><name><name>rcpt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>utf8</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rcpt</name> <operator>=</operator> <name><name>rcpt</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name><operator>.</operator><name>pp</name></name></expr></argument>,
<argument><expr><literal type="string">"MAIL FROM:%s%s%s%s%s%s"</literal></expr></argument>,
<argument><expr><name>from</name></expr></argument>, 
<argument><expr><ternary><condition><expr><name>auth</name></expr> ?</condition><then> <expr><literal type="string">" AUTH="</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, 
<argument><expr><ternary><condition><expr><name>auth</name></expr> ?</condition><then> <expr><name>auth</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, 
<argument><expr><ternary><condition><expr><name>size</name></expr> ?</condition><then> <expr><literal type="string">" SIZE="</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, 
<argument><expr><ternary><condition><expr><name>size</name></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, 
<argument><expr><ternary><condition><expr><name>utf8</name></expr> ?</condition><then> <expr><literal type="string">" SMTPUTF8"</literal></expr> 
</then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_MAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_perform_rcpt_to</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SMTP</name></name> <modifier>*</modifier></type><name>smtp</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hostname</name></name></type> <name>host</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_parse_address</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>smtp</name><operator>-&gt;</operator><name>rcpt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>host</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"RCPT TO:&lt;%s@%s&gt;"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>,
<argument><expr><name><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"RCPT TO:&lt;%s&gt;"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_free_idnconverted_hostname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_RCPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_perform_quit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"QUIT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_QUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_state_servergreet_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>smtpcode</name></decl></parameter>,
<parameter><decl><type><name>smtpstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>smtpcode</name><operator>/</operator><literal type="number">100</literal> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Got unexpected smtp-server response: %d"</literal></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_WEIRD_SERVER_REPLY</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_perform_ehlo</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_state_starttls_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>smtpcode</name></decl></parameter>,
<parameter><decl><type><name>smtpstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>smtpcode</name> <operator>!=</operator> <literal type="number">220</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>use_ssl</name></name> <operator>!=</operator> <name>CURLUSESSL_TRY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"STARTTLS denied, code %d"</literal></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_USE_SSL_FAILED</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_perform_authentication</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_perform_upgrade_tls</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_state_ehlo_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>smtpcode</name></decl></parameter>,
<parameter><decl><type><name>smtpstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smtp_conn</name></name> <modifier>*</modifier></type><name>smtpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>smtpcode</name><operator>/</operator><literal type="number">100</literal> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>smtpcode</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>use_ssl</name></name> <operator>&lt;=</operator> <name>CURLUSESSL_TRY</name> <operator>||</operator> <name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name><operator>.</operator><name>use</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_perform_helo</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Remote access denied: %d"</literal></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_REMOTE_ACCESS_DENIED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"STARTTLS"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>smtpc</name><operator>-&gt;</operator><name>tls_supported</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>


<if type="elseif">else if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"SIZE"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>smtpc</name><operator>-&gt;</operator><name>size_supported</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>


<if type="elseif">else if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"SMTPUTF8"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>smtpc</name><operator>-&gt;</operator><name>utf8_supported</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>


<if type="elseif">else if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"AUTH "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>smtpc</name><operator>-&gt;</operator><name>auth_supported</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>


<expr_stmt><expr><name>line</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>


<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>llen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>wordlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mechbit</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name>len</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator>
<operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<for>for<control>(<init><expr><name>wordlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>wordlen</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>wordlen</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator>
<name><name>line</name><index>[<expr><name>wordlen</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>wordlen</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator>
<name><name>line</name><index>[<expr><name>wordlen</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>wordlen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>mechbit</name> <operator>=</operator> <call><name>Curl_sasl_decode_mech</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>wordlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>llen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>mechbit</name> <operator>&amp;&amp;</operator> <name>llen</name> <operator>==</operator> <name>wordlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>smtpc</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>authmechs</name></name> <operator>|=</operator> <name>mechbit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>wordlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>wordlen</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>smtpcode</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>use_ssl</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name><operator>.</operator><name>use</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>smtpc</name><operator>-&gt;</operator><name>tls_supported</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_perform_starttls</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>use_ssl</name></name> <operator>==</operator> <name>CURLUSESSL_TRY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_perform_authentication</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"STARTTLS not supported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_USE_SSL_FAILED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_perform_authentication</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unexpectedly short EHLO response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_WEIRD_SERVER_REPLY</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_state_helo_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>smtpcode</name></decl></parameter>,
<parameter><decl><type><name>smtpstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>smtpcode</name><operator>/</operator><literal type="number">100</literal> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Remote access denied: %d"</literal></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_REMOTE_ACCESS_DENIED</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_state_auth_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>smtpcode</name></decl></parameter>,
<parameter><decl><type><name>smtpstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smtp_conn</name></name> <modifier>*</modifier></type><name>smtpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saslprogress</name></type> <name>progress</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_sasl_continue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smtpc</name><operator>-&gt;</operator><name>sasl</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch<condition>(<expr><name>progress</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SASL_DONE</name></expr>:</case>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>SASL_IDLE</name></expr>:</case> 
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Authentication cancelled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_LOGIN_DENIED</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_state_command_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>smtpcode</name></decl></parameter>,
<parameter><decl><type><name>smtpstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SMTP</name></name> <modifier>*</modifier></type><name>smtp</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>smtp</name><operator>-&gt;</operator><name>rcpt</name></name> <operator>&amp;&amp;</operator> <name>smtpcode</name><operator>/</operator><literal type="number">100</literal> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>smtpcode</name> <operator>!=</operator> <literal type="number">553</literal> <operator>&amp;&amp;</operator> <name>smtpcode</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><name><name>smtp</name><operator>-&gt;</operator><name>rcpt</name></name> <operator>&amp;&amp;</operator> <name>smtpcode</name><operator>/</operator><literal type="number">100</literal> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>smtpcode</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Command failed: %d"</literal></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>smtpcode</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>smtp</name><operator>-&gt;</operator><name>rcpt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>smtp</name><operator>-&gt;</operator><name>rcpt</name></name> <operator>=</operator> <name><name>smtp</name><operator>-&gt;</operator><name>rcpt</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>smtp</name><operator>-&gt;</operator><name>rcpt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_perform_command</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_state_mail_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>smtpcode</name></decl></parameter>,
<parameter><decl><type><name>smtpstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>smtpcode</name><operator>/</operator><literal type="number">100</literal> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"MAIL failed: %d"</literal></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_perform_rcpt_to</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_state_rcpt_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>smtpcode</name></decl></parameter>,
<parameter><decl><type><name>smtpstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SMTP</name></name> <modifier>*</modifier></type><name>smtp</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_smtp_err</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_smtp_blocking_err</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>is_smtp_err</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>smtpcode</name><operator>/</operator><literal type="number">100</literal> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>



<expr_stmt><expr><name>is_smtp_blocking_err</name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><name>is_smtp_err</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mail_rcpt_allowfails</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>is_smtp_err</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>smtp</name><operator>-&gt;</operator><name>rcpt_last_error</name></name> <operator>=</operator> <name>smtpcode</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>is_smtp_blocking_err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"RCPT failed: %d"</literal></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>smtp</name><operator>-&gt;</operator><name>rcpt_had_ok</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>is_smtp_blocking_err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>smtp</name><operator>-&gt;</operator><name>rcpt</name></name> <operator>=</operator> <name><name>smtp</name><operator>-&gt;</operator><name>rcpt</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>smtp</name><operator>-&gt;</operator><name>rcpt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_perform_rcpt_to</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>smtp</name><operator>-&gt;</operator><name>rcpt_had_ok</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"RCPT failed: %d (last error)"</literal></expr></argument>, <argument><expr><name><name>smtp</name><operator>-&gt;</operator><name>rcpt_last_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"DATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_state_data_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>smtpcode</name></decl></parameter>,
<parameter><decl><type><name>smtpstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>smtpcode</name> <operator>!=</operator> <literal type="number">354</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"DATA failed: %d"</literal></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_state_postdata_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>smtpcode</name></decl></parameter>,
<parameter><decl><type><name>smtpstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>smtpcode</name> <operator>!=</operator> <literal type="number">250</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_statemach_act</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>smtpcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smtp_conn</name></name> <modifier>*</modifier></type><name>smtpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>smtpc</name><operator>-&gt;</operator><name>pp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>SMTP_UPGRADETLS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>smtp_perform_upgrade_tls</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>sendleft</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Curl_pp_flushsend</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_readresp</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smtpcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>SMTP_QUIT</name> <operator>&amp;&amp;</operator> <name>smtpcode</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>httpcode</name></name> <operator>=</operator> <name>smtpcode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>smtpcode</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<switch>switch<condition>(<expr><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SMTP_SERVERGREET</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_state_servergreet_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>, <argument><expr><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMTP_EHLO</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_state_ehlo_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>, <argument><expr><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMTP_HELO</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_state_helo_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>, <argument><expr><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMTP_STARTTLS</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_state_starttls_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>, <argument><expr><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMTP_AUTH</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_state_auth_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>, <argument><expr><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMTP_COMMAND</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_state_command_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>, <argument><expr><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMTP_MAIL</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_state_mail_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>, <argument><expr><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMTP_RCPT</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_state_rcpt_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>, <argument><expr><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMTP_DATA</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_state_data_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>, <argument><expr><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMTP_POSTDATA</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_state_postdata_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>smtpcode</name></expr></argument>, <argument><expr><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SMTP_QUIT</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block> while<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>SMTP_STOP</name> <operator>&amp;&amp;</operator> <call><name>Curl_pp_moredata</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_multi_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smtp_conn</name></name> <modifier>*</modifier></type><name>smtpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_SSL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>smtpc</name><operator>-&gt;</operator><name>ssldone</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ssl_connect_nonblocking</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smtpc</name><operator>-&gt;</operator><name>ssldone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>!</operator><name><name>smtpc</name><operator>-&gt;</operator><name>ssldone</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_statemach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smtpc</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>SMTP_STOP</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_block_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>disconnecting</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smtp_conn</name></name> <modifier>*</modifier></type><name>smtpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>smtpc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>SMTP_STOP</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_statemach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smtpc</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>disconnecting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SMTP</name></name> <modifier>*</modifier></type><name>smtp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>smtp</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>SMTP</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>smtp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>smtp_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>Curl_pp_getsock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><name>socks</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smtp_conn</name></name> <modifier>*</modifier></type><name>smtpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>smtpc</name><operator>-&gt;</operator><name>pp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>connkeep</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SMTP default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>response_time</name></name> <operator>=</operator> <name>RESP_TIMEOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>statemach_act</name></name> <operator>=</operator> <name>smtp_statemach_act</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>endofresp</name></name> <operator>=</operator> <name>smtp_endofresp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_sasl_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smtpc</name><operator>-&gt;</operator><name>sasl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saslsmtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_pp_init</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_parse_url_options</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_parse_url_path</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_SERVERGREET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SMTP</name></name> <modifier>*</modifier></type><name>smtp</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name><operator>.</operator><name>pp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_written</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premature</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>smtp</name> <operator>||</operator> <operator>!</operator><name><name>pp</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>smtp</name><operator>-&gt;</operator><name>custom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SMTP done with bad status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>connect_only</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mail_rcpt</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name><operator>.</operator><name>kind</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>








<if_stmt><if>if<condition>(<expr><name><name>smtp</name><operator>-&gt;</operator><name>trailing_crlf</name></name> <operator>||</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eob</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>SMTP_EOB</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>SMTP_EOB_LEN</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>eob</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>SMTP_EOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>SMTP_EOB_LEN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>eob</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name></expr></argument>, <argument><expr><name>eob</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>eob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>bytes_written</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>sendthis</name></name> <operator>=</operator> <name>eob</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>sendsize</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>sendleft</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>bytes_written</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>response</name></name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>eob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SMTP_POSTDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_block_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>smtp</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>FTPTRANSFER_BODY</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_perform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>connected</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SMTP</name></name> <modifier>*</modifier></type><name>smtp</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase starts\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>smtp</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>FTPTRANSFER_INFO</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dophase_done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>smtp</name><operator>-&gt;</operator><name>rcpt</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mail_rcpt</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>smtp</name><operator>-&gt;</operator><name>rcpt_had_ok</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>smtp</name><operator>-&gt;</operator><name>rcpt_last_error</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name><name>smtp</name><operator>-&gt;</operator><name>trailing_crlf</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>smtp</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name><operator>.</operator><name>kind</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mail_rcpt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_perform_mail</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_perform_command</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>connected</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tcpconnect</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>dophase_done</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase is complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_parse_custom_request</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_regular_transfer</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>smtp_conn</name></name> <modifier>*</modifier></type><name>smtpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name></name></expr></init></decl>;</decl_stmt>







<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dead_connection</name> <operator>&amp;&amp;</operator> <name><name>smtpc</name><operator>-&gt;</operator><name>pp</name><operator>.</operator><name>conn</name></name> <operator>&amp;&amp;</operator> <name><name>smtpc</name><operator>-&gt;</operator><name>pp</name><operator>.</operator><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>protoconnstart</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>smtp_perform_quit</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>smtp_block_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt> 


<expr_stmt><expr><call><name>Curl_pp_disconnect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smtpc</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_sasl_cleanup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>smtpc</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>authused</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>smtpc</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_dophase_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>connected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>SMTP</name></name> <modifier>*</modifier></type><name>smtp</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>connected</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>smtp</name><operator>-&gt;</operator><name>transfer</name></name> <operator>!=</operator> <name>FTPTRANSFER_BODY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_doing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>smtp_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase failed\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>*</operator><name>dophase_done</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_dophase_done</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase is complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_regular_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>connected</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_pgrsSetUploadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_pgrsSetDownloadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_perform</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connected</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dophase_done</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_dophase_done</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>connected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>tls_upgraded</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>smtp_init</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_parse_url_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smtp_conn</name></name> <modifier>*</modifier></type><name>smtpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>options</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>smtpc</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>resetprefs</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"AUTH="</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_sasl_parse_url_auth_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smtpc</name><operator>-&gt;</operator><name>sasl</name></name></expr></argument>,
<argument><expr><name>value</name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_URL_MALFORMAT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_parse_url_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>smtp_conn</name></name> <modifier>*</modifier></type><name>smtpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>smtpc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>localhost</name><index>[<expr><name>HOSTNAME_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>path</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_gethostname</name><argument_list>(<argument><expr><name>localhost</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>localhost</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name>localhost</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <literal type="string">"localhost"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><call><name>Curl_urldecode</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smtpc</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_parse_custom_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SMTP</name></name> <modifier>*</modifier></type><name>smtp</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>custom</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_CUSTOMREQUEST</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>custom</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_urldecode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>custom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smtp</name><operator>-&gt;</operator><name>custom</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



































<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>smtp_parse_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fqma</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>hostname</name></name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dup</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>fqma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr> ?</condition><then> <expr><name>fqma</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>fqma</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dup</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>dup</name><index>[<expr><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dup</name><index>[<expr><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strpbrk</name><argument_list>(<argument><expr><name>dup</name></expr></argument>, <argument><expr><literal type="string">"@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>host</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>host</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Curl_idnconvert_hostname</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>address</name> <operator>=</operator> <name>dup</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_smtp_escape_eob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ssize_t</name></type> <name>nread</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<decl_stmt><decl><type><name>ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>si</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SMTP</name></name> <modifier>*</modifier></type><name>smtp</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scratch</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>scratch</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newscratch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oldscratch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>eob_sent</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>scratch</name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>crlf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oldscratch</name> <operator>=</operator> <name>scratch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>scratch</name> <operator>=</operator> <name>newscratch</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newscratch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to alloc scratch buffer!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload_buffer_size</name></name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>eob_sent</name> <operator>=</operator> <name><name>smtp</name><operator>-&gt;</operator><name>eob</name></name></expr>;</expr_stmt>



<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>si</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nread</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>SMTP_EOB</name><index>[<expr><name><name>smtp</name><operator>-&gt;</operator><name>eob</name></name></expr>]</index></name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_fromhere</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>smtp</name><operator>-&gt;</operator><name>eob</name></name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name><name>smtp</name><operator>-&gt;</operator><name>eob</name></name> <operator>||</operator> <name>SMTP_EOB_LEN</name> <operator>==</operator> <name><name>smtp</name><operator>-&gt;</operator><name>eob</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>smtp</name><operator>-&gt;</operator><name>trailing_crlf</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>smtp</name><operator>-&gt;</operator><name>trailing_crlf</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>smtp</name><operator>-&gt;</operator><name>eob</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scratch</name><index>[<expr><name>si</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SMTP_EOB</name><index>[<expr><name>eob_sent</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>smtp</name><operator>-&gt;</operator><name>eob</name></name> <operator>-</operator> <name>eob_sent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>si</name> <operator>+=</operator> <name><name>smtp</name><operator>-&gt;</operator><name>eob</name></name> <operator>-</operator> <name>eob_sent</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>SMTP_EOB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_fromhere</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>smtp</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>smtp</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>eob_sent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>smtp</name><operator>-&gt;</operator><name>trailing_crlf</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>SMTP_EOB_FIND_LEN</name> <operator>==</operator> <name><name>smtp</name><operator>-&gt;</operator><name>eob</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scratch</name><index>[<expr><name>si</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SMTP_EOB_REPL</name><index>[<expr><name>eob_sent</name></expr>]</index></name></expr></argument>,
<argument><expr><name>SMTP_EOB_REPL_LEN</name> <operator>-</operator> <name>eob_sent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>si</name> <operator>+=</operator> <name>SMTP_EOB_REPL_LEN</name> <operator>-</operator> <name>eob_sent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>smtp</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>eob_sent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>smtp</name><operator>-&gt;</operator><name>eob</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>scratch</name><index>[<expr><name>si</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_fromhere</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>smtp</name><operator>-&gt;</operator><name>eob</name></name> <operator>-</operator> <name>eob_sent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scratch</name><index>[<expr><name>si</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SMTP_EOB</name><index>[<expr><name>eob_sent</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>smtp</name><operator>-&gt;</operator><name>eob</name></name> <operator>-</operator> <name>eob_sent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>si</name> <operator>+=</operator> <name><name>smtp</name><operator>-&gt;</operator><name>eob</name></name> <operator>-</operator> <name>eob_sent</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>si</name> <operator>!=</operator> <name>nread</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_fromhere</name></name> <operator>=</operator> <name>scratch</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>scratch</name></name> <operator>=</operator> <name>scratch</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>oldscratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_present</name></name> <operator>=</operator> <name>si</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>newscratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
