<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\krb5.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ftp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_gssapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_sec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>krb5_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>app_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gss_ctx_id_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name>app_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>context</name> <operator>=</operator> <name>GSS_C_NO_CONTEXT</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>krb5_check_prot</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>app_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>app_data</name></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>level</name> <operator>==</operator> <name>PROT_CONFIDENTIAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>krb5_decode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>app_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name> <name>level</name></type> <name>UNUSED_PARAM</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier><name>conn</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gss_ctx_id_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name>app_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OM_uint32</name></type> <name>maj</name></decl>, <decl><type ref="prev"/><name>min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gss_buffer_desc</name></type> <name>enc</name></decl>, <decl><type ref="prev"/><name>dec</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>level</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>maj</name> <operator>=</operator> <call><name>gss_unwrap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><operator>*</operator><name>context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>maj</name> <operator>!=</operator> <name>GSS_S_COMPLETE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"599 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>dec</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>dec</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>curlx_uztosi</name><argument_list>(<argument><expr><name><name>dec</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>krb5_overhead</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>app_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>app_data</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>level</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>krb5_encode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>app_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gss_ctx_id_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name>app_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gss_buffer_desc</name></type> <name>dec</name></decl>, <decl><type ref="prev"/><name>enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OM_uint32</name></type> <name>maj</name></decl>, <decl><type ref="prev"/><name>min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>




<expr_stmt><expr><name><name>dec</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>from</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>maj</name> <operator>=</operator> <call><name>gss_wrap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><operator>*</operator><name>context</name></expr></argument>,
<argument><expr><name>level</name> <operator>==</operator> <name>PROT_PRIVATE</name></expr></argument>,
<argument><expr><name>GSS_C_QOP_DEFAULT</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>maj</name> <operator>!=</operator> <name>GSS_S_COMPLETE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>enc</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>to</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>to</name></expr></argument>, <argument><expr><name><name>enc</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>enc</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>curlx_uztosi</name><argument_list>(<argument><expr><name><name>enc</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>krb5_auth</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>app_data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>AUTH_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socklen_t</name></type> <name>l</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>local_addr</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name> <init>= <expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SERVICE_NAME</name></expr>]</index></name></expr> ?</condition><then>
<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SERVICE_NAME</name></expr>]</index></name></expr> </then><else>:
<expr><literal type="string">"ftp"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>srv_host</name> <init>= <expr><literal type="string">"host"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gss_buffer_desc</name></type> <name>input_buffer</name></decl>, <decl><type ref="prev"/><name>output_buffer</name></decl>, <decl><type ref="prev"/><name>_gssresp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gssresp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OM_uint32</name></type> <name>maj</name></decl>, <decl><type ref="prev"/><name>min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gss_name_t</name></type> <name>gssname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gss_ctx_id_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name>app_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>gss_channel_bindings_struct</name></name></type> <name>chan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>base64_sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>remote_addr</name> <init>=
<expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ip_addr</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stringp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>local_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"getsockname()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>chan</name><operator>.</operator><name>initiator_addrtype</name></name> <operator>=</operator> <name>GSS_C_AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chan</name><operator>.</operator><name>initiator_address</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>l</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chan</name><operator>.</operator><name>initiator_address</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>local_addr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chan</name><operator>.</operator><name>acceptor_addrtype</name></name> <operator>=</operator> <name>GSS_C_AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chan</name><operator>.</operator><name>acceptor_address</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>l</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chan</name><operator>.</operator><name>acceptor_address</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>remote_addr</name><operator>)</operator><operator>-&gt;</operator><name><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chan</name><operator>.</operator><name>application_data</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chan</name><operator>.</operator><name>application_data</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>service</name> <operator>==</operator> <name>srv_host</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ftpsend</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"AUTH GSSAPI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_GetFTPResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'3'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stringp</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s@%s"</literal></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stringp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>input_buffer</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>stringp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input_buffer</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>stringp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maj</name> <operator>=</operator> <call><name>gss_import_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_buffer</name></expr></argument>, <argument><expr><name>GSS_C_NT_HOSTBASED_SERVICE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>gssname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>stringp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>maj</name> <operator>!=</operator> <name>GSS_S_COMPLETE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gss_release_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gssname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>service</name> <operator>==</operator> <name>srv_host</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Error importing service name %s@%s"</literal></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTH_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>service</name> <operator>=</operator> <name>srv_host</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gss_display_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><name>gssname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Trying against %s\n"</literal></expr></argument>, <argument><expr><name><name>output_buffer</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gssresp</name> <operator>=</operator> <name>GSS_C_NO_BUFFER</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>context</name> <operator>=</operator> <name>GSS_C_NO_CONTEXT</name></expr>;</expr_stmt>

<do>do <block>{<block_content>



<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AUTH_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>maj</name> <operator>=</operator> <call><name>Curl_gss_init_sec_context</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>min</name></expr></argument>,
<argument><expr><name>context</name></expr></argument>,
<argument><expr><name>gssname</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>Curl_krb5_mech_oid</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>chan</name></expr></argument>,
<argument><expr><name>gssresp</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>output_buffer</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>gssresp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_gssresp</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gssresp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>GSS_ERROR</name><argument_list>(<argument><expr><name>maj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Error creating security context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AUTH_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>output_buffer</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>output_buffer</name><operator>.</operator><name>value</name></name></expr></argument>,
<argument><expr><name><name>output_buffer</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base64_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"base64-encoding: %s\n"</literal></expr></argument>,
<argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AUTH_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"ADAT %s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>cmd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ftpsend</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_GetFTPResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'2'</literal> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'3'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Server didn't accept auth data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AUTH_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>_gssresp</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ADAT="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>_gssresp</name><operator>.</operator><name>value</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>_gssresp</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"base64-decoding: %s"</literal></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AUTH_CONTINUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gssresp</name> <operator>=</operator> <operator>&amp;</operator><name>_gssresp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><name>maj</name> <operator>==</operator> <name>GSS_S_CONTINUE_NEEDED</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>gss_release_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gssname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>gssresp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_gssresp</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>AUTH_OK</name> <operator>||</operator> <name>service</name> <operator>==</operator> <name>srv_host</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>service</name> <operator>=</operator> <name>srv_host</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>krb5_end</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>app_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OM_uint32</name></type> <name>min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gss_ctx_id_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name>app_data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>context</name> <operator>!=</operator> <name>GSS_C_NO_CONTEXT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>OM_uint32</name></type> <name>maj</name> <init>= <expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>GSS_C_NO_BUFFER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>maj</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>maj</name> <operator>==</operator> <name>GSS_S_COMPLETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_sec_client_mech</name></name></type> <name>Curl_krb5_client_mech</name> <init>= <expr><block>{
<expr><literal type="string">"GSSAPI"</literal></expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>gss_ctx_id_t</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><name>krb5_init</name></expr>,
<expr><name>krb5_auth</name></expr>,
<expr><name>krb5_end</name></expr>,
<expr><name>krb5_check_prot</name></expr>,
<expr><name>krb5_overhead</name></expr>,
<expr><name>krb5_encode</name></expr>,
<expr><name>krb5_decode</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
