<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\nonblock.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_IOCTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IOCTL_FIONBIO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/filio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nonblock.h"</cpp:file></cpp:include>






<function><type><name>int</name></type> <name>curlx_nonblock</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>nonblock</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BLOCKING_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockfd</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>nonblock</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return> 

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_O_NONBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sfcntl</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>nonblock</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>sfcntl</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>sfcntl</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>O_NONBLOCK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IOCTL_FIONBIO</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>nonblock</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IOCTLSOCKET_FIONBIO</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>nonblock</name></expr> ?</condition><then> <expr><literal type="number">1UL</literal></expr> </then><else>: <expr><literal type="number">0UL</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ioctlsocket</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IOCTLSOCKET_CAMEL_FIONBIO</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<decl_stmt><decl><type><name>long</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>nonblock</name></expr> ?</condition><then> <expr><literal type="number">1L</literal></expr> </then><else>: <expr><literal type="number">0L</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>IoctlSocket</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETSOCKOPT_SO_NONBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<decl_stmt><decl><type><name>long</name></type> <name>b</name> <init>= <expr><ternary><condition><expr><name>nonblock</name></expr> ?</condition><then> <expr><literal type="number">1L</literal></expr> </then><else>: <expr><literal type="number">0L</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_NONBLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"no non-blocking method was found/used/set"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
