<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\http_negotiate.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_SPNEGO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_negotiate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vauth/vauth.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<function><type><name>CURLcode</name></type> <name>Curl_input_negotiate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>proxy</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>passwdp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>negotiatedata</name></name> <modifier>*</modifier></type><name>neg_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curlnegotiate</name></type> <name>state</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>proxy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>userp</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>user</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>passwdp</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>passwd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>service</name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXY_SERVICE_NAME</name></expr>]</index></name></expr> ?</condition><then>
<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXY_SERVICE_NAME</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"HTTP"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>host</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>neg_ctx</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxyneg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>proxy_negotiate_state</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>userp</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>passwdp</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>service</name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SERVICE_NAME</name></expr>]</index></name></expr> ?</condition><then>
<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SERVICE_NAME</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"HTTP"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>host</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>neg_ctx</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>negotiate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>http_negotiate_state</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>userp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>userp</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>passwdp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>passwdp</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>header</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"Negotiate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>*</operator><name>header</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>header</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>neg_ctx</name><operator>-&gt;</operator><name>havenegdata</name></name> <operator>=</operator> <name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>state</name> <operator>==</operator> <name>GSS_AUTHSUCC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Negotiate auth restarted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_http_auth_cleanup_negotiate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>state</name> <operator>!=</operator> <name>GSS_AUTHNONE</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>Curl_http_auth_cleanup_negotiate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_LOGIN_DENIED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SECPKG_ATTR_ENDPOINT_BINDINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>neg_ctx</name><operator>-&gt;</operator><name>sslContext</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sslContext</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_decode_spnego_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>userp</name></expr></argument>, <argument><expr><name>passwdp</name></expr></argument>, <argument><expr><name>service</name></expr></argument>,
<argument><expr><name>host</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>neg_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_http_auth_cleanup_negotiate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_output_negotiate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>proxy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>negotiatedata</name></name> <modifier>*</modifier></type><name>neg_ctx</name> <init>= <expr><ternary><condition><expr><name>proxy</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxyneg</name></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>negotiate</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>auth</name></name> <modifier>*</modifier></type><name>authp</name> <init>= <expr><ternary><condition><expr><name>proxy</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curlnegotiate</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><ternary><condition><expr><name>proxy</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_negotiate_state</name></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>http_negotiate_state</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base64</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>userp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>authp</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>state</name> <operator>==</operator> <name>GSS_AUTHRECV</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>neg_ctx</name><operator>-&gt;</operator><name>havenegdata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>neg_ctx</name><operator>-&gt;</operator><name>havemultiplerequests</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>*</operator><name>state</name> <operator>==</operator> <name>GSS_AUTHSUCC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>neg_ctx</name><operator>-&gt;</operator><name>havenoauthpersist</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>neg_ctx</name><operator>-&gt;</operator><name>noauthpersist</name></name> <operator>=</operator> <operator>!</operator><name><name>neg_ctx</name><operator>-&gt;</operator><name>havemultiplerequests</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>neg_ctx</name><operator>-&gt;</operator><name>noauthpersist</name></name> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>state</name> <operator>!=</operator> <name>GSS_AUTHDONE</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>state</name> <operator>!=</operator> <name>GSS_AUTHSUCC</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>neg_ctx</name><operator>-&gt;</operator><name>noauthpersist</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>state</name> <operator>==</operator> <name>GSS_AUTHSUCC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Curl_output_negotiate, "</literal>
<literal type="string">"no persistent authentication: cleanup existing context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_http_auth_cleanup_negotiate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>neg_ctx</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_input_negotiate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>, <argument><expr><literal type="string">"Negotiate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_AUTH_ERROR</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>authp</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_spnego_message</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><name>neg_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>userp</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%sAuthorization: Negotiate %s\r\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>proxy</name></expr> ?</condition><then> <expr><literal type="string">"Proxy-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>proxy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>proxyuserpwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>proxyuserpwd</name></name> <operator>=</operator> <name>userp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>userpwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>userpwd</name></name> <operator>=</operator> <name>userp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>userp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>GSS_AUTHSENT</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>neg_ctx</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>GSS_S_COMPLETE</name> <operator>||</operator>
<name><name>neg_ctx</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>GSS_S_CONTINUE_NEEDED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>GSS_AUTHDONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>neg_ctx</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>SEC_E_OK</name> <operator>||</operator>
<name><name>neg_ctx</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>SEC_I_CONTINUE_NEEDED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>GSS_AUTHDONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>state</name> <operator>==</operator> <name>GSS_AUTHDONE</name> <operator>||</operator> <operator>*</operator><name>state</name> <operator>==</operator> <name>GSS_AUTHSUCC</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>authp</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>neg_ctx</name><operator>-&gt;</operator><name>havenegdata</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_http_auth_cleanup_negotiate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>http_negotiate_state</name></name> <operator>=</operator> <name>GSS_AUTHNONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>proxy_negotiate_state</name></name> <operator>=</operator> <name>GSS_AUTHNONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_auth_cleanup_spnego</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>negotiate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_auth_cleanup_spnego</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxyneg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
