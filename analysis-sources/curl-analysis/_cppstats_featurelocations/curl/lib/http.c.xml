<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\http.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NET_IF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_IOCTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_PARAM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transfer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formdata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cookie.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vauth/vauth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_digest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_ntlm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_ntlm_wb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_negotiate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"share.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hostip.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parsedate.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtoofft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content_encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"non-ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strdup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"altsvc.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>





<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>http_getsock_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>http_should_fail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>add_haproxy_protocol_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>https_connecting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>https_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>https_connecting</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CURLE_COULDNT_CONNECT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>http_setup_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_http</name> <init>= <expr><block>{
<expr><literal type="string">"HTTP"</literal></expr>, 
<expr><name>http_setup_conn</name></expr>, 
<expr><name>Curl_http</name></expr>, 
<expr><name>Curl_http_done</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>Curl_http_connect</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>http_getsock_do</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>PORT_HTTP</name></expr>, 
<expr><name>CURLPROTO_HTTP</name></expr>, 
<expr><name>PROTOPT_CREDSPERREQUEST</name></expr> 
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_https</name> <init>= <expr><block>{
<expr><literal type="string">"HTTPS"</literal></expr>, 
<expr><name>http_setup_conn</name></expr>, 
<expr><name>Curl_http</name></expr>, 
<expr><name>Curl_http_done</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>Curl_http_connect</name></expr>, 
<expr><name>https_connecting</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>https_getsock</name></expr>, 
<expr><name>http_getsock_do</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>PORT_HTTPS</name></expr>, 
<expr><name>CURLPROTO_HTTPS</name></expr>, 
<expr><name>PROTOPT_SSL</name> <operator>|</operator> <name>PROTOPT_CREDSPERREQUEST</name> <operator>|</operator> <name>PROTOPT_ALPN_NPN</name></expr> 
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>http_setup_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>http</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>http</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>HTTP</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_mime_initpart</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>form</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name> <operator>=</operator> <name>http</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>==</operator> <name>CURL_HTTP_VERSION_3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_SSL</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>transport</name></name> <operator>=</operator> <name>TRNSPRT_QUIC</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"HTTP/3 requested for non-HTTPS URL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CONN_INUSE</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_http2_setup_conn</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Curl_http2_setup_req</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>









<function><type><name>char</name> <modifier>*</modifier></type><name>Curl_checkProxyheaders</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>thisheader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>thislen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>thisheader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>head</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>sep_headers</name></name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxyheaders</name></name></expr> </then><else>: <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>headers</name></name></expr></else></ternary></expr>;</init>
<condition><expr><name>head</name></expr>;</condition> <incr><expr><name>head</name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name><name>head</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>thisheader</name></expr></argument>, <argument><expr><name>thislen</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>Curl_headersep</name><argument_list>(<argument><expr><name><name>head</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>thislen</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>head</name><operator>-&gt;</operator><name>data</name></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Curl_checkProxyheaders</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><name>char</name> <modifier>*</modifier></type><name>Curl_copy_header_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>


<while>while<condition>(<expr><operator>*</operator><name>header</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>header</name> <operator>!=</operator> <literal type="char">':'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>header</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>header</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>header</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>start</name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>*</operator><name>start</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>start</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>



<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<while>while<condition>(<expr><operator>(</operator><name>end</name> <operator>&gt;</operator> <name>start</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><name>len</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>






<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>http_output_basic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>proxy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>authorization</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>userp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pwd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>proxy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>userp</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>proxyuserpwd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>user</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>user</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pwd</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>passwd</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>userp</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>userpwd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>user</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pwd</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>authorization</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>authorization</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_REMOTE_ACCESS_DENIED</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>userp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>userp</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%sAuthorization: Basic %s\r\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>proxy</name></expr> ?</condition><then> <expr><literal type="string">"Proxy-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>authorization</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>authorization</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>userp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>http_output_bearer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>userp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>userp</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>userpwd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>userp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>userp</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"Authorization: Bearer %s\r\n"</literal></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_BEARER</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>userp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>bool</name></type> <name>pickoneauth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>auth</name></name> <modifier>*</modifier></type><name>pick</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>picked</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>avail</name> <init>= <expr><name><name>pick</name><operator>-&gt;</operator><name>avail</name></name> <operator>&amp;</operator> <name><name>pick</name><operator>-&gt;</operator><name>want</name></name> <operator>&amp;</operator> <name>mask</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>picked</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><name>avail</name> <operator>&amp;</operator> <name>CURLAUTH_NEGOTIATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pick</name><operator>-&gt;</operator><name>picked</name></name> <operator>=</operator> <name>CURLAUTH_NEGOTIATE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>avail</name> <operator>&amp;</operator> <name>CURLAUTH_BEARER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pick</name><operator>-&gt;</operator><name>picked</name></name> <operator>=</operator> <name>CURLAUTH_BEARER</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>avail</name> <operator>&amp;</operator> <name>CURLAUTH_DIGEST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pick</name><operator>-&gt;</operator><name>picked</name></name> <operator>=</operator> <name>CURLAUTH_DIGEST</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>avail</name> <operator>&amp;</operator> <name>CURLAUTH_NTLM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pick</name><operator>-&gt;</operator><name>picked</name></name> <operator>=</operator> <name>CURLAUTH_NTLM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>avail</name> <operator>&amp;</operator> <name>CURLAUTH_NTLM_WB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pick</name><operator>-&gt;</operator><name>picked</name></name> <operator>=</operator> <name>CURLAUTH_NTLM_WB</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>avail</name> <operator>&amp;</operator> <name>CURLAUTH_BASIC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pick</name><operator>-&gt;</operator><name>picked</name></name> <operator>=</operator> <name>CURLAUTH_BASIC</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>pick</name><operator>-&gt;</operator><name>picked</name></name> <operator>=</operator> <name>CURLAUTH_PICKNONE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>picked</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>pick</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator> <name>CURLAUTH_NONE</name></expr>;</expr_stmt> 

<return>return <expr><name>picked</name></expr>;</return>
</block_content>}</block></function>
























<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>http_perhapsrewind</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>bytessent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>expectsend</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>http</name></expr>)</condition><block type="pseudo"><block_content>


<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HTTPREQ_GET</name></expr>:</case>
<case>case <expr><name>HTTPREQ_HEAD</name></expr>:</case>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>bytessent</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>writebytecount</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>expectsend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>protoconnstart</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>expectsend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<switch>switch<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HTTPREQ_POST</name></expr>:</case>
<case>case <expr><name>HTTPREQ_PUT</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>expectsend</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>HTTPREQ_POST_FORM</name></expr>:</case>
<case>case <expr><name>HTTPREQ_POST_MIME</name></expr>:</case>
<expr_stmt><expr><name>expectsend</name> <operator>=</operator> <name><name>http</name><operator>-&gt;</operator><name>postsize</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>rewindaftersend</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>expectsend</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>expectsend</name> <operator>&gt;</operator> <name>bytessent</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name><operator>.</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_NTLM</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name><operator>.</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_NTLM</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name><operator>.</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_NTLM_WB</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name><operator>.</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_NTLM_WB</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>expectsend</name> <operator>-</operator> <name>bytessent</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">2000</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>http_ntlm_state</name></name> <operator>!=</operator> <name>NTLMSTATE_NONE</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_ntlm_state</name></name> <operator>!=</operator> <name>NTLMSTATE_NONE</name><operator>)</operator></expr>)</condition> <block>{<block_content>




<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name> <operator>!=</operator> <name>CURL_SOCKET_BAD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>rewindaftersend</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Rewind stream after send\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>close</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NTLM send, close instead of sending %"</literal>
<name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" bytes\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><operator>(</operator><name>expectsend</name> <operator>-</operator> <name>bytessent</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SPNEGO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name><operator>.</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_NEGOTIATE</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name><operator>.</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_NEGOTIATE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>expectsend</name> <operator>-</operator> <name>bytessent</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">2000</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>http_negotiate_state</name></name> <operator>!=</operator> <name>GSS_AUTHNONE</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_negotiate_state</name></name> <operator>!=</operator> <name>GSS_AUTHNONE</name><operator>)</operator></expr>)</condition> <block>{<block_content>




<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name> <operator>!=</operator> <name>CURL_SOCKET_BAD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>rewindaftersend</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Rewind stream after send\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>close</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NEGOTIATE send, close instead of sending %"</literal>
<name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" bytes\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><operator>(</operator><name>expectsend</name> <operator>-</operator> <name>bytessent</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>streamclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Mid-auth HTTP and much data left to send"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 



</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>bytessent</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>Curl_readrewind</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>CURLcode</name></type> <name>Curl_http_auth_act</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pickhost</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pickproxy</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>authmask</name> <init>= <expr><operator>~</operator><literal type="number">0ul</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_BEARER</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>authmask</name> <operator>&amp;=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>~</operator><name>CURLAUTH_BEARER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">100</literal> <operator>&lt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>httpcode</name></name> <operator>&amp;&amp;</operator> <literal type="number">199</literal> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>httpcode</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproblem</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_fail_on_error</name></name></expr>?</condition><then><expr><name>CURLE_HTTP_RETURNED_ERROR</name></expr></then><else>:<expr><name>CURLE_OK</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_BEARER</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>httpcode</name></name> <operator>==</operator> <literal type="number">401</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>httpcode</name></name> <operator>&lt;</operator> <literal type="number">300</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pickhost</name> <operator>=</operator> <call><name>pickoneauth</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name></name></expr></argument>, <argument><expr><name>authmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pickhost</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproblem</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name><operator>.</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_NTLM</name> <operator>&amp;&amp;</operator>
<name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>&gt;</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Forcing HTTP/1.1 for NTLM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Force HTTP/1.1 connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_1_1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_user_passwd</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>httpcode</name></name> <operator>==</operator> <literal type="number">407</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>httpcode</name></name> <operator>&lt;</operator> <literal type="number">300</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pickproxy</name> <operator>=</operator> <call><name>pickoneauth</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name></name></expr></argument>,
<argument><expr><name>authmask</name> <operator>&amp;</operator> <operator>~</operator><name>CURLAUTH_BEARER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pickproxy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproblem</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pickhost</name> <operator>||</operator> <name>pickproxy</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>!=</operator> <name>HTTPREQ_GET</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>!=</operator> <name>HTTPREQ_HEAD</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>rewindaftersend</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>http_perhapsrewind</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>httpcode</name></name> <operator>&lt;</operator> <literal type="number">300</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name><operator>.</operator><name>done</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>!=</operator> <name>HTTPREQ_GET</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>!=</operator> <name>HTTPREQ_HEAD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name><operator>.</operator><name>done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>http_should_fail</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"The requested URL returned error: %d"</literal></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>httpcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_HTTP_RETURNED_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>CURLcode</name></type>
<name>output_auth_headers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>auth</name></name> <modifier>*</modifier></type><name>authstatus</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>request</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>proxy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>auth</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>request</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>path</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SPNEGO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>authstatus</name><operator>-&gt;</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_NEGOTIATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>auth</name> <operator>=</operator> <literal type="string">"Negotiate"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_output_negotiate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>
if<condition>(<expr><name><name>authstatus</name><operator>-&gt;</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_NTLM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>auth</name> <operator>=</operator> <literal type="string">"NTLM"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_output_ntlm</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>NTLM_WB_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
if<condition>(<expr><name><name>authstatus</name><operator>-&gt;</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_NTLM_WB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>auth</name> <operator>=</operator> <literal type="string">"NTLM_WB"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_output_ntlm_wb</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
if<condition>(<expr><name><name>authstatus</name><operator>-&gt;</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_DIGEST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>auth</name> <operator>=</operator> <literal type="string">"Digest"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_output_digest</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
<argument><expr><name>proxy</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>request</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if<condition>(<expr><name><name>authstatus</name><operator>-&gt;</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_BASIC</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>proxy</name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_user_passwd</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>Curl_checkProxyheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Proxy-authorization"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><name>proxy</name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Authorization"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>auth</name> <operator>=</operator> <literal type="string">"Basic"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>http_output_basic</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>authstatus</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>authstatus</name><operator>-&gt;</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_BEARER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>!</operator><name>proxy</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_BEARER</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Authorization:"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>auth</name> <operator>=</operator> <literal type="string">"Bearer"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>http_output_bearer</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>authstatus</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>auth</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s auth using %s with user '%s'\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>proxy</name></expr> ?</condition><then> <expr><literal type="string">"Proxy"</literal></expr> </then><else>: <expr><literal type="string">"Server"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>auth</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>proxy</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>user</name></name></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>user</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>authstatus</name><operator>-&gt;</operator><name>multipass</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name><name>authstatus</name><operator>-&gt;</operator><name>done</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>authstatus</name><operator>-&gt;</operator><name>multipass</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>















<function><type><name>CURLcode</name></type>
<name>Curl_http_output_auth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>request</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>proxytunnel</name></decl></parameter>)</parameter_list> 

<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>auth</name></name> <modifier>*</modifier></type><name>authhost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>auth</name></name> <modifier>*</modifier></type><name>authproxy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>authhost</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>authproxy</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_user_passwd</name></name><operator>)</operator> <operator>||</operator>
<name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_BEARER</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>authhost</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>authproxy</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return> 
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>authhost</name><operator>-&gt;</operator><name>want</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>authhost</name><operator>-&gt;</operator><name>picked</name></name></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><name><name>authhost</name><operator>-&gt;</operator><name>picked</name></name> <operator>=</operator> <name><name>authhost</name><operator>-&gt;</operator><name>want</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>authproxy</name><operator>-&gt;</operator><name>want</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>authproxy</name><operator>-&gt;</operator><name>picked</name></name></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><name><name>authproxy</name><operator>-&gt;</operator><name>picked</name></name> <operator>=</operator> <name><name>authproxy</name><operator>-&gt;</operator><name>want</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name> <operator>==</operator> <operator>(</operator><name>bit</name><operator>)</operator><name>proxytunnel</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>output_auth_headers</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>authproxy</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>proxytunnel</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<expr_stmt><expr><name><name>authproxy</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>this_is_a_follow</name></name> <operator>||</operator>
<name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>netrc</name></name> <operator>||</operator>
<operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>first_host</name></name> <operator>||</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>allow_auth_to_other_hosts</name></name> <operator>||</operator>
<call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>first_host</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>output_auth_headers</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>authhost</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>authhost</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>CURLcode</name></type>
<name>Curl_http_output_auth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>request</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>proxytunnel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>request</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>proxytunnel</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><name>CURLcode</name></type> <name>Curl_http_input_auth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>proxy</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>auth</name></decl></parameter>)</parameter_list> 
<block>{<block_content>



<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SPNEGO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>curlnegotiate</name> <modifier>*</modifier></type><name>negstate</name> <init>= <expr><ternary><condition><expr><name>proxy</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_negotiate_state</name></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>http_negotiate_state</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>availp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>auth</name></name> <modifier>*</modifier></type><name>authp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>proxy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>availp</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>proxyauthavail</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>authp</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>availp</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>httpauthavail</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>authp</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

















<while>while<condition>(<expr><operator>*</operator><name>auth</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SPNEGO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Negotiate"</literal></expr></argument>, <argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>authp</name><operator>-&gt;</operator><name>avail</name></name> <operator>&amp;</operator> <name>CURLAUTH_NEGOTIATE</name><operator>)</operator> <operator>||</operator>
<call><name>Curl_auth_is_spnego_supported</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>availp</name> <operator>|=</operator> <name>CURLAUTH_NEGOTIATE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>authp</name><operator>-&gt;</operator><name>avail</name></name> <operator>|=</operator> <name>CURLAUTH_NEGOTIATE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>authp</name><operator>-&gt;</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_NEGOTIATE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_input_negotiate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproblem</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>negstate</name> <operator>=</operator> <name>GSS_AUTHRECV</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproblem</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>

if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"NTLM"</literal></expr></argument>, <argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>authp</name><operator>-&gt;</operator><name>avail</name></name> <operator>&amp;</operator> <name>CURLAUTH_NTLM</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>authp</name><operator>-&gt;</operator><name>avail</name></name> <operator>&amp;</operator> <name>CURLAUTH_NTLM_WB</name><operator>)</operator> <operator>||</operator>
<call><name>Curl_auth_is_ntlm_supported</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>availp</name> <operator>|=</operator> <name>CURLAUTH_NTLM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>authp</name><operator>-&gt;</operator><name>avail</name></name> <operator>|=</operator> <name>CURLAUTH_NTLM</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>authp</name><operator>-&gt;</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_NTLM</name> <operator>||</operator>
<name><name>authp</name><operator>-&gt;</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_NTLM_WB</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_input_ntlm</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproblem</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NTLM_WB_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>authp</name><operator>-&gt;</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_NTLM_WB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>availp</name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_NTLM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>authp</name><operator>-&gt;</operator><name>avail</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_NTLM</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>availp</name> <operator>|=</operator> <name>CURLAUTH_NTLM_WB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>authp</name><operator>-&gt;</operator><name>avail</name></name> <operator>|=</operator> <name>CURLAUTH_NTLM_WB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_input_ntlm_wb</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Authentication problem. Ignoring this.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproblem</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Authentication problem. Ignoring this.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproblem</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Digest"</literal></expr></argument>, <argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>authp</name><operator>-&gt;</operator><name>avail</name></name> <operator>&amp;</operator> <name>CURLAUTH_DIGEST</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Ignoring duplicate digest auth header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>Curl_auth_is_digest_supported</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>availp</name> <operator>|=</operator> <name>CURLAUTH_DIGEST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>authp</name><operator>-&gt;</operator><name>avail</name></name> <operator>|=</operator> <name>CURLAUTH_DIGEST</name></expr>;</expr_stmt>





<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_input_digest</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Authentication problem. Ignoring this.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproblem</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Basic"</literal></expr></argument>, <argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>availp</name> <operator>|=</operator> <name>CURLAUTH_BASIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>authp</name><operator>-&gt;</operator><name>avail</name></name> <operator>|=</operator> <name>CURLAUTH_BASIC</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>authp</name><operator>-&gt;</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_BASIC</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>authp</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator> <name>CURLAUTH_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Authentication problem. Ignoring this.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproblem</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else
if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Bearer"</literal></expr></argument>, <argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>availp</name> <operator>|=</operator> <name>CURLAUTH_BEARER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>authp</name><operator>-&gt;</operator><name>avail</name></name> <operator>|=</operator> <name>CURLAUTH_BEARER</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>authp</name><operator>-&gt;</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_BEARER</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>authp</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator> <name>CURLAUTH_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Authentication problem. Ignoring this.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproblem</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<while>while<condition>(<expr><operator>*</operator><name>auth</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>auth</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>auth</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>auth</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>auth</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while<condition>(<expr><operator>*</operator><name>auth</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>auth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>auth</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></while>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type> <name>http_should_fail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>httpcode</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>httpcode</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>httpcode</name></name></expr>;</expr_stmt>





<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_fail_on_error</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if<condition>(<expr><name>httpcode</name> <operator>&lt;</operator> <literal type="number">400</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if<condition>(<expr><operator>(</operator><name>httpcode</name> <operator>!=</operator> <literal type="number">401</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>httpcode</name> <operator>!=</operator> <literal type="number">407</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>httpcode</name> <operator>==</operator> <literal type="number">401</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>httpcode</name> <operator>==</operator> <literal type="number">407</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



















<if_stmt><if>if<condition>(<expr><operator>(</operator><name>httpcode</name> <operator>==</operator> <literal type="number">401</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>httpcode</name> <operator>==</operator> <literal type="number">407</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_user_passwd</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproblem</name></name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>size_t</name></type> <name>readmoredata</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>nitems</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator>struct <name>connectdata</name> <operator>*</operator><operator>)</operator><name>userp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>fullsize</name> <init>= <expr><name>size</name> <operator>*</operator> <name>nitems</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>http</name><operator>-&gt;</operator><name>postsize</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>forbidchunk</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>http</name><operator>-&gt;</operator><name>sending</name></name> <operator>==</operator> <name>HTTPSEND_REQUEST</name><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>postsize</name></name> <operator>&lt;=</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator><name>fullsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>http</name><operator>-&gt;</operator><name>postdata</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>http</name><operator>-&gt;</operator><name>postsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fullsize</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>http</name><operator>-&gt;</operator><name>postsize</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>backup</name><operator>.</operator><name>postsize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>postdata</name></name> <operator>=</operator> <name><name>http</name><operator>-&gt;</operator><name>backup</name><operator>.</operator><name>postdata</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>postsize</name></name> <operator>=</operator> <name><name>http</name><operator>-&gt;</operator><name>backup</name><operator>.</operator><name>postsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fread_func</name></name> <operator>=</operator> <name><name>http</name><operator>-&gt;</operator><name>backup</name><operator>.</operator><name>fread_func</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name><name>http</name><operator>-&gt;</operator><name>backup</name><operator>.</operator><name>fread_in</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>sending</name></name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>backup</name><operator>.</operator><name>postsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>postsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>fullsize</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>http</name><operator>-&gt;</operator><name>postdata</name></name></expr></argument>, <argument><expr><name>fullsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>postdata</name></name> <operator>+=</operator> <name>fullsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>postsize</name></name> <operator>-=</operator> <name>fullsize</name></expr>;</expr_stmt>

<return>return <expr><name>fullsize</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>Curl_add_buffer_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Curl_send_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>Curl_add_buffer_free</name><parameter_list>(<parameter><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>inp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>inp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>*</operator><name>inp</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>in</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>inp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>CURLcode</name></type> <name>Curl_add_buffer_send</name><parameter_list>(<parameter><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>inp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,



<parameter><decl><type><name>curl_off_t</name> <modifier>*</modifier></type><name>bytes_written</name></decl></parameter>,


<parameter><decl><type><name>size_t</name></type> <name>included_body_bytes</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>socketindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>amount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sendsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>headersize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>*</operator><name>inp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>socketindex</name> <operator>&lt;=</operator> <name>SECONDARYSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sockfd</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>socketindex</name></expr>]</index></name></expr>;</expr_stmt>




<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>size_used</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>headersize</name> <operator>=</operator> <name>size</name> <operator>-</operator> <name>included_body_bytes</name></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <name>included_body_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_convert_to_network</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>headersize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_add_buffer_free</name><argument_list>(<argument><expr><name>inp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_SSL</name> <operator>||</operator>
<name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>proxytype</name></name> <operator>==</operator> <name>CURLPROXY_HTTPS</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>!=</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>sendsize</name> <operator>=</operator> <call><name>CURLMIN</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>CURL_MAX_WRITE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_get_upload_buffer</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_add_buffer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ulbuf</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>sendsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ulbuf</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sendsize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>sendsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>






<decl_stmt><decl><type><name>size_t</name></type> <name>headlen</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>amount</name><operator>&gt;</operator><name>headersize</name></expr> ?</condition><then> <expr><name>headersize</name></expr> </then><else>: <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>amount</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bodylen</name> <init>= <expr><name>amount</name> <operator>-</operator> <name>headlen</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_HEADER_OUT</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>headlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bodylen</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_DATA_OUT</name></expr></argument>,
<argument><expr><name>ptr</name> <operator>+</operator> <name>headlen</name></expr></argument>, <argument><expr><name>bodylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><operator>*</operator><name>bytes_written</name> <operator>+=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>amount</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>http</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>writebytecount</name></name> <operator>+=</operator> <name>bodylen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_pgrsSetUploadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>writebytecount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>amount</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>amount</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>amount</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>backup</name><operator>.</operator><name>fread_func</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fread_func</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>backup</name><operator>.</operator><name>fread_in</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>backup</name><operator>.</operator><name>postdata</name></name> <operator>=</operator> <name><name>http</name><operator>-&gt;</operator><name>postdata</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>backup</name><operator>.</operator><name>postsize</name></name> <operator>=</operator> <name><name>http</name><operator>-&gt;</operator><name>postsize</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fread_func</name></name> <operator>=</operator> <operator>(</operator><name>curl_read_callback</name><operator>)</operator><name>readmoredata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>in</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>conn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>postdata</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>postsize</name></name> <operator>=</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>send_buffer</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>sending</name></name> <operator>=</operator> <name>HTTPSEND_REQUEST</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>sending</name></name> <operator>=</operator> <name>HTTPSEND_BODY</name></expr>;</expr_stmt>

</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>amount</name> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>







<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Curl_add_buffer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>CURLcode</name></type> <name>Curl_add_bufferf</name><parameter_list>(<parameter><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>*</operator><name>inp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vaprintf</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_add_buffer</name><argument_list>(<argument><expr><name>inp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>inp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>CURLcode</name></type> <name>Curl_add_buffer</name><parameter_list>(<parameter><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>inptr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_rb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>*</operator><name>inp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>~</operator><name>size</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>size_used</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>inp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>in</name><operator>-&gt;</operator><name>buffer</name></name> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>size_used</name></name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>size_max</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>size</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>size_used</name></name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>~</operator><operator>(</operator><name>size</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>size_used</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>size_used</name></name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_rb</name> <operator>=</operator> <call><name>Curl_saferealloc</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>new_rb</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>new_rb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>inp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>new_rb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>size_max</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>in</name><operator>-&gt;</operator><name>size_used</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>inptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>size_used</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>












<function><type><name>bool</name></type>
<name>Curl_compareheader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>headerline</name></decl></parameter>, 
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, 
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list> 
<block>{<block_content>





<decl_stmt><decl><type><name>size_t</name></type> <name>hlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncasecompare</name><argument_list>(<argument><expr><name>headerline</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt> 


<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>&amp;</operator><name><name>headerline</name><index>[<expr><name>hlen</name></expr>]</index></name></expr>;</expr_stmt>


<while>while<condition>(<expr><operator>*</operator><name>start</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>start</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>end</name><operator>-</operator><name>start</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<for>for<control>(<init>;</init> <condition><expr><name>len</name> <operator>&gt;=</operator> <name>clen</name></expr>;</condition> <incr><expr><name>len</name><operator>--</operator></expr><operator>,</operator> <expr><name>start</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 
</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return> 
</block_content>}</block></function>





<function><type><name>CURLcode</name></type> <name>Curl_http_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>connkeep</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"HTTP default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_proxy_connect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_connect_closed</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>CONNECT_FIRSTSOCKET_PROXY_SSL</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><call><name>Curl_connect_ongoing</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>haproxyprotocol</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>add_haproxy_protocol_header</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>given</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>CURLPROTO_HTTPS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>https_connecting</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>http_getsock_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>socks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><call><name>GETSOCK_WRITESOCK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>add_haproxy_protocol_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>proxy_header</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>req_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tcp_version</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>ipv6</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tcp_version</name></expr></argument>, <argument><expr><literal type="string">"TCP6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tcp_version</name></expr></argument>, <argument><expr><literal type="string">"TCP4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>proxy_header</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_header</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"PROXY %s %s %s %li %li\r\n"</literal></expr></argument>,
<argument><expr><name>tcp_version</name></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn_local_ip</name></name></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn_primary_ip</name></name></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn_local_port</name></name></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn_primary_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>req_buffer</name> <operator>=</operator> <call><name>Curl_add_buffer_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>req_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><name>proxy_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>,
<argument><expr><name>conn</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>request_size</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>https_connecting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>conn</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_SSL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_QUIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>TRNSPRT_QUIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ssl_connect_nonblocking</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Failed HTTPS connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>https_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_SSL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Curl_ssl_getsock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>socks</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>GETSOCK_BLANK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 






<function><type><name>CURLcode</name></type> <name>Curl_http_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name><operator>.</operator><name>multipass</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name><operator>.</operator><name>multipass</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_unencode_cleanup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>seek_func</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>seek_func</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>seek_client</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>seek_client</name></name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>http</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>send_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_add_buffer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>send_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_http2_done</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>premature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_quic_done</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>premature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_mime_cleanpart</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>form</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>premature</name> <operator>&amp;&amp;</operator> 

<operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>retry</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>connect_only</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name> <operator>+</operator>
<name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>headerbytecount</name></name> <operator>-</operator>
<name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>deductheadercount</name></name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Empty reply from server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_GOT_NOTHING</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>bool</name></type> <name>use_http_1_1plus</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>httpversion</name></name> <operator>==</operator> <literal type="number">10</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>==</operator> <literal type="number">10</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>==</operator> <name>CURL_HTTP_VERSION_1_0</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>&lt;=</operator> <literal type="number">10</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>==</operator> <name>CURL_HTTP_VERSION_NONE</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>&gt;=</operator> <name>CURL_HTTP_VERSION_1_1</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_http_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_QUIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>==</operator> <name>CURL_HTTP_VERSION_3</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>==</operator> <literal type="number">30</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"3"</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name><operator>.</operator><name>h2</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"2"</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>use_http_1_1plus</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"1.1"</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="string">"1.0"</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>expect100</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>req_buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>expect100header</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>disableexpect</name></name> <operator>&amp;&amp;</operator> <call><name>use_http_1_1plus</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Expect"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>expect100header</name></name> <operator>=</operator>
<call><name>Curl_compareheader</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"Expect:"</literal></expr></argument>, <argument><expr><literal type="string">"100-continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>,
<argument><expr><literal type="string">"Expect: 100-continue\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>expect100header</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <name>proxy_use</name> <block>{
<decl><name>HEADER_SERVER</name></decl>, 
<decl><name>HEADER_PROXY</name></decl>, 
<decl><name>HEADER_CONNECT</name></decl> 
}</block>;</enum>




<function><type><name>CURLcode</name></type> <name>Curl_http_compile_trailers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>trailers</name></decl></parameter>,
<parameter><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>endofline_native</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>endofline_network</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DO_LINEEND_CONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name><name>handle</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>prefer_ascii</name></name><operator>)</operator> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>(</operator><name><name>handle</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>crlf</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>endofline_native</name> <operator>=</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>endofline_network</name> <operator>=</operator> <literal type="string">"\x0a"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>endofline_native</name> <operator>=</operator> <literal type="string">"\r\n"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>endofline_network</name> <operator>=</operator> <literal type="string">"\x0d\x0a"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<while>while<condition>(<expr><name>trailers</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>trailers</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>trailers</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><name>endofline_native</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"Malformatted trailing header ! Skipping trailer."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>trailers</name> <operator>=</operator> <name><name>trailers</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>endofline_network</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>endofline_network</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_add_custom_headers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>is_connect</name></decl></parameter>,
<parameter><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>req_buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name><name>h</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numlists</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>proxy_use</name></name></type> <name>proxy</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>is_connect</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>proxy</name> <operator>=</operator> <name>HEADER_CONNECT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>proxy</name> <operator>=</operator> <ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name></expr>?</condition><then>
<expr><name>HEADER_PROXY</name></expr></then><else>:<expr><name>HEADER_SERVER</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch<condition>(<expr><name>proxy</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HEADER_SERVER</name></expr>:</case>
<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>headers</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HEADER_PROXY</name></expr>:</case>
<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>headers</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>sep_headers</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxyheaders</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>numlists</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>HEADER_CONNECT</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>sep_headers</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxyheaders</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>headers</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numlists</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>headers</name> <operator>=</operator> <name><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>headers</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>semicolonp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>headers</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>optr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>headers</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>optr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt> 
<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>optr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><operator>(</operator><operator>--</operator><name>ptr</name><operator>)</operator> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>semicolonp</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>headers</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>semicolonp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_add_buffer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>semicolonp</name><index>[<expr><name>ptr</name> <operator>-</operator> <name><name>headers</name><operator>-&gt;</operator><name>data</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>optr</name> <operator>=</operator> <operator>&amp;</operator><name><name>semicolonp</name> <index>[<expr><name>ptr</name> <operator>-</operator> <name><name>headers</name><operator>-&gt;</operator><name>data</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>optr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt> 
<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ptr</name> <operator>||</operator> <name>semicolonp</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>compare</name> <init>= <expr><ternary><condition><expr><name>semicolonp</name></expr> ?</condition><then> <expr><name>semicolonp</name></expr> </then><else>: <expr><name><name>headers</name><operator>-&gt;</operator><name>data</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>host</name></name> <operator>&amp;&amp;</operator>


<call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Host:"</literal></expr></argument>, <argument><expr><name>compare</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>==</operator> <name>HTTPREQ_POST_FORM</name> <operator>&amp;&amp;</operator>

<call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Content-Type:"</literal></expr></argument>, <argument><expr><name>compare</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>==</operator> <name>HTTPREQ_POST_MIME</name> <operator>&amp;&amp;</operator>

<call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Content-Type:"</literal></expr></argument>, <argument><expr><name>compare</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name> <operator>&amp;&amp;</operator>


<call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Content-Length:"</literal></expr></argument>, <argument><expr><name>compare</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>te</name></name> <operator>&amp;&amp;</operator>


<call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Connection:"</literal></expr></argument>, <argument><expr><name>compare</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>&gt;=</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Transfer-Encoding:"</literal></expr></argument>, <argument><expr><name>compare</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>(</operator><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Authorization:"</literal></expr></argument>, <argument><expr><name>compare</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Cookie:"</literal></expr></argument>, <argument><expr><name>compare</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>


<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>this_is_a_follow</name></name> <operator>&amp;&amp;</operator>
<name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>first_host</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>allow_auth_to_other_hosts</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>first_host</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"%s\r\n"</literal></expr></argument>, <argument><expr><name>compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>semicolonp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>semicolonp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>headers</name> <operator>=</operator> <name><name>headers</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PARSEDATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>CURLcode</name></type> <name>Curl_add_timecondition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>req_buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>keeptime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>datestr</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>condp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timecondition</name></name> <operator>==</operator> <name>CURL_TIMECOND_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_gmtime</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timevalue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keeptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Invalid TIMEVALUE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <operator>&amp;</operator><name>keeptime</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timecondition</name></name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return>

<case>case <expr><name>CURL_TIMECOND_IFMODSINCE</name></expr>:</case>
<expr_stmt><expr><name>condp</name> <operator>=</operator> <literal type="string">"If-Modified-Since"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_TIMECOND_IFUNMODSINCE</name></expr>:</case>
<expr_stmt><expr><name>condp</name> <operator>=</operator> <literal type="string">"If-Unmodified-Since"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_TIMECOND_LASTMOD</name></expr>:</case>
<expr_stmt><expr><name>condp</name> <operator>=</operator> <literal type="string">"Last-Modified"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>condp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>









<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>datestr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>datestr</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%s: %s, %02d %s %4d %02d:%02d:%02d GMT\r\n"</literal></expr></argument>,
<argument><expr><name>condp</name></expr></argument>,
<argument><expr><name><name>Curl_wkday</name><index>[<expr><ternary><condition><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_wday</name></name></expr>?</condition><then><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_wday</name></name><operator>-</operator><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">6</literal></expr></else></ternary></expr>]</index></name></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>,
<argument><expr><name><name>Curl_month</name><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><name>datestr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>datestr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>CURLcode</name></type> <name>Curl_add_timecondition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>req_buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>req_buffer</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>CURLcode</name></type> <name>Curl_http</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>http</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>path</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>query</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>paste_ftp_userpwd</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ftp_typecode</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"/;type=?"</literal></expr></argument>)</argument_list></sizeof></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>te</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Curl_HttpReq</name></type> <name>httpreq</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_COOKIES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>addcookies</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>included_body</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>httpstring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>req_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>postsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>altused</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>transport</name></name> <operator>!=</operator> <name>TRNSPRT_QUIC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content> 

<switch>switch<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_HTTP_VERSION_2</name></expr>:</case>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_http2_switched</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CURL_HTTP_VERSION_1_1</name></expr>:</case>

<break>break;</break>
<default>default:</default>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>==</operator>
<name>CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Ignoring HTTP/2 prior knowledge due to proxy\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"HTTP/2 over clean TCP\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_http2_switched</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_http2_setup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>http</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>this_is_a_follow</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>first_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>first_host</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>first_host</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>first_remote_port</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name><operator>&amp;</operator><operator>(</operator><name>PROTO_FAMILY_HTTP</name><operator>|</operator><name>CURLPROTO_FTP</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>httpreq</name> <operator>=</operator> <name>HTTPREQ_PUT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_CUSTOMREQUEST</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>request</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_CUSTOMREQUEST</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>request</name> <operator>=</operator> <literal type="string">"HEAD"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>httpreq</name> <operator>&gt;</operator> <name>HTTPREQ_NONE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>httpreq</name> <operator>&lt;</operator> <name>HTTPREQ_LAST</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>httpreq</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HTTPREQ_POST</name></expr>:</case>
<case>case <expr><name>HTTPREQ_POST_FORM</name></expr>:</case>
<case>case <expr><name>HTTPREQ_POST_MIME</name></expr>:</case>
<expr_stmt><expr><name>request</name> <operator>=</operator> <literal type="string">"POST"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HTTPREQ_PUT</name></expr>:</case>
<expr_stmt><expr><name>request</name> <operator>=</operator> <literal type="string">"PUT"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HTTPREQ_OPTIONS</name></expr>:</case>
<expr_stmt><expr><name>request</name> <operator>=</operator> <literal type="string">"OPTIONS"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> 
<case>case <expr><name>HTTPREQ_GET</name></expr>:</case>
<expr_stmt><expr><name>request</name> <operator>=</operator> <literal type="string">"GET"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HTTPREQ_HEAD</name></expr>:</case>
<expr_stmt><expr><name>request</name> <operator>=</operator> <literal type="string">"HEAD"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if<condition>(<expr><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"User-Agent"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>uagent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>uagent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>query</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>query</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pq</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s?%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pq</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_http_output_auth</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>pq</name></expr> ?</condition><then> <expr><name>pq</name></expr> </then><else>: <expr><name>path</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name><operator>.</operator><name>multipass</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name><operator>.</operator><name>done</name></name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name><operator>.</operator><name>multipass</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name><operator>.</operator><name>done</name></name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>httpreq</name> <operator>!=</operator> <name>HTTPREQ_GET</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>httpreq</name> <operator>!=</operator> <name>HTTPREQ_HEAD</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Referer"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>ref</name></name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"Referer: %s\r\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>ref</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>ref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_COOKIES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_COOKIE</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Cookie"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>addcookies</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_COOKIE</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Accept-Encoding"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_ENCODING</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>accept_encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>accept_encoding</name></name> <operator>=</operator>
<call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"Accept-Encoding: %s\r\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_ENCODING</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>accept_encoding</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>accept_encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>accept_encoding</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBZ</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"TE"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_transfer_encoding</name></name></expr>)</condition> <block>{<block_content>





<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cptr</name> <init>= <expr><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TE_HEADER</name></cpp:macro> <cpp:value>"TE: gzip\r\n"</cpp:value></cpp:define>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>te</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cptr</name> <operator>=</operator> <call><name>Curl_copy_header_value</name><argument_list>(<argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>te</name></name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"Connection: %s%sTE\r\n"</literal> <name>TE_HEADER</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>cptr</name></expr> ?</condition><then> <expr><name>cptr</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>cptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cptr</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>te</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch<condition>(<expr><name>httpreq</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HTTPREQ_POST_MIME</name></expr>:</case>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>sendit</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HTTPREQ_POST_FORM</name></expr>:</case>

<expr_stmt><expr><call><name>Curl_mime_cleanpart</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>form</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_getformdata</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>form</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httppost</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fread_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>sendit</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>form</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>sendit</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_MIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>sendit</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cthdr</name> <init>= <expr><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Content-Type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>sendit</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MIME_BODY_ONLY</name></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><name>cthdr</name></expr>)</condition><block type="pseudo"><block_content>
<for>for<control>(<init><expr><name>cthdr</name> <operator>+=</operator> <literal type="number">13</literal></expr>;</init> <condition><expr><operator>*</operator><name>cthdr</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>cthdr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>sendit</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>MIMEKIND_MULTIPART</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cthdr</name> <operator>=</operator> <literal type="string">"multipart/form-data"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_mime_headers</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>sendit</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>headers</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_mime_prepare_headers</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>sendit</name></name></expr></argument>, <argument><expr><name>cthdr</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MIMESTRATEGY_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_mime_headers</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>sendit</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_mime_rewind</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>sendit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>postsize</name></name> <operator>=</operator> <call><name>Curl_mime_size</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>sendit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Transfer-Encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_chunky</name></name> <operator>=</operator>
<call><name>Curl_compareheader</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"Transfer-Encoding:"</literal></expr></argument>, <argument><expr><literal type="string">"chunked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>PROTO_FAMILY_HTTP</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>httpreq</name> <operator>==</operator> <name>HTTPREQ_POST_MIME</name> <operator>||</operator> <name>httpreq</name> <operator>==</operator> <name>HTTPREQ_POST_FORM</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>http</name><operator>-&gt;</operator><name>postsize</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name> <operator>||</operator> <name>httpreq</name> <operator>==</operator> <name>HTTPREQ_POST</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>use_http_1_1plus</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_chunky</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Chunky upload is not supported by HTTP 1.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_UPLOAD_FAILED</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_chunky</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_chunky</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>te</name> <operator>=</operator> <literal type="string">"Transfer-Encoding: chunked\r\n"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>this_is_a_follow</name></name> <operator>||</operator>
<call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>first_host</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_COOKIES</name></expr></argument>)</argument_list></call></expr></cpp:if>





<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cookiehost</name> <init>= <expr><call><name>Curl_copy_header_value</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cookiehost</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>cookiehost</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cookiehost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>


<if_stmt><if>if<condition>(<expr><operator>*</operator><name>cookiehost</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>closingbracket</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>cookiehost</name></expr></argument>, <argument><expr><name>cookiehost</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cookiehost</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>closingbracket</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cookiehost</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>closingbracket</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>closingbracket</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>startsearch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>colon</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>cookiehost</name> <operator>+</operator> <name>startsearch</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>colon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>colon</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>cookiehost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>cookiehost</name></name> <operator>=</operator> <name>cookiehost</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"Host:"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>host</name></name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"Host:%s\r\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>host</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>host</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>



<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>given</name><operator>-&gt;</operator><name>protocol</name></name><operator>&amp;</operator><name>CURLPROTO_HTTPS</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name> <operator>==</operator> <name>PORT_HTTPS</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>given</name><operator>-&gt;</operator><name>protocol</name></name><operator>&amp;</operator><name>CURLPROTO_HTTP</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name> <operator>==</operator> <name>PORT_HTTP</name><operator>)</operator><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>host</name></name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"Host: %s%s%s\r\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>ipv6_ip</name></name></expr>?</condition><then><expr><literal type="string">"["</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>host</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>ipv6_ip</name></name></expr>?</condition><then><expr><literal type="string">"]"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>host</name></name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"Host: %s%s%s:%d\r\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>ipv6_ip</name></name></expr>?</condition><then><expr><literal type="string">"["</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>host</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>ipv6_ip</name></name></expr>?</condition><then><expr><literal type="string">"]"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>host</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name></expr>)</condition> <block>{<block_content>







<decl_stmt><decl><type><name>CURLUcode</name></type> <name>uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>curl_url_dup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uh</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>dispname</name></name> <operator>!=</operator> <name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>CURLUPART_HOST</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>CURLUPART_FRAGMENT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>scheme</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>CURLUPART_USER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>CURLUPART_PASSWORD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_TEMP_URL</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"ftp"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>scheme</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_transfer_mode</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">";type="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>type</name> <operator>&amp;&amp;</operator> <name><name>type</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>type</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><name><name>type</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>type</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>ftp_typecode</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>path</name></name> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ftp_typecode</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">";type=%c"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>prefer_ascii</name></name></expr> ?</condition><then> <expr><literal type="char">'a'</literal></expr> </then><else>: <expr><literal type="char">'i'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>userpwd_in_url</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>paste_ftp_userpwd</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>p_accept</name></name> <operator>=</operator> <ternary><condition><expr><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Accept"</literal></expr></argument>)</argument_list></call></expr>?</condition><then><expr><name>NULL</name></expr></then><else>:<expr><literal type="string">"Accept: */*\r\n"</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>HTTPREQ_POST</name> <operator>==</operator> <name>httpreq</name> <operator>||</operator> <name>HTTPREQ_PUT</name> <operator>==</operator> <name>httpreq</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition> <block>{<block_content>









<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>this_is_a_follow</name></name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>seekerr</name> <init>= <expr><name>CURL_SEEKFUNC_CANTSEEK</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>seek_func</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seekerr</name> <operator>=</operator> <call><name><name>conn</name><operator>-&gt;</operator><name>seek_func</name></name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>seek_client</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr></argument>,
<argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>seekerr</name> <operator>!=</operator> <name>CURL_SEEKFUNC_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>passed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>seekerr</name> <operator>!=</operator> <name>CURL_SEEKFUNC_CANTSEEK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not seek stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_READ_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>readthisamountnow</name> <init>=
<expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>-</operator> <name>passed</name> <operator>&gt;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name><operator>)</operator></expr> ?</condition><then>
<expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name></expr> </then><else>:
<expr><call><name>curlx_sotouz</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>-</operator> <name>passed</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>actuallyread</name> <init>=
<expr><call><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fread_func</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>readthisamountnow</name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>passed</name> <operator>+=</operator> <name>actuallyread</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>actuallyread</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>actuallyread</name> <operator>&gt;</operator> <name>readthisamountnow</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could only read %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>
<literal type="string">" bytes from the input"</literal></expr></argument>, <argument><expr><name>passed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_READ_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><name>passed</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>-=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"File already completely uploaded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_PARTIAL_FILE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>use_range</name></name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>httpreq</name> <operator>==</operator> <name>HTTPREQ_GET</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>httpreq</name> <operator>==</operator> <name>HTTPREQ_HEAD</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Range"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>rangeline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>rangeline</name></name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"Range: bytes=%s\r\n"</literal></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>(</operator><name>httpreq</name> <operator>==</operator> <name>HTTPREQ_POST</name> <operator>||</operator> <name>httpreq</name> <operator>==</operator> <name>HTTPREQ_PUT</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Content-Range"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>rangeline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>set_resume_from</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>rangeline</name></name> <operator>=</operator>
<call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"Content-Range: bytes 0-%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>
<literal type="string">"/%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"\r\n"</literal></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>total_expected_size</name> <init>=
<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>rangeline</name></name> <operator>=</operator>
<call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"Content-Range: bytes %s%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>
<literal type="string">"/%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"\r\n"</literal></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>range</name></name></expr></argument>, <argument><expr><name>total_expected_size</name><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>total_expected_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>rangeline</name></name> <operator>=</operator>
<call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"Content-Range: bytes %s/%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"\r\n"</literal></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>range</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>rangeline</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>httpstring</name> <operator>=</operator> <call><name>get_http_string</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>req_buffer</name> <operator>=</operator> <call><name>Curl_add_buffer_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>req_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_TARGET</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_TARGET</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>query</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_TEMP_URL</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_TEMP_URL</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if<condition>(<expr><name>paste_ftp_userpwd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"ftp://%s:%s@%s"</literal></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>,
<argument><expr><name>path</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"ftp://"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>query</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"?%s"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ALTSVC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>altused</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Alt-Used"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>altused</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"Alt-Used: %s:%d\r\n"</literal></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>conn_to_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>altused</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>result</name> <operator>=</operator>
<call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>,
<argument><expr><literal type="string">"%s"</literal> 
<literal type="string">" HTTP/%s\r\n"</literal> 
<literal type="string">"%s"</literal> 
<literal type="string">"%s"</literal> 
<literal type="string">"%s"</literal> 
<literal type="string">"%s"</literal> 
<literal type="string">"%s"</literal> 
<literal type="string">"%s"</literal> 
<literal type="string">"%s"</literal> 
<literal type="string">"%s"</literal> 
<literal type="string">"%s"</literal> 
<literal type="string">"%s"</literal> 
<literal type="string">"%s"</literal> 
<literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name>ftp_typecode</name></expr></argument>,
<argument><expr><name>httpstring</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>host</name></name></expr>?</condition><then><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>host</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>proxyuserpwd</name></name></expr>?</condition><then>
<expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>proxyuserpwd</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>userpwd</name></name></expr>?</condition><then><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>userpwd</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>use_range</name></name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>rangeline</name></name><operator>)</operator></expr>?</condition><then>
<expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>rangeline</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_USERAGENT</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>*</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_USERAGENT</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>uagent</name></name><operator>)</operator></expr>?</condition><then>
<expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>uagent</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>http</name><operator>-&gt;</operator><name>p_accept</name></name></expr>?</condition><then><expr><name><name>http</name><operator>-&gt;</operator><name>p_accept</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>te</name></name></expr>?</condition><then><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>te</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_ENCODING</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>*</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_ENCODING</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>accept_encoding</name></name><operator>)</operator></expr>?</condition><then>
<expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>accept_encoding</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer</name></name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>ref</name></name><operator>)</operator></expr>?</condition><then>
<expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>ref</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument> ,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>Curl_checkProxyheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Proxy-Connection"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>?</condition><then>
<expr><literal type="string">"Proxy-Connection: Keep-Alive\r\n"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>te</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>altused</name></expr> ?</condition><then> <expr><name>altused</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>
)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>userpwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>proxyuserpwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>altused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>PROTOPT_SSL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>!=</operator> <literal type="number">20</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>==</operator> <name>CURL_HTTP_VERSION_2</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_http2_request_upgrade</name><argument_list>(<argument><expr><name>req_buffer</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_COOKIES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name> <operator>||</operator> <name>addcookies</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>co</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>cookie_engine</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_COOKIE</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>co</name> <operator>=</operator> <call><name>Curl_cookie_getlist</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>cookiehost</name></name></expr>?</condition><then>
<expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>cookiehost</name></name></expr></then><else>:<expr><name>host</name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>path</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name><operator>&amp;</operator><name>CURLPROTO_HTTPS</name><operator>)</operator></expr>?</condition><then>
<expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_COOKIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>co</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>store</name> <init>= <expr><name>co</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>co</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>co</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"Cookie: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>,
<argument><expr><literal type="string">"%s%s=%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>count</name></expr>?</condition><then><expr><literal type="string">"; "</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>co</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>co</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>co</name> <operator>=</operator> <name><name>co</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt> 
</block_content>}</block></while>
<expr_stmt><expr><call><name>Curl_cookie_freelist</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>addcookies</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"Cookie: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>count</name></expr>?</condition><then><expr><literal type="string">"; "</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>addcookies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>count</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_timecondition</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>req_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_custom_headers</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>req_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>postdata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 





<switch>switch<condition>(<expr><name>httpreq</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HTTPREQ_PUT</name></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>postsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>postsize</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>postsize</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_chunky</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name> <operator>||</operator> <operator>!</operator><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>,
<argument><expr><literal type="string">"Content-Length: %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>
<literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><name>postsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>postsize</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>expect100</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>req_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>postsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>request_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed sending PUT request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>postsize</name></expr>?</condition><then><expr><name>FIRSTSOCKET</name></expr></then><else>:<expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>HTTPREQ_POST_FORM</name></expr>:</case>
<case>case <expr><name>HTTPREQ_POST_MIME</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"Content-Length: 0\r\n\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>request_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed sending POST request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>=</operator> <name>postsize</name> <operator>=</operator> <name><name>http</name><operator>-&gt;</operator><name>postsize</name></name></expr>;</expr_stmt>




<if_stmt><if>if<condition>(<expr><name>postsize</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_chunky</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name> <operator>||</operator> <operator>!</operator><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>,
<argument><expr><literal type="string">"Content-Length: %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>
<literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><name>postsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_MIME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>hdr</name> <operator>=</operator> <name><name>http</name><operator>-&gt;</operator><name>sendit</name><operator>-&gt;</operator><name>curlheaders</name></name></expr>;</init> <condition><expr><name>hdr</name></expr>;</condition> <incr><expr><name>hdr</name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"%s\r\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Expect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>expect100header</name></name> <operator>=</operator>
<call><name>Curl_compareheader</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"Expect:"</literal></expr></argument>, <argument><expr><literal type="string">"100-continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>postsize</name> <operator>&gt;</operator> <name>EXPECT_100_THRESHOLD</name> <operator>||</operator> <name>postsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>expect100</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>req_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>expect100header</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>postsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fread_func</name></name> <operator>=</operator> <operator>(</operator><name>curl_read_callback</name><operator>)</operator> <name>Curl_mime_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>in</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>http</name><operator>-&gt;</operator><name>sendit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>sending</name></name> <operator>=</operator> <name>HTTPSEND_BODY</name></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>request_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed sending POST request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>postsize</name></expr>?</condition><then><expr><name>FIRSTSOCKET</name></expr></then><else>:<expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>HTTPREQ_POST</name></expr>:</case>


<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>postsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>postsize</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>




<if_stmt><if>if<condition>(<expr><operator>(</operator><name>postsize</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_chunky</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name> <operator>||</operator> <operator>!</operator><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>,
<argument><expr><literal type="string">"Content-Length: %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>
<literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><name>postsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Content-Type"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>,
<argument><expr><literal type="string">"Content-Type: application/"</literal>
<literal type="string">"x-www-form-urlencoded\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Expect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>expect100header</name></name> <operator>=</operator>
<call><name>Curl_compareheader</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"Expect:"</literal></expr></argument>, <argument><expr><literal type="string">"100-continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>postsize</name> <operator>&gt;</operator> <name>EXPECT_100_THRESHOLD</name> <operator>||</operator> <name>postsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>expect100</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>req_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>expect100header</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfields</name></name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>!=</operator> <literal type="number">20</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>expect100header</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>postsize</name> <operator>&lt;</operator> <name>MAX_INITIAL_POST_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_chunky</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfields</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>postsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>included_body</name> <operator>=</operator> <name>postsize</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>postsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"%x\r\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>postsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfields</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>postsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>included_body</name> <operator>=</operator> <name>postsize</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"\x30\x0d\x0a\x0d\x0a"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>included_body</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>postsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>postsize</name></name> <operator>=</operator> <name>postsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>postdata</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfields</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>sending</name></name> <operator>=</operator> <name>HTTPSEND_BODY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fread_func</name></name> <operator>=</operator> <operator>(</operator><name>curl_read_callback</name><operator>)</operator><name>readmoredata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>in</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>conn</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>http</name><operator>-&gt;</operator><name>postsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_chunky</name></name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>,
<argument><expr><literal type="string">"\x30\x0d\x0a\x0d\x0a"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><ternary><condition><expr><name>postsize</name></expr>?</condition><then><expr><name>postsize</name></expr></then><else>:<expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>postdata</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>postdata</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>postsize</name></name> <operator>=</operator> <name>postsize</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>request_size</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>included_body</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed sending HTTP POST request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>http</name><operator>-&gt;</operator><name>postdata</name></name></expr>?</condition><then><expr><name>FIRSTSOCKET</name></expr></then><else>:<expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>request_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed sending HTTP request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></switch>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>postsize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>writebytecount</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>Curl_pgrsSetUploadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>writebytecount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsUpdate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>writebytecount</name></name> <operator>&gt;=</operator> <name>postsize</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"upload completely sent off: %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>
<literal type="string">" out of %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" bytes\n"</literal></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>writebytecount</name></name></expr></argument>, <argument><expr><name>postsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>keepon</name></name> <operator>&amp;=</operator> <operator>~</operator><name>KEEP_SEND</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>exp100</name></name> <operator>=</operator> <name>EXP100_SEND_DATA</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>Curl_expire_done</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>EXPIRE_100_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>==</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_chunky</name></name></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_chunky</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><enum>enum <block>{
<decl><name>STATUS_UNKNOWN</name></decl>, 
<decl><name>STATUS_DONE</name></decl>, 
<decl><name>STATUS_BAD</name></decl> 
}</block></enum></type> <name>statusline</name>;</typedef>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>checkprefixmax</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ch</name> <init>= <expr><call><name>CURLMIN</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>curl_strnequal</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>statusline</name></type>
<name>checkhttpprefix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>head</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http200aliases</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>statusline</name></type> <name>rc</name> <init>= <expr><name>STATUS_BAD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>statusline</name></type> <name>onmatch</name> <init>= <expr><ternary><condition><expr><name>len</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>?</condition><then> <expr><name>STATUS_DONE</name></expr> </then><else>: <expr><name>STATUS_UNKNOWN</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scratch</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>scratch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate memory for conversion!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>CURLE_OK</name> <operator>!=</operator> <call><name>Curl_convert_from_network</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>scratch</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>scratch</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<while>while<condition>(<expr><name>head</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>checkprefixmax</name><argument_list>(<argument><expr><name><name>head</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>onmatch</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>head</name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>!=</operator> <name>STATUS_DONE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>checkprefixmax</name><argument_list>(<argument><expr><literal type="string">"HTTP/"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>onmatch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_RTSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>statusline</name></type>
<name>checkrtspprefix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>statusline</name></type> <name>result</name> <init>= <expr><name>STATUS_BAD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>statusline</name></type> <name>onmatch</name> <init>= <expr><ternary><condition><expr><name>len</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>?</condition><then> <expr><name>STATUS_DONE</name></expr> </then><else>: <expr><name>STATUS_UNKNOWN</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scratch</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>scratch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate memory for conversion!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>CURLE_OK</name> <operator>!=</operator> <call><name>Curl_convert_from_network</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>scratch</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>checkprefixmax</name><argument_list>(<argument><expr><literal type="string">"RTSP/"</literal></expr></argument>, <argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>onmatch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><call><name>checkprefixmax</name><argument_list>(<argument><expr><literal type="string">"RTSP/"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>onmatch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>statusline</name></type>
<name>checkprotoprefix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_RTSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>CURLPROTO_RTSP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>checkrtspprefix</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<return>return <expr><call><name>checkhttpprefix</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>header_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name> <init>= <expr><name><name>k</name><operator>-&gt;</operator><name>hbuflen</name></name> <operator>+</operator> <name>length</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>newsize</name> <operator>&gt;</operator> <name>CURL_MAX_HTTP_HEADER</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Rejected %zu bytes header (max is %d)!"</literal></expr></argument>, <argument><expr><name>newsize</name></expr></argument>,
<argument><expr><name>CURL_MAX_HTTP_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>newsize</name> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headersize</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newbuff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hbufp_index</name></decl>;</decl_stmt>

<expr_stmt><expr><name>newsize</name> <operator>=</operator> <call><name>CURLMAX</name><argument_list>(<argument><expr><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>hbuflen</name></name> <operator>+</operator> <name>length</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headersize</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hbufp_index</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>hbufp</name></name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>newbuff</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newbuff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to alloc memory for big header!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headersize</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name> <operator>=</operator> <name>newbuff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>hbufp</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name> <operator>+</operator> <name>hbufp_index</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>hbufp</name></name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>str_start</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>hbufp</name></name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>hbuflen</name></name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>k</name><operator>-&gt;</operator><name>hbufp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_http_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>beg</name> <init>= <expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><literal type="string">"HTTP"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>beg</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>++</operator><name>beg</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>char</name></type> <name>end_char</name> <init>= <expr><literal type="char">'\r'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end_char</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end_char</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"The requested URL returned error: %s"</literal></expr></argument>, <argument><expr><name>beg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>end_char</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"The requested URL returned error: %d"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>CURLcode</name></type> <name>Curl_http_readwrite_headers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>nread</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>stop_reading</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>onread</name> <init>= <expr><operator>*</operator><name>nread</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ostr</name> <init>= <expr><name><name>k</name><operator>-&gt;</operator><name>str</name></name></expr></init></decl>;</decl_stmt>


<do>do <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>rest_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>full_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>writetype</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>str_start</name></name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>end_ptr</name></name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>str_start</name></name></expr></argument>, <argument><expr><literal type="number">0x0a</literal></expr></argument>, <argument><expr><operator>*</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>end_ptr</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>header_append</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><operator>*</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>headerline</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>statusline</name></type> <name>st</name> <init>= <expr><call><name>checkprotoprefix</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name></expr></argument>,
<argument><expr><name><name>k</name><operator>-&gt;</operator><name>hbuflen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>st</name> <operator>==</operator> <name>STATUS_BAD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>badheader</name></name> <operator>=</operator> <name>HEADER_ALLBAD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>streamclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"bad HTTP: No end-of-message indicator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http09_allowed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Received HTTP/0.9 when not allowed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>rest_length</name> <operator>=</operator> <operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>end_ptr</name></name> <operator>-</operator> <name><name>k</name><operator>-&gt;</operator><name>str</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nread</name> <operator>-=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>rest_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>end_ptr</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>full_length</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>str</name></name> <operator>-</operator> <name><name>k</name><operator>-&gt;</operator><name>str_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>header_append</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>full_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>end_ptr</name></name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>hbufp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name></expr>;</expr_stmt>





<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>headerline</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>statusline</name></type> <name>st</name> <init>= <expr><call><name>checkprotoprefix</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name></expr></argument>,
<argument><expr><name><name>k</name><operator>-&gt;</operator><name>hbuflen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>st</name> <operator>==</operator> <name>STATUS_BAD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>streamclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"bad HTTP: No end-of-message indicator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http09_allowed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Received HTTP/0.9 when not allowed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>nread</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>badheader</name></name> <operator>=</operator> <name>HEADER_PARTHEADER</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>badheader</name></name> <operator>=</operator> <name>HEADER_ALLBAD</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nread</name> <operator>=</operator> <name>onread</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name>ostr</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="number">0x0a</literal> <operator>==</operator> <operator>*</operator><name><name>k</name><operator>-&gt;</operator><name>p</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="number">0x0d</literal> <operator>==</operator> <operator>*</operator><name><name>k</name><operator>-&gt;</operator><name>p</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>headerlen</name></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><literal type="number">0x0d</literal> <operator>==</operator> <operator>*</operator><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>k</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name><operator>++</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><literal type="number">0x0a</literal> <operator>==</operator> <operator>*</operator><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>k</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name><operator>++</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><literal type="char">'\r'</literal> <operator>==</operator> <operator>*</operator><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if<condition>(<expr><literal type="char">'\n'</literal> <operator>==</operator> <operator>*</operator><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if<condition>(<expr><literal type="number">100</literal> <operator>&lt;=</operator> <name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name> <operator>&amp;&amp;</operator> <literal type="number">199</literal> <operator>&gt;=</operator> <name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">100</literal></expr>:</case>







<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>headerline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 


<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>exp100</name></name> <operator>&gt;</operator> <name>EXP100_SEND_DATA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>exp100</name></name> <operator>=</operator> <name>EXP100_SEND_DATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>|=</operator> <name>KEEP_SEND</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_expire_done</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>EXPIRE_100_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">101</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>upgr101</name></name> <operator>==</operator> <name>UPGR101_REQUESTED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Received 101\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>upgr101</name></name> <operator>=</operator> <name>UPGR101_RECEIVED</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>headerline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_http2_switched</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>*</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>nread</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default>


<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>headerline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>chunk</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>close</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>==</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>CURLPROTO_RTSP</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>!=</operator> <name>HTTPREQ_HEAD</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"no chunk, no close, no size. Assume close to "</literal>
<literal type="string">"signal end\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>streamclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"HTTP: No end-of-message indicator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>close</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>httpcode</name></name> <operator>==</operator> <literal type="number">401</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>http_ntlm_state</name></name> <operator>==</operator> <name>NTLMSTATE_TYPE2</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>httpcode</name></name> <operator>==</operator> <literal type="number">407</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_ntlm_state</name></name> <operator>==</operator> <name>NTLMSTATE_TYPE2</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Connection closure while negotiating auth (HTTP 1.0?)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproblem</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SPNEGO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>close</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>httpcode</name></name> <operator>==</operator> <literal type="number">401</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>http_negotiate_state</name></name> <operator>==</operator> <name>GSS_AUTHRECV</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>httpcode</name></name> <operator>==</operator> <literal type="number">407</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_negotiate_state</name></name> <operator>==</operator> <name>GSS_AUTHRECV</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Connection closure while negotiating auth (HTTP 1.0?)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproblem</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>http_negotiate_state</name></name> <operator>==</operator> <name>GSS_AUTHDONE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>httpcode</name></name> <operator>!=</operator> <literal type="number">401</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>http_negotiate_state</name></name> <operator>=</operator> <name>GSS_AUTHSUCC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_negotiate_state</name></name> <operator>==</operator> <name>GSS_AUTHDONE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>httpcode</name></name> <operator>!=</operator> <literal type="number">407</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>proxy_negotiate_state</name></name> <operator>=</operator> <name>GSS_AUTHSUCC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if<condition>(<expr><call><name>http_should_fail</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"The requested URL returned error: %d"</literal></expr></argument>,
<argument><expr><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_HTTP_RETURNED_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>writetype</name> <operator>=</operator> <name>CLIENTWRITE_HEADER</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>include_header</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>writetype</name> <operator>|=</operator> <name>CLIENTWRITE_BODY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>headerlen</name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>p</name></name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>writetype</name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name></expr></argument>,
<argument><expr><name>headerlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>header_size</name></name> <operator>+=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>headerlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>headerbytecount</name></name> <operator>+=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>headerlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>deductheadercount</name></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><literal type="number">100</literal> <operator>&lt;=</operator> <name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name> <operator>&amp;&amp;</operator> <literal type="number">199</literal> <operator>&gt;=</operator> <name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name><operator>)</operator></expr>?</condition><then><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>headerbytecount</name></name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_http_auth_act</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name> <operator>&gt;=</operator> <literal type="number">300</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>authneg</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>close</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>rewindaftersend</name></name></expr>)</condition> <block>{<block_content>













<switch>switch<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HTTPREQ_PUT</name></expr>:</case>
<case>case <expr><name>HTTPREQ_POST</name></expr>:</case>
<case>case <expr><name>HTTPREQ_POST_FORM</name></expr>:</case>
<case>case <expr><name>HTTPREQ_POST_MIME</name></expr>:</case>




<expr_stmt><expr><call><name>Curl_expire_done</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>EXPIRE_100_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>upload_done</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name> <operator>==</operator> <literal type="number">417</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>expect100header</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Got 417 while waiting for a 100\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>disableexpect</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_done_sending</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_keep_sending_on_error</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"HTTP error before end of send, keep sending\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>exp100</name></name> <operator>&gt;</operator> <name>EXP100_SEND_DATA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>exp100</name></name> <operator>=</operator> <name>EXP100_SEND_DATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>|=</operator> <name>KEEP_SEND</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"HTTP error before end of send, stop sending\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>streamclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Stop sending data before everything sent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_done_sending</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>upload_done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>expect100header</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>exp100</name></name> <operator>=</operator> <name>EXP100_FAILED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default> 
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>rewindaftersend</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Keep sending data to get tossed away!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>|=</operator> <name>KEEP_SEND</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>header</name></name></expr>)</condition> <block>{<block_content>






<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>stop_reading</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_RTSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>CURLPROTO_RTSP</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>rtspreq</name></name> <operator>==</operator> <name>RTSPREQ_DESCRIBE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>




<expr_stmt><expr><operator>*</operator><name>stop_reading</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <block>{<block_content>













<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>chunk</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>maxdownload</name></name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <name><name>k</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>maxdownload</name></name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>k</name><operator>-&gt;</operator><name>maxdownload</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>PROTO_FAMILY_HTTP</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>==</operator> <literal type="number">20</literal><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>stop_reading</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>stop_reading</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;=</operator> <operator>~</operator><name>KEEP_RECV</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_HEADER_IN</name></expr></argument>,
<argument><expr><name><name>k</name><operator>-&gt;</operator><name>str_start</name></name></expr></argument>, <argument><expr><name>headerlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break> 
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>hbufp</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>hbuflen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>headerline</name></name><operator>++</operator></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>httpversion_major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtspversion_major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER1</name></cpp:macro> <cpp:value>scratch</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRATCHSIZE</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>scratch</name><index>[<expr><name>SCRATCHSIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 





<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>SCRATCHSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scratch</name><index>[<expr><name>SCRATCHSIZE</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>Curl_convert_from_network</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>SCRATCHSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER1</name></cpp:macro> <cpp:value>k-&gt;p</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>PROTO_FAMILY_HTTP</name></expr>)</condition> <block>{<block_content>







<decl_stmt><decl><type><name>char</name></type> <name>separator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>twoorthree</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>HEADER1</name></expr></argument>,
<argument><expr><literal type="string">" HTTP/%1d.%1d%c%3d"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>httpversion_major</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>separator</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>httpversion_major</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<literal type="number">2</literal> <operator>==</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>HEADER1</name></expr></argument>, <argument><expr><literal type="string">" HTTP/%1[23] %d"</literal></expr></argument>, <argument><expr><name>twoorthree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>separator</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>nc</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="char">' '</literal> <operator>==</operator> <name>separator</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>+=</operator> <literal type="number">10</literal> <operator>*</operator> <name>httpversion_major</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>upgr101</name></name> <operator>==</operator> <name>UPGR101_RECEIVED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>!=</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Lying server, not serving HTTP/2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bundle</name><operator>-&gt;</operator><name>multiuse</name></name> <operator>=</operator> <name>BUNDLE_NO_MULTIUSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Mark bundle as not supporting multiuse\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name>nc</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>HEADER1</name></expr></argument>, <argument><expr><literal type="string">" HTTP %3d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>




<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>checkhttpprefix</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>hbuflen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STATUS_DONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unsupported HTTP version in response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>CURLPROTO_RTSP</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>separator</name></decl>;</decl_stmt>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>HEADER1</name></expr></argument>,
<argument><expr><literal type="string">" RTSP/%1d.%1d%c%3d"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rtspversion_major</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>rtspversion</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>separator</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>nc</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="char">' '</literal> <operator>==</operator> <name>separator</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>rtspversion</name></name> <operator>+=</operator> <literal type="number">10</literal> <operator>*</operator> <name>rtspversion_major</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>httpcode</name></name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>httpversion</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>httpversion</name></name> <operator>||</operator>
<name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>httpversion</name></name> <operator>&gt;</operator> <name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>httpversion</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>









<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>==</operator> <name>HTTPREQ_GET</name> <operator>&amp;&amp;</operator>
<name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name> <operator>==</operator> <literal type="number">416</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>ignorebody</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_fail_on_error</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name> <operator>&gt;=</operator> <literal type="number">400</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name> <operator>!=</operator> <literal type="number">401</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name> <operator>!=</operator> <literal type="number">407</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_user_passwd</name></name><operator>)</operator></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_http_error</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_HTTP_RETURNED_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"HTTP 1.0, assume close after body\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"HTTP/1.0 close after body"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>==</operator> <literal type="number">20</literal> <operator>||</operator>
<operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>upgr101</name></name> <operator>==</operator> <name>UPGR101_REQUESTED</name> <operator>&amp;&amp;</operator> <name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name> <operator>==</operator> <literal type="number">101</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"HTTP/2 found, allow multiplexing\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bundle</name><operator>-&gt;</operator><name>multiuse</name></name> <operator>=</operator> <name>BUNDLE_MULTIPLEX</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>&gt;=</operator> <literal type="number">11</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>close</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"HTTP 1.1 or later with persistent connection\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>http_bodyless</name></name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name> <operator>&gt;=</operator> <literal type="number">100</literal> <operator>&amp;&amp;</operator> <name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name> <operator>&lt;</operator> <literal type="number">200</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">304</literal></expr>:</case>




<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timecondition</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>timecond</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<case>case <expr><literal type="number">204</literal></expr>:</case>





<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>maxdownload</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>http_bodyless</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_convert_from_network</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>http_bodyless</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ignorecl</name></name> <operator>&amp;&amp;</operator> <call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Content-Length:"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>contentlength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLofft</name></type> <name>offt</name> <init>= <expr><call><name>curlx_strtoofft</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>contentlength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>offt</name> <operator>==</operator> <name>CURL_OFFT_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>max_filesize</name></name> <operator>&amp;&amp;</operator>
<name>contentlength</name> <operator>&gt;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>max_filesize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Maximum file size exceeded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_FILESIZE_EXCEEDED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>contentlength</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>maxdownload</name></name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>offt</name> <operator>==</operator> <name>CURL_OFFT_FLOW</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>max_filesize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Maximum file size exceeded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_FILESIZE_EXCEEDED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>streamclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"overflow content-length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Overflow Content-Length: value!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Invalid Content-Length: value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_WEIRD_SERVER_REPLY</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Content-Type:"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>contenttype</name> <init>= <expr><call><name>Curl_copy_header_value</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>contenttype</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>contenttype</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>contenttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>contenttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>contenttype</name></name> <operator>=</operator> <name>contenttype</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>==</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>&amp;&amp;</operator>
<call><name>Curl_compareheader</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>,
<argument><expr><literal type="string">"Proxy-Connection:"</literal></expr></argument>, <argument><expr><literal type="string">"keep-alive"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>connkeep</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Proxy-Connection keep-alive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"HTTP/1.0 proxy connection set to keep alive!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>==</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>&amp;&amp;</operator>
<call><name>Curl_compareheader</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>,
<argument><expr><literal type="string">"Proxy-Connection:"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Proxy-Connection: asked to close after done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"HTTP/1.1 proxy connection set close!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>==</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>Curl_compareheader</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="string">"Connection:"</literal></expr></argument>, <argument><expr><literal type="string">"keep-alive"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>connkeep</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Connection keep-alive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"HTTP/1.0 connection set to keep alive!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>Curl_compareheader</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="string">"Connection:"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>streamclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Connection: close used"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>http_bodyless</name></name> <operator>&amp;&amp;</operator> <call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Transfer-Encoding:"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>











<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_build_unencoding_stack</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">18</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>http_bodyless</name></name> <operator>&amp;&amp;</operator> <call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Content-Encoding:"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_ENCODING</name></expr>]</index></name></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_build_unencoding_stack</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">17</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Retry-After:"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>retry_after</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>time_t</name></type> <name>date</name> <init>= <expr><call><name>Curl_getdate_capped</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>k</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>date</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>curlx_strtoofft</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>k</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>retry_after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>retry_after</name> <operator>=</operator> <name>date</name> <operator>-</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>retry_after</name></name> <operator>=</operator> <name>retry_after</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>http_bodyless</name></name> <operator>&amp;&amp;</operator> <call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Content-Range:"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>











<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>


<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>


<if_stmt><if>if<condition>(<expr><call><name>ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>curlx_strtoofft</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>k</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>==</operator> <name><name>k</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>content_range</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_COOKIES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>cookie_engine</name></name> <operator>&amp;&amp;</operator>
<call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Set-Cookie:"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_COOKIE</name></expr></argument>,
<argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_cookie_add</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">11</literal></expr></argument>,


<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>cookiehost</name></name></expr>?</condition><then>
<expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>cookiehost</name></name></expr></then><else>:<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>path</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name><operator>&amp;</operator><name>CURLPROTO_HTTPS</name><operator>)</operator></expr>?</condition><then>
<expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_COOKIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>http_bodyless</name></name> <operator>&amp;&amp;</operator> <call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Last-Modified:"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timecondition</name></name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>get_filetime</name></name><operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>timeofdoc</name></name> <operator>=</operator> <call><name>Curl_getdate_capped</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"Last-Modified:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>get_filetime</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>filetime</name></name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>timeofdoc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>(</operator><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"WWW-Authenticate:"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><literal type="number">401</literal> <operator>==</operator> <name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Proxy-authenticate:"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><literal type="number">407</literal> <operator>==</operator> <name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>proxy</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name> <operator>==</operator> <literal type="number">407</literal><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>auth</name> <init>= <expr><call><name>Curl_copy_header_value</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>auth</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_http_input_auth</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SPNEGO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Persistent-Auth"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>negotiatedata</name></name> <modifier>*</modifier></type><name>negdata</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>negotiate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>auth</name></name> <modifier>*</modifier></type><name>authp</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>authp</name><operator>-&gt;</operator><name>picked</name></name> <operator>==</operator> <name>CURLAUTH_NEGOTIATE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>persistentauth</name> <init>= <expr><call><name>Curl_copy_header_value</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>persistentauth</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>negdata</name><operator>-&gt;</operator><name>noauthpersist</name></name> <operator>=</operator> <ternary><condition><expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><name>persistentauth</name></expr></argument>)</argument_list></call></expr>?</condition><then>
<expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>negdata</name><operator>-&gt;</operator><name>havenoauthpersist</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Negotiate: noauthpersist -&gt; %d, header part: %s"</literal></expr></argument>,
<argument><expr><name><name>negdata</name><operator>-&gt;</operator><name>noauthpersist</name></name></expr></argument>, <argument><expr><name>persistentauth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>persistentauth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name> <operator>&gt;=</operator> <literal type="number">300</literal> <operator>&amp;&amp;</operator> <name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name> <operator>&lt;</operator> <literal type="number">400</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Location:"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>location</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>location</name> <init>= <expr><call><name>Curl_copy_header_value</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>location</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>location</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_follow_location</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>http_perhapsrewind</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ALTSVC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>asi</name></name> <operator>&amp;&amp;</operator> <call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Alt-Svc:"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_SSL</name><operator>)</operator> <operator>||</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"CURL_ALTSVC_HTTP"</literal></expr></argument>)</argument_list></call>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>alpnid</name></name></type> <name>id</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>==</operator> <literal type="number">20</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ALPN_h2</name></expr> </then><else>: <expr><name>ALPN_h1</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_altsvc_parse</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>asi</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>k</name><operator>-&gt;</operator><name>p</name><index>[ <expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"Alt-Svc:"</literal></expr></argument>)</argument_list></call></expr> ]</index></name></expr></argument>,
<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>,
<argument><expr><call><name>curlx_uitous</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>CURLPROTO_RTSP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_rtsp_parseheader</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>writetype</name> <operator>=</operator> <name>CLIENTWRITE_HEADER</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>include_header</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>writetype</name> <operator>|=</operator> <name>CLIENTWRITE_BODY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_HEADER_IN</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>k</name><operator>-&gt;</operator><name>hbuflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>writetype</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>hbuflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>header_size</name></name> <operator>+=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>k</name><operator>-&gt;</operator><name>hbuflen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>headerbytecount</name></name> <operator>+=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>k</name><operator>-&gt;</operator><name>hbuflen</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>hbufp</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>hbuflen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block>
while<condition>(<expr><operator>*</operator><name><name>k</name><operator>-&gt;</operator><name>str</name></name></expr>)</condition>;</do> 





<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
