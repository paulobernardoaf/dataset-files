<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\http.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEADER_CURL_HTTP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_CURL_HTTP_H</name></cpp:macro></cpp:define>





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nghttp2/nghttp2.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_http</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_https</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><name>bool</name></type> <name>Curl_compareheader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>headerline</name></decl></parameter>, 
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, 
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>Curl_copy_header_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>Curl_checkProxyheaders</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>thisheader</name></decl></parameter>)</parameter_list>;</function_decl>






<struct>struct <name>Curl_send_buffer</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size_used</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>Curl_send_buffer</name></name></type> <name>Curl_send_buffer</name>;</typedef>

<function_decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>Curl_add_buffer_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Curl_add_buffer_free</name><parameter_list>(<parameter><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>inp</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>Curl_add_bufferf</name><argument_list>(<argument><expr><name>Curl_send_buffer</name> <operator>*</operator><operator>*</operator><name>inp</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list>
<name>WARN_UNUSED_RESULT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>Curl_add_buffer</name><argument_list>(<argument><expr><name>Curl_send_buffer</name> <operator>*</operator><operator>*</operator><name>inp</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>inptr</name></expr></argument>,
<argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list> <name>WARN_UNUSED_RESULT</name></decl>;</decl_stmt>
<function_decl><type><name>CURLcode</name></type> <name>Curl_add_buffer_send</name><parameter_list>(<parameter><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>inp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>curl_off_t</name> <modifier>*</modifier></type><name>bytes_written</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>included_body_bytes</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>socketindex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>CURLcode</name></type> <name>Curl_add_timecondition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURLcode</name></type> <name>Curl_add_custom_headers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>is_connect</name></decl></parameter>,
<parameter><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>req_buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURLcode</name></type> <name>Curl_http_compile_trailers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>trailers</name></decl></parameter>,
<parameter><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>CURLcode</name></type> <name>Curl_http</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURLcode</name></type> <name>Curl_http_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURLcode</name></type> <name>Curl_http_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>CURLcode</name></type> <name>Curl_http_input_auth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>proxy</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>auth</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURLcode</name></type> <name>Curl_http_auth_act</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURLAUTH_PICKNONE</name></cpp:macro> <cpp:value>(1&lt;&lt;30)</cpp:value></cpp:define> 













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAX_INITIAL_POST_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INITIAL_POST_SIZE</name></cpp:macro> <cpp:value>(64*1024)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EXPECT_100_THRESHOLD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT_100_THRESHOLD</name></cpp:macro> <cpp:value>(1024*1024)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct_decl>struct <name>h3out</name>;</struct_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<struct>struct <name>HTTP</name> <block>{
<decl_stmt><decl><type><name>curl_mimepart</name> <modifier>*</modifier></type><name>sendit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>postsize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>postdata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_pragma</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_accept</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>curl_mimepart</name></type> <name>form</name></decl>;</decl_stmt>

<struct>struct <name>back</name> <block>{
<decl_stmt><decl><type><name>curl_read_callback</name></type> <name>fread_func</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>fread_in</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>postdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>postsize</name></decl>;</decl_stmt>
}</block> <decl><name>backup</name></decl>;</struct>

<enum>enum <block>{
<decl><name>HTTPSEND_NADA</name></decl>, 
<decl><name>HTTPSEND_REQUEST</name></decl>, 
<decl><name>HTTPSEND_BODY</name></decl>, 
<decl><name>HTTPSEND_LAST</name></decl> 
}</block> <decl><name>sending</name></decl>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>send_buffer</name></decl>;</decl_stmt> 


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int32_t</name></type> <name>stream_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>bodystarted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>header_recvbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nread_header_recvbuf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>trailer_recvbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status_code</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pausedata</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>pauselen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>close_handled</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>push_headers</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>push_headers_used</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>push_headers_alloc</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>closed</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mem</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>memlen</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_QUIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>upload_mem</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>upload_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>upload_left</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_QUIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int64_t</name></type> <name>stream3_id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>firstheader</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>firstbody</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>h3req</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>upload_done</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>unacked_window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>h3out</name></name> <modifier>*</modifier></type><name>h3out</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>overflow_buf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>overflow_buflen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>overflow_bufsize</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<struct>struct <name>h2settings</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>max_concurrent_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>enable_push</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>http_conn</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_BINSETTINGS_LEN</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<decl_stmt><decl><type><name>nghttp2_session</name> <modifier>*</modifier></type><name>h2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>binsettings</name><index>[<expr><name>H2_BINSETTINGS_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>binlen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Curl_send</name> <modifier>*</modifier></type><name>send_underlying</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Curl_recv</name> <modifier>*</modifier></type><name>recv_underlying</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>inbuf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>inbuflen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>nread_inbuf</name></decl>;</decl_stmt> 





<decl_stmt><decl><type><name>int32_t</name></type> <name>pause_stream_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>drain_total</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name><name>struct</name> <name>h2settings</name></name></type> <name>settings</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>nghttp2_settings_entry</name></type> <name><name>local_settings</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>local_settings_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>error_code</name></decl>;</decl_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>unused</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<function_decl><type><name>CURLcode</name></type> <name>Curl_http_readwrite_headers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>nread</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>stop_reading</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>CURLcode</name></type>
<name>Curl_http_output_auth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>request</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>proxytunnel</name></decl></parameter>)</parameter_list>;</function_decl> 


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
