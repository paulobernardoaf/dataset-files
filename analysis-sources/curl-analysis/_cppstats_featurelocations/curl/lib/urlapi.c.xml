<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\urlapi.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urlapi-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dotdot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"escape.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_ctype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_pton.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STARTS_WITH_DRIVE_PREFIX</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((('a' &lt;= str[0] &amp;&amp; str[0] &lt;= 'z') || ('A' &lt;= str[0] &amp;&amp; str[0] &lt;= 'Z')) &amp;&amp; (str[1] == ':'))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STARTS_WITH_URL_DRIVE_PREFIX</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((('a' &lt;= (str)[0] &amp;&amp; (str)[0] &lt;= 'z') || ('A' &lt;= (str)[0] &amp;&amp; (str)[0] &lt;= 'Z')) &amp;&amp; ((str)[1] == ':' || (str)[1] == '|') &amp;&amp; ((str)[2] == '/' || (str)[2] == '\\' || (str)[2] == 0))</cpp:value></cpp:define>






<struct>struct <name>Curl_URL</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scheme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>password</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zoneid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fragment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scratch</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temppath</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>portnum</name></decl>;</decl_stmt> 
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SCHEME</name></cpp:macro> <cpp:value>"https"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_urlhandle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_URL</name></name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>scheme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>zoneid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>fragment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>scratch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>temppath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>mv_urlhandle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_URL</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_URL</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free_urlhandle</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <operator>*</operator><name>from</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>find_host_sep</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>


<expr_stmt><expr><name>sep</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"//"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>sep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <name>url</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sep</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>sep</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>sep</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>sep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <name>url</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>query</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>query</name> <operator>=</operator> <name>url</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>sep</name> <operator>&lt;</operator> <name>query</name></expr> ?</condition><then> <expr><name>sep</name></expr> </then><else>: <expr><name>query</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>bool</name></type> <name>urlchar_needs_escaping</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><operator>(</operator><call><name>ISCNTRL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ISGRAPH</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>size_t</name></type> <name>strlen_url</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>relative</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>newlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>left</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>host_sep</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>url</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>relative</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>host_sep</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>find_host_sep</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>url</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>ptr</name> <operator>&lt;</operator> <name>host_sep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>newlen</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<expr_stmt><expr><name>left</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<default>default:</default>
<if_stmt><if>if<condition>(<expr><call><name>urlchar_needs_escaping</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newlen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>newlen</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>left</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newlen</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>newlen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><name>newlen</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>strcpy_url</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>relative</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>left</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>optr</name> <init>= <expr><name>output</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>host_sep</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>url</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>relative</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>host_sep</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>find_host_sep</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>iptr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>url</name></expr>;</init> 
<condition><expr><operator>*</operator><name>iptr</name></expr>;</condition> 
<incr><expr><name>iptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>iptr</name> <operator>&lt;</operator> <name>host_sep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>optr</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>iptr</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><operator>*</operator><name>iptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<expr_stmt><expr><name>left</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<default>default:</default>
<if_stmt><if>if<condition>(<expr><call><name>urlchar_needs_escaping</name><argument_list>(<argument><expr><operator>*</operator><name>iptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>optr</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"%%%02x"</literal></expr></argument>, <argument><expr><operator>*</operator><name>iptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optr</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>optr</name><operator>++</operator><operator>=</operator><operator>*</operator><name>iptr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>optr</name><operator>++</operator><operator>=</operator><literal type="char">'%'</literal></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>optr</name><operator>++</operator><operator>=</operator><literal type="char">'2'</literal></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>optr</name><operator>++</operator><operator>=</operator><literal type="char">'0'</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>optr</name><operator>++</operator><operator>=</operator><literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>optr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></function>






<function><type><name>bool</name></type> <name>Curl_is_absolute_url</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>STARTS_WITH_DRIVE_PREFIX</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buflen</name> <operator>&amp;&amp;</operator> <name><name>url</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>s</name> <init>= <expr><name><name>url</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>s</name> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>url</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if>



<if type="elseif">else if<condition>(<expr><call><name>ISALNUM</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>s</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>s</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr> )</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>TOLOWER</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>concat_url</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relurl</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>protsep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pathsep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>newlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>host_changed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>useurl</name> <init>= <expr><name>relurl</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>urllen</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url_clone</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>url_clone</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 


<expr_stmt><expr><name>protsep</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>url_clone</name></expr></argument>, <argument><expr><literal type="string">"//"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>protsep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>protsep</name> <operator>=</operator> <name>url_clone</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>protsep</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if<condition>(<expr><literal type="char">'/'</literal> <operator>!=</operator> <name><name>relurl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>pathsep</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>protsep</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>pathsep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pathsep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if<condition>(<expr><name><name>useurl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pathsep</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>protsep</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>pathsep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pathsep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>pathsep</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>protsep</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>pathsep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>protsep</name> <operator>=</operator> <name>pathsep</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>protsep</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>




<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>useurl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>useurl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>useurl</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<while>while<condition>(<expr><operator>(</operator><name><name>useurl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>useurl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>useurl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>useurl</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt> 
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>protsep</name></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><name>level</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pathsep</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>protsep</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>pathsep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pathsep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>protsep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>


<if_stmt><if>if<condition>(<expr><name><name>relurl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><operator>*</operator><name>protsep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>useurl</name> <operator>=</operator> <operator>&amp;</operator><name><name>relurl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>host_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>


<expr_stmt><expr><name>pathsep</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>protsep</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>pathsep</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>protsep</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>sep</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>sep</name> <operator>&lt;</operator> <name>pathsep</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pathsep</name> <operator>=</operator> <name>sep</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pathsep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>




<expr_stmt><expr><name>pathsep</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>protsep</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>pathsep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pathsep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>






<expr_stmt><expr><name>newlen</name> <operator>=</operator> <call><name>strlen_url</name><argument_list>(<argument><expr><name>useurl</name></expr></argument>, <argument><expr><operator>!</operator><name>host_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>urllen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>url_clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newest</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>urllen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> 
<name>newlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newest</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>url_clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newest</name></expr></argument>, <argument><expr><name>url_clone</name></expr></argument>, <argument><expr><name>urllen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="char">'/'</literal> <operator>==</operator> <name><name>useurl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>protsep</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>protsep</name><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="char">'?'</literal> <operator>==</operator> <name><name>useurl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>newest</name><index>[<expr><name>urllen</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>strcpy_url</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newest</name><index>[<expr><name>urllen</name></expr>]</index></name></expr></argument>, <argument><expr><name>useurl</name></expr></argument>, <argument><expr><operator>!</operator><name>host_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>url_clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>newest</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLUcode</name></type> <name>parse_hostname_login</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_URL</name></name> <modifier>*</modifier></type><name>u</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hostname</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLUcode</name></type> <name>result</name> <init>= <expr><name>CURLUE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>ccode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>userp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>passwdp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>optionsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>








<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><operator>*</operator><name>hostname</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>login</name> <init>= <expr><operator>*</operator><name>hostname</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>




<expr_stmt><expr><operator>*</operator><name>hostname</name> <operator>=</operator> <operator>++</operator><name>ptr</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>u</name><operator>-&gt;</operator><name>scheme</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>Curl_builtin_scheme</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>scheme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>ccode</name> <operator>=</operator> <call><name>Curl_parse_login_details</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <name>login</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>userp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>passwdp</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>h</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_URLOPTIONS</name><operator>)</operator><operator>)</operator></expr> ?</condition><then>
<expr><operator>&amp;</operator><name>optionsp</name></expr></then><else>:<expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ccode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLUE_MALFORMED_INPUT</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>userp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CURLU_DISALLOW_USER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLUE_USER_NOT_ALLOWED</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>userp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>passwdp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>password</name></name> <operator>=</operator> <name>passwdp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>optionsp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>optionsp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CURLUE_OK</name></expr>;</return>
<label><name>out</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>userp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>passwdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>optionsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>UNITTEST</name> <name>CURLUcode</name></type> <name>Curl_parse_port</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_URL</name></name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>portptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>endbracket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>





<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>==</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="string">"[%*45[0123456789abcdefABCDEF:.]%c%n"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>endbracket</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="char">']'</literal> <operator>==</operator> <name>endbracket</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>portptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>hostname</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><literal type="char">'%'</literal> <operator>==</operator> <name>endbracket</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>zonelen</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>==</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>hostname</name> <operator>+</operator> <name>zonelen</name></expr></argument>, <argument><expr><literal type="string">"%*[^]]%c%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>endbracket</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="char">']'</literal> <operator>!=</operator> <name>endbracket</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>portptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>hostname</name><index>[<expr><operator>--</operator><name>zonelen</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><name>portptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>portptr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>portptr</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>portptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>portptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>portptr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>portbuf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>




<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>portptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>portptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>CURLUE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>portptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_BAD_PORT_NUMBER</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>portptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rest</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>port</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>port</name> <operator>&gt;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>


<return>return <expr><name>CURLUE_BAD_PORT_NUMBER</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_BAD_PORT_NUMBER</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>portptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>rest</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>portbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>portnum</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>portbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>u</name><operator>-&gt;</operator><name>port</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLUE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLUcode</name></type> <name>junkscan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>part</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>part</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>badbytes</name><index>[]</index></name><init>=<expr><block>{
<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x1f</literal></expr>,
<expr><literal type="number">0x7f</literal></expr>,
<expr><literal type="number">0x00</literal></expr> 
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nfine</name> <init>= <expr><call><name>strcspn</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>badbytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>nfine</name> <operator>!=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>


<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CURLUE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLUcode</name></type> <name>hostname_check</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_URL</name></name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>hostname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>dest</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><literal type="string">"0123456789abcdefABCDEF:."</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>hlen</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hostname</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>hlen</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>hostname</name><index>[<expr><name>hlen</name></expr>]</index></name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>hlen</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hlen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>hostname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>zoneid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>&amp;</operator><name><name>hostname</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="string">"25"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>h</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>h</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">']'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while<condition>(<expr><operator>*</operator><name>h</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>h</name> <operator>!=</operator> <literal type="char">']'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>zoneid</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>h</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>i</name> <operator>||</operator> <operator>(</operator><literal type="char">']'</literal> <operator>!=</operator> <operator>*</operator><name>h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zoneid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>zoneid</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>zoneid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>u</name><operator>-&gt;</operator><name>zoneid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hostname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hostname</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>hostname</name><index>[<expr><name>hlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hostname</name><index>[<expr><name>hlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>hlen</name> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>hostname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_NO_HOST</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>CURLUE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOSTNAME_END</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) == '/') || ((x) == '?') || ((x) == '#'))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>CURLUcode</name></type> <name>seturl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>path_alloced</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fragment</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLUcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>url_has_scheme</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>schemebuf</name><index>[<expr><name>MAX_SCHEME_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schemep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>schemelen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>urllen</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>url</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>urllen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>urllen</name> <operator>&gt;</operator> <name>CURL_MAX_INPUT_LENGTH</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>u</name><operator>-&gt;</operator><name>scratch</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>urllen</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hostname</name> <operator>=</operator> <operator>&amp;</operator><name><name>path</name><index>[<expr><name>urllen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hostname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_is_absolute_url</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>schemebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>schemebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>url_has_scheme</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>schemelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>schemebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>url_has_scheme</name> <operator>&amp;&amp;</operator> <call><name>strcasecompare</name><argument_list>(<argument><expr><name>schemebuf</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>url</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>scheme</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>u</name><operator>-&gt;</operator><name>scheme</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>







<if_stmt><if>if<condition>(<expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>&amp;</operator><name><name>path</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

















<if_stmt><if>if<condition>(<expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>STARTS_WITH_URL_DRIVE_PREFIX</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"localhost/"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1/"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="char">'/'</literal> <operator>==</operator> <name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>STARTS_WITH_URL_DRIVE_PREFIX</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<call><name>STARTS_WITH_URL_DRIVE_PREFIX</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><literal type="char">'/'</literal> <operator>==</operator> <name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>STARTS_WITH_URL_DRIVE_PREFIX</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>url_has_scheme</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>url</name><index>[<expr><name>schemelen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name><operator>&gt;</operator><literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>schemep</name> <operator>=</operator> <name>schemebuf</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_builtin_scheme</name><argument_list>(<argument><expr><name>schemep</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CURLU_NON_SUPPORT_SCHEME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_UNSUPPORTED_SCHEME</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>junkscan</name><argument_list>(<argument><expr><name>schemep</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>
<else>else <block>{<block_content>


<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>CURLU_DEFAULT_SCHEME</name><operator>|</operator><name>CURLU_GUESS_SCHEME</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CURLU_DEFAULT_SCHEME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>schemep</name> <operator>=</operator> <name>DEFAULT_SCHEME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><name>p</name> <operator>=</operator> <name>url</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>hostp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt> 

<while>while<condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HOSTNAME_END</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>hostp</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>hostp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hostname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CURLU_NO_AUTHORITY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>path</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>schemep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>scheme</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>schemep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>u</name><operator>-&gt;</operator><name>scheme</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>junkscan</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CURLU_URLENCODE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newp</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>path_alloced</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy_url</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>temppath</name></name> <operator>=</operator> <name>path</name> <operator>=</operator> <name>newp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fragment</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>fragment</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>fragment</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>fragment</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>fragment</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>u</name><operator>-&gt;</operator><name>fragment</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>query</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>u</name><operator>-&gt;</operator><name>query</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CURLU_PATH_AS_IS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newp</name> <init>= <expr><call><name>Curl_dedotdotify</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>path_alloced</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>temppath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>temppath</name></name> <operator>=</operator> <name>path</name> <operator>=</operator> <name>newp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>path_alloced</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>newp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <ternary><condition><expr><name>path_alloced</name></expr>?</condition><then><expr><name>path</name></expr></then><else>:<expr><call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>u</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>temppath</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>hostname</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if<condition>(<expr><call><name>junkscan</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_hostname_login</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hostname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_parse_port</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CURLU_NO_AUTHORITY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>hostname_check</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>u</name><operator>-&gt;</operator><name>host</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CURLU_GUESS_SCHEME</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>schemep</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"ftp."</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>schemep</name> <operator>=</operator> <literal type="string">"ftp"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"dict."</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>schemep</name> <operator>=</operator> <literal type="string">"dict"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"ldap."</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>schemep</name> <operator>=</operator> <literal type="string">"ldap"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"imap."</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>schemep</name> <operator>=</operator> <literal type="string">"imap"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"smtp."</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>schemep</name> <operator>=</operator> <literal type="string">"smtp"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"pop3."</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>schemep</name> <operator>=</operator> <literal type="string">"pop3"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>schemep</name> <operator>=</operator> <literal type="string">"http"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>scheme</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>schemep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>u</name><operator>-&gt;</operator><name>scheme</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>scratch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>temppath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLUE_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>CURLUcode</name></type> <name>parseurl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLUcode</name></type> <name>result</name> <init>= <expr><call><name>seturl</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_urlhandle</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Curl_URL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>CURLU</name> <modifier>*</modifier></type><name>curl_url</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Curl_URL</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>curl_url_cleanup</name><parameter_list>(<parameter><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>u</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_urlhandle</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUP</name><parameter_list>(<parameter><type><name>dest</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(src-&gt;name) { dest-&gt;name = strdup(src-&gt;name); if(!dest-&gt;name) goto fail; }</cpp:value></cpp:define>






<function><type><name>CURLU</name> <modifier>*</modifier></type><name>curl_url_dup</name><parameter_list>(<parameter><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_URL</name></name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Curl_URL</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>u</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DUP</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUP</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUP</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUP</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUP</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUP</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUP</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUP</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUP</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>portnum</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>portnum</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>u</name></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CURLUcode</name></type> <name>curl_url_get</name><parameter_list>(<parameter><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name>CURLUPart</name></type> <name>what</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>part</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLUcode</name></type> <name>ifmissing</name> <init>= <expr><name>CURLUE_UNKNOWN_PART</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>portbuf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>urldecode</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CURLU_URLDECODE</name><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>plusdecode</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>u</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_BAD_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>part</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_BAD_PARTPOINTER</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>part</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>what</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLUPART_SCHEME</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>u</name><operator>-&gt;</operator><name>scheme</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ifmissing</name> <operator>=</operator> <name>CURLUE_NO_SCHEME</name></expr>;</expr_stmt>
<expr_stmt><expr><name>urldecode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>CURLUPART_USER</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>u</name><operator>-&gt;</operator><name>user</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ifmissing</name> <operator>=</operator> <name>CURLUE_NO_USER</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_PASSWORD</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>u</name><operator>-&gt;</operator><name>password</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ifmissing</name> <operator>=</operator> <name>CURLUE_NO_PASSWORD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_OPTIONS</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>u</name><operator>-&gt;</operator><name>options</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ifmissing</name> <operator>=</operator> <name>CURLUE_NO_OPTIONS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_HOST</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>u</name><operator>-&gt;</operator><name>host</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ifmissing</name> <operator>=</operator> <name>CURLUE_NO_HOST</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_ZONEID</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>u</name><operator>-&gt;</operator><name>zoneid</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_PORT</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>u</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ifmissing</name> <operator>=</operator> <name>CURLUE_NO_PORT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>urldecode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CURLU_DEFAULT_PORT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>u</name><operator>-&gt;</operator><name>scheme</name></name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name> <modifier>*</modifier></type><name>h</name> <init>=
<expr><call><name>Curl_builtin_scheme</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>scheme</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>portbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>defport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>portbuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <name><name>u</name><operator>-&gt;</operator><name>scheme</name></name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name> <modifier>*</modifier></type><name>h</name> <init>=
<expr><call><name>Curl_builtin_scheme</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>scheme</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>h</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>defport</name></name> <operator>==</operator> <name><name>u</name><operator>-&gt;</operator><name>portnum</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CURLU_NO_DEFAULT_PORT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_PATH</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>u</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>u</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>u</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_QUERY</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>u</name><operator>-&gt;</operator><name>query</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ifmissing</name> <operator>=</operator> <name>CURLUE_NO_QUERY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>plusdecode</name> <operator>=</operator> <name>urldecode</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_FRAGMENT</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>u</name><operator>-&gt;</operator><name>fragment</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ifmissing</name> <operator>=</operator> <name>CURLUE_NO_FRAGMENT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_URL</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scheme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>u</name><operator>-&gt;</operator><name>options</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name> <init>= <expr><name><name>u</name><operator>-&gt;</operator><name>port</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>allochost</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>u</name><operator>-&gt;</operator><name>scheme</name></name> <operator>&amp;&amp;</operator> <call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>scheme</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>url</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"file://%s%s%s"</literal></expr></argument>,
<argument><expr><name><name>u</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>u</name><operator>-&gt;</operator><name>fragment</name></name></expr>?</condition><then> <expr><literal type="string">"#"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>u</name><operator>-&gt;</operator><name>fragment</name></name></expr>?</condition><then> <expr><name><name>u</name><operator>-&gt;</operator><name>fragment</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>u</name><operator>-&gt;</operator><name>host</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_NO_HOST</name></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>u</name><operator>-&gt;</operator><name>scheme</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scheme</name> <operator>=</operator> <name><name>u</name><operator>-&gt;</operator><name>scheme</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CURLU_DEFAULT_SCHEME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scheme</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>DEFAULT_SCHEME</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_NO_SCHEME</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>Curl_builtin_scheme</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>port</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CURLU_DEFAULT_PORT</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>portbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>defport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name>portbuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>port</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><name>h</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>defport</name></name> <operator>==</operator> <name><name>u</name><operator>-&gt;</operator><name>portnum</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CURLU_NO_DEFAULT_PORT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>h</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_URLOPTIONS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>options</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>u</name><operator>-&gt;</operator><name>host</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>u</name><operator>-&gt;</operator><name>zoneid</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>hostlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>alen</name> <init>= <expr><name>hostlen</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>zoneid</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>allochost</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>allochost</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>allochost</name></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name>hostlen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>allochost</name><index>[<expr><name>hostlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>alen</name> <operator>-</operator> <name>hostlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"%%25%s]"</literal></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>zoneid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>url</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s://%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s"</literal></expr></argument>,
<argument><expr><name>scheme</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>u</name><operator>-&gt;</operator><name>user</name></name></expr> ?</condition><then> <expr><name><name>u</name><operator>-&gt;</operator><name>user</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>u</name><operator>-&gt;</operator><name>password</name></name></expr> ?</condition><then> <expr><literal type="string">":"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>u</name><operator>-&gt;</operator><name>password</name></name></expr> ?</condition><then> <expr><name><name>u</name><operator>-&gt;</operator><name>password</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>options</name></expr> ?</condition><then> <expr><literal type="string">";"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>options</name></expr> ?</condition><then> <expr><name>options</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>u</name><operator>-&gt;</operator><name>user</name></name> <operator>||</operator> <name><name>u</name><operator>-&gt;</operator><name>password</name></name> <operator>||</operator> <name>options</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"@"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>allochost</name></expr> ?</condition><then> <expr><name>allochost</name></expr> </then><else>: <expr><name><name>u</name><operator>-&gt;</operator><name>host</name></name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>port</name></expr> ?</condition><then> <expr><literal type="string">":"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>port</name></expr> ?</condition><then> <expr><name>port</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>u</name><operator>-&gt;</operator><name>path</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>u</name><operator>-&gt;</operator><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"/"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>u</name><operator>-&gt;</operator><name>path</name></name></expr> ?</condition><then> <expr><name><name>u</name><operator>-&gt;</operator><name>path</name></name></expr> </then><else>: <expr><literal type="string">"/"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>u</name><operator>-&gt;</operator><name>query</name></name> <operator>&amp;&amp;</operator> <name><name>u</name><operator>-&gt;</operator><name>query</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"?"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>u</name><operator>-&gt;</operator><name>query</name></name> <operator>&amp;&amp;</operator> <name><name>u</name><operator>-&gt;</operator><name>query</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>u</name><operator>-&gt;</operator><name>query</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>u</name><operator>-&gt;</operator><name>fragment</name></name></expr>?</condition><then> <expr><literal type="string">"#"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>u</name><operator>-&gt;</operator><name>fragment</name></name></expr>?</condition><then> <expr><name><name>u</name><operator>-&gt;</operator><name>fragment</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>allochost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>url</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>part</name> <operator>=</operator> <name>url</name></expr>;</expr_stmt>
<return>return <expr><name>CURLUE_OK</name></expr>;</return>
</block_content>}</block>
<default>default:</default>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>part</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>part</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>plusdecode</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>plus</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>plus</name> <operator>=</operator> <operator>*</operator><name>part</name></expr>;</init> <condition><expr><operator>*</operator><name>plus</name></expr>;</condition> <incr><expr><operator>++</operator><name>plus</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>plus</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>plus</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>urldecode</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>decoded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name> <init>= <expr><call><name>Curl_urldecode</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>*</operator><name>part</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dlen</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>part</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>CURLUE_URLDECODE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>part</name> <operator>=</operator> <name>decoded</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CURLUE_OK</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>ifmissing</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>CURLUcode</name></type> <name>curl_url_set</name><parameter_list>(<parameter><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name>CURLUPart</name></type> <name>what</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>part</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>storep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>urlencode</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CURLU_URLENCODE</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>plusencode</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>urlskipslash</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>appendquery</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>equalsencode</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>u</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_BAD_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>part</name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name>what</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLUPART_URL</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>CURLUPART_SCHEME</name></expr>:</case>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>scheme</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_USER</name></expr>:</case>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>user</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_PASSWORD</name></expr>:</case>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>password</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_OPTIONS</name></expr>:</case>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>options</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_HOST</name></expr>:</case>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>host</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_ZONEID</name></expr>:</case>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>zoneid</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_PORT</name></expr>:</case>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>portnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_PATH</name></expr>:</case>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_QUERY</name></expr>:</case>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>query</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_FRAGMENT</name></expr>:</case>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>fragment</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>CURLUE_UNKNOWN_PART</name></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if<condition>(<expr><name>storep</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>storep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>storep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>storep</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CURLUE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>what</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLUPART_SCHEME</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAX_SCHEME_LEN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CURLU_NON_SUPPORT_SCHEME</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>Curl_builtin_scheme</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_UNSUPPORTED_SCHEME</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>scheme</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>urlencode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>CURLUPART_USER</name></expr>:</case>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>user</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_PASSWORD</name></expr>:</case>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>password</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_OPTIONS</name></expr>:</case>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>options</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_HOST</name></expr>:</case>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>host</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>zoneid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>zoneid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_ZONEID</name></expr>:</case>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>zoneid</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_PORT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>urlencode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>port</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>port</name> <operator>&gt;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_BAD_PORT_NUMBER</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>endp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>CURLUPART_PATH</name></expr>:</case>
<expr_stmt><expr><name>urlskipslash</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_QUERY</name></expr>:</case>
<expr_stmt><expr><name>plusencode</name> <operator>=</operator> <name>urlencode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>appendquery</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CURLU_APPENDQUERY</name><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>equalsencode</name> <operator>=</operator> <name>appendquery</name></expr>;</expr_stmt>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>query</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_FRAGMENT</name></expr>:</case>
<expr_stmt><expr><name>storep</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>fragment</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLUPART_URL</name></expr>:</case> <block>{<block_content>






<decl_stmt><decl><type><name>CURLUcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oldurl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>redired_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>handle2</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_is_absolute_url</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MAX_SCHEME_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>handle2</name> <operator>=</operator> <call><name>curl_url</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>handle2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parseurl</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>handle2</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mv_urlhandle</name><argument_list>(<argument><expr><name>handle2</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>handle2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldurl</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>handle2</name> <operator>=</operator> <call><name>curl_url</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>handle2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parseurl</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>handle2</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mv_urlhandle</name><argument_list>(<argument><expr><name>handle2</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>handle2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>redired_url</name> <operator>=</operator> <call><name>concat_url</name><argument_list>(<argument><expr><name>oldurl</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>oldurl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>redired_url</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>handle2</name> <operator>=</operator> <call><name>curl_url</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>handle2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>redired_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parseurl</name><argument_list>(<argument><expr><name>redired_url</name></expr></argument>, <argument><expr><name>handle2</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>redired_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mv_urlhandle</name><argument_list>(<argument><expr><name>handle2</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>handle2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
<default>default:</default>
<return>return <expr><name>CURLUE_UNKNOWN_PART</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>storep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newp</name> <init>= <expr><name>part</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nalloc</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>nalloc</name> <operator>&gt;</operator> <name>CURL_MAX_INPUT_LENGTH</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>urlencode</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>free_part</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>nalloc</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>plusencode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>part</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>o</name> <operator>=</operator> <name>enc</name></expr>;</init> <condition><expr><operator>*</operator><name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>o</name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>i</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><operator>*</operator><name>i</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>part</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>part</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>free_part</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>part</name></expr><operator>,</operator> <expr><name>o</name> <operator>=</operator> <name>enc</name></expr>;</init> <condition><expr><operator>*</operator><name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>Curl_isunreserved</name><argument_list>(<argument><expr><operator>*</operator><name>i</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><operator>(</operator><operator>*</operator><name>i</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>urlskipslash</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><operator>*</operator><name>i</name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>equalsencode</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><operator>*</operator><name>i</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>plusencode</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>*</operator><name>i</name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>equalsencode</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>equalsencode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <operator>*</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"%%%02x"</literal></expr></argument>, <argument><expr><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>newp</name> <operator>=</operator> <name>enc</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>free_part</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>newp</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newp</name></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'%'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>ISXDIGIT</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ISXDIGIT</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>ISUPPER</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ISUPPER</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>TOLOWER</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>TOLOWER</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>appendquery</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>size_t</name></type> <name>querylen</name> <init>= <expr><ternary><condition><expr><name><name>u</name><operator>-&gt;</operator><name>query</name></name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>addamperand</name> <init>= <expr><name>querylen</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>u</name><operator>-&gt;</operator><name>query</name><index>[<expr><name>querylen</name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&amp;'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>querylen</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>newplen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>newp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>querylen</name> <operator>+</operator> <name>addamperand</name> <operator>+</operator> <name>newplen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>u</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>addamperand</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>querylen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'&amp;'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>querylen</name> <operator>+</operator> <name>addamperand</name></expr>]</index></name></expr></argument>, <argument><expr><name>newp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>storep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>storep</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><name>CURLUE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>what</name> <operator>==</operator> <name>CURLUPART_HOST</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>newp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CURLU_NO_AUTHORITY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>hostname_check</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLUE_MALFORMED_INPUT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>storep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>storep</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newp</name></expr>;</expr_stmt>
</block_content>}</block>


<if_stmt><if>if<condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>portnum</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>CURLUE_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
