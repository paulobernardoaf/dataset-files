<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\multihandle.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEADER_CURL_MULTIHANDLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_CURL_MULTIHANDLE_H</name></cpp:macro></cpp:define>






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conncache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"socketpair.h"</cpp:file></cpp:include>

<struct>struct <name>Curl_message</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name></type> <name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>CURLMsg</name></name></type> <name>extmsg</name></decl>;</decl_stmt>
}</block>;</struct>




<typedef>typedef <type><enum>enum <block>{
<decl><name>CURLM_STATE_INIT</name></decl>, 
<decl><name>CURLM_STATE_CONNECT_PEND</name></decl>, 
<decl><name>CURLM_STATE_CONNECT</name></decl>, 
<decl><name>CURLM_STATE_WAITRESOLVE</name></decl>, 
<decl><name>CURLM_STATE_WAITCONNECT</name></decl>, 
<decl><name>CURLM_STATE_WAITPROXYCONNECT</name></decl>, 


<decl><name>CURLM_STATE_SENDPROTOCONNECT</name></decl>, 
<decl><name>CURLM_STATE_PROTOCONNECT</name></decl>, 

<decl><name>CURLM_STATE_DO</name></decl>, 
<decl><name>CURLM_STATE_DOING</name></decl>, 
<decl><name>CURLM_STATE_DO_MORE</name></decl>, 
<decl><name>CURLM_STATE_DO_DONE</name></decl>, 
<decl><name>CURLM_STATE_PERFORM</name></decl>, 
<decl><name>CURLM_STATE_TOOFAST</name></decl>, 
<decl><name>CURLM_STATE_DONE</name></decl>, 
<decl><name>CURLM_STATE_COMPLETED</name></decl>, 
<decl><name>CURLM_STATE_MSGSENT</name></decl>, 
<decl><name>CURLM_STATE_LAST</name></decl> 
}</block></enum></type> <name>CURLMstate</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SOCKSPEREASYHANDLE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETSOCK_READABLE</name></cpp:macro> <cpp:value>(0x00ff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETSOCK_WRITABLE</name></cpp:macro> <cpp:value>(0xff00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURLPIPE_ANY</name></cpp:macro> <cpp:value>(CURLPIPE_MULTIPLEX)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SOCKETPAIR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_BLOCKING_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_WAKEUP</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL_MAX_CONCURRENT_STREAMS</name></cpp:macro> <cpp:value>((1U &lt;&lt; 31) - 1)</cpp:value></cpp:define>


<struct>struct <name>Curl_multi</name> <block>{


<decl_stmt><decl><type><name>long</name></type> <name>type</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>easyp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>easylp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>num_easy</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>num_alive</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist</name></name></type> <name>msglist</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist</name></name></type> <name>pending</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>curl_socket_callback</name></type> <name>socket_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>socket_userp</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>curl_push_callback</name></type> <name>push_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>push_userp</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash</name></name></type> <name>hostcache</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBPSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>PslCache</name></name></type> <name>psl</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><name><name>struct</name> <name>Curl_tree</name></name> <modifier>*</modifier></type><name>timetree</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash</name></name></type> <name>sockhash</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>conncache</name></name></type> <name>conn_cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>maxconnects</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>long</name></type> <name>max_host_connections</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>long</name></type> <name>max_total_connections</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>curl_multi_timer_callback</name></type> <name>timer_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>timer_userp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>timer_lastcall</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>max_concurrent_streams</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_WAKEUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name><name>wakeup_pair</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>bool</name></type> <name>multiplexing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>recheckstate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>in_callback</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>ipv6_works</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
