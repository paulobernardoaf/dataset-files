<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\curl_addrinfo.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN6_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in6.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NOVELL_LIBC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>in_addr_t</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in_addr_t</name></cpp:macro> <cpp:value>unsigned long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_addrinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_pton.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__INTEL_COMPILER</name> <operator>==</operator> <literal type="number">910</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__OPTIMIZE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__unix__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vqualifier</name></cpp:macro> <cpp:value>volatile</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vqualifier</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>Curl_freeaddrinfo</name><parameter_list>(<parameter><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>cahead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier><name>vqualifier</name></type> <name>canext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ca</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>ca</name> <operator>=</operator> <name>cahead</name></expr>;</init> <condition><expr><name>ca</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ca</name> <operator>=</operator> <name>canext</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ca</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ca</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>canext</name> <operator>=</operator> <name><name>ca</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>














<function><type><name>int</name></type>
<name>Curl_getaddrinfo_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>,
<parameter><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>aihead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>cafirst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>calast</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ca</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ss_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>servname</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aihead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>



<for>for<control>(<init><expr><name>ai</name> <operator>=</operator> <name>aihead</name></expr>;</init> <condition><expr><name>ai</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ai</name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>



<if_stmt><if>if<condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ss_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ss_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else<block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>&lt;</operator> <name>ss_size</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ca</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Curl_addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ca</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EAI_MEMORY</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>=</operator> <operator>(</operator><name>curl_socklen_t</name><operator>)</operator><name>ss_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>ai_addr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>ai_canonname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>ai_addr</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>ss_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ca</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EAI_MEMORY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ca</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name>ss_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>ai_canonname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ca</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EAI_MEMORY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ca</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cafirst</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cafirst</name> <operator>=</operator> <name>ca</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>calast</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>calast</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name>ca</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>calast</name> <operator>=</operator> <name>ca</name></expr>;</expr_stmt>

</block_content>}</block></for>


<if_stmt><if>if<condition>(<expr><name>aihead</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>aihead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_freeaddrinfo</name><argument_list>(<argument><expr><name>cafirst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cafirst</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name>cafirst</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EAI_NONAME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EAI_NONAME</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EAI_NODATA</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SET_SOCKERRNO</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>cafirst</name></expr>;</expr_stmt>


<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 











































<function><type><name>Curl_addrinfo</name> <modifier>*</modifier></type>
<name>Curl_he2ai</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>he</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>prevai</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>firstai</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>addr6</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>he</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>he</name><operator>-&gt;</operator><name>h_name</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>he</name><operator>-&gt;</operator><name>h_addr_list</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>curr</name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>ss_size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>he</name><operator>-&gt;</operator><name>h_addrtype</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ss_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ss_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Curl_addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ai</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>he</name><operator>-&gt;</operator><name>h_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ss_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>firstai</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>firstai</name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>prevai</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>prevai</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>h_addrtype</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>=</operator> <operator>(</operator><name>curl_socklen_t</name><operator>)</operator><name>ss_size</name></expr>;</expr_stmt>



<switch>switch<condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name>curr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>sin_family</name></name> <operator>=</operator> <operator>(</operator><name>CURL_SA_FAMILY_T</name><operator>)</operator><operator>(</operator><name><name>he</name><operator>-&gt;</operator><name>h_addrtype</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<expr_stmt><expr><name>addr6</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>curr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addr6</name><operator>-&gt;</operator><name>sin6_family</name></name> <operator>=</operator> <operator>(</operator><name>CURL_SA_FAMILY_T</name><operator>)</operator><operator>(</operator><name><name>he</name><operator>-&gt;</operator><name>h_addrtype</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addr6</name><operator>-&gt;</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>

<expr_stmt><expr><name>prevai</name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_freeaddrinfo</name><argument_list>(<argument><expr><name>firstai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>firstai</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>firstai</name></expr>;</return>
</block_content>}</block></function>


<struct>struct <name>namebuff</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name></type> <name>hostentry</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>ina4</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>ina6</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block> <decl><name>addrentry</name></decl>;</union>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>h_addr_list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>











<function><type><name>Curl_addrinfo</name> <modifier>*</modifier></type>
<name>Curl_ip2addr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>inaddr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__INITIAL_POINTER_SIZE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__INITIAL_POINTER_SIZE</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pointer_size</name> <name>save</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pointer_size</name> <name>short</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name> <name>disable</name> <name>PTRMISMATCH</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>namebuff</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>addrentry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hoststr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>addrsize</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>inaddr</name> <operator>&amp;&amp;</operator> <name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>namebuff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hoststr</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hoststr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>af</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<expr_stmt><expr><name>addrsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>addrentry</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>addrentry</name><operator>.</operator><name>ina4</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>addrentry</name></expr></argument>, <argument><expr><name>inaddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<expr_stmt><expr><name>addrsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>addrentry</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>addrentry</name><operator>.</operator><name>ina6</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>addrentry</name></expr></argument>, <argument><expr><name>inaddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hoststr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>hostentry</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_name</name></name> <operator>=</operator> <name>hoststr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_aliases</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_addrtype</name></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>af</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_length</name></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>addrsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_addr_list</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>addrentry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__INITIAL_POINTER_SIZE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__INITIAL_POINTER_SIZE</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pointer_size</name> <name>restore</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name> <name>enable</name> <name>PTRMISMATCH</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>Curl_he2ai</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hoststr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ai</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>Curl_str2addr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>in</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>Curl_ip2addr</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>in6</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in6</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>Curl_ip2addr</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in6</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>NULL</name></expr>;</return> 
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNIX_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>Curl_unix2addr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>longpath</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>abstract</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>sa_un</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>path_len</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>longpath</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Curl_addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ai</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sa_un</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa_un</name><operator>-&gt;</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>


<expr_stmt><expr><name>path_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>path_len</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sa_un</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>longpath</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>=</operator> <operator>(</operator><name>curl_socklen_t</name><operator>)</operator>
<operator>(</operator><operator>(</operator><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>, <argument><expr><name>sun_path</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>path_len</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>abstract</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sa_un</name><operator>-&gt;</operator><name>sun_path</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>path_len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sa_un</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>path_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<return>return <expr><name>ai</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLDEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETADDRINFO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FREEADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>









<function><type><name>void</name></type>
<name>curl_dbg_freeaddrinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>freethis</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>curl_dbg_log</name><argument_list>(<argument><expr><literal type="string">"ADDR %s:%d freeaddrinfo(%p)\n"</literal></expr></argument>,
<argument><expr><name>source</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>freethis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LWIPSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>lwip_freeaddrinfo</name><argument_list>(<argument><expr><name>freethis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>freeaddrinfo</name><operator>)</operator><operator>(</operator><name>freethis</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLDEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>








<function><type><name>int</name></type>
<name>curl_dbg_getaddrinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LWIPSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>lwip_getaddrinfo</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><operator>(</operator><name>getaddrinfo</name><operator>)</operator><operator>(</operator><name>hostname</name>, <name>service</name>, <name>hints</name>, <name>result</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>res</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>curl_dbg_log</name><argument_list>(<argument><expr><literal type="string">"ADDR %s:%d getaddrinfo() = %p\n"</literal></expr></argument>,
<argument><expr><name>source</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_dbg_log</name><argument_list>(<argument><expr><literal type="string">"ADDR %s:%d getaddrinfo() failed\n"</literal></expr></argument>,
<argument><expr><name>source</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETADDRINFO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_RESOLVE_ON_IPS</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>void</name></type> <name>Curl_addrinfo_set_port</name><parameter_list>(<parameter><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>addrinfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ca</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>addr6</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for<control>(<init><expr><name>ca</name> <operator>=</operator> <name>addrinfo</name></expr>;</init> <condition><expr><name>ca</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ca</name> <operator>=</operator> <name><name>ca</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>ai_family</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>ca</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<expr_stmt><expr><name>addr6</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>ca</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>addr6</name><operator>-&gt;</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
