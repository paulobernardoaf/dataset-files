<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\url.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NET_IF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IPHLPAPI_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Iphlpapi.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_IOCTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_PARAM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOCKET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"We can't compile without socket() support!"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBIDN2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;idn2.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_IDN</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function_decl><type><name>bool</name></type> <name>curl_win32_idn_to_ascii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"netrc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formdata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hostip.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transfer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cookie.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"escape.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtok.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"share.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content_encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_digest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_negotiate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easyif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"speedcheck.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"non-ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_pton.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urlapi-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"system_win32.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ftp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"telnet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tftp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_ldap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vssh/ssh.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"imap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_ntop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_ntlm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_rtmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gopher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conncache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multihandle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dotdot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strdup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"setopt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"altsvc.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>conn_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>get_protocol_family</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list>;</function_decl>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>READBUFFER_SIZE</name> <operator>&lt;</operator> <name>READBUFFER_MIN</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> READBUFFER_SIZE is too small</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>protocols</name><index>[]</index></name> <init>= <expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_http</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_https</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_ftp</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_ftps</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_TELNET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_telnet</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_DICT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_dict</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_LDAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_ldap</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_LDAPS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENLDAP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENLDAP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LDAP_SSL</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></cpp:if>


<expr><operator>&amp;</operator><name>Curl_handler_ldaps</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_file</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_TFTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_tftp</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WOLFSSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_scp</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_sftp</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_IMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_imap</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_imaps</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_POP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_pop3</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_pop3s</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_SMB</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>CURL_SIZEOF_CURL_OFF_T</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_CRYPTO</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>


<expr><operator>&amp;</operator><name>Curl_handler_smb</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_smbs</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_SMTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_smtp</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_smtps</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_RTSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_rtsp</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_GOPHER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_gopher</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBRTMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>Curl_handler_rtmp</name></expr>,
<expr><operator>&amp;</operator><name>Curl_handler_rtmpt</name></expr>,
<expr><operator>&amp;</operator><name>Curl_handler_rtmpe</name></expr>,
<expr><operator>&amp;</operator><name>Curl_handler_rtmpte</name></expr>,
<expr><operator>&amp;</operator><name>Curl_handler_rtmps</name></expr>,
<expr><operator>&amp;</operator><name>Curl_handler_rtmpts</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator>struct <name>Curl_handler</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_dummy</name> <init>= <expr><block>{
<expr><literal type="string">"&lt;no protocol&gt;"</literal></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><name>PROTOPT_NONE</name></expr> 
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Curl_freeset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>dupstring</name></name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator>enum <name>dupstring</name><operator>)</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>STRING_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer_alloc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer_alloc</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url_alloc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url_alloc</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_mime_cleanpart</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>up_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>urlpieces</name></name> <modifier>*</modifier></type><name>up</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>up</name><operator>-&gt;</operator><name>scheme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>up</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>up</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>up</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>up</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>up</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>up</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>up</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uh</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>CURLcode</name></type> <name>Curl_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>datap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_multi</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>datap</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>datap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>*</operator><name>datap</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>datap</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_expire_clear</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>multi</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>m</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>multi_easy</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>curl_multi_cleanup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>multi_easy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>multi_easy</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>Curl_llist_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>timeoutlist</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 



<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>rangestringalloc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>Curl_free_request_state</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_ssl_close_all</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>first_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>scratch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_ssl_free_certinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer_alloc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer_alloc</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>up_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ulbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_flush_cookies</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ALTSVC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Curl_altsvc_save</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>asi</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_ALTSVC</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_altsvc_cleanup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>asi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>asi</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Curl_http_auth_cleanup_digest</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>contenttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>wouldredirect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_resolver_cleanup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_http2_cleanup_dependencies</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_convert_close</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_SHARE</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>dirty</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_SHARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_DOH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>probe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>serverdoh</name><operator>.</operator><name>memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>probe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>serverdoh</name><operator>.</operator><name>memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>Curl_wildcard_dtor</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>wildcard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_freeset</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>CURLcode</name></type> <name>Curl_init_userdefined</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>UserDefined</name></name> <modifier>*</modifier></type><name>set</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>in_set</name></name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>stderr</name></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>fwrite_func</name></name> <operator>=</operator> <operator>(</operator><name>curl_write_callback</name><operator>)</operator><name>fwrite</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>fread_func_set</name></name> <operator>=</operator> <operator>(</operator><name>curl_read_callback</name><operator>)</operator><name>fread</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>is_fread_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>is_fwrite_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>seek_func</name></name> <operator>=</operator> <name>ZERO_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>seek_client</name></name> <operator>=</operator> <name>ZERO_NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>convfromnetwork</name></name> <operator>=</operator> <name>ZERO_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>convtonetwork</name></name> <operator>=</operator> <name>ZERO_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>convfromutf8</name></name> <operator>=</operator> <name>ZERO_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>postfieldsize</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>maxredirs</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>httpreq</name></name> <operator>=</operator> <name>HTTPREQ_GET</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>rtspreq</name></name> <operator>=</operator> <name>RTSPREQ_OPTIONS</name></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>ftp_use_epsv</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>ftp_use_eprt</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>ftp_use_pret</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>ftp_filemethod</name></name> <operator>=</operator> <name>FTPFILE_MULTICWD</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>dns_cache_timeout</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>general_ssl</name><operator>.</operator><name>max_ssl_sessions</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>proxyport</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>proxytype</name></name> <operator>=</operator> <name>CURLPROXY_HTTP</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>httpauth</name></name> <operator>=</operator> <name>CURLAUTH_BASIC</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>proxyauth</name></name> <operator>=</operator> <name>CURLAUTH_BASIC</name></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>socks5auth</name></name> <operator>=</operator> <name>CURLAUTH_BASIC</name> <operator>|</operator> <name>CURLAUTH_GSSAPI</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>hide_progress</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>Curl_mime_initpart</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>set</name><operator>-&gt;</operator><name>mimepost</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifypeer</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifyhost</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TLS_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>authtype</name></name> <operator>=</operator> <name>CURL_TLSAUTH_NONE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>ssh_auth_types</name></name> <operator>=</operator> <name>CURLSSH_AUTH_DEFAULT</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>sessionid</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>proxy_ssl</name></name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>ssl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>new_file_perms</name></name> <operator>=</operator> <literal type="number">0644</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>new_directory_perms</name></name> <operator>=</operator> <literal type="number">0755</literal></expr>;</expr_stmt> 




<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>allowed_protocols</name></name> <operator>=</operator> <name>CURLPROTO_ALL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>redir_protocols</name></name> <operator>=</operator> <name>CURLPROTO_HTTP</name> <operator>|</operator> <name>CURLPROTO_HTTPS</name> <operator>|</operator> <name>CURLPROTO_FTP</name> <operator>|</operator>
<name>CURLPROTO_FTPS</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>




<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>socks5_gssapi_nec</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<if_stmt><if>if<condition>(<expr><call><name>Curl_ssl_backend</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>CURLSSLBACKEND_SCHANNEL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_CA_BUNDLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>set</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>STRING_SSL_CAFILE_ORIG</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURL_CA_BUNDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>set</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>STRING_SSL_CAFILE_PROXY</name></expr>]</index></name></expr></argument>,
<argument><expr><name>CURL_CA_BUNDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_CA_PATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>set</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>STRING_SSL_CAPATH_ORIG</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURL_CA_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>set</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>STRING_SSL_CAPATH_PROXY</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURL_CA_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>wildcard_enabled</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>chunk_bgn</name></name> <operator>=</operator> <name>ZERO_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>chunk_end</name></name> <operator>=</operator> <name>ZERO_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>tcp_keepalive</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>tcp_keepintvl</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>tcp_keepidle</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>tcp_fastopen</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>tcp_nodelay</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>ssl_enable_npn</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>ssl_enable_alpn</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>expect_100_timeout</name></name> <operator>=</operator> <literal type="number">1000L</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>sep_headers</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name>READBUFFER_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>upload_buffer_size</name></name> <operator>=</operator> <name>UPLOADBUFFER_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>happy_eyeballs_timeout</name></name> <operator>=</operator> <name>CURL_HET_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>fnmatch</name></name> <operator>=</operator> <name>ZERO_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>upkeep_interval_ms</name></name> <operator>=</operator> <name>CURL_UPKEEP_INTERVAL_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>maxconnects</name></name> <operator>=</operator> <name>DEFAULT_CONNCACHE_SIZE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>maxage_conn</name></name> <operator>=</operator> <literal type="number">118</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>http09_allowed</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>=</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>CURL_HTTP_VERSION_2TLS</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>CURL_HTTP_VERSION_1_1</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</expr_stmt>
<expr_stmt><expr><call><name>Curl_http2_init_userset</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>CURLcode</name></type> <name>Curl_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>curl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>


<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Curl_easy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: calloc of Curl_easy failed\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>CURLEASY_MAGIC_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_resolver_init</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: resolver_init failed\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>READBUFFER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: malloc of buffer failed\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>HEADERSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: malloc of headerbuff failed\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_init_userdefined</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headersize</name></name> <operator>=</operator> <name>HEADERSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_convert_init</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_initinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>lastconnect</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>PGRS_HIDE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>current_speed</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_resolver_cleanup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_freeset</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>curl</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_RECV_BEFORE_SEND_WORKAROUND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>conn_reset_postponed_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>postponed_data</name></name> <modifier>*</modifier> <specifier>const</specifier></type> <name>psnd</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>postponed</name><index>[<expr><name>num</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>psnd</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>psnd</name><operator>-&gt;</operator><name>allocated_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>psnd</name><operator>-&gt;</operator><name>recv_size</name></name> <operator>&lt;=</operator> <name><name>psnd</name><operator>-&gt;</operator><name>allocated_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>psnd</name><operator>-&gt;</operator><name>recv_size</name></name></expr> ?</condition><then>
<expr><operator>(</operator><name><name>psnd</name><operator>-&gt;</operator><name>recv_processed</name></name> <operator>&lt;</operator> <name><name>psnd</name><operator>-&gt;</operator><name>recv_size</name></name><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><name><name>psnd</name><operator>-&gt;</operator><name>recv_processed</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>psnd</name><operator>-&gt;</operator><name>bindsock</name></name> <operator>!=</operator> <name>CURL_SOCKET_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>psnd</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psnd</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psnd</name><operator>-&gt;</operator><name>allocated_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psnd</name><operator>-&gt;</operator><name>recv_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psnd</name><operator>-&gt;</operator><name>recv_processed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>psnd</name><operator>-&gt;</operator><name>bindsock</name></name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>psnd</name><operator>-&gt;</operator><name>allocated_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>psnd</name><operator>-&gt;</operator><name>recv_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>psnd</name><operator>-&gt;</operator><name>recv_processed</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>psnd</name><operator>-&gt;</operator><name>bindsock</name></name> <operator>==</operator> <name>CURL_SOCKET_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>conn_reset_all_postponed_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>conn_reset_postponed_data</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>conn_reset_postponed_data</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conn_reset_all_postponed_data</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {} while(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<function><type><specifier>static</specifier> <name>void</name></type> <name>conn_shutdown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Closing connection %ld\n"</literal></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>connection_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_resolver_cancel</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>Curl_ssl_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_ssl_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SECONDARYSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>CURL_SOCKET_BAD</name> <operator>!=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>SECONDARYSOCKET</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_closesocket</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>SECONDARYSOCKET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>CURL_SOCKET_BAD</name> <operator>!=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_closesocket</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>CURL_SOCKET_BAD</name> <operator>!=</operator> <name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_closesocket</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>CURL_SOCKET_BAD</name> <operator>!=</operator> <name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_closesocket</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>Curl_conncache_remove_conn</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>conn_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_free_idnconverted_hostname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_free_idnconverted_hostname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_free_idnconverted_hostname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_free_idnconverted_hostname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sasl_authzid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>proxyuserpwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>uagent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>userpwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>accept_encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>te</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>rangeline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>cookiehost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>rtsp_transport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>trailer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>rawalloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name><operator>.</operator><name>rawalloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>hostname_resolve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>secondaryhostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>rawalloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>rawalloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>connect_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>conn_reset_all_postponed_data</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_llist_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>easyq</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>localdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_free_primary_ssl_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_free_primary_ssl_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNIX_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>unix_domain_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>















<function><type><name>CURLcode</name></type> <name>Curl_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"DISCONNECT without easy handle, ignoring\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if<condition>(<expr><call><name>CONN_INUSE</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>dead_connection</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Curl_disconnect when inuse: %zu\n"</literal></expr></argument>, <argument><expr><call><name>CONN_INUSE</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>dns_entry</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_resolv_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>dns_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>dns_entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_hostcache_prune</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>Curl_http_auth_cleanup_ntlm</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_SPNEGO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>Curl_http_auth_cleanup_negotiate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>connect_only</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dead_connection</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>disconnect</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>disconnect</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dead_connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>conn_shutdown</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>conn_free</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>bool</name></type> <name>SocketIsDead</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ret_val</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sval</name> <operator>=</operator> <call><name>SOCKET_READABLE</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>sval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret_val</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret_val</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>IsMultiplexingPossible</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>handle</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>avail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>PROTO_FAMILY_HTTP</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>protoconnstart</name></name> <operator>||</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>close</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>Curl_multiplex_wanted</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>handle</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>&gt;=</operator> <name>CURL_HTTP_VERSION_2</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>avail</name> <operator>|=</operator> <name>CURLPIPE_MULTIPLEX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>avail</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>proxy_info_matches</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>proxy_info</name></name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>proxy_info</name></name><modifier>*</modifier></type> <name>needle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>proxytype</name></name> <operator>==</operator> <name><name>needle</name><operator>-&gt;</operator><name>proxytype</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <name><name>needle</name><operator>-&gt;</operator><name>port</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>Curl_safe_strcasecompare</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>needle</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>socks_proxy_info_matches</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>proxy_info</name></name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>proxy_info</name></name><modifier>*</modifier></type> <name>needle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>proxy_info_matches</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>needle</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>user</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>needle</name><operator>-&gt;</operator><name>user</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>user</name></name> <operator>&amp;&amp;</operator>
<name><name>needle</name><operator>-&gt;</operator><name>user</name></name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>needle</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>passwd</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>needle</name><operator>-&gt;</operator><name>passwd</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>passwd</name></name> <operator>&amp;&amp;</operator>
<name><name>needle</name><operator>-&gt;</operator><name>passwd</name></name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>, <argument><expr><name><name>needle</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>proxy_info_matches</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FALSE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>socks_proxy_info_matches</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FALSE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>conn_maxage</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>idletime</name> <init>= <expr><call><name>Curl_timediff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>lastused</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>idletime</name> <operator>/=</operator> <literal type="number">1000</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>idletime</name> <operator>&gt;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>maxage_conn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Too old connection (%ld seconds), disconnect it\n"</literal></expr></argument>,
<argument><expr><name>idletime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>bool</name></type> <name>extract_if_dead</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CONN_INUSE</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>bool</name></type> <name>dead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name> <init>= <expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>conn_maxage</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dead</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>connection_check</name></name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>olddata</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>connection_check</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNCHECK_ISDEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>olddata</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dead</name> <operator>=</operator> <operator>(</operator><name>state</name> <operator>&amp;</operator> <name>CONNRESULT_DEAD</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>dead</name> <operator>=</operator> <call><name>SocketIsDead</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>dead</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Connection %ld seems to be dead!\n"</literal></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>connection_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_conncache_remove_conn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>prunedead</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>extracted</name></decl>;</decl_stmt>
}</block>;</struct>





<function><type><specifier>static</specifier> <name>int</name></type> <name>call_extract_if_dead</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>prunedead</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator>struct <name>prunedead</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>extract_if_dead</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>extracted</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>prune_dead_connections</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name> <init>= <expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>elapsed</name> <init>=
<expr><call><name>Curl_timediff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn_cache</name><operator>-&gt;</operator><name>last_cleanup</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>elapsed</name> <operator>&gt;=</operator> <literal type="number">1000L</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>prunedead</name></name></type> <name>prune</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>prune</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prune</name><operator>.</operator><name>extracted</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while<condition>(<expr><call><name>Curl_conncache_foreach</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn_cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prune</name></expr></argument>,
<argument><expr><name>call_extract_if_dead</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Curl_disconnect</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>prune</name><operator>.</operator><name>extracted</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn_cache</name><operator>-&gt;</operator><name>last_cleanup</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ConnectionExists</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>needle</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>usethis</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>force_reuse</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>waitpipe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>check</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>chosen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>foundPendingCandidate</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>canmultiplex</name> <init>= <expr><call><name>IsMultiplexingPossible</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>needle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>bundle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostbundle</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>wantNTLMhttp</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name><operator>.</operator><name>want</name></name> <operator>&amp;</operator>
<operator>(</operator><name>CURLAUTH_NTLM</name> <operator>|</operator> <name>CURLAUTH_NTLM_WB</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>needle</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>PROTO_FAMILY_HTTP</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>wantProxyNTLMhttp</name> <init>= <expr><operator>(</operator><name><name>needle</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_user_passwd</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name><operator>.</operator><name>want</name></name> <operator>&amp;</operator>
<operator>(</operator><name>CURLAUTH_NTLM</name> <operator>|</operator> <name>CURLAUTH_NTLM_WB</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>needle</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>PROTO_FAMILY_HTTP</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>force_reuse</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>waitpipe</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>



<expr_stmt><expr><name>bundle</name> <operator>=</operator> <call><name>Curl_conncache_find_bundle</name><argument_list>(<argument><expr><name>needle</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn_cache</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hostbundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bundle</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Found bundle for host %s: %p [%s]\n"</literal></expr></argument>,
<argument><expr><name>hostbundle</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>bundle</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>bundle</name><operator>-&gt;</operator><name>multiuse</name></name> <operator>==</operator> <name>BUNDLE_MULTIPLEX</name></expr> ?</condition><then>
<expr><literal type="string">"can multiplex"</literal></expr> </then><else>: <expr><literal type="string">"serially"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>canmultiplex</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>bundle</name><operator>-&gt;</operator><name>multiuse</name></name> <operator>==</operator> <name>BUNDLE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>pipewait</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Server doesn't support multiplex yet, wait\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>waitpipe</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_conncache_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Server doesn't support multiplex (yet)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>canmultiplex</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>bundle</name><operator>-&gt;</operator><name>multiuse</name></name> <operator>==</operator> <name>BUNDLE_MULTIPLEX</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>Curl_multiplex_wanted</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could multiplex, but not asked to!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>canmultiplex</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>bundle</name><operator>-&gt;</operator><name>multiuse</name></name> <operator>==</operator> <name>BUNDLE_NO_MULTIUSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Can not multiplex, even if we wanted to!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>canmultiplex</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>bundle</name><operator>-&gt;</operator><name>conn_list</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>curr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>match</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>multiplexed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><name>check</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>connect_only</name></name> <operator>||</operator> <name><name>check</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>close</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>bundle</name><operator>-&gt;</operator><name>multiuse</name></name> <operator>==</operator> <name>BUNDLE_MULTIPLEX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>multiplexed</name> <operator>=</operator> <call><name>CONN_INUSE</name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>canmultiplex</name></expr>)</condition> <block>{<block_content>
<empty_stmt>;</empty_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>multiplexed</name></expr>)</condition> <block>{<block_content>


<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_resolver_asynch</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>check</name><operator>-&gt;</operator><name>ip_addr_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"Connection #%ld is still name resolving, can't reuse\n"</literal></expr></argument>,
<argument><expr><name><name>check</name><operator>-&gt;</operator><name>connection_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>==</operator> <name>CURL_SOCKET_BAD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>foundPendingCandidate</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Connection #%ld isn't open enough, can't reuse\n"</literal></expr></argument>,
<argument><expr><name><name>check</name><operator>-&gt;</operator><name>connection_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNIX_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>needle</name><operator>-&gt;</operator><name>unix_domain_socket</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>check</name><operator>-&gt;</operator><name>unix_domain_socket</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>needle</name><operator>-&gt;</operator><name>unix_domain_socket</name></name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>unix_domain_socket</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>needle</name><operator>-&gt;</operator><name>abstract_unix_socket</name></name> <operator>!=</operator> <name><name>check</name><operator>-&gt;</operator><name>abstract_unix_socket</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>unix_domain_socket</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>needle</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>PROTOPT_SSL</name><operator>)</operator> <operator>!=</operator>
<operator>(</operator><name><name>check</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>PROTOPT_SSL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><call><name>get_protocol_family</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>)</argument_list></call> <operator>!=</operator>
<name><name>needle</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>||</operator> <operator>!</operator><name><name>check</name><operator>-&gt;</operator><name>tls_upgraded</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>needle</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>!=</operator> <name><name>check</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>||</operator>
<name><name>needle</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>socksproxy</name></name> <operator>!=</operator> <name><name>check</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>socksproxy</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>needle</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>socksproxy</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>socks_proxy_info_matches</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>needle</name><operator>-&gt;</operator><name>socks_proxy</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>check</name><operator>-&gt;</operator><name>socks_proxy</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>needle</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name> <operator>!=</operator> <name><name>check</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name></expr>)</condition><block type="pseudo"><block_content>


<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>needle</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_port</name></name> <operator>!=</operator> <name><name>check</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_port</name></name></expr>)</condition><block type="pseudo"><block_content>


<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>needle</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>proxy_info_matches</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>needle</name><operator>-&gt;</operator><name>http_proxy</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>check</name><operator>-&gt;</operator><name>http_proxy</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>needle</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name> <operator>!=</operator> <name><name>check</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>needle</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>proxytype</name></name> <operator>==</operator> <name>CURLPROXY_HTTPS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>needle</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>PROTOPT_SSL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_ssl_config_matches</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>needle</name><operator>-&gt;</operator><name>proxy_ssl_config</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>check</name><operator>-&gt;</operator><name>proxy_ssl_config</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>!=</operator> <name>ssl_connection_complete</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_ssl_config_matches</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>needle</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>check</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>!=</operator> <name>ssl_connection_complete</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>check</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator> <call><name>GOOD_EASY_HANDLE</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>canmultiplex</name> <operator>&amp;&amp;</operator> <name><name>check</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>


<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>check</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>multi</name></name> <operator>!=</operator> <name><name>needle</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>multi</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>


<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>needle</name><operator>-&gt;</operator><name>localdev</name></name> <operator>||</operator> <name><name>needle</name><operator>-&gt;</operator><name>localport</name></name></expr>)</condition> <block>{<block_content>











<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>check</name><operator>-&gt;</operator><name>localport</name></name> <operator>!=</operator> <name><name>needle</name><operator>-&gt;</operator><name>localport</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>check</name><operator>-&gt;</operator><name>localportrange</name></name> <operator>!=</operator> <name><name>needle</name><operator>-&gt;</operator><name>localportrange</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>needle</name><operator>-&gt;</operator><name>localdev</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>check</name><operator>-&gt;</operator><name>localdev</name></name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>localdev</name></name></expr></argument>, <argument><expr><name><name>needle</name><operator>-&gt;</operator><name>localdev</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>needle</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_CREDSPERREQUEST</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>needle</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>needle</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>needle</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>||</operator> <operator>(</operator><name><name>needle</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>PROTOPT_SSL</name><operator>)</operator> <operator>||</operator>
<name><name>needle</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>needle</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>scheme</name></name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>scheme</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><call><name>get_protocol_family</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>)</argument_list></call> <operator>==</operator>
<name><name>needle</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;&amp;</operator> <name><name>check</name><operator>-&gt;</operator><name>tls_upgraded</name></name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>needle</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name> <operator>||</operator> <call><name>strcasecompare</name><argument_list>(
<argument><expr><name><name>needle</name><operator>-&gt;</operator><name>conn_to_host</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>conn_to_host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>needle</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_port</name></name> <operator>||</operator>
<name><name>needle</name><operator>-&gt;</operator><name>conn_to_port</name></name> <operator>==</operator> <name><name>check</name><operator>-&gt;</operator><name>conn_to_port</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>needle</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>needle</name><operator>-&gt;</operator><name>remote_port</name></name> <operator>==</operator> <name><name>check</name><operator>-&gt;</operator><name>remote_port</name></name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if<condition>(<expr><name><name>needle</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_SSL</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_ssl_config_matches</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>needle</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>check</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"Connection #%ld has different SSL parameters, "</literal>
<literal type="string">"can't reuse\n"</literal></expr></argument>,
<argument><expr><name><name>check</name><operator>-&gt;</operator><name>connection_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>!=</operator> <name>ssl_connection_complete</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>foundPendingCandidate</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"Connection #%ld has not started SSL connect, "</literal>
<literal type="string">"can't reuse\n"</literal></expr></argument>,
<argument><expr><name><name>check</name><operator>-&gt;</operator><name>connection_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>


<expr_stmt><expr><name>match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if<condition>(<expr><name>wantNTLMhttp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>needle</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>needle</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<if_stmt><if>if<condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>http_ntlm_state</name></name> <operator>==</operator> <name>NTLMSTATE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chosen</name> <operator>=</operator> <name>check</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>http_ntlm_state</name></name> <operator>!=</operator> <name>NTLMSTATE_NONE</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>wantProxyNTLMhttp</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>check</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>user</name></name> <operator>||</operator> <operator>!</operator><name><name>check</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>passwd</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>needle</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>needle</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>passwd</name></name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>proxy_ntlm_state</name></name> <operator>!=</operator> <name>NTLMSTATE_NONE</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>wantNTLMhttp</name> <operator>||</operator> <name>wantProxyNTLMhttp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chosen</name> <operator>=</operator> <name>check</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>wantNTLMhttp</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>check</name><operator>-&gt;</operator><name>http_ntlm_state</name></name> <operator>!=</operator> <name>NTLMSTATE_NONE</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>wantProxyNTLMhttp</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>check</name><operator>-&gt;</operator><name>proxy_ntlm_state</name></name> <operator>!=</operator> <name>NTLMSTATE_NONE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>force_reuse</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><name>canmultiplex</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if<condition>(<expr><operator>!</operator><name>multiplexed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chosen</name> <operator>=</operator> <name>check</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>multiplex</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name> <init>= <expr><operator>&amp;</operator><name><name>check</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>multiplexed</name> <operator>&gt;=</operator> <name><name>httpc</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>max_concurrent_streams</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"MAX_CONCURRENT_STREAMS reached, skip (%zu)\n"</literal></expr></argument>,
<argument><expr><name>multiplexed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>multiplexed</name> <operator>&gt;=</operator>
<call><name>Curl_multi_max_concurrent_streams</name><argument_list>(<argument><expr><name><name>needle</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"client side MAX_CONCURRENT_STREAMS reached"</literal>
<literal type="string">", skip (%zu)\n"</literal></expr></argument>,
<argument><expr><name>multiplexed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>chosen</name> <operator>=</operator> <name>check</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Multiplexed connection found!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>chosen</name> <operator>=</operator> <name>check</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>chosen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chosen</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>Curl_conncache_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>usethis</name> <operator>=</operator> <name>chosen</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Curl_conncache_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>foundPendingCandidate</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>pipewait</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"Found pending candidate for reuse and CURLOPT_PIPEWAIT is set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>waitpipe</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return> 
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>Curl_verboseconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Connected to %s (%s) port %ld (#%ld)\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>socksproxy</name></name></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>dispname</name></name></expr> </then><else>:
<expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>dispname</name></name></expr> </then><else>:
<expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name><operator>.</operator><name>dispname</name></name></expr> </then><else>:
<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>dispname</name></name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ip_addr_str</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>connection_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>bool</name></type> <name>Curl_is_ASCII_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ch</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>hostname</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hostname</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><operator>*</operator><name>ch</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ch</name><operator>++</operator> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>strip_trailing_dot</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hostname</name></name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>host</name> <operator>||</operator> <operator>!</operator><name><name>host</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>host</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>CURLcode</name></type> <name>Curl_idnconvert_hostname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>hostname</name></name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBIDN2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>dispname</name></name> <operator>=</operator> <name><name>host</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_is_ASCII_name</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBIDN2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>idn2_check_version</name><argument_list>(<argument><expr><name>IDN2_VERSION</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ace_hostname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IDN2_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x00140000</literal></expr></cpp:if>



<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>IDN2_NFC_INPUT</name> <operator>|</operator> <name>IDN2_NONTRANSITIONAL</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>IDN2_NFC_INPUT</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>idn2_lookup_ul</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>host</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ace_hostname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>IDN2_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>encalloc</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ace_hostname</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>host</name><operator>-&gt;</operator><name>encalloc</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to convert %s to ACE; %s\n"</literal></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><call><name>idn2_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_IDN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ace_hostname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>curl_win32_idn_to_ascii</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ace_hostname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>encalloc</name></name> <operator>=</operator> <name>ace_hostname</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>host</name><operator>-&gt;</operator><name>encalloc</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to convert %s to ACE; %s\n"</literal></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
<argument><expr><call><name>Curl_winapi_strerror</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"IDN support not present, can't parse Unicode domains\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>Curl_free_idnconverted_hostname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hostname</name></name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBIDN2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>encalloc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>idn2_free</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>encalloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>encalloc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_IDN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>encalloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>encalloc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>host</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>allocate_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>connectdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>




<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>sslsize</name> <init>= <expr><name><name>Curl_ssl</name><operator>-&gt;</operator><name>sizeof_ssl_backend_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ssl</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>sslsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ssl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_extra</name></name> <operator>=</operator> <name>ssl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>backend</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ssl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>backend</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ssl</name> <operator>+</operator> <name>sslsize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>backend</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ssl</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>sslsize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>backend</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ssl</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>sslsize</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <operator>&amp;</operator><name>Curl_handler_dummy</name></expr>;</expr_stmt> 





<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>SECONDARYSOCKET</name></expr>]</index></name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>connection_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_RECV_BEFORE_SEND_WORKAROUND</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>postponed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bindsock</name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>postponed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bindsock</name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Default to force-close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>created</name></name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>keepalive</name></name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>upkeep_interval_ms</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upkeep_interval_ms</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>proxytype</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxytype</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>proxytype</name></name> <operator>=</operator> <name>CURLPROXY_SOCKS4</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXY</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>*</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXY</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>proxytype</name></name> <operator>==</operator> <name>CURLPROXY_HTTP</name> <operator>||</operator>
<name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>proxytype</name></name> <operator>==</operator> <name>CURLPROXY_HTTP_1_0</name> <operator>||</operator>
<name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>proxytype</name></name> <operator>==</operator> <name>CURLPROXY_HTTPS</name><operator>)</operator><operator>)</operator></expr> ?</condition><then>
<expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>socksproxy</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PRE_PROXY</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PRE_PROXY</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>socksproxy</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_user_passwd</name></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXYUSERNAME</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tunnel_thru_httpproxy</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_USERNAME</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>ftp_use_epsv</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_use_epsv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>ftp_use_eprt</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_use_eprt</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name><operator>.</operator><name>verifystatus</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifystatus</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name><operator>.</operator><name>verifypeer</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifypeer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name><operator>.</operator><name>verifyhost</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifyhost</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl_config</name><operator>.</operator><name>verifystatus</name></name> <operator>=</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifystatus</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl_config</name><operator>.</operator><name>verifypeer</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifypeer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl_config</name><operator>.</operator><name>verifyhost</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifyhost</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ip_version</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ipver</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>connect_only</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>connect_only</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>transport</name></name> <operator>=</operator> <name>TRNSPRT_TCP</name></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>NTLM_WB_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ntlm</name><operator>.</operator><name>ntlm_auth_hlpr_socket</name></name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>proxyntlm</name><operator>.</operator><name>ntlm_auth_hlpr_socket</name></name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>Curl_llist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>easyq</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data_prot</name></name> <operator>=</operator> <name>PROT_CLEAR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DEVICE</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>localdev</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DEVICE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>localdev</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>localportrange</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>localportrange</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>localport</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>localport</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>fclosesocket</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fclosesocket</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>closesocket_client</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>closesocket_client</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>lastused</name></name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>conn</name></expr>;</return>
<label><name>error</name>:</label>

<expr_stmt><expr><call><name>Curl_llist_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>easyq</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>localdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name> <modifier>*</modifier></type><name>Curl_builtin_scheme</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scheme</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<for>for<control>(<init><expr><name>pp</name> <operator>=</operator> <name>protocols</name></expr>;</init> <condition><expr><operator>(</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>pp</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>scheme</name></name></expr></argument>, <argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>NULL</name></expr>;</return> 
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>findprotocol</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>protostr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>Curl_builtin_scheme</name><argument_list>(<argument><expr><name>protostr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> 
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>allowed_protocols</name></name> <operator>&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>protocol</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>



<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>this_is_a_follow</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>redir_protocols</name></name> <operator>&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>protocol</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>given</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>


<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Protocol \"%s\" not supported or disabled in "</literal> <name>LIBCURL_NAME</name></expr></argument>,
<argument><expr><name>protostr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>CURLcode</name></type> <name>Curl_uc_to_curlcode</name><parameter_list>(<parameter><decl><type><name>CURLUcode</name></type> <name>uc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>uc</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return>
<case>case <expr><name>CURLUE_UNSUPPORTED_SCHEME</name></expr>:</case>
<return>return <expr><name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>;</return>
<case>case <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>:</case>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
<case>case <expr><name>CURLUE_USER_NOT_ALLOWED</name></expr>:</case>
<return>return <expr><name>CURLE_LOGIN_DENIED</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>zonefrom_url</name><parameter_list>(<parameter><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>uh</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zoneid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLUcode</name></type> <name>uc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>uh</name></expr></argument>, <argument><expr><name>CURLUPART_ZONEID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zoneid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>uc</name> <operator>&amp;&amp;</operator> <name>zoneid</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>scope</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>zoneid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>endp</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>scope</name> <operator>&lt;</operator> <name>UINT_MAX</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>scope_id</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>scope</name></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IF_NAMETOINDEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <block>{<block_content>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if type="elseif">else if<condition>(<expr><name>Curl_if_nametoindex</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IF_NAMETOINDEX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>scopeidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>scopeidx</name> <operator>=</operator> <call><name>Curl_if_nametoindex</name><argument_list>(<argument><expr><name>zoneid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>scopeidx</name> <operator>=</operator> <call><name>if_nametoindex</name><argument_list>(<argument><expr><name>zoneid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>scopeidx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid zoneid: %s; %s\n"</literal></expr></argument>, <argument><expr><name>zoneid</name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>scope_id</name></name> <operator>=</operator> <name>scopeidx</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>zoneid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>




<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>parseurlandfillconn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>uh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLUcode</name></type> <name>uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>up_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>uh</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uh</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uh</name></name> <operator>=</operator> <call><name>curl_url_dup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>uh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>uh</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uh</name></name> <operator>=</operator> <call><name>curl_url</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>uh</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DEFAULT_PROTOCOL</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>Curl_is_absolute_url</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MAX_SCHEME_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url_alloc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>url</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s://%s"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DEFAULT_PROTOCOL</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>url</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name> <operator>=</operator> <name>url</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url_alloc</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>uh</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newurl</name></decl>;</decl_stmt>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>uh</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>,
<argument><expr><name>CURLU_GUESS_SCHEME</name> <operator>|</operator>
<name>CURLU_NON_SUPPORT_SCHEME</name> <operator>|</operator>
<operator>(</operator><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>disallow_username_in_url</name></name></expr> ?</condition><then>
<expr><name>CURLU_DISALLOW_USER</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>
<operator>(</operator><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>path_as_is</name></name></expr> ?</condition><then> <expr><name>CURLU_PATH_AS_IS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"curl_url_set rejected %s\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>Curl_uc_to_curlcode</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>uh</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newurl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Curl_uc_to_curlcode</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url_alloc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name> <operator>=</operator> <name>newurl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url_alloc</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>uh</name></expr></argument>, <argument><expr><name>CURLUPART_SCHEME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>scheme</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Curl_uc_to_curlcode</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>findprotocol</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>scheme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>uh</name></expr></argument>, <argument><expr><name>CURLUPART_USER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>user</name></name></expr></argument>,
<argument><expr><name>CURLU_URLDECODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>uc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>uc</name> <operator>!=</operator> <name>CURLUE_NO_USER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Curl_uc_to_curlcode</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>uh</name></expr></argument>, <argument><expr><name>CURLUPART_PASSWORD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>password</name></name></expr></argument>,
<argument><expr><name>CURLU_URLDECODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>uc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>uc</name> <operator>!=</operator> <name>CURLUE_NO_PASSWORD</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Curl_uc_to_curlcode</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>uh</name></expr></argument>, <argument><expr><name>CURLUPART_OPTIONS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>options</name></name></expr></argument>,
<argument><expr><name>CURLU_URLDECODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>uc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>options</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>uc</name> <operator>!=</operator> <name>CURLUE_NO_OPTIONS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Curl_uc_to_curlcode</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>uh</name></expr></argument>, <argument><expr><name>CURLUPART_HOST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>hostname</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>scheme</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>uh</name></expr></argument>, <argument><expr><name>CURLUPART_PATH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Curl_uc_to_curlcode</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>uh</name></expr></argument>, <argument><expr><name>CURLUPART_PORT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>port</name></name></expr></argument>,
<argument><expr><name>CURLU_DEFAULT_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>scheme</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>port</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name> <operator>=</operator> <call><name>curlx_ultous</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>curl_url_get</name><argument_list>(<argument><expr><name>uh</name></expr></argument>, <argument><expr><name>CURLUPART_QUERY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>query</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>hostname</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>hostname</name> <operator>&amp;&amp;</operator> <name><name>hostname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>size_t</name></type> <name>hlen</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>ipv6_ip</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hostname</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>hlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hostname</name><index>[<expr><name>hlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zonefrom_url</name><argument_list>(<argument><expr><name>uh</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>rawalloc</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><ternary><condition><expr><name>hostname</name></expr> ?</condition><then> <expr><name>hostname</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>rawalloc</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>rawalloc</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>scope_id</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>scope_id</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>scope_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>setup_range</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>UrlState</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>resume_from</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>set_resume_from</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>resume_from</name></name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SET_RANGE</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>rangestringalloc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>resume_from</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"-"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>resume_from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SET_RANGE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rangestringalloc</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>range</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>range</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>use_range</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>use_range</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>setup_connection_internals</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>handler</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>setup_connection</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>p</name><operator>-&gt;</operator><name>setup_connection</name></name>)<argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>handler</name></name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>defport</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>Curl_free_request_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_DOH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Curl_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>probe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>easy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>probe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>easy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_noproxy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>no_proxy</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<if_stmt><if>if<condition>(<expr><name>no_proxy</name> <operator>&amp;&amp;</operator> <name><name>no_proxy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>tok_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tok_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>separator</name> <init>= <expr><literal type="string">", "</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>no_proxy_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>namelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><name>no_proxy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>no_proxy_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>no_proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>endptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>endptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>name</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>namelen</name> <operator>=</operator> <name>endptr</name> <operator>-</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for<control>(<init><expr><name>tok_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tok_start</name> <operator>&lt;</operator> <name>no_proxy_len</name></expr>;</condition> <incr><expr><name>tok_start</name> <operator>=</operator> <name>tok_end</name> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<while>while<condition>(<expr><name>tok_start</name> <operator>&lt;</operator> <name>no_proxy_len</name> <operator>&amp;&amp;</operator>
<call><name>strchr</name><argument_list>(<argument><expr><name>separator</name></expr></argument>, <argument><expr><name><name>no_proxy</name><index>[<expr><name>tok_start</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>tok_start</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>tok_start</name> <operator>==</operator> <name>no_proxy_len</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 

<for>for<control>(<init><expr><name>tok_end</name> <operator>=</operator> <name>tok_start</name></expr>;</init> <condition><expr><name>tok_end</name> <operator>&lt;</operator> <name>no_proxy_len</name> <operator>&amp;&amp;</operator>
<call><name>strchr</name><argument_list>(<argument><expr><name>separator</name></expr></argument>, <argument><expr><name><name>no_proxy</name><index>[<expr><name>tok_end</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>tok_end</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>





<if_stmt><if>if<condition>(<expr><name><name>no_proxy</name><index>[<expr><name>tok_start</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>tok_start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>tok_end</name> <operator>-</operator> <name>tok_start</name><operator>)</operator> <operator>&lt;=</operator> <name>namelen</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>checkn</name> <init>= <expr><name>name</name> <operator>+</operator> <name>namelen</name> <operator>-</operator> <operator>(</operator><name>tok_end</name> <operator>-</operator> <name>tok_start</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>no_proxy</name> <operator>+</operator> <name>tok_start</name></expr></argument>, <argument><expr><name>checkn</name></expr></argument>,
<argument><expr><name>tok_end</name> <operator>-</operator> <name>tok_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>tok_end</name> <operator>-</operator> <name>tok_start</name><operator>)</operator> <operator>==</operator> <name>namelen</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>checkn</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>



<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt> 
</block_content>}</block></for> 

</block_content>}</block></if></if_stmt> 

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>detect_proxy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


















<decl_stmt><decl><type><name>char</name></type> <name><name>proxy_env</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>protop</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>scheme</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>envp</name> <init>= <expr><name>proxy_env</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prox</name></decl>;</decl_stmt>


<while>while<condition>(<expr><operator>*</operator><name>protop</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>envp</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>protop</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>envp</name></expr></argument>, <argument><expr><literal type="string">"_proxy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>prox</name> <operator>=</operator> <call><name>curl_getenv</name><argument_list>(<argument><expr><name>proxy_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>













<if_stmt><if>if<condition>(<expr><operator>!</operator><name>prox</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"http_proxy"</literal></expr></argument>, <argument><expr><name>proxy_env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_strntoupper</name><argument_list>(<argument><expr><name>proxy_env</name></expr></argument>, <argument><expr><name>proxy_env</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_env</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prox</name> <operator>=</operator> <call><name>curl_getenv</name><argument_list>(<argument><expr><name>proxy_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>envp</name> <operator>=</operator> <name>proxy_env</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>prox</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>proxy</name> <operator>=</operator> <name>prox</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>envp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"all_proxy"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>proxy</name> <operator>=</operator> <call><name>curl_getenv</name><argument_list>(<argument><expr><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>proxy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>envp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"ALL_PROXY"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>proxy</name> <operator>=</operator> <call><name>curl_getenv</name><argument_list>(<argument><expr><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>proxy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Uses proxy env variable %s == '%s'\n"</literal></expr></argument>, <argument><expr><name>envp</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>proxy</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 






<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>parse_proxy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>proxy</name></decl></parameter>,
<parameter><decl><type><name>curl_proxytype</name></type> <name>proxytype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>portptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>port</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>proxyuser</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>proxypasswd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>sockstype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLUcode</name></type> <name>uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>proxy_info</name></name> <modifier>*</modifier></type><name>proxyinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>uhp</name> <init>= <expr><call><name>curl_url</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scheme</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>uhp</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>,
<argument><expr><name>CURLU_NON_SUPPORT_SCHEME</name><operator>|</operator><name>CURLU_GUESS_SCHEME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>uc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>uhp</name></expr></argument>, <argument><expr><name>CURLUPART_SCHEME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scheme</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"https"</literal></expr></argument>, <argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>proxytype</name> <operator>=</operator> <name>CURLPROXY_HTTPS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"socks5h"</literal></expr></argument>, <argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>proxytype</name> <operator>=</operator> <name>CURLPROXY_SOCKS5_HOSTNAME</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"socks5"</literal></expr></argument>, <argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>proxytype</name> <operator>=</operator> <name>CURLPROXY_SOCKS5</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"socks4a"</literal></expr></argument>, <argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>proxytype</name> <operator>=</operator> <name>CURLPROXY_SOCKS4A</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"socks4"</literal></expr></argument>, <argument><expr><name>scheme</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"socks"</literal></expr></argument>, <argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>proxytype</name> <operator>=</operator> <name>CURLPROXY_SOCKS4</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if> 
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unsupported proxy scheme for \'%s\'"</literal></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_COULDNT_CONNECT</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unsupported proxy syntax in \'%s\'"</literal></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_COULDNT_RESOLVE_PROXY</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>Curl_ssl</name><operator>-&gt;</operator><name>supports</name></name> <operator>&amp;</operator> <name>SSLSUPP_HTTPS_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><name>proxytype</name> <operator>==</operator> <name>CURLPROXY_HTTPS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unsupported proxy \'%s\', libcurl is built without the "</literal>
<literal type="string">"HTTPS-proxy support."</literal></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_NOT_BUILT_IN</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sockstype</name> <operator>=</operator>
<name>proxytype</name> <operator>==</operator> <name>CURLPROXY_SOCKS5_HOSTNAME</name> <operator>||</operator>
<name>proxytype</name> <operator>==</operator> <name>CURLPROXY_SOCKS5</name> <operator>||</operator>
<name>proxytype</name> <operator>==</operator> <name>CURLPROXY_SOCKS4A</name> <operator>||</operator>
<name>proxytype</name> <operator>==</operator> <name>CURLPROXY_SOCKS4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>proxyinfo</name> <operator>=</operator> <ternary><condition><expr><name>sockstype</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proxyinfo</name><operator>-&gt;</operator><name>proxytype</name></name> <operator>=</operator> <name>proxytype</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>curl_url_get</name><argument_list>(<argument><expr><name>uhp</name></expr></argument>, <argument><expr><name>CURLUPART_USER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proxyuser</name></expr></argument>, <argument><expr><name>CURLU_URLDECODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_url_get</name><argument_list>(<argument><expr><name>uhp</name></expr></argument>, <argument><expr><name>CURLUPART_PASSWORD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proxypasswd</name></expr></argument>, <argument><expr><name>CURLU_URLDECODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>proxyuser</name> <operator>||</operator> <name>proxypasswd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>proxyinfo</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proxyinfo</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>proxyuser</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>proxyinfo</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>proxypasswd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>proxypasswd</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>proxypasswd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>proxyinfo</name><operator>-&gt;</operator><name>passwd</name></name> <operator>=</operator> <name>proxypasswd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_user_passwd</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>curl_url_get</name><argument_list>(<argument><expr><name>uhp</name></expr></argument>, <argument><expr><name>CURLUPART_PORT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>portptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>portptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>portptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>portptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxyport</name></name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>port</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxyport</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>proxytype</name> <operator>==</operator> <name>CURLPROXY_HTTPS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name>CURL_DEFAULT_HTTPS_PROXY_PORT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name>CURL_DEFAULT_PROXY_PORT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>port</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>proxyinfo</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>sockstype</name> <operator>||</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>rawalloc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>uhp</name></expr></argument>, <argument><expr><name>CURLUPART_HOST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>host</name></expr></argument>, <argument><expr><name>CURLU_URLDECODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>proxyinfo</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>rawalloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proxyinfo</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>rawalloc</name></name> <operator>=</operator> <name>host</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>host</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>host</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>host</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zonefrom_url</name><argument_list>(<argument><expr><name>uhp</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>proxyinfo</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>host</name></expr>;</expr_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>uhp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>parse_proxy_auth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>proxyuser</name><index>[<expr><name>MAX_CURL_USER_LENGTH</name></expr>]</index></name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>proxypasswd</name><index>[<expr><name>MAX_CURL_PASSWORD_LENGTH</name></expr>]</index></name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXYUSERNAME</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>proxyuser</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXYUSERNAME</name></expr>]</index></name></expr></argument>,
<argument><expr><name>MAX_CURL_USER_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proxyuser</name><index>[<expr><name>MAX_CURL_USER_LENGTH</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXYPASSWORD</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>proxypasswd</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXYPASSWORD</name></expr>]</index></name></expr></argument>,
<argument><expr><name>MAX_CURL_PASSWORD_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proxypasswd</name><index>[<expr><name>MAX_CURL_PASSWORD_LENGTH</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_urldecode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>proxyuser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_urldecode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>proxypasswd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>passwd</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>create_conn_helper_init_proxy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>socksproxy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>no_proxy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_user_passwd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_proxy_auth</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXY</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>proxy</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>proxy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"memory shortage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PRE_PROXY</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>socksproxy</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PRE_PROXY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>socksproxy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"memory shortage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_NOPROXY</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="string">"no_proxy"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>no_proxy</name> <operator>=</operator> <call><name>curl_getenv</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>no_proxy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NO_PROXY"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>no_proxy</name> <operator>=</operator> <call><name>curl_getenv</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>no_proxy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Uses proxy env variable %s == '%s'\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>no_proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>check_noproxy</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_NOPROXY</name></expr>]</index></name></expr> ?</condition><then>
<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_NOPROXY</name></expr>]</index></name></expr> </then><else>: <expr><name>no_proxy</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>socksproxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name>proxy</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>socksproxy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>proxy</name> <operator>=</operator> <call><name>detect_proxy</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>no_proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNIX_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>proxy</name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>unix_domain_socket</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>proxy</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>proxy</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>*</operator><name>proxy</name> <operator>||</operator> <operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_NONETWORK</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>proxy</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>socksproxy</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>*</operator><name>socksproxy</name> <operator>||</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_NONETWORK</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>socksproxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>socksproxy</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if<condition>(<expr><name>proxy</name> <operator>||</operator> <name>socksproxy</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>proxy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_proxy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>proxytype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>socksproxy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_proxy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>socksproxy</name></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>proxytype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>socksproxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>rawalloc</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>PROTO_FAMILY_HTTP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_PROXY_AS_HTTP</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <operator>&amp;</operator><name>Curl_handler_http</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>rawalloc</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>rawalloc</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>user</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>user</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>passwd</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>passwd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>passwd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>socksproxy</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>socksproxy</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>socksproxy</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>||</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>socksproxy</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>socksproxy</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_user_passwd</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>socksproxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 






























<function><type><name>CURLcode</name></type> <name>Curl_parse_login_details</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>login</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>userp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>passwdp</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>optionsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ubuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>obuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>osep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ulen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>olen</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>passwdp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>psep</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>psep</name> <operator>&gt;=</operator> <name>login</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psep</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>optionsp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>osep</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>osep</name> <operator>&gt;=</operator> <name>login</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>osep</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ulen</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>psep</name></expr> ?</condition><then>
<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>osep</name> <operator>&amp;&amp;</operator> <name>psep</name> <operator>&gt;</operator> <name>osep</name></expr> ?</condition><then> <expr><name>osep</name> <operator>-</operator> <name>login</name></expr> </then><else>: <expr><name>psep</name> <operator>-</operator> <name>login</name></expr></else></ternary><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><name>osep</name></expr> ?</condition><then> <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>osep</name> <operator>-</operator> <name>login</name><operator>)</operator></expr> </then><else>: <expr><name>len</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>plen</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>psep</name></expr> ?</condition><then>
<expr><operator>(</operator><ternary><condition><expr><name>osep</name> <operator>&amp;&amp;</operator> <name>osep</name> <operator>&gt;</operator> <name>psep</name></expr> ?</condition><then> <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>osep</name> <operator>-</operator> <name>psep</name><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>login</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>psep</name><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>olen</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>osep</name></expr> ?</condition><then>
<expr><operator>(</operator><ternary><condition><expr><name>psep</name> <operator>&amp;&amp;</operator> <name>psep</name> <operator>&gt;</operator> <name>osep</name></expr> ?</condition><then> <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>psep</name> <operator>-</operator> <name>osep</name><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>login</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>osep</name><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>userp</name> <operator>&amp;&amp;</operator> <name>ulen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ubuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>ulen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ubuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>passwdp</name> <operator>&amp;&amp;</operator> <name>plen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>plen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pbuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ubuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>optionsp</name> <operator>&amp;&amp;</operator> <name>olen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>obuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>olen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>obuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ubuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>ubuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ubuf</name></expr></argument>, <argument><expr><name>login</name></expr></argument>, <argument><expr><name>ulen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ubuf</name><index>[<expr><name>ulen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><operator>*</operator><name>userp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>userp</name> <operator>=</operator> <name>ubuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>pbuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>psep</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pbuf</name><index>[<expr><name>plen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><operator>*</operator><name>passwdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>passwdp</name> <operator>=</operator> <name>pbuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>obuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>obuf</name></expr></argument>, <argument><expr><name>osep</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obuf</name><index>[<expr><name>olen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><operator>*</operator><name>optionsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>optionsp</name> <operator>=</operator> <name>obuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>parse_remote_port</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>use_port</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>allow_port</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>portbuf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLUcode</name></type> <name>uc</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>use_port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>portbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uh</name></name></expr></argument>, <argument><expr><name>CURLUPART_PORT</name></expr></argument>, <argument><expr><name>portbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>override_login</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>userp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>passwdp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>optionsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>user_changed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>passwd_changed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLUcode</name></type> <name>uc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>use_netrc</name></name> <operator>==</operator> <name>CURL_NETRC_REQUIRED</name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>userp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><operator>*</operator><name>userp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>user_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>passwdp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><operator>*</operator><name>passwdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>passwd_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_USERNAME</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>userp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>userp</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_USERNAME</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>userp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>user_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PASSWORD</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>passwdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>passwdp</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PASSWORD</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>passwdp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>passwd_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_OPTIONS</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>optionsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>optionsp</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_OPTIONS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>optionsp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>netrc</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>use_netrc</name></name> <operator>!=</operator> <name>CURL_NETRC_IGNORED</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><operator>*</operator><name>userp</name> <operator>||</operator> <operator>!</operator><operator>*</operator><operator>*</operator><name>userp</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>passwdp</name> <operator>||</operator> <operator>!</operator><operator>*</operator><operator>*</operator><name>passwdp</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>netrc_user_changed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>netrc_passwd_changed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>Curl_parsenetrc</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>,
<argument><expr><name>userp</name></expr></argument>, <argument><expr><name>passwdp</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>netrc_user_changed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>netrc_passwd_changed</name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_NETRC_FILE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Couldn't find host %s in the .netrc file; using defaults\n"</literal></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>



<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>netrc</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>netrc_user_changed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>user_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>netrc_passwd_changed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>passwd_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>user_changed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uh</name></name></expr></argument>, <argument><expr><name>CURLUPART_USER</name></expr></argument>, <argument><expr><operator>*</operator><name>userp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Curl_uc_to_curlcode</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>passwd_changed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uh</name></name></expr></argument>, <argument><expr><name>CURLUPART_PASSWORD</name></expr></argument>, <argument><expr><operator>*</operator><name>passwdp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Curl_uc_to_curlcode</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>set_login</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>setuser</name> <init>= <expr><name>CURL_DEFAULT_USER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>setpasswd</name> <init>= <expr><name>CURL_DEFAULT_PASSWORD</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_NEEDSPWD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>setuser</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>setpasswd</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>setuser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>setpasswd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>parse_connect_to_host_port</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hostname_result</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>port_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host_dup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host_portno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>portptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>hostname_result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>port_result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>host</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>host</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>host_dup</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>host_dup</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hostptr</name> <operator>=</operator> <name>host_dup</name></expr>;</expr_stmt>


<expr_stmt><expr><name>portptr</name> <operator>=</operator> <name>hostptr</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>*</operator><name>hostptr</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>++</operator><name>hostptr</name></expr></init></decl>;</decl_stmt> 
<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ISXDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"%25"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Please URL encode %% as %%25, see RFC 6874.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ISALPHA</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ISXDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'~'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Invalid IPv6 address format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>portptr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Use of IPv6 in *_CONNECT_TO without IPv6 support built-in!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>host_dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>host_portno</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>portptr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>host_portno</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>host_portno</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>host_portno</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>host_portno</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>portparse</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>host_portno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>endp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>endp</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>portparse</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>portparse</name> <operator>&gt;</operator> <literal type="number">65535</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"No valid port number in connect to host string (%s)\n"</literal></expr></argument>,
<argument><expr><name>host_portno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hostptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>portparse</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>hostptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>hostname_result</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>hostptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>hostname_result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>host_dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>port_result</name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>host_dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>parse_connect_to_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conn_to_host</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>host_result</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>port_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>conn_to_host</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>host_match</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port_match</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>host_result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>port_result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>host_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>hostname_to_match_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname_to_match</name> <init>= <expr><call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>ipv6_ip</name></name></expr> ?</condition><then> <expr><literal type="string">"["</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>ipv6_ip</name></name></expr> ?</condition><then> <expr><literal type="string">"]"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hostname_to_match</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hostname_to_match_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>hostname_to_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>host_match</name> <operator>=</operator> <call><name>strncasecompare</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>hostname_to_match</name></expr></argument>,
<argument><expr><name>hostname_to_match_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostname_to_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>hostname_to_match_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>host_match</name> <operator>=</operator> <name>host_match</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>host_match</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>port_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr_next</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>ptr_next</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>port_to_match</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>endp</name> <operator>==</operator> <name>ptr_next</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>port_to_match</name> <operator>==</operator> <name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>port_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>ptr_next</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>host_match</name> <operator>&amp;&amp;</operator> <name>port_match</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_connect_to_host_port</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>host_result</name></expr></argument>, <argument><expr><name>port_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>parse_connect_to_slist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>conn_to_host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>conn_to_host</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>host</name> <operator>&amp;&amp;</operator> <name>port</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_connect_to_string</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn_to_host</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>host</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>host</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>host</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name><operator>.</operator><name>rawalloc</name></name> <operator>=</operator> <name>host</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>host</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Connecting to hostname: %s\n"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>port</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>conn_to_port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_port</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Connecting to port: %d\n"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_port</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>conn_to_host</name> <operator>=</operator> <name><name>conn_to_host</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ALTSVC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>asi</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>host</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>port</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>CURLPROTO_HTTPS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>alpnid</name></name></type> <name>srcalpnid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>hit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>altsvc</name></name> <modifier>*</modifier></type><name>as</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>allowed_versions</name> <init>= <expr><operator>(</operator> <name>ALPN_h1</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>ALPN_h2</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_QUIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>ALPN_h3</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator> <operator>&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>asi</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>host</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>rawalloc</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>srcalpnid</name> <operator>=</operator> <name>ALPN_h2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hit</name> <operator>=</operator> <call><name>Curl_altsvc_lookup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>asi</name></name></expr></argument>,
<argument><expr><name>srcalpnid</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></argument>, 
<argument><expr><operator>&amp;</operator><name>as</name></expr></argument> ,
<argument><expr><name>allowed_versions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hit</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>srcalpnid</name> <operator>=</operator> <name>ALPN_h1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hit</name> <operator>=</operator> <call><name>Curl_altsvc_lookup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>asi</name></name></expr></argument>,
<argument><expr><name>srcalpnid</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></argument>, 
<argument><expr><operator>&amp;</operator><name>as</name></expr></argument> ,
<argument><expr><name>allowed_versions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>hit</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostd</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>as</name><operator>-&gt;</operator><name>dst</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hostd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name><operator>.</operator><name>rawalloc</name></name> <operator>=</operator> <name>hostd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>hostd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>conn_to_port</name></name> <operator>=</operator> <name><name>as</name><operator>-&gt;</operator><name>dst</name><operator>.</operator><name>port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_port</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>altused</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Alt-svc connecting from [%s]%s:%d to [%s]%s:%d\n"</literal></expr></argument>,
<argument><expr><call><name>Curl_alpnid2str</name><argument_list>(<argument><expr><name>srcalpnid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></argument>,
<argument><expr><call><name>Curl_alpnid2str</name><argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>dst</name><operator>.</operator><name>alpnid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hostd</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>dst</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>srcalpnid</name> <operator>!=</operator> <name><name>as</name><operator>-&gt;</operator><name>dst</name><operator>.</operator><name>alpnid</name></name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name><name>as</name><operator>-&gt;</operator><name>dst</name><operator>.</operator><name>alpnid</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALPN_h1</name></expr>:</case>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALPN_h2</name></expr>:</case>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALPN_h3</name></expr>:</case>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>transport</name></name> <operator>=</operator> <name>TRNSPRT_QUIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> 
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>resolve_server</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>async</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>timeout_ms</name> <init>= <expr><call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>reuse</name></name></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><operator>*</operator><name>async</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>hostaddr</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNIX_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>unix_domain_socket</name></name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>unix_domain_socket</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hostaddr</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Curl_dns_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hostaddr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>longpath</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>hostaddr</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <call><name>Curl_unix2addr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>longpath</name></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>abstract_unix_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>hostaddr</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hostaddr</name><operator>-&gt;</operator><name>inuse</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>longpath</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unix socket path too long: '%s'"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_COULDNT_RESOLVE_HOST</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hostaddr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hostname</name></name> <modifier>*</modifier></type><name>connhost</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>connhost</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>connhost</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>host</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_port</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>conn_to_port</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>hostname_resolve</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>connhost</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>hostname_resolve</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_resolv_timeout</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>hostname_resolve</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hostaddr</name></expr></argument>, <argument><expr><name>timeout_ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>CURLRESOLV_PENDING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>async</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>CURLRESOLV_TIMEDOUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OPERATION_TIMEDOUT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name>hostaddr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Couldn't resolve host '%s'"</literal></expr></argument>, <argument><expr><name><name>connhost</name><operator>-&gt;</operator><name>dispname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_COULDNT_RESOLVE_HOST</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>


<decl_stmt><decl><type><name><name>struct</name> <name>hostname</name></name> <modifier>*</modifier> <specifier>const</specifier></type> <name>host</name> <init>= <expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>socksproxy</name></name></expr> ?</condition><then>
<expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>hostname_resolve</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>hostname_resolve</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_resolv_timeout</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>hostname_resolve</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hostaddr</name></expr></argument>, <argument><expr><name>timeout_ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>CURLRESOLV_PENDING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>async</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>CURLRESOLV_TIMEDOUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OPERATION_TIMEDOUT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name>hostaddr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Couldn't resolve proxy '%s'"</literal></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>dispname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_COULDNT_RESOLVE_PROXY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>dns_entry</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>dns_entry</name></name> <operator>=</operator> <name>hostaddr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>reuse_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>old_conn</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Curl_free_idnconverted_hostname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_free_idnconverted_hostname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>old_conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>rawalloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>old_conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>rawalloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>Curl_free_primary_ssl_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_conn</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_free_primary_ssl_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_conn</name><operator>-&gt;</operator><name>proxy_ssl_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>old_conn</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name> <operator>=</operator> <name><name>old_conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name><name>old_conn</name><operator>-&gt;</operator><name>user</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name> <operator>=</operator> <name><name>old_conn</name><operator>-&gt;</operator><name>passwd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>old_conn</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>old_conn</name><operator>-&gt;</operator><name>passwd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_user_passwd</name></name> <operator>=</operator> <name><name>old_conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_user_passwd</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_user_passwd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name><name>old_conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>user</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name><name>old_conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>user</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>passwd</name></name> <operator>=</operator> <name><name>old_conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>passwd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>passwd</name></name> <operator>=</operator> <name><name>old_conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>passwd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>old_conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>old_conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>old_conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>passwd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>old_conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>passwd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>Curl_free_idnconverted_hostname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_free_idnconverted_hostname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>rawalloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name><operator>.</operator><name>rawalloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <name><name>old_conn</name><operator>-&gt;</operator><name>host</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name></name> <operator>=</operator> <name><name>old_conn</name><operator>-&gt;</operator><name>conn_to_host</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>conn_to_port</name></name> <operator>=</operator> <name><name>old_conn</name><operator>-&gt;</operator><name>conn_to_port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name> <operator>=</operator> <name><name>old_conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>hostname_resolve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>hostname_resolve</name></name> <operator>=</operator> <name><name>old_conn</name><operator>-&gt;</operator><name>hostname_resolve</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>old_conn</name><operator>-&gt;</operator><name>hostname_resolve</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_persistconninfo</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>conn_reset_all_postponed_data</name><argument_list>(<argument><expr><name>old_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>reuse</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>old_conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>old_conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>old_conn</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>old_conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>old_conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>old_conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>old_conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>old_conn</name><operator>-&gt;</operator><name>localdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_llist_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_conn</name><operator>-&gt;</operator><name>easyq</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNIX_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>old_conn</name><operator>-&gt;</operator><name>unix_domain_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>create_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>in_connect</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>async</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn_temp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>reuse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>connections_available</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>force_reuse</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>waitpipe</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>max_host_connections</name> <init>= <expr><call><name>Curl_multi_max_host_connections</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>max_total_connections</name> <init>= <expr><call><name>Curl_multi_max_total_connections</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>async</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>in_connect</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>




<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_URL_MALFORMAT</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>allocate_conn</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><operator>*</operator><name>in_connect</name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parseurlandfillconn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SASL_AUTHZID</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sasl_authzid</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SASL_AUTHZID</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>sasl_authzid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNIX_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_UNIX_SOCKET_PATH</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>unix_domain_socket</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_UNIX_SOCKET_PATH</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>unix_domain_socket</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>abstract_unix_socket</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>abstract_unix_socket</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>create_conn_helper_init_proxy</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>given</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>PROTOPT_SSL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_remote_port</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>override_login</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_login</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>





<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_connect_to_slist</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>connect_to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_idnconvert_hostname</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_idnconvert_hostname</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_idnconvert_hostname</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>socksproxy</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_idnconvert_hostname</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name> <operator>&amp;&amp;</operator>
<call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_port</name></name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>conn_to_port</name></name> <operator>==</operator> <name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_port</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name> <operator>||</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_port</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>setup_connection_internals</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>Curl_recv_plain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>Curl_send_plain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>SECONDARYSOCKET</name></expr>]</index></name> <operator>=</operator> <name>Curl_recv_plain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>SECONDARYSOCKET</name></expr>]</index></name> <operator>=</operator> <name>Curl_send_plain</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tcp_fastopen</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tcp_fastopen</name></name></expr>;</expr_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_NONETWORK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>done</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>connect_it</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_persistconninfo</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>connect_it</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tcpconnect</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_conncache_add_conn</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn_cache</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>setup_range</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>done</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Curl_attach_connnection</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>Curl_init_do</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>CApath</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CAPATH_ORIG</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>CApath</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CAPATH_PROXY</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>CAfile</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CAFILE_ORIG</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>CAfile</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CAFILE_PROXY</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>random_file</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_RANDOM_FILE</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>random_file</name></name> <operator>=</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_RANDOM_FILE</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>egdsocket</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_EGDSOCKET</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>egdsocket</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_EGDSOCKET</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>cipher_list</name></name> <operator>=</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CIPHER_LIST_ORIG</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>cipher_list</name></name> <operator>=</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CIPHER_LIST_PROXY</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>cipher_list13</name></name> <operator>=</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CIPHER13_LIST_ORIG</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>cipher_list13</name></name> <operator>=</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CIPHER13_LIST_PROXY</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>pinned_key</name></name> <operator>=</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_ORIG</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>pinned_key</name></name> <operator>=</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_PROXY</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>CRLfile</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CRLFILE_ORIG</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>CRLfile</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CRLFILE_PROXY</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>issuercert</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_ISSUERCERT_ORIG</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>issuercert</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_ISSUERCERT_PROXY</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>cert</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_CERT_ORIG</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>cert</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_CERT_PROXY</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>cert_type</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_CERT_TYPE_ORIG</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>cert_type</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_CERT_TYPE_PROXY</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_KEY_ORIG</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_KEY_PROXY</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>key_type</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_KEY_TYPE_ORIG</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>key_type</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_KEY_TYPE_PROXY</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>key_passwd</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_KEY_PASSWD_ORIG</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>key_passwd</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_KEY_PASSWD_PROXY</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>clientcert</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_CERT_ORIG</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>clientcert</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_CERT_PROXY</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TLS_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>username</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_TLSAUTH_USERNAME_ORIG</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>username</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_TLSAUTH_USERNAME_PROXY</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>password</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_TLSAUTH_PASSWORD_ORIG</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>password</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_TLSAUTH_PASSWORD_PROXY</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_clone_primary_ssl_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_clone_primary_ssl_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl_config</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prune_dead_connections</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>reuse_fresh</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>this_is_a_follow</name></name><operator>)</operator> <operator>||</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>connect_only</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>reuse</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>reuse</name> <operator>=</operator> <call><name>ConnectionExists</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn_temp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>force_reuse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>waitpipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>reuse</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>reuse_conn</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>conn_temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>conn</name> <operator>=</operator> <name>conn_temp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>in_connect</name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Re-using existing connection! (#%ld) with %s %s\n"</literal></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>connection_id</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy</name></name></expr>?</condition><then><expr><literal type="string">"proxy"</literal></expr></then><else>:<expr><literal type="string">"host"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>dispname</name></name></expr> </then><else>:
<expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>dispname</name></name></expr> </then><else>:
<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>dispname</name></name></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>




<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_ALPN_NPN</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl_enable_alpn</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_alpn</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl_enable_npn</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_npn</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>waitpipe</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>connections_available</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bundlehost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>bundle</name> <init>=
<expr><call><name>Curl_conncache_find_bundle</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn_cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bundlehost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>max_host_connections</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bundle</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>bundle</name><operator>-&gt;</operator><name>num_connections</name></name> <operator>&gt;=</operator> <name>max_host_connections</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn_candidate</name></decl>;</decl_stmt>


<expr_stmt><expr><name>conn_candidate</name> <operator>=</operator> <call><name>Curl_conncache_extract_bundle</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_conncache_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>conn_candidate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Curl_disconnect</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn_candidate</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"No more connections allowed to host %s: %zu\n"</literal></expr></argument>,
<argument><expr><name>bundlehost</name></expr></argument>, <argument><expr><name>max_host_connections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>connections_available</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_conncache_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>connections_available</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>max_total_connections</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>Curl_conncache_size</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>max_total_connections</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn_candidate</name></decl>;</decl_stmt>


<expr_stmt><expr><name>conn_candidate</name> <operator>=</operator> <call><name>Curl_conncache_extract_oldest</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>conn_candidate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Curl_disconnect</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn_candidate</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"No connections available in cache\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>connections_available</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>connections_available</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"No connections available.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>conn_free</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>in_connect</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_NO_CONNECTION_AVAILABLE</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if>
<else>else <block>{<block_content>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_conncache_add_conn</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn_cache</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name><operator>.</operator><name>picked</name></name> <operator>&amp;</operator> <operator>(</operator><name>CURLAUTH_NTLM</name> <operator>|</operator> <name>CURLAUTH_NTLM_WB</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name><operator>.</operator><name>done</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NTLM picked AND auth done set, clear picked!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name><operator>.</operator><name>picked</name></name> <operator>=</operator> <name>CURLAUTH_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name><operator>.</operator><name>done</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name><operator>.</operator><name>picked</name></name> <operator>&amp;</operator> <operator>(</operator><name>CURLAUTH_NTLM</name> <operator>|</operator> <name>CURLAUTH_NTLM_WB</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name><operator>.</operator><name>done</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NTLM-proxy picked AND auth done set, clear picked!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name><operator>.</operator><name>picked</name></name> <operator>=</operator> <name>CURLAUTH_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name><operator>.</operator><name>done</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>Curl_init_do</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>setup_range</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>







<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>seek_func</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>seek_func</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>seek_client</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>seek_client</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>resolve_server</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>strip_trailing_dot</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strip_trailing_dot</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>socksproxy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strip_trailing_dot</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strip_trailing_dot</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>out</name>:</label>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>CURLcode</name></type> <name>Curl_setup_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>protocol_done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_pgrsTime</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>TIMER_NAMELOOKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_NONETWORK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>protocol_done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>protocol_done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 





<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_connect_closed</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>






<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_USERAGENT</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>uagent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>uagent</name></name> <operator>=</operator>
<call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"User-Agent: %s\r\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_USERAGENT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>uagent</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>headerbytecount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DO_LINEEND_CONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>crlf_conversions</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>now</name></name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>CURL_SOCKET_BAD</name> <operator>==</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tcpconnect</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_connecthost</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>dns_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>Curl_pgrsTime</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>TIMER_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name><operator>.</operator><name>use</name> <operator>||</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>PROTO_FAMILY_SSH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_pgrsTime</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>TIMER_APPCONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tcpconnect</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>protocol_done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_updateconninfo</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_verboseconnect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>now</name></name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>asyncp</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>protocol_done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>asyncp</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>Curl_free_request_state</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>SingleRequest</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>maxdownload</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>create_conn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name>asyncp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>CONN_INUSE</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>protocol_done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><operator>*</operator><name>asyncp</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setup_conn</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>protocol_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_NO_CONNECTION_AVAILABLE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <name>conn</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>Curl_disconnect</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_attach_connnection</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>CURLcode</name></type> <name>Curl_init_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>conn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>do_more</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>wildcardmatch</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_WILDCARD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>wildcardmatch</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>done</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>expect100header</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>=</operator> <name>HTTPREQ_HEAD</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>HTTPREQ_HEAD</name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name></expr>)</condition><block type="pseudo"><block_content>





<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>=</operator> <name>HTTPREQ_GET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>now</name></name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>bytecount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>hbufp</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>ignorebody</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_speedinit</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_pgrsSetDownloadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>get_protocol_family</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>family</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>protocol</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLPROTO_HTTP</name></expr>:</case>
<case>case <expr><name>CURLPROTO_HTTPS</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_HTTP</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROTO_FTP</name></expr>:</case>
<case>case <expr><name>CURLPROTO_FTPS</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_FTP</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROTO_SCP</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_SCP</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROTO_SFTP</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_SFTP</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROTO_TELNET</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_TELNET</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROTO_LDAP</name></expr>:</case>
<case>case <expr><name>CURLPROTO_LDAPS</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_LDAP</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROTO_DICT</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_DICT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROTO_FILE</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_FILE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROTO_TFTP</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_TFTP</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROTO_IMAP</name></expr>:</case>
<case>case <expr><name>CURLPROTO_IMAPS</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_IMAP</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROTO_POP3</name></expr>:</case>
<case>case <expr><name>CURLPROTO_POP3S</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_POP3</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROTO_SMTP</name></expr>:</case>
<case>case <expr><name>CURLPROTO_SMTPS</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_SMTP</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROTO_RTSP</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_RTSP</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROTO_RTMP</name></expr>:</case>
<case>case <expr><name>CURLPROTO_RTMPS</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_RTMP</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROTO_RTMPT</name></expr>:</case>
<case>case <expr><name>CURLPROTO_RTMPTS</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_RTMPT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROTO_RTMPE</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_RTMPE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROTO_RTMPTE</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_RTMPTE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROTO_GOPHER</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_GOPHER</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROTO_SMB</name></expr>:</case>
<case>case <expr><name>CURLPROTO_SMBS</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>CURLPROTO_SMB</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>family</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>family</name></expr>;</return>
</block_content>}</block></function></block_content></block></function>
</unit>
