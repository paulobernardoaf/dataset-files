<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\setopt.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_TCP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/tcp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content_encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"share.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"setopt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"altsvc.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<function><type><name>CURLcode</name></type> <name>Curl_setstropt</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>charp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><operator>*</operator><name>charp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <name>CURL_MAX_INPUT_LENGTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>charp</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>setstropt_userpwd</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>userp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>passwdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>passwd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><name>option</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_parse_login_details</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>userp</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>user</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>passwdp</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>passwd</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>userp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>user</name> <operator>&amp;&amp;</operator> <name>option</name> <operator>&amp;&amp;</operator> <name><name>option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>user</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>user</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><operator>*</operator><name>userp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>userp</name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>passwdp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><operator>*</operator><name>passwdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>passwdp</name> <operator>=</operator> <name>passwd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_SSLVERSION_VALUE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x &amp; 0xffff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_SSLVERSION_MAX_VALUE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x &amp; 0xffff0000)</cpp:value></cpp:define>





<function><type><name>CURLcode</name></type> <name>Curl_vsetopt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>CURLoption</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>argptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>uarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>bigsize</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>option</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLOPT_DNS_CACHE_TIMEOUT</name></expr>:</case>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>dns_cache_timeout</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_DNS_USE_GLOBAL_CACHE</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>CURLOPT_SSL_CIPHER_LIST</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CIPHER_LIST_ORIG</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_PROXY_SSL_CIPHER_LIST</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CIPHER_LIST_PROXY</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_TLS13_CIPHERS</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>Curl_ssl_tls13_ciphersuites</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CIPHER13_LIST_ORIG</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return></block_content></block></else></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_PROXY_TLS13_CIPHERS</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>Curl_ssl_tls13_ciphersuites</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CIPHER13_LIST_PROXY</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return></block_content></block></else></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_RANDOM_FILE</name></expr>:</case>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_RANDOM_FILE</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_EGDSOCKET</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_EGDSOCKET</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_MAXCONNECTS</name></expr>:</case>




<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>maxconnects</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_FORBID_REUSE</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>reuse_forbid</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_FRESH_CONNECT</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>reuse_fresh</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_VERBOSE</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_HEADER</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>include_header</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_NOPROGRESS</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>hide_progress</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>hide_progress</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>PGRS_HIDE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>PGRS_HIDE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_NOBODY</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_FAILONERROR</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_fail_on_error</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_KEEP_SENDING_ON_ERROR</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_keep_sending_on_error</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>
<expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_UPLOAD</name></expr>:</case>
<case>case <expr><name>CURLOPT_PUT</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>=</operator> <name>HTTPREQ_PUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>=</operator> <name>HTTPREQ_GET</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_REQUEST_TARGET</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_TARGET</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_FILETIME</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>get_filetime</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_SERVER_RESPONSE_TIMEOUT</name></expr>:</case>




<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arg</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>arg</name> <operator>&lt;=</operator> <operator>(</operator><name>INT_MAX</name><operator>/</operator><literal type="number">1000</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>server_response_timeout</name></name> <operator>=</operator> <name>arg</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></else></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_TFTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_TFTP_NO_OPTIONS</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tftp_no_options</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_TFTP_BLKSIZE</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tftp_blksize</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_NETRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_NETRC</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arg</name> <operator>&lt;</operator> <name>CURL_NETRC_IGNORED</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>arg</name> <operator>&gt;=</operator> <name>CURL_NETRC_LAST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>use_netrc</name></name> <operator>=</operator> <operator>(</operator>enum <name>CURL_NETRC_OPTION</name><operator>)</operator><name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_NETRC_FILE</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_NETRC_FILE</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_TRANSFERTEXT</name></expr>:</case>






<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>prefer_ascii</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_TIMECONDITION</name></expr>:</case>




<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arg</name> <operator>&lt;</operator> <name>CURL_TIMECOND_NONE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>arg</name> <operator>&gt;=</operator> <name>CURL_TIMECOND_LAST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timecondition</name></name> <operator>=</operator> <operator>(</operator><name>curl_TimeCond</name><operator>)</operator><name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_TIMEVALUE</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timevalue</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_TIMEVALUE_LARGE</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timevalue</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_off_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_SSLVERSION</name></expr>:</case>
<case>case <expr><name>CURLOPT_PROXY_SSLVERSION</name></expr>:</case>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>version</name></decl>, <decl><type ref="prev"/><name>version_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_primary_config</name></name> <modifier>*</modifier></type><name>primary</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>option</name> <operator>==</operator> <name>CURLOPT_SSLVERSION</name></expr> ?</condition><then>
<expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name></name></expr> </then><else>:
<expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>C_SSLVERSION_VALUE</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>version_max</name> <operator>=</operator> <call><name>C_SSLVERSION_MAX_VALUE</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>version</name> <operator>&lt;</operator> <name>CURL_SSLVERSION_DEFAULT</name> <operator>||</operator>
<name>version</name> <operator>&gt;=</operator> <name>CURL_SSLVERSION_LAST</name> <operator>||</operator>
<name>version_max</name> <operator>&lt;</operator> <name>CURL_SSLVERSION_MAX_NONE</name> <operator>||</operator>
<name>version_max</name> <operator>&gt;=</operator> <name>CURL_SSLVERSION_MAX_LAST</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>primary</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>primary</name><operator>-&gt;</operator><name>version_max</name></name> <operator>=</operator> <name>version_max</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_UNKNOWN_OPTION</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_AUTOREFERER</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_auto_referer</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_ACCEPT_ENCODING</name></expr>:</case>









<expr_stmt><expr><name>argptr</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>argptr</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>argptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>argptr</name> <operator>=</operator> <call><name>Curl_all_content_encodings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>argptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_ENCODING</name></expr>]</index></name></expr></argument>, <argument><expr><name>argptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>argptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_ENCODING</name></expr>]</index></name></expr></argument>, <argument><expr><name>argptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_TRANSFER_ENCODING</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_transfer_encoding</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>
<expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_FOLLOWLOCATION</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_follow_location</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_UNRESTRICTED_AUTH</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>allow_auth_to_other_hosts</name></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_MAXREDIRS</name></expr>:</case>




<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>maxredirs</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_POSTREDIR</name></expr>:</case>









<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <name>CURL_REDIR_GET_ALL</name></expr>)</condition><block type="pseudo"><block_content>


<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>keep_post</name></name> <operator>=</operator> <name>arg</name> <operator>&amp;</operator> <name>CURL_REDIR_POST_ALL</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_POST</name></expr>:</case>



<if_stmt><if>if<condition>(<expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>=</operator> <name>HTTPREQ_POST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>=</operator> <name>HTTPREQ_GET</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_COPYPOSTFIELDS</name></expr>:</case>





<expr_stmt><expr><name>argptr</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>argptr</name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfieldsize</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_COPYPOSTFIELDS</name></expr>]</index></name></expr></argument>, <argument><expr><name>argptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>




<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfieldsize</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>curl_off_t</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfieldsize</name></name> <operator>&gt;</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_COPYPOSTFIELDS</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfieldsize</name></name></expr>?</condition><then>
<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfieldsize</name></name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfieldsize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>argptr</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfieldsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_COPYPOSTFIELDS</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfields</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_COPYPOSTFIELDS</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>=</operator> <name>HTTPREQ_POST</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_POSTFIELDS</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfields</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_COPYPOSTFIELDS</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>=</operator> <name>HTTPREQ_POST</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_POSTFIELDSIZE</name></expr>:</case>




<expr_stmt><expr><name>bigsize</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bigsize</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfieldsize</name></name> <operator>&lt;</operator> <name>bigsize</name> <operator>&amp;&amp;</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfields</name></name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_COPYPOSTFIELDS</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_COPYPOSTFIELDS</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfields</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfieldsize</name></name> <operator>=</operator> <name>bigsize</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_POSTFIELDSIZE_LARGE</name></expr>:</case>




<expr_stmt><expr><name>bigsize</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_off_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bigsize</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfieldsize</name></name> <operator>&lt;</operator> <name>bigsize</name> <operator>&amp;&amp;</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfields</name></name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_COPYPOSTFIELDS</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_COPYPOSTFIELDS</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfields</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfieldsize</name></name> <operator>=</operator> <name>bigsize</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_HTTPPOST</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httppost</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>struct <name>curl_httppost</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>=</operator> <name>HTTPREQ_POST_FORM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<case>case <expr><name>CURLOPT_MIMEPOST</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_mime_set_subparts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_mime</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>=</operator> <name>HTTPREQ_POST_MIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_REFERER</name></expr>:</case>



<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer_alloc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer_alloc</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SET_REFERER</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SET_REFERER</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_USERAGENT</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_USERAGENT</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_HTTPHEADER</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>headers</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>struct <name>curl_slist</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_PROXYHEADER</name></expr>:</case>










<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxyheaders</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>struct <name>curl_slist</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_HEADEROPT</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>sep_headers</name></name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>CURLHEADER_SEPARATE</name><operator>)</operator></expr>?</condition><then> <expr><name>TRUE</name></expr></then><else>: <expr><name>FALSE</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_HTTP200ALIASES</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http200aliases</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>struct <name>curl_slist</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_COOKIES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_COOKIE</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_COOKIE</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_COOKIEFILE</name></expr>:</case>



<expr_stmt><expr><name>argptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>argptr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>cl</name></decl>;</decl_stmt>


<expr_stmt><expr><name>cl</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>cookielist</name></name></expr></argument>, <argument><expr><name>argptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>cookielist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>cookielist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>cookielist</name></name> <operator>=</operator> <name>cl</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_COOKIEJAR</name></expr>:</case>



<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>CookieInfo</name></name> <modifier>*</modifier></type><name>newcookies</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_COOKIEJAR</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>newcookies</name> <operator>=</operator> <call><name>Curl_cookie_init</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>cookiesession</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newcookies</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name> <operator>=</operator> <name>newcookies</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>CURLOPT_COOKIESESSION</name></expr>:</case>















<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>cookiesession</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_COOKIELIST</name></expr>:</case>
<expr_stmt><expr><name>argptr</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>argptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>argptr</name></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_COOKIE</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_cookie_clearall</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_COOKIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>argptr</name></expr></argument>, <argument><expr><literal type="string">"SESS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_COOKIE</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_cookie_clearsess</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_COOKIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>argptr</name></expr></argument>, <argument><expr><literal type="string">"FLUSH"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_flush_cookies</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>argptr</name></expr></argument>, <argument><expr><literal type="string">"RELOAD"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_cookie_loadfiles</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name> <operator>=</operator> <call><name>Curl_cookie_init</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>argptr</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>argptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>argptr</name> <operator>||</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>argptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_COOKIE</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Set-Cookie:"</literal></expr></argument>, <argument><expr><name>argptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_cookie_add</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>argptr</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_cookie_add</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>argptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_COOKIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>argptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<case>case <expr><name>CURLOPT_HTTPGET</name></expr>:</case>



<if_stmt><if>if<condition>(<expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>=</operator> <name>HTTPREQ_GET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_HTTP_VERSION</name></expr>:</case>




<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <name>CURL_HTTP_VERSION_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_QUIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>==</operator> <name>CURL_HTTP_VERSION_3</name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
if<condition>(<expr><name>arg</name> <operator>&gt;=</operator> <name>CURL_HTTP_VERSION_2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&gt;=</operator> <name>CURL_HTTP_VERSION_LAST</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>==</operator> <name>CURL_HTTP_VERSION_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>CURL_HTTP_VERSION_2TLS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_EXPECT_100_TIMEOUT_MS</name></expr>:</case>




<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>expect_100_timeout</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_HTTP09_ALLOWED</name></expr>:</case>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>param</argument>, <argument>unsigned long</argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&gt;</operator> <literal type="number">1L</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http09_allowed</name></name> <operator>=</operator> <ternary><condition><expr><name>arg</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<case>case <expr><name>CURLOPT_HTTPAUTH</name></expr>:</case>



<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bitcheck</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>authbits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>auth</name> <init>= <macro><name>va_arg</name><argument_list>(<argument>param</argument>, <argument>unsigned long</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>auth</name> <operator>==</operator> <name>CURLAUTH_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpauth</name></name> <operator>=</operator> <name>auth</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name><operator>.</operator><name>iestyle</name></name> <operator>=</operator>
<operator>(</operator><name>bool</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>auth</name> <operator>&amp;</operator> <name>CURLAUTH_DIGEST_IE</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>auth</name> <operator>&amp;</operator> <name>CURLAUTH_DIGEST_IE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>auth</name> <operator>|=</operator> <name>CURLAUTH_DIGEST</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>auth</name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_DIGEST_IE</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>auth</name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_NTLM</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>auth</name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_NTLM_WB</name></expr>;</expr_stmt> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NTLM_WB_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>auth</name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_NTLM_WB</name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_SPNEGO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>auth</name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_NEGOTIATE</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>bitcheck</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>authbits</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>bitcheck</name> <operator>&lt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>auth</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>bitcheck</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>authbits</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>authbits</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpauth</name></name> <operator>=</operator> <name>auth</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>CURLOPT_CUSTOMREQUEST</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_CUSTOMREQUEST</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_HTTPPROXYTUNNEL</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tunnel_thru_httpproxy</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>
<expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_PROXYPORT</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>arg</name> <operator>&gt;</operator> <literal type="number">65535</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxyport</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_PROXYAUTH</name></expr>:</case>



<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bitcheck</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>authbits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>auth</name> <init>= <macro><name>va_arg</name><argument_list>(<argument>param</argument>, <argument>unsigned long</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>auth</name> <operator>==</operator> <name>CURLAUTH_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxyauth</name></name> <operator>=</operator> <name>auth</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name><operator>.</operator><name>iestyle</name></name> <operator>=</operator>
<operator>(</operator><name>bool</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>auth</name> <operator>&amp;</operator> <name>CURLAUTH_DIGEST_IE</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>auth</name> <operator>&amp;</operator> <name>CURLAUTH_DIGEST_IE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>auth</name> <operator>|=</operator> <name>CURLAUTH_DIGEST</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>auth</name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_DIGEST_IE</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>auth</name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_NTLM</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>auth</name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_NTLM_WB</name></expr>;</expr_stmt> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NTLM_WB_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>auth</name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_NTLM_WB</name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_SPNEGO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>auth</name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_NEGOTIATE</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>bitcheck</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>authbits</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>bitcheck</name> <operator>&lt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>auth</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>bitcheck</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>authbits</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>authbits</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxyauth</name></name> <operator>=</operator> <name>auth</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>CURLOPT_PROXY</name></expr>:</case>










<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXY</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_PRE_PROXY</name></expr>:</case>






<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PRE_PROXY</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_PROXYTYPE</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arg</name> <operator>&lt;</operator> <name>CURLPROXY_HTTP</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>arg</name> <operator>&gt;</operator> <name>CURLPROXY_SOCKS5_HOSTNAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxytype</name></name> <operator>=</operator> <operator>(</operator><name>curl_proxytype</name><operator>)</operator><name>arg</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_PROXY_TRANSFER_MODE</name></expr>:</case>



<switch>switch<condition>(<expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_transfer_mode</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_transfer_mode</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_UNKNOWN_OPTION</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<case>case <expr><name>CURLOPT_SOCKS5_AUTH</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>socks5auth</name></name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>param</argument>, <argument>unsigned long</argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>socks5auth</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>CURLAUTH_BASIC</name> <operator>|</operator> <name>CURLAUTH_GSSAPI</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_NOT_BUILT_IN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_SOCKS5_GSSAPI_NEC</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>socks5_gssapi_nec</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_SOCKS5_GSSAPI_SERVICE</name></expr>:</case>
<case>case <expr><name>CURLOPT_PROXY_SERVICE_NAME</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXY_SERVICE_NAME</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_SERVICE_NAME</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SERVICE_NAME</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_HEADERDATA</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>writeheader</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_ERRORBUFFER</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>errorbuffer</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_WRITEDATA</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>out</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_DIRLISTONLY</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_list_only</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_APPEND</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_append</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_FTP_FILEMETHOD</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arg</name> <operator>&lt;</operator> <name>CURLFTPMETHOD_DEFAULT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>arg</name> <operator>&gt;=</operator> <name>CURLFTPMETHOD_LAST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_filemethod</name></name> <operator>=</operator> <operator>(</operator><name>curl_ftpfile</name><operator>)</operator><name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_FTPPORT</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_FTPPORT</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_use_port</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_FTPPORT</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_FTP_USE_EPRT</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_use_eprt</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_FTP_USE_EPSV</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_use_epsv</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_FTP_USE_PRET</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_use_pret</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_FTP_SSL_CCC</name></expr>:</case>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arg</name> <operator>&lt;</operator> <name>CURLFTPSSL_CCC_NONE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>arg</name> <operator>&gt;=</operator> <name>CURLFTPSSL_CCC_LAST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_ccc</name></name> <operator>=</operator> <operator>(</operator><name>curl_ftpccc</name><operator>)</operator><name>arg</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_FTP_SKIP_PASV_IP</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_skip_ip</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_FTP_ACCOUNT</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_FTP_ACCOUNT</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_FTP_ALTERNATIVE_TO_USER</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_FTP_ALTERNATIVE_TO_USER</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_FTPSSLAUTH</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arg</name> <operator>&lt;</operator> <name>CURLFTPAUTH_DEFAULT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>arg</name> <operator>&gt;=</operator> <name>CURLFTPAUTH_LAST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftpsslauth</name></name> <operator>=</operator> <operator>(</operator><name>curl_ftpauth</name><operator>)</operator><name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_KRBLEVEL</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_KRB_LEVEL</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>krb</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_KRB_LEVEL</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_FTP_CREATE_MISSING_DIRS</name></expr>:</case>




<switch>switch<condition>(<expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_create_missing_dirs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_create_missing_dirs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_create_missing_dirs</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_UNKNOWN_OPTION</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>CURLOPT_READDATA</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>in_set</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_INFILESIZE</name></expr>:</case>




<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>filesize</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_INFILESIZE_LARGE</name></expr>:</case>




<expr_stmt><expr><name>bigsize</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_off_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bigsize</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>filesize</name></name> <operator>=</operator> <name>bigsize</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_LOW_SPEED_LIMIT</name></expr>:</case>




<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>low_speed_limit</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_MAX_SEND_SPEED_LARGE</name></expr>:</case>




<expr_stmt><expr><name>bigsize</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_off_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bigsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>max_send_speed</name></name> <operator>=</operator> <name>bigsize</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_MAX_RECV_SPEED_LARGE</name></expr>:</case>




<expr_stmt><expr><name>bigsize</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_off_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bigsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>max_recv_speed</name></name> <operator>=</operator> <name>bigsize</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_LOW_SPEED_TIME</name></expr>:</case>




<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>low_speed_time</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_CURLU</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>uh</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>CURLU</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_URL</name></expr>:</case>



<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url_alloc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url_alloc</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SET_URL</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SET_URL</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_PORT</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>arg</name> <operator>&gt;</operator> <literal type="number">65535</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>use_port</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_TIMEOUT</name></expr>:</case>




<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arg</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>arg</name> <operator>&lt;=</operator> <operator>(</operator><name>INT_MAX</name><operator>/</operator><literal type="number">1000</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <name>arg</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_TIMEOUT_MS</name></expr>:</case>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_CONNECTTIMEOUT</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arg</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>arg</name> <operator>&lt;=</operator> <operator>(</operator><name>INT_MAX</name><operator>/</operator><literal type="number">1000</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>connecttimeout</name></name> <operator>=</operator> <name>arg</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_CONNECTTIMEOUT_MS</name></expr>:</case>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>connecttimeout</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_ACCEPTTIMEOUT_MS</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>accepttimeout</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_USERPWD</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>setstropt_userpwd</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_USERNAME</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PASSWORD</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_USERNAME</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_USERNAME</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_PASSWORD</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PASSWORD</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_LOGIN_OPTIONS</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_OPTIONS</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_XOAUTH2_BEARER</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_BEARER</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_POSTQUOTE</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postquote</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>struct <name>curl_slist</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_PREQUOTE</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>prequote</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>struct <name>curl_slist</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_QUOTE</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>quote</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>struct <name>curl_slist</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_RESOLVE</name></expr>:</case>










<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>resolve</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>struct <name>curl_slist</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>resolve</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>resolve</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_PROGRESSFUNCTION</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fprogress</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_progress_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fprogress</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<break>break;</break>

<case>case <expr><name>CURLOPT_XFERINFOFUNCTION</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fxferinfo</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_xferinfo_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fxferinfo</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<break>break;</break>

<case>case <expr><name>CURLOPT_PROGRESSDATA</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>progress_client</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_PROXYUSERPWD</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>setstropt_userpwd</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXYUSERNAME</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXYPASSWORD</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_PROXYUSERNAME</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXYUSERNAME</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_PROXYPASSWORD</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXYPASSWORD</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_NOPROXY</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_NOPROXY</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CURLOPT_RANGE</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SET_RANGE</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_RESUME_FROM</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>set_resume_from</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_RESUME_FROM_LARGE</name></expr>:</case>



<expr_stmt><expr><name>bigsize</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_off_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bigsize</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>set_resume_from</name></name> <operator>=</operator> <name>bigsize</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_DEBUGFUNCTION</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fdebug</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_debug_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<break>break;</break>
<case>case <expr><name>CURLOPT_DEBUGDATA</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>debugdata</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_STDERR</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>err</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>FILE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>err</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>err</name></name> <operator>=</operator> <name>stderr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_HEADERFUNCTION</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fwrite_header</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_write_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_WRITEFUNCTION</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fwrite_func</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_write_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fwrite_func</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>is_fwrite_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fwrite_func</name></name> <operator>=</operator> <operator>(</operator><name>curl_write_callback</name><operator>)</operator><name>fwrite</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>is_fwrite_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_READFUNCTION</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fread_func_set</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fread_func_set</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>is_fread_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fread_func_set</name></name> <operator>=</operator> <operator>(</operator><name>curl_read_callback</name><operator>)</operator><name>fread</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>is_fread_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_SEEKFUNCTION</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>seek_func</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_seek_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_SEEKDATA</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>seek_client</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_CONV_FROM_NETWORK_FUNCTION</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>convfromnetwork</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_conv_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_CONV_TO_NETWORK_FUNCTION</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>convtonetwork</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_conv_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_CONV_FROM_UTF8_FUNCTION</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>convfromutf8</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_conv_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_IOCTLFUNCTION</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ioctl_func</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_ioctl_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_IOCTLDATA</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ioctl_client</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_SSLCERT</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_CERT_ORIG</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_PROXY_SSLCERT</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_CERT_PROXY</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_SSLCERTTYPE</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_CERT_TYPE_ORIG</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_PROXY_SSLCERTTYPE</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_CERT_TYPE_PROXY</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_SSLKEY</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_KEY_ORIG</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_PROXY_SSLKEY</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_KEY_PROXY</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_SSLKEYTYPE</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_KEY_TYPE_ORIG</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_PROXY_SSLKEYTYPE</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_KEY_TYPE_PROXY</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_KEYPASSWD</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_KEY_PASSWD_ORIG</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_PROXY_KEYPASSWD</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_KEY_PASSWD_PROXY</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_SSLENGINE</name></expr>:</case>



<expr_stmt><expr><name>argptr</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>argptr</name> <operator>&amp;&amp;</operator> <name><name>argptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_ENGINE</name></expr>]</index></name></expr></argument>, <argument><expr><name>argptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ssl_set_engine</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>argptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_SSLENGINE_DEFAULT</name></expr>:</case>



<expr_stmt><expr><call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_ENGINE</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ssl_set_engine_default</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_CRLF</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>crlf</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_HAPROXYPROTOCOL</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>haproxyprotocol</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_INTERFACE</name></expr>:</case>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DEVICE</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_LOCALPORT</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>arg</name> <operator>&gt;</operator> <literal type="number">65535</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>localport</name></name> <operator>=</operator> <call><name>curlx_sltous</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_LOCALPORTRANGE</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>arg</name> <operator>&gt;</operator> <literal type="number">65535</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>localportrange</name></name> <operator>=</operator> <call><name>curlx_sltosi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_GSSAPI_DELEGATION</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <name>CURLGSSAPI_DELEGATION_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>gssapi_delegation</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_SSL_VERIFYPEER</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifypeer</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>
<expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>ssl_config</name><operator>.</operator><name>verifypeer</name></name> <operator>=</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifypeer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_PROXY_SSL_VERIFYPEER</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifypeer</name></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>proxy_ssl_config</name><operator>.</operator><name>verifypeer</name></name> <operator>=</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifypeer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_SSL_VERIFYHOST</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifyhost</name></name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>arg</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>ssl_config</name><operator>.</operator><name>verifyhost</name></name> <operator>=</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifyhost</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_PROXY_SSL_VERIFYHOST</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifyhost</name></name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>arg</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>proxy_ssl_config</name><operator>.</operator><name>verifyhost</name></name> <operator>=</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifyhost</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_SSL_VERIFYSTATUS</name></expr>:</case>



<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_ssl_cert_status_request</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_NOT_BUILT_IN</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifystatus</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>
<expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>ssl_config</name><operator>.</operator><name>verifystatus</name></name> <operator>=</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifystatus</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_SSL_CTX_FUNCTION</name></expr>:</case>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>Curl_ssl</name><operator>-&gt;</operator><name>supports</name></name> <operator>&amp;</operator> <name>SSLSUPP_SSL_CTX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>fsslctx</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_ssl_ctx_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_NOT_BUILT_IN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_SSL_CTX_DATA</name></expr>:</case>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>Curl_ssl</name><operator>-&gt;</operator><name>supports</name></name> <operator>&amp;</operator> <name>SSLSUPP_SSL_CTX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>fsslctxp</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_NOT_BUILT_IN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_SSL_FALSESTART</name></expr>:</case>



<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_ssl_false_start</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_NOT_BUILT_IN</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>falsestart</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_CERTINFO</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>Curl_ssl</name><operator>-&gt;</operator><name>supports</name></name> <operator>&amp;</operator> <name>SSLSUPP_CERTINFO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_NOT_BUILT_IN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_PINNEDPUBLICKEY</name></expr>:</case>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>Curl_ssl</name><operator>-&gt;</operator><name>supports</name></name> <operator>&amp;</operator> <name>SSLSUPP_PINNEDPUBKEY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_ORIG</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_NOT_BUILT_IN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_PROXY_PINNEDPUBLICKEY</name></expr>:</case>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>Curl_ssl</name><operator>-&gt;</operator><name>supports</name></name> <operator>&amp;</operator> <name>SSLSUPP_PINNEDPUBKEY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_PROXY</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_NOT_BUILT_IN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_CAINFO</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CAFILE_ORIG</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_PROXY_CAINFO</name></expr>:</case>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CAFILE_PROXY</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_CAPATH</name></expr>:</case>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>Curl_ssl</name><operator>-&gt;</operator><name>supports</name></name> <operator>&amp;</operator> <name>SSLSUPP_CA_PATH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CAPATH_ORIG</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_NOT_BUILT_IN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_PROXY_CAPATH</name></expr>:</case>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>Curl_ssl</name><operator>-&gt;</operator><name>supports</name></name> <operator>&amp;</operator> <name>SSLSUPP_CA_PATH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CAPATH_PROXY</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_NOT_BUILT_IN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_CRLFILE</name></expr>:</case>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CRLFILE_ORIG</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_PROXY_CRLFILE</name></expr>:</case>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CRLFILE_PROXY</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_ISSUERCERT</name></expr>:</case>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_ISSUERCERT_ORIG</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_TELNET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_TELNETOPTIONS</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>telnet_options</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>struct <name>curl_slist</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_BUFFERSIZE</name></expr>:</case>




<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&gt;</operator> <name>READBUFFER_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>READBUFFER_MAX</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>READBUFFER_SIZE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <name>READBUFFER_MIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>READBUFFER_MIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newbuff</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newbuff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: realloc of buffer failed\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>newbuff</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURLOPT_UPLOAD_BUFFERSIZE</name></expr>:</case>




<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&gt;</operator> <name>UPLOADBUFFER_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>UPLOADBUFFER_MAX</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <name>UPLOADBUFFER_MIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>UPLOADBUFFER_MIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload_buffer_size</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ulbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>

<case>case <expr><name>CURLOPT_NOSIGNAL</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>no_signal</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_SHARE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_share</name></name> <modifier>*</modifier></type><name>set</name></decl>;</decl_stmt>
<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>struct <name>Curl_share</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_SHARE</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>dns</name><operator>.</operator><name>hostcachetype</name></name> <operator>==</operator> <name>HCACHE_SHARED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>dns</name><operator>.</operator><name>hostcache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>dns</name><operator>.</operator><name>hostcachetype</name></name> <operator>=</operator> <name>HCACHE_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_COOKIES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>cookies</name></name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>cookies</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>sslsession</name></name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>session</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBPSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>psl</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>psl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>psl</name></name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>multi</name></name></expr>?</condition><then> <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>multi</name><operator>-&gt;</operator><name>psl</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>dirty</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_SHARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name> <operator>=</operator> <name>set</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_SHARE</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>dirty</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>specifier</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator> <name>CURL_LOCK_DATA_DNS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>dns</name><operator>.</operator><name>hostcache</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>hostcache</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>dns</name><operator>.</operator><name>hostcachetype</name></name> <operator>=</operator> <name>HCACHE_SHARED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_COOKIES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>cookies</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_cookie_cleanup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>cookies</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>sslsession</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>general_ssl</name><operator>.</operator><name>max_ssl_sessions</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>max_ssl_sessions</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>session</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>sslsession</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBPSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>specifier</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CURL_LOCK_DATA_PSL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>psl</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>psl</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_SHARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


</block_content>}</block>
<break>break;</break>

<case>case <expr><name>CURLOPT_PRIVATE</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>private_data</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_MAXFILESIZE</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>max_filesize</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_USE_SSL</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arg</name> <operator>&lt;</operator> <name>CURLUSESSL_NONE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>arg</name> <operator>&gt;=</operator> <name>CURLUSESSL_LAST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>use_ssl</name></name> <operator>=</operator> <operator>(</operator><name>curl_usessl</name><operator>)</operator><name>arg</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_SSL_OPTIONS</name></expr>:</case>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>enable_beast</name></name> <operator>=</operator>
<operator>(</operator><name>bool</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>arg</name><operator>&amp;</operator><name>CURLSSLOPT_ALLOW_BEAST</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>no_revoke</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>CURLSSLOPT_NO_REVOKE</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>no_partialchain</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>CURLSSLOPT_NO_PARTIALCHAIN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>revoke_best_effort</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>CURLSSLOPT_REVOKE_BEST_EFFORT</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_PROXY_SSL_OPTIONS</name></expr>:</case>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>enable_beast</name></name> <operator>=</operator>
<operator>(</operator><name>bool</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>arg</name><operator>&amp;</operator><name>CURLSSLOPT_ALLOW_BEAST</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>no_revoke</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>CURLSSLOPT_NO_REVOKE</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>no_partialchain</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>CURLSSLOPT_NO_PARTIALCHAIN</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>revoke_best_effort</name></name> <operator>=</operator>
<operator>!</operator><operator>!</operator><operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>CURLSSLOPT_REVOKE_BEST_EFFORT</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_IPRESOLVE</name></expr>:</case>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arg</name> <operator>&lt;</operator> <name>CURL_IPRESOLVE_WHATEVER</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>arg</name> <operator>&gt;</operator> <name>CURL_IPRESOLVE_V6</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ipver</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_MAXFILESIZE_LARGE</name></expr>:</case>



<expr_stmt><expr><name>bigsize</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_off_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bigsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>max_filesize</name></name> <operator>=</operator> <name>bigsize</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_TCP_NODELAY</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tcp_nodelay</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_IGNORE_CONTENT_LENGTH</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ignorecl</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_CONNECT_ONLY</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>connect_only</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_SOCKOPTFUNCTION</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fsockopt</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_sockopt_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_SOCKOPTDATA</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>sockopt_client</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_OPENSOCKETFUNCTION</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fopensocket</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_opensocket_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_OPENSOCKETDATA</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opensocket_client</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_CLOSESOCKETFUNCTION</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fclosesocket</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_closesocket_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_RESOLVER_START_FUNCTION</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>resolver_start</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_resolver_start_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_RESOLVER_START_DATA</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>resolver_start_client</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_CLOSESOCKETDATA</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>closesocket_client</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_SSL_SESSIONID_CACHE</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>sessionid</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>
<expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>sessionid</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>sessionid</name></name></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>CURLOPT_SSH_AUTH_TYPES</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_auth_types</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_SSH_PUBLIC_KEYFILE</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_PUBLIC_KEY</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_SSH_PRIVATE_KEYFILE</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_PRIVATE_KEY</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_SSH_HOST_PUBLIC_KEY_MD5</name></expr>:</case>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_HOST_PUBLIC_KEY_MD5</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_SSH_KNOWNHOSTS</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_KNOWNHOSTS</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_SSH_KEYFUNCTION</name></expr>:</case>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_keyfunc</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_sshkeycallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_SSH_KEYDATA</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_keyfunc_userp</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_SSH_COMPRESSION</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_compression</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<case>case <expr><name>CURLOPT_HTTP_TRANSFER_DECODING</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_te_skip</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_HTTP_CONTENT_DECODING</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_ce_skip</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_SSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_NEW_FILE_PERMS</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>arg</name> <operator>&gt;</operator> <literal type="number">0777</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>new_file_perms</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_NEW_DIRECTORY_PERMS</name></expr>:</case>



<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>arg</name> <operator>&gt;</operator> <literal type="number">0777</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>new_directory_perms</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CURLOPT_ADDRESS_SCOPE</name></expr>:</case>





<expr_stmt><expr><name>uarg</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>param</argument>, <argument>unsigned long</argument>)</argument_list></macro></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG</name> <operator>&gt;</operator> <literal type="number">4</literal></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>uarg</name> <operator>&gt;</operator> <name>UINT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>scope_id</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>uarg</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_PROTOCOLS</name></expr>:</case>




<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>allowed_protocols</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_REDIR_PROTOCOLS</name></expr>:</case>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>redir_protocols</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_DEFAULT_PROTOCOL</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DEFAULT_PROTOCOL</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_SMTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_MAIL_FROM</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_MAIL_FROM</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_MAIL_AUTH</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_MAIL_AUTH</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_MAIL_RCPT</name></expr>:</case>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mail_rcpt</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>struct <name>curl_slist</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_MAIL_RCPT_ALLLOWFAILS</name></expr>:</case>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mail_rcpt_allowfails</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CURLOPT_SASL_AUTHZID</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SASL_AUTHZID</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_SASL_IR</name></expr>:</case>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>sasl_ir</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_RTSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_RTSP_REQUEST</name></expr>:</case>
<block>{<block_content>




<decl_stmt><decl><type><name>long</name></type> <name>curl_rtspreq</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Curl_RtspReq</name></type> <name>rtspreq</name> <init>= <expr><name>RTSPREQ_NONE</name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>curl_rtspreq</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_RTSPREQ_OPTIONS</name></expr>:</case>
<expr_stmt><expr><name>rtspreq</name> <operator>=</operator> <name>RTSPREQ_OPTIONS</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_RTSPREQ_DESCRIBE</name></expr>:</case>
<expr_stmt><expr><name>rtspreq</name> <operator>=</operator> <name>RTSPREQ_DESCRIBE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_RTSPREQ_ANNOUNCE</name></expr>:</case>
<expr_stmt><expr><name>rtspreq</name> <operator>=</operator> <name>RTSPREQ_ANNOUNCE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_RTSPREQ_SETUP</name></expr>:</case>
<expr_stmt><expr><name>rtspreq</name> <operator>=</operator> <name>RTSPREQ_SETUP</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_RTSPREQ_PLAY</name></expr>:</case>
<expr_stmt><expr><name>rtspreq</name> <operator>=</operator> <name>RTSPREQ_PLAY</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_RTSPREQ_PAUSE</name></expr>:</case>
<expr_stmt><expr><name>rtspreq</name> <operator>=</operator> <name>RTSPREQ_PAUSE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_RTSPREQ_TEARDOWN</name></expr>:</case>
<expr_stmt><expr><name>rtspreq</name> <operator>=</operator> <name>RTSPREQ_TEARDOWN</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_RTSPREQ_GET_PARAMETER</name></expr>:</case>
<expr_stmt><expr><name>rtspreq</name> <operator>=</operator> <name>RTSPREQ_GET_PARAMETER</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_RTSPREQ_SET_PARAMETER</name></expr>:</case>
<expr_stmt><expr><name>rtspreq</name> <operator>=</operator> <name>RTSPREQ_SET_PARAMETER</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_RTSPREQ_RECORD</name></expr>:</case>
<expr_stmt><expr><name>rtspreq</name> <operator>=</operator> <name>RTSPREQ_RECORD</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_RTSPREQ_RECEIVE</name></expr>:</case>
<expr_stmt><expr><name>rtspreq</name> <operator>=</operator> <name>RTSPREQ_RECEIVE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>rtspreq</name> <operator>=</operator> <name>RTSPREQ_NONE</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>rtspreq</name></name> <operator>=</operator> <name>rtspreq</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>


<case>case <expr><name>CURLOPT_RTSP_SESSION_ID</name></expr>:</case>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_RTSP_SESSION_ID</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_RTSP_STREAM_URI</name></expr>:</case>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_RTSP_STREAM_URI</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_RTSP_TRANSPORT</name></expr>:</case>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_RTSP_TRANSPORT</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_RTSP_CLIENT_CSEQ</name></expr>:</case>





<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>rtsp_next_client_CSeq</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_RTSP_SERVER_CSEQ</name></expr>:</case>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>rtsp_next_server_CSeq</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLOPT_INTERLEAVEDATA</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>rtp_out</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_INTERLEAVEFUNCTION</name></expr>:</case>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fwrite_rtp</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_write_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_WILDCARDMATCH</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>wildcard_enabled</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_CHUNK_BGN_FUNCTION</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>chunk_bgn</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_chunk_bgn_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_CHUNK_END_FUNCTION</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>chunk_end</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_chunk_end_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_FNMATCH_FUNCTION</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fnmatch</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_fnmatch_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_CHUNK_DATA</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>wildcard</name><operator>.</operator><name>customptr</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_FNMATCH_DATA</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fnmatch_data</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TLS_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_TLSAUTH_USERNAME</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_TLSAUTH_USERNAME_ORIG</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_TLSAUTH_USERNAME_ORIG</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>authtype</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>authtype</name></name> <operator>=</operator> <name>CURL_TLSAUTH_SRP</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<break>break;</break>
<case>case <expr><name>CURLOPT_PROXY_TLSAUTH_USERNAME</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_TLSAUTH_USERNAME_PROXY</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_TLSAUTH_USERNAME_PROXY</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>authtype</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>authtype</name></name> <operator>=</operator> <name>CURL_TLSAUTH_SRP</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<break>break;</break>
<case>case <expr><name>CURLOPT_TLSAUTH_PASSWORD</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_TLSAUTH_PASSWORD_ORIG</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_TLSAUTH_USERNAME_ORIG</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>authtype</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>authtype</name></name> <operator>=</operator> <name>CURL_TLSAUTH_SRP</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<break>break;</break>
<case>case <expr><name>CURLOPT_PROXY_TLSAUTH_PASSWORD</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_TLSAUTH_PASSWORD_PROXY</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_TLSAUTH_USERNAME_PROXY</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>authtype</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>authtype</name></name> <operator>=</operator> <name>CURL_TLSAUTH_SRP</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<break>break;</break>
<case>case <expr><name>CURLOPT_TLSAUTH_TYPE</name></expr>:</case>
<expr_stmt><expr><name>argptr</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>argptr</name> <operator>||</operator>
<call><name>strncasecompare</name><argument_list>(<argument><expr><name>argptr</name></expr></argument>, <argument><expr><literal type="string">"SRP"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"SRP"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>authtype</name></name> <operator>=</operator> <name>CURL_TLSAUTH_SRP</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>authtype</name></name> <operator>=</operator> <name>CURL_TLSAUTH_NONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_PROXY_TLSAUTH_TYPE</name></expr>:</case>
<expr_stmt><expr><name>argptr</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>argptr</name> <operator>||</operator>
<call><name>strncasecompare</name><argument_list>(<argument><expr><name>argptr</name></expr></argument>, <argument><expr><literal type="string">"SRP"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"SRP"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>authtype</name></name> <operator>=</operator> <name>CURL_TLSAUTH_SRP</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>authtype</name></name> <operator>=</operator> <name>CURL_TLSAUTH_NONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ARES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_DNS_SERVERS</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DNS_SERVERS</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_set_dns_servers</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DNS_SERVERS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_DNS_INTERFACE</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DNS_INTERFACE</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_set_dns_interface</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DNS_INTERFACE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_DNS_LOCAL_IP4</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DNS_LOCAL_IP4</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_set_dns_local_ip4</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DNS_LOCAL_IP4</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_DNS_LOCAL_IP6</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DNS_LOCAL_IP6</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_set_dns_local_ip6</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DNS_LOCAL_IP6</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_TCP_KEEPALIVE</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tcp_keepalive</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_TCP_KEEPIDLE</name></expr>:</case>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tcp_keepidle</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_TCP_KEEPINTVL</name></expr>:</case>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tcp_keepintvl</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_TCP_FASTOPEN</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CONNECT_DATA_IDEMPOTENT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSG_FASTOPEN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>TCP_FASTOPEN_CONNECT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tcp_fastopen</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_NOT_BUILT_IN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>CURLOPT_SSL_ENABLE_NPN</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl_enable_npn</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_SSL_ENABLE_ALPN</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl_enable_alpn</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNIX_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_UNIX_SOCKET_PATH</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>abstract_unix_socket</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_UNIX_SOCKET_PATH</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_ABSTRACT_UNIX_SOCKET</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>abstract_unix_socket</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_UNIX_SOCKET_PATH</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CURLOPT_PATH_AS_IS</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>path_as_is</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_PIPEWAIT</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>pipewait</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_STREAM_WEIGHT</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>arg</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>arg</name> <operator>&lt;=</operator> <literal type="number">256</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_weight</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>arg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_STREAM_DEPENDS</name></expr>:</case>
<case>case <expr><name>CURLOPT_STREAM_DEPENDS_E</name></expr>:</case>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>dep</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>struct <name>Curl_easy</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dep</name> <operator>||</operator> <call><name>GOOD_EASY_HANDLE</name><argument_list>(<argument><expr><name>dep</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_on</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_http2_remove_child</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_on</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Curl_http2_add_child</name><argument_list>(<argument><expr><name>dep</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>option</name> <operator>==</operator> <name>CURLOPT_STREAM_DEPENDS_E</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<case>case <expr><name>CURLOPT_CONNECT_TO</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>connect_to</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>struct <name>curl_slist</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_SUPPRESS_CONNECT_HEADERS</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>suppress_connect_headers</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS</name></expr>:</case>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>happy_eyeballs_timeout</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_SHUFFLE_DNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_DNS_SHUFFLE_ADDRESSES</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>dns_shuffle_addresses</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_DISALLOW_USERNAME_IN_URL</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>disallow_username_in_url</name></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_DOH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_DOH_URL</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DOH</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>doh</name></name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DOH</name></expr>]</index></name></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURLOPT_UPKEEP_INTERVAL_MS</name></expr>:</case>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upkeep_interval_ms</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_MAXAGE_CONN</name></expr>:</case>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>maxage_conn</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_TRAILERFUNCTION</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>trailer_callback</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_trailer_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>CURLOPT_TRAILERDATA</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>trailer_data</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ALTSVC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURLOPT_ALTSVC</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>asi</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>asi</name></name> <operator>=</operator> <call><name>Curl_altsvc_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>asi</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>argptr</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setstropt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_ALTSVC</name></expr>]</index></name></expr></argument>, <argument><expr><name>argptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>argptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Curl_altsvc_load</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>asi</name></name></expr></argument>, <argument><expr><name>argptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CURLOPT_ALTSVC_CTRL</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>asi</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>asi</name></name> <operator>=</operator> <call><name>Curl_altsvc_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>asi</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_altsvc_ctrl</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>asi</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_UNKNOWN_OPTION</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>









<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>curl_easy_setopt</name></cpp:undef>
<function><type><name>CURLcode</name></type> <name>curl_easy_setopt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>CURLoption</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_vsetopt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
