<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\strerror.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRERROR_R</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POSIX_STRERROR_R</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GLIBC_STRERROR_R</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VXWORKS_STRERROR_R</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POSIX_STRERROR_R</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VXWORKS_STRERROR_R</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GLIBC_STRERROR_R</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VXWORKS_STRERROR_R</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POSIX_STRERROR_R</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GLIBC_STRERROR_R</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>





<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"strerror_r MUST be either POSIX, glibc or vxworks-style"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBIDN2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;idn2.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_sspi.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRESERVE_WINDOWS_ERROR_CODE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>curl_easy_strerror</name><parameter_list>(<parameter><decl><type><name>CURLcode</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch<condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLE_OK</name></expr>:</case>
<return>return <expr><literal type="string">"No error"</literal></expr>;</return>

<case>case <expr><name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>:</case>
<return>return <expr><literal type="string">"Unsupported protocol"</literal></expr>;</return>

<case>case <expr><name>CURLE_FAILED_INIT</name></expr>:</case>
<return>return <expr><literal type="string">"Failed initialization"</literal></expr>;</return>

<case>case <expr><name>CURLE_URL_MALFORMAT</name></expr>:</case>
<return>return <expr><literal type="string">"URL using bad/illegal format or missing URL"</literal></expr>;</return>

<case>case <expr><name>CURLE_NOT_BUILT_IN</name></expr>:</case>
<return>return <expr><literal type="string">"A requested feature, protocol or option was not found built-in in"</literal>
<literal type="string">" this libcurl due to a build-time decision."</literal></expr>;</return>

<case>case <expr><name>CURLE_COULDNT_RESOLVE_PROXY</name></expr>:</case>
<return>return <expr><literal type="string">"Couldn't resolve proxy name"</literal></expr>;</return>

<case>case <expr><name>CURLE_COULDNT_RESOLVE_HOST</name></expr>:</case>
<return>return <expr><literal type="string">"Couldn't resolve host name"</literal></expr>;</return>

<case>case <expr><name>CURLE_COULDNT_CONNECT</name></expr>:</case>
<return>return <expr><literal type="string">"Couldn't connect to server"</literal></expr>;</return>

<case>case <expr><name>CURLE_WEIRD_SERVER_REPLY</name></expr>:</case>
<return>return <expr><literal type="string">"Weird server reply"</literal></expr>;</return>

<case>case <expr><name>CURLE_REMOTE_ACCESS_DENIED</name></expr>:</case>
<return>return <expr><literal type="string">"Access denied to remote resource"</literal></expr>;</return>

<case>case <expr><name>CURLE_FTP_ACCEPT_FAILED</name></expr>:</case>
<return>return <expr><literal type="string">"FTP: The server failed to connect to data port"</literal></expr>;</return>

<case>case <expr><name>CURLE_FTP_ACCEPT_TIMEOUT</name></expr>:</case>
<return>return <expr><literal type="string">"FTP: Accepting server connect has timed out"</literal></expr>;</return>

<case>case <expr><name>CURLE_FTP_PRET_FAILED</name></expr>:</case>
<return>return <expr><literal type="string">"FTP: The server did not accept the PRET command."</literal></expr>;</return>

<case>case <expr><name>CURLE_FTP_WEIRD_PASS_REPLY</name></expr>:</case>
<return>return <expr><literal type="string">"FTP: unknown PASS reply"</literal></expr>;</return>

<case>case <expr><name>CURLE_FTP_WEIRD_PASV_REPLY</name></expr>:</case>
<return>return <expr><literal type="string">"FTP: unknown PASV reply"</literal></expr>;</return>

<case>case <expr><name>CURLE_FTP_WEIRD_227_FORMAT</name></expr>:</case>
<return>return <expr><literal type="string">"FTP: unknown 227 response format"</literal></expr>;</return>

<case>case <expr><name>CURLE_FTP_CANT_GET_HOST</name></expr>:</case>
<return>return <expr><literal type="string">"FTP: can't figure out the host in the PASV response"</literal></expr>;</return>

<case>case <expr><name>CURLE_HTTP2</name></expr>:</case>
<return>return <expr><literal type="string">"Error in the HTTP2 framing layer"</literal></expr>;</return>

<case>case <expr><name>CURLE_FTP_COULDNT_SET_TYPE</name></expr>:</case>
<return>return <expr><literal type="string">"FTP: couldn't set file type"</literal></expr>;</return>

<case>case <expr><name>CURLE_PARTIAL_FILE</name></expr>:</case>
<return>return <expr><literal type="string">"Transferred a partial file"</literal></expr>;</return>

<case>case <expr><name>CURLE_FTP_COULDNT_RETR_FILE</name></expr>:</case>
<return>return <expr><literal type="string">"FTP: couldn't retrieve (RETR failed) the specified file"</literal></expr>;</return>

<case>case <expr><name>CURLE_QUOTE_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"Quote command returned error"</literal></expr>;</return>

<case>case <expr><name>CURLE_HTTP_RETURNED_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"HTTP response code said error"</literal></expr>;</return>

<case>case <expr><name>CURLE_WRITE_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"Failed writing received data to disk/application"</literal></expr>;</return>

<case>case <expr><name>CURLE_UPLOAD_FAILED</name></expr>:</case>
<return>return <expr><literal type="string">"Upload failed (at start/before it took off)"</literal></expr>;</return>

<case>case <expr><name>CURLE_READ_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"Failed to open/read local data from file/application"</literal></expr>;</return>

<case>case <expr><name>CURLE_OUT_OF_MEMORY</name></expr>:</case>
<return>return <expr><literal type="string">"Out of memory"</literal></expr>;</return>

<case>case <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>:</case>
<return>return <expr><literal type="string">"Timeout was reached"</literal></expr>;</return>

<case>case <expr><name>CURLE_FTP_PORT_FAILED</name></expr>:</case>
<return>return <expr><literal type="string">"FTP: command PORT failed"</literal></expr>;</return>

<case>case <expr><name>CURLE_FTP_COULDNT_USE_REST</name></expr>:</case>
<return>return <expr><literal type="string">"FTP: command REST failed"</literal></expr>;</return>

<case>case <expr><name>CURLE_RANGE_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"Requested range was not delivered by the server"</literal></expr>;</return>

<case>case <expr><name>CURLE_HTTP_POST_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"Internal problem setting up the POST"</literal></expr>;</return>

<case>case <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"SSL connect error"</literal></expr>;</return>

<case>case <expr><name>CURLE_BAD_DOWNLOAD_RESUME</name></expr>:</case>
<return>return <expr><literal type="string">"Couldn't resume download"</literal></expr>;</return>

<case>case <expr><name>CURLE_FILE_COULDNT_READ_FILE</name></expr>:</case>
<return>return <expr><literal type="string">"Couldn't read a file:// file"</literal></expr>;</return>

<case>case <expr><name>CURLE_LDAP_CANNOT_BIND</name></expr>:</case>
<return>return <expr><literal type="string">"LDAP: cannot bind"</literal></expr>;</return>

<case>case <expr><name>CURLE_LDAP_SEARCH_FAILED</name></expr>:</case>
<return>return <expr><literal type="string">"LDAP: search failed"</literal></expr>;</return>

<case>case <expr><name>CURLE_FUNCTION_NOT_FOUND</name></expr>:</case>
<return>return <expr><literal type="string">"A required function in the library was not found"</literal></expr>;</return>

<case>case <expr><name>CURLE_ABORTED_BY_CALLBACK</name></expr>:</case>
<return>return <expr><literal type="string">"Operation was aborted by an application callback"</literal></expr>;</return>

<case>case <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>:</case>
<return>return <expr><literal type="string">"A libcurl function was given a bad argument"</literal></expr>;</return>

<case>case <expr><name>CURLE_INTERFACE_FAILED</name></expr>:</case>
<return>return <expr><literal type="string">"Failed binding local connection end"</literal></expr>;</return>

<case>case <expr><name>CURLE_TOO_MANY_REDIRECTS</name></expr> :</case>
<return>return <expr><literal type="string">"Number of redirects hit maximum amount"</literal></expr>;</return>

<case>case <expr><name>CURLE_UNKNOWN_OPTION</name></expr>:</case>
<return>return <expr><literal type="string">"An unknown option was passed in to libcurl"</literal></expr>;</return>

<case>case <expr><name>CURLE_TELNET_OPTION_SYNTAX</name></expr> :</case>
<return>return <expr><literal type="string">"Malformed telnet option"</literal></expr>;</return>

<case>case <expr><name>CURLE_GOT_NOTHING</name></expr>:</case>
<return>return <expr><literal type="string">"Server returned nothing (no headers, no data)"</literal></expr>;</return>

<case>case <expr><name>CURLE_SSL_ENGINE_NOTFOUND</name></expr>:</case>
<return>return <expr><literal type="string">"SSL crypto engine not found"</literal></expr>;</return>

<case>case <expr><name>CURLE_SSL_ENGINE_SETFAILED</name></expr>:</case>
<return>return <expr><literal type="string">"Can not set SSL crypto engine as default"</literal></expr>;</return>

<case>case <expr><name>CURLE_SSL_ENGINE_INITFAILED</name></expr>:</case>
<return>return <expr><literal type="string">"Failed to initialise SSL crypto engine"</literal></expr>;</return>

<case>case <expr><name>CURLE_SEND_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"Failed sending data to the peer"</literal></expr>;</return>

<case>case <expr><name>CURLE_RECV_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"Failure when receiving data from the peer"</literal></expr>;</return>

<case>case <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>:</case>
<return>return <expr><literal type="string">"Problem with the local SSL certificate"</literal></expr>;</return>

<case>case <expr><name>CURLE_SSL_CIPHER</name></expr>:</case>
<return>return <expr><literal type="string">"Couldn't use specified SSL cipher"</literal></expr>;</return>

<case>case <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>:</case>
<return>return <expr><literal type="string">"SSL peer certificate or SSH remote key was not OK"</literal></expr>;</return>

<case>case <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>:</case>
<return>return <expr><literal type="string">"Problem with the SSL CA cert (path? access rights?)"</literal></expr>;</return>

<case>case <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>:</case>
<return>return <expr><literal type="string">"Unrecognized or bad HTTP Content or Transfer-Encoding"</literal></expr>;</return>

<case>case <expr><name>CURLE_LDAP_INVALID_URL</name></expr>:</case>
<return>return <expr><literal type="string">"Invalid LDAP URL"</literal></expr>;</return>

<case>case <expr><name>CURLE_FILESIZE_EXCEEDED</name></expr>:</case>
<return>return <expr><literal type="string">"Maximum file size exceeded"</literal></expr>;</return>

<case>case <expr><name>CURLE_USE_SSL_FAILED</name></expr>:</case>
<return>return <expr><literal type="string">"Requested SSL level failed"</literal></expr>;</return>

<case>case <expr><name>CURLE_SSL_SHUTDOWN_FAILED</name></expr>:</case>
<return>return <expr><literal type="string">"Failed to shut down the SSL connection"</literal></expr>;</return>

<case>case <expr><name>CURLE_SSL_CRL_BADFILE</name></expr>:</case>
<return>return <expr><literal type="string">"Failed to load CRL file (path? access rights?, format?)"</literal></expr>;</return>

<case>case <expr><name>CURLE_SSL_ISSUER_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"Issuer check against peer certificate failed"</literal></expr>;</return>

<case>case <expr><name>CURLE_SEND_FAIL_REWIND</name></expr>:</case>
<return>return <expr><literal type="string">"Send failed since rewinding of the data stream failed"</literal></expr>;</return>

<case>case <expr><name>CURLE_LOGIN_DENIED</name></expr>:</case>
<return>return <expr><literal type="string">"Login denied"</literal></expr>;</return>

<case>case <expr><name>CURLE_TFTP_NOTFOUND</name></expr>:</case>
<return>return <expr><literal type="string">"TFTP: File Not Found"</literal></expr>;</return>

<case>case <expr><name>CURLE_TFTP_PERM</name></expr>:</case>
<return>return <expr><literal type="string">"TFTP: Access Violation"</literal></expr>;</return>

<case>case <expr><name>CURLE_REMOTE_DISK_FULL</name></expr>:</case>
<return>return <expr><literal type="string">"Disk full or allocation exceeded"</literal></expr>;</return>

<case>case <expr><name>CURLE_TFTP_ILLEGAL</name></expr>:</case>
<return>return <expr><literal type="string">"TFTP: Illegal operation"</literal></expr>;</return>

<case>case <expr><name>CURLE_TFTP_UNKNOWNID</name></expr>:</case>
<return>return <expr><literal type="string">"TFTP: Unknown transfer ID"</literal></expr>;</return>

<case>case <expr><name>CURLE_REMOTE_FILE_EXISTS</name></expr>:</case>
<return>return <expr><literal type="string">"Remote file already exists"</literal></expr>;</return>

<case>case <expr><name>CURLE_TFTP_NOSUCHUSER</name></expr>:</case>
<return>return <expr><literal type="string">"TFTP: No such user"</literal></expr>;</return>

<case>case <expr><name>CURLE_CONV_FAILED</name></expr>:</case>
<return>return <expr><literal type="string">"Conversion failed"</literal></expr>;</return>

<case>case <expr><name>CURLE_CONV_REQD</name></expr>:</case>
<return>return <expr><literal type="string">"Caller must register CURLOPT_CONV_ callback options"</literal></expr>;</return>

<case>case <expr><name>CURLE_REMOTE_FILE_NOT_FOUND</name></expr>:</case>
<return>return <expr><literal type="string">"Remote file not found"</literal></expr>;</return>

<case>case <expr><name>CURLE_SSH</name></expr>:</case>
<return>return <expr><literal type="string">"Error in the SSH layer"</literal></expr>;</return>

<case>case <expr><name>CURLE_AGAIN</name></expr>:</case>
<return>return <expr><literal type="string">"Socket not ready for send/recv"</literal></expr>;</return>

<case>case <expr><name>CURLE_RTSP_CSEQ_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"RTSP CSeq mismatch or invalid CSeq"</literal></expr>;</return>

<case>case <expr><name>CURLE_RTSP_SESSION_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"RTSP session error"</literal></expr>;</return>

<case>case <expr><name>CURLE_FTP_BAD_FILE_LIST</name></expr>:</case>
<return>return <expr><literal type="string">"Unable to parse FTP file list"</literal></expr>;</return>

<case>case <expr><name>CURLE_CHUNK_FAILED</name></expr>:</case>
<return>return <expr><literal type="string">"Chunk callback failed"</literal></expr>;</return>

<case>case <expr><name>CURLE_NO_CONNECTION_AVAILABLE</name></expr>:</case>
<return>return <expr><literal type="string">"The max connection limit is reached"</literal></expr>;</return>

<case>case <expr><name>CURLE_SSL_PINNEDPUBKEYNOTMATCH</name></expr>:</case>
<return>return <expr><literal type="string">"SSL public key does not match pinned public key"</literal></expr>;</return>

<case>case <expr><name>CURLE_SSL_INVALIDCERTSTATUS</name></expr>:</case>
<return>return <expr><literal type="string">"SSL server certificate status verification FAILED"</literal></expr>;</return>

<case>case <expr><name>CURLE_HTTP2_STREAM</name></expr>:</case>
<return>return <expr><literal type="string">"Stream error in the HTTP/2 framing layer"</literal></expr>;</return>

<case>case <expr><name>CURLE_RECURSIVE_API_CALL</name></expr>:</case>
<return>return <expr><literal type="string">"API function called from within callback"</literal></expr>;</return>

<case>case <expr><name>CURLE_AUTH_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"An authentication function returned an error"</literal></expr>;</return>

<case>case <expr><name>CURLE_HTTP3</name></expr>:</case>
<return>return <expr><literal type="string">"HTTP/3 error"</literal></expr>;</return>

<case>case <expr><name>CURLE_QUIC_CONNECT_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"QUIC connection error"</literal></expr>;</return>


<case>case <expr><name>CURLE_OBSOLETE20</name></expr>:</case>
<case>case <expr><name>CURLE_OBSOLETE24</name></expr>:</case>
<case>case <expr><name>CURLE_OBSOLETE29</name></expr>:</case>
<case>case <expr><name>CURLE_OBSOLETE32</name></expr>:</case>
<case>case <expr><name>CURLE_OBSOLETE40</name></expr>:</case>
<case>case <expr><name>CURLE_OBSOLETE44</name></expr>:</case>
<case>case <expr><name>CURLE_OBSOLETE46</name></expr>:</case>
<case>case <expr><name>CURLE_OBSOLETE50</name></expr>:</case>
<case>case <expr><name>CURLE_OBSOLETE51</name></expr>:</case>
<case>case <expr><name>CURLE_OBSOLETE57</name></expr>:</case>
<case>case <expr><name>CURL_LAST</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>














<return>return <expr><literal type="string">"Unknown error"</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"No error"</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Error"</literal></expr>;</return></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>curl_multi_strerror</name><parameter_list>(<parameter><decl><type><name>CURLMcode</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch<condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLM_CALL_MULTI_PERFORM</name></expr>:</case>
<return>return <expr><literal type="string">"Please call curl_multi_perform() soon"</literal></expr>;</return>

<case>case <expr><name>CURLM_OK</name></expr>:</case>
<return>return <expr><literal type="string">"No error"</literal></expr>;</return>

<case>case <expr><name>CURLM_BAD_HANDLE</name></expr>:</case>
<return>return <expr><literal type="string">"Invalid multi handle"</literal></expr>;</return>

<case>case <expr><name>CURLM_BAD_EASY_HANDLE</name></expr>:</case>
<return>return <expr><literal type="string">"Invalid easy handle"</literal></expr>;</return>

<case>case <expr><name>CURLM_OUT_OF_MEMORY</name></expr>:</case>
<return>return <expr><literal type="string">"Out of memory"</literal></expr>;</return>

<case>case <expr><name>CURLM_INTERNAL_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"Internal error"</literal></expr>;</return>

<case>case <expr><name>CURLM_BAD_SOCKET</name></expr>:</case>
<return>return <expr><literal type="string">"Invalid socket argument"</literal></expr>;</return>

<case>case <expr><name>CURLM_UNKNOWN_OPTION</name></expr>:</case>
<return>return <expr><literal type="string">"Unknown option"</literal></expr>;</return>

<case>case <expr><name>CURLM_ADDED_ALREADY</name></expr>:</case>
<return>return <expr><literal type="string">"The easy handle is already added to a multi handle"</literal></expr>;</return>

<case>case <expr><name>CURLM_RECURSIVE_API_CALL</name></expr>:</case>
<return>return <expr><literal type="string">"API function called from within callback"</literal></expr>;</return>

<case>case <expr><name>CURLM_WAKEUP_FAILURE</name></expr>:</case>
<return>return <expr><literal type="string">"Wakeup is unavailable or failed"</literal></expr>;</return>

<case>case <expr><name>CURLM_BAD_FUNCTION_ARGUMENT</name></expr>:</case>
<return>return <expr><literal type="string">"A libcurl function was given a bad argument"</literal></expr>;</return>

<case>case <expr><name>CURLM_LAST</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><literal type="string">"Unknown error"</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><name>error</name> <operator>==</operator> <name>CURLM_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"No error"</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Error"</literal></expr>;</return></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>curl_share_strerror</name><parameter_list>(<parameter><decl><type><name>CURLSHcode</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch<condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLSHE_OK</name></expr>:</case>
<return>return <expr><literal type="string">"No error"</literal></expr>;</return>

<case>case <expr><name>CURLSHE_BAD_OPTION</name></expr>:</case>
<return>return <expr><literal type="string">"Unknown share option"</literal></expr>;</return>

<case>case <expr><name>CURLSHE_IN_USE</name></expr>:</case>
<return>return <expr><literal type="string">"Share currently in use"</literal></expr>;</return>

<case>case <expr><name>CURLSHE_INVALID</name></expr>:</case>
<return>return <expr><literal type="string">"Invalid share handle"</literal></expr>;</return>

<case>case <expr><name>CURLSHE_NOMEM</name></expr>:</case>
<return>return <expr><literal type="string">"Out of memory"</literal></expr>;</return>

<case>case <expr><name>CURLSHE_NOT_BUILT_IN</name></expr>:</case>
<return>return <expr><literal type="string">"Feature not enabled in this library"</literal></expr>;</return>

<case>case <expr><name>CURLSHE_LAST</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><literal type="string">"CURLSHcode unknown"</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><name>error</name> <operator>==</operator> <name>CURLSHE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"No error"</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Error"</literal></expr>;</return></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_winsock_error</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>err</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WSAEINTR</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Call interrupted"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEBADF</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Bad file"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEACCES</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Bad access"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEFAULT</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Bad argument"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEINVAL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Invalid arguments"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEMFILE</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Out of file descriptors"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEWOULDBLOCK</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Call would block"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEINPROGRESS</name></expr>:</case>
<case>case <expr><name>WSAEALREADY</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Blocking call in progress"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAENOTSOCK</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Descriptor is not a socket"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEDESTADDRREQ</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Need destination address"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEMSGSIZE</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Bad message size"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEPROTOTYPE</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Bad protocol"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAENOPROTOOPT</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Protocol option is unsupported"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEPROTONOSUPPORT</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Protocol is unsupported"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAESOCKTNOSUPPORT</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Socket is unsupported"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEOPNOTSUPP</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Operation not supported"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEAFNOSUPPORT</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Address family not supported"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEPFNOSUPPORT</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Protocol family not supported"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEADDRINUSE</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Address already in use"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEADDRNOTAVAIL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Address not available"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAENETDOWN</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Network down"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAENETUNREACH</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Network unreachable"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAENETRESET</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Network has been reset"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAECONNABORTED</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Connection was aborted"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAECONNRESET</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Connection was reset"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAENOBUFS</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"No buffer space"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEISCONN</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Socket is already connected"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAENOTCONN</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Socket is not connected"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAESHUTDOWN</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Socket has been shut down"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAETOOMANYREFS</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Too many references"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAETIMEDOUT</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Timed out"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAECONNREFUSED</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Connection refused"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAELOOP</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Loop??"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAENAMETOOLONG</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Name too long"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEHOSTDOWN</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Host down"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEHOSTUNREACH</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Host unreachable"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAENOTEMPTY</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Not empty"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEPROCLIM</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Process limit reached"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEUSERS</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Too many users"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEDQUOT</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Bad quota"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAESTALE</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Something is stale"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAEREMOTE</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Remote error"</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAEDISCON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>WSAEDISCON</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Disconnected"</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>WSASYSNOTREADY</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Winsock library is not ready"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSANOTINITIALISED</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Winsock library not initialised"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WSAVERNOTSUPPORTED</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Winsock version not supported"</literal></expr>;</expr_stmt>
<break>break;</break>



<case>case <expr><name>WSAHOST_NOT_FOUND</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Host not found"</literal></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>WSATRY_AGAIN</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Host not found, try again"</literal></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>WSANO_RECOVERY</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"Unrecoverable error in call to nameserver"</literal></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>WSANO_DATA</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"No data record of requested type"</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name> <index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_winapi_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buflen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>wbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FormatMessage</name><argument_list>(<argument><expr><operator>(</operator><name>FORMAT_MESSAGE_FROM_SYSTEM</name> <operator>|</operator>
<name>FORMAT_MESSAGE_IGNORE_INSERTS</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><name>LANG_NEUTRAL</name></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wbuf</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>written</name> <init>= <expr><call><name>wcstombs</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>buflen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>written</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>written</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>FormatMessageA</name><argument_list>(<argument><expr><operator>(</operator><name>FORMAT_MESSAGE_FROM_SYSTEM</name> <operator>|</operator>
<name>FORMAT_MESSAGE_IGNORE_INSERTS</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><name>LANG_NEUTRAL</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>buflen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>p</name> <operator>&gt;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><operator>*</operator><name>buf</name></expr> ?</condition><then> <expr><name>buf</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




















<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Curl_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRESERVE_WINDOWS_ERROR_CODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>DWORD</name></type> <name>old_win_err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>old_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>max</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buflen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>err</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name>buflen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>err</name> <operator>&lt;</operator> <name>sys_nerr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if<condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>!</operator><call><name>get_winsock_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>!</operator><call><name>get_winapi_error</name><argument_list>(<argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>err</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="string">"Unknown error %d (%#x)"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRERROR_R</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POSIX_STRERROR_R</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>strerror_r</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="char">'\0'</literal> <operator>==</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="string">"Unknown error %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRERROR_R</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GLIBC_STRERROR_R</name></expr></argument>)</argument_list></call></expr></cpp:elif>





<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>strerror_r</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="string">"Unknown error %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRERROR_R</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VXWORKS_STRERROR_R</name></expr></argument>)</argument_list></call></expr></cpp:elif>




<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>OK</name> <operator>==</operator> <call><name>strerror_r</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="string">"Unknown error %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="string">"Unknown error %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>max</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>!=</operator> <name>old_errno</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>old_errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRESERVE_WINDOWS_ERROR_CODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>old_win_err</name> <operator>!=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetLastError</name><argument_list>(<argument><expr><name>old_win_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Curl_winapi_strerror</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRESERVE_WINDOWS_ERROR_CODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>DWORD</name></type> <name>old_win_err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>old_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buflen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>get_winapi_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"Unknown error %u (0x%08X)"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>err</name> <operator>==</operator> <name>ERROR_SUCCESS</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"No error"</literal></expr> </then><else>: <expr><literal type="string">"Error"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buflen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>!=</operator> <name>old_errno</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>old_errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRESERVE_WINDOWS_ERROR_CODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>old_win_err</name> <operator>!=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetLastError</name><argument_list>(<argument><expr><name>old_win_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Curl_sspi_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRESERVE_WINDOWS_ERROR_CODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>DWORD</name></type> <name>old_win_err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>old_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buflen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SEC_E_OK</name></expr>:</case>
<expr_stmt><expr><name>txt</name> <operator>=</operator> <literal type="string">"No error"</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEC2TXT</name><parameter_list>(<parameter><type><name>sec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case sec: txt = #sec; break</cpp:value></cpp:define>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>CRYPT_E_REVOKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_ALGORITHM_MISMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_BAD_BINDINGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_BAD_PKGID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_BUFFER_TOO_SMALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_CANNOT_INSTALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_CANNOT_PACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_CERT_EXPIRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_CERT_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_CERT_WRONG_USAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_CONTEXT_EXPIRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_CROSSREALM_DELEGATION_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_CRYPTO_SYSTEM_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_DECRYPT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_DELEGATION_POLICY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_DELEGATION_REQUIRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_DOWNGRADE_DETECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_ENCRYPT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_ILLEGAL_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_INCOMPLETE_CREDENTIALS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_INCOMPLETE_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_INSUFFICIENT_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_INVALID_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_INVALID_TOKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_ISSUING_CA_UNTRUSTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_ISSUING_CA_UNTRUSTED_KDC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_KDC_CERT_EXPIRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_KDC_CERT_REVOKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_KDC_INVALID_REQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_KDC_UNABLE_TO_REFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_KDC_UNKNOWN_ETYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_LOGON_DENIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_MAX_REFERRALS_EXCEEDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_MESSAGE_ALTERED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_MULTIPLE_ACCOUNTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_MUST_BE_KDC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_NOT_OWNER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_NO_AUTHENTICATING_AUTHORITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_NO_CREDENTIALS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_NO_IMPERSONATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_NO_IP_ADDRESSES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_NO_KERB_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_NO_PA_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_NO_S4U_PROT_SUPPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_NO_TGT_REPLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_OUT_OF_SEQUENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_PKINIT_CLIENT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_PKINIT_NAME_MISMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_POLICY_NLTM_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_QOP_NOT_SUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_REVOCATION_OFFLINE_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_REVOCATION_OFFLINE_KDC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_SECPKG_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_SECURITY_QOS_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_SHUTDOWN_IN_PROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_SMARTCARD_CERT_EXPIRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_SMARTCARD_CERT_REVOKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_SMARTCARD_LOGON_REQUIRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_STRONG_CRYPTO_NOT_SUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_TARGET_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_TIME_SKEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_TOO_MANY_PRINCIPALS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_UNFINISHED_CONTEXT_DELETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_UNKNOWN_CREDENTIALS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_UNSUPPORTED_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_UNSUPPORTED_PREAUTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_UNTRUSTED_ROOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_WRONG_CREDENTIAL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_E_WRONG_PRINCIPAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_I_COMPLETE_AND_CONTINUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_I_COMPLETE_NEEDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_I_CONTEXT_EXPIRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_I_CONTINUE_NEEDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_I_INCOMPLETE_CREDENTIALS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_I_LOCAL_LOGON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_I_NO_LSA_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_I_RENEGOTIATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEC2TXT</name><argument_list>(<argument><expr><name>SEC_I_SIGNATURE_NEEDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<expr_stmt><expr><name>txt</name> <operator>=</operator> <literal type="string">"Unknown error"</literal></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>SEC_E_ILLEGAL_MESSAGE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>,
<argument><expr><literal type="string">"SEC_E_ILLEGAL_MESSAGE (0x%08X) - This error usually occurs "</literal>
<literal type="string">"when a fatal SSL/TLS alert is received (e.g. handshake failed)."</literal>
<literal type="string">" More detail may be available in the Windows System event log."</literal></expr></argument>,
<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>txtbuf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>msgbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>txtbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txtbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s (0x%08X)"</literal></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>get_winapi_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>msgbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msgbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%s - %s"</literal></expr></argument>, <argument><expr><name>txtbuf</name></expr></argument>, <argument><expr><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>txtbuf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buflen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>SEC_E_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>txt</name> <operator>=</operator> <literal type="string">"No error"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>txt</name> <operator>=</operator> <literal type="string">"Error"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buflen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>!=</operator> <name>old_errno</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>old_errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRESERVE_WINDOWS_ERROR_CODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>old_win_err</name> <operator>!=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetLastError</name><argument_list>(<argument><expr><name>old_win_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
