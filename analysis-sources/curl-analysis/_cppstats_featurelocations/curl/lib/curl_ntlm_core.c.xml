<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\curl_ntlm_core.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/des.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/md5.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rand.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x00907001L</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DES_key_schedule</name></cpp:macro> <cpp:value>des_key_schedule</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DES_cblock</name></cpp:macro> <cpp:value>des_cblock</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DES_set_odd_parity</name></cpp:macro> <cpp:value>des_set_odd_parity</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DES_set_key</name></cpp:macro> <cpp:value>des_set_key</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DES_ecb_encrypt</name></cpp:macro> <cpp:value>des_ecb_encrypt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESKEY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESKEYARG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESKEYARG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESKEY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>&amp;x</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/des.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gcrypt.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_DIGEST_LENGTH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NSS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nss.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pk11pub.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hasht.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_DIGEST_LENGTH</name></cpp:macro> <cpp:value>MD5_LENGTH</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/des.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_md4.h"</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SECTRANSP</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CommonCrypto/CommonCryptor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CommonCrypto/CommonDigest.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OS400CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cipher.mih"</cpp:file></cpp:include> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wincrypt.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Can't compile NTLM support without a crypto library."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"non-ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_ntlm_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_hmac.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_des.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_md4.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTLMv2_BLOB_SIGNATURE</name></cpp:macro> <cpp:value>"\x01\x01\x00\x00"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTLMv2_BLOB_LEN</name></cpp:macro> <cpp:value>(44 -16 + ntlm-&gt;target_info_len + 4)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>void</name></type> <name>extend_key_56_to_64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key_56</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>key_56</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>key_56</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>key_56</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>key_56</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>key_56</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>key_56</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>key_56</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>key_56</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>key_56</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>key_56</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>key_56</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>key_56</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>key_56</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>key_56</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_des_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key_56</name></decl></parameter>,
<parameter><function_decl><type><name>DES_key_schedule</name></type> <name>DESKEYARG</name><parameter_list>(<parameter><decl><type><name>ks</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DES_cblock</name></type> <name>key</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>extend_key_56_to_64</name><argument_list>(<argument><expr><name>key_56</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DES_set_odd_parity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DES_set_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_des_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key_56</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>des_ctx</name></name> <modifier>*</modifier></type><name>des</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>extend_key_56_to_64</name><argument_list>(<argument><expr><name>key_56</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_des_set_odd_parity</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>des_set_key</name><argument_list>(<argument><expr><name>des</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>




<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_des_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key_56</name></decl></parameter>,
<parameter><decl><type><name>gcry_cipher_hd_t</name> <modifier>*</modifier></type><name>des</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>extend_key_56_to_64</name><argument_list>(<argument><expr><name>key_56</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_des_set_odd_parity</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>gcry_cipher_setkey</name><argument_list>(<argument><expr><operator>*</operator><name>des</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NSS</name></expr></argument>)</argument_list></call></expr></cpp:elif>






<function><type><specifier>static</specifier> <name>bool</name></type> <name>encrypt_des</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key_56</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>CK_MECHANISM_TYPE</name></type> <name>mech</name> <init>= <expr><name>CKM_DES_ECB</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>SECItem</name></type> <name>key_item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PK11SymKey</name> <modifier>*</modifier></type><name>symkey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECItem</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PK11Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>rv</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PK11SlotInfo</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>PK11_GetInternalKeySlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>slot</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>extend_key_56_to_64</name><argument_list>(<argument><expr><name>key_56</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_des_set_odd_parity</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>key_item</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key_item</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>symkey</name> <operator>=</operator> <call><name>PK11_ImportSymKey</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>mech</name></expr></argument>, <argument><expr><name>PK11_OriginUnwrap</name></expr></argument>, <argument><expr><name>CKA_ENCRYPT</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>key_item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>symkey</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>PK11_ParamFromIV</name><argument_list>(<argument><expr><name>mech</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>param</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>PK11_CreateContextBySymKey</name><argument_list>(<argument><expr><name>mech</name></expr></argument>, <argument><expr><name>CKA_ENCRYPT</name></expr></argument>, <argument><expr><name>symkey</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>SECSuccess</name> <operator>==</operator> <call><name>PK11_CipherOp</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_len</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>in</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name>SECSuccess</name> <operator>==</operator> <call><name>PK11_Finalize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>fail</name>:</label>

<if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PK11_DestroyContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>symkey</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PK11_FreeSymKey</name><argument_list>(<argument><expr><name>symkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>param</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SECITEM_FreeItem</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>PK11_FreeSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>encrypt_des</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key_56</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mbedtls_des_context</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>extend_key_56_to_64</name><argument_list>(<argument><expr><name>key_56</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mbedtls_des_key_set_parity</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mbedtls_des_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mbedtls_des_setkey_enc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mbedtls_des_crypt_ecb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SECTRANSP</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>encrypt_des</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key_56</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>out_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CCCryptorStatus</name></type> <name>err</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>extend_key_56_to_64</name><argument_list>(<argument><expr><name>key_56</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_des_set_odd_parity</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>CCCrypt</name><argument_list>(<argument><expr><name>kCCEncrypt</name></expr></argument>, <argument><expr><name>kCCAlgorithmDES</name></expr></argument>, <argument><expr><name>kCCOptionECBMode</name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
<argument><expr><name>kCCKeySizeDES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> , <argument><expr><name>out</name></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name> <operator>==</operator> <name>kCCSuccess</name></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OS400CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>encrypt_des</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key_56</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_CIPHER_Control_T</name></type> <name>ctl</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>Func_ID</name></name> <operator>=</operator> <name>ENCRYPT_ONLY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>Data_Len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>


<expr_stmt><expr><call><name>extend_key_56_to_64</name><argument_list>(<argument><expr><name>key_56</name></expr></argument>, <argument><expr><name><name>ctl</name><operator>.</operator><name>Crypto_Key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_des_set_odd_parity</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>ctl</name><operator>.</operator><name>Crypto_Key</name></name></expr></argument>, <argument><expr><name><name>ctl</name><operator>.</operator><name>Data_Len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_CIPHER</name><argument_list>(<argument><expr><operator>(</operator><name>_SPCPTR</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><operator>(</operator><name>_SPCPTR</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>encrypt_des</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key_56</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HCRYPTPROV</name></type> <name>hprov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCRYPTKEY</name></type> <name>hkey</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>BLOBHEADER</name></type> <name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>blob</name></decl>;</struct>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CryptAcquireContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hprov</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PROV_RSA_FULL</name></expr></argument>,
<argument><expr><name>CRYPT_VERIFYCONTEXT</name> <operator>|</operator> <name>CRYPT_SILENT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blob</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>blob</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>blob</name><operator>.</operator><name>hdr</name><operator>.</operator><name>bType</name></name> <operator>=</operator> <name>PLAINTEXTKEYBLOB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>blob</name><operator>.</operator><name>hdr</name><operator>.</operator><name>bVersion</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>blob</name><operator>.</operator><name>hdr</name><operator>.</operator><name>aiKeyAlg</name></name> <operator>=</operator> <name>CALG_DES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>blob</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>blob</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>


<expr_stmt><expr><call><name>extend_key_56_to_64</name><argument_list>(<argument><expr><name>key_56</name></expr></argument>, <argument><expr><name><name>blob</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_des_set_odd_parity</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>blob</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>blob</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CryptImportKey</name><argument_list>(<argument><expr><name>hprov</name></expr></argument>, <argument><expr><operator>(</operator><name>BYTE</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>blob</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>blob</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CryptReleaseContext</name><argument_list>(<argument><expr><name>hprov</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CryptEncrypt</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CryptDestroyKey</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CryptReleaseContext</name><argument_list>(<argument><expr><name>hprov</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 






<function><type><name>void</name></type> <name>Curl_ntlm_core_lm_resp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>keys</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>plaintext</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>results</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>DES_key_schedule</name></type> <name>ks</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setup_des_key</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name>DESKEY</name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DES_ecb_encrypt</name><argument_list>(<argument><expr><operator>(</operator><name>DES_cblock</name><operator>*</operator><operator>)</operator> <name>plaintext</name></expr></argument>, <argument><expr><operator>(</operator><name>DES_cblock</name><operator>*</operator><operator>)</operator> <name>results</name></expr></argument>,
<argument><expr><call><name>DESKEY</name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DES_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_des_key</name><argument_list>(<argument><expr><name>keys</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><call><name>DESKEY</name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DES_ecb_encrypt</name><argument_list>(<argument><expr><operator>(</operator><name>DES_cblock</name><operator>*</operator><operator>)</operator> <name>plaintext</name></expr></argument>, <argument><expr><operator>(</operator><name>DES_cblock</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>results</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>DESKEY</name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DES_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_des_key</name><argument_list>(<argument><expr><name>keys</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><call><name>DESKEY</name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DES_ecb_encrypt</name><argument_list>(<argument><expr><operator>(</operator><name>DES_cblock</name><operator>*</operator><operator>)</operator> <name>plaintext</name></expr></argument>, <argument><expr><operator>(</operator><name>DES_cblock</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>results</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>DESKEY</name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DES_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name><name>struct</name> <name>des_ctx</name></name></type> <name>des</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>setup_des_key</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>des</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>des_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>des</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>results</name></expr></argument>, <argument><expr><name>plaintext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup_des_key</name><argument_list>(<argument><expr><name>keys</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>des</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>des_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>des</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>results</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>plaintext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup_des_key</name><argument_list>(<argument><expr><name>keys</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>des</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>des_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>des</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>results</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>plaintext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>gcry_cipher_hd_t</name></type> <name>des</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gcry_cipher_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>des</name></expr></argument>, <argument><expr><name>GCRY_CIPHER_DES</name></expr></argument>, <argument><expr><name>GCRY_CIPHER_MODE_ECB</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup_des_key</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>des</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_cipher_encrypt</name><argument_list>(<argument><expr><name>des</name></expr></argument>, <argument><expr><name>results</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>plaintext</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_cipher_close</name><argument_list>(<argument><expr><name>des</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_cipher_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>des</name></expr></argument>, <argument><expr><name>GCRY_CIPHER_DES</name></expr></argument>, <argument><expr><name>GCRY_CIPHER_MODE_ECB</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup_des_key</name><argument_list>(<argument><expr><name>keys</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>des</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_cipher_encrypt</name><argument_list>(<argument><expr><name>des</name></expr></argument>, <argument><expr><name>results</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>plaintext</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_cipher_close</name><argument_list>(<argument><expr><name>des</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_cipher_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>des</name></expr></argument>, <argument><expr><name>GCRY_CIPHER_DES</name></expr></argument>, <argument><expr><name>GCRY_CIPHER_MODE_ECB</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup_des_key</name><argument_list>(<argument><expr><name>keys</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>des</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_cipher_encrypt</name><argument_list>(<argument><expr><name>des</name></expr></argument>, <argument><expr><name>results</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>plaintext</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_cipher_close</name><argument_list>(<argument><expr><name>des</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NSS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_SECTRANSP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_OS400CRYPTO</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><call><name>encrypt_des</name><argument_list>(<argument><expr><name>plaintext</name></expr></argument>, <argument><expr><name>results</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encrypt_des</name><argument_list>(<argument><expr><name>plaintext</name></expr></argument>, <argument><expr><name>results</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>keys</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encrypt_des</name><argument_list>(<argument><expr><name>plaintext</name></expr></argument>, <argument><expr><name>results</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>keys</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>CURLcode</name></type> <name>Curl_ntlm_core_mk_lm_hash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lmbuffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pw</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>magic</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x25</literal></expr> 
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>CURLMIN</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_strntoupper</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pw</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pw</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">14</literal> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_convert_to_network</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pw</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>DES_key_schedule</name></type> <name>ks</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setup_des_key</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><call><name>DESKEY</name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DES_ecb_encrypt</name><argument_list>(<argument><expr><operator>(</operator><name>DES_cblock</name> <operator>*</operator><operator>)</operator><name>magic</name></expr></argument>, <argument><expr><operator>(</operator><name>DES_cblock</name> <operator>*</operator><operator>)</operator><name>lmbuffer</name></expr></argument>,
<argument><expr><call><name>DESKEY</name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DES_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_des_key</name><argument_list>(<argument><expr><name>pw</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><call><name>DESKEY</name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DES_ecb_encrypt</name><argument_list>(<argument><expr><operator>(</operator><name>DES_cblock</name> <operator>*</operator><operator>)</operator><name>magic</name></expr></argument>, <argument><expr><operator>(</operator><name>DES_cblock</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>lmbuffer</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>DESKEY</name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DES_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name><name>struct</name> <name>des_ctx</name></name></type> <name>des</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>setup_des_key</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>des</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>des_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>des</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>lmbuffer</name></expr></argument>, <argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup_des_key</name><argument_list>(<argument><expr><name>pw</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>des</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>des_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>des</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>lmbuffer</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>gcry_cipher_hd_t</name></type> <name>des</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gcry_cipher_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>des</name></expr></argument>, <argument><expr><name>GCRY_CIPHER_DES</name></expr></argument>, <argument><expr><name>GCRY_CIPHER_MODE_ECB</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup_des_key</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>des</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_cipher_encrypt</name><argument_list>(<argument><expr><name>des</name></expr></argument>, <argument><expr><name>lmbuffer</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_cipher_close</name><argument_list>(<argument><expr><name>des</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_cipher_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>des</name></expr></argument>, <argument><expr><name>GCRY_CIPHER_DES</name></expr></argument>, <argument><expr><name>GCRY_CIPHER_MODE_ECB</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup_des_key</name><argument_list>(<argument><expr><name>pw</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>des</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_cipher_encrypt</name><argument_list>(<argument><expr><name>des</name></expr></argument>, <argument><expr><name>lmbuffer</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gcry_cipher_close</name><argument_list>(<argument><expr><name>des</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NSS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_SECTRANSP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_OS400CRYPTO</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><call><name>encrypt_des</name><argument_list>(<argument><expr><name>magic</name></expr></argument>, <argument><expr><name>lmbuffer</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encrypt_des</name><argument_list>(<argument><expr><name>magic</name></expr></argument>, <argument><expr><name>lmbuffer</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>pw</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lmbuffer</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">21</literal> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTRESPONSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ascii_to_unicode_le</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>srclen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>srclen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM_V2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ascii_uppercase_to_unicode_le</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srclen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>srclen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 





<function><type><name>CURLcode</name></type> <name>Curl_ntlm_core_mk_nt_hash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ntbuffer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <name>SIZE_T_MAX</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pw</name> <operator>=</operator> <ternary><condition><expr><name>len</name></expr> ?</condition><then> <expr><call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pw</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ascii_to_unicode_le</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_convert_to_network</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pw</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>Curl_md4it</name><argument_list>(<argument><expr><name>ntbuffer</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ntbuffer</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">21</literal> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM_V2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>CURLcode</name></type> <name>Curl_ntlm_core_mk_ntlmv2_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>userlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>domlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ntlmhash</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ntlmv2hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>identity_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>identity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><operator>(</operator><name>userlen</name> <operator>&gt;</operator> <name>SIZE_T_MAX</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>domlen</name> <operator>&gt;</operator> <name>SIZE_T_MAX</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>userlen</name> <operator>+</operator> <name>domlen</name><operator>)</operator> <operator>&gt;</operator> <name>SIZE_T_MAX</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>identity_len</name> <operator>=</operator> <operator>(</operator><name>userlen</name> <operator>+</operator> <name>domlen</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>identity</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>identity_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>identity</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ascii_uppercase_to_unicode_le</name><argument_list>(<argument><expr><name>identity</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>userlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ascii_to_unicode_le</name><argument_list>(<argument><expr><name>identity</name> <operator>+</operator> <operator>(</operator><name>userlen</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>domlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_hmacit</name><argument_list>(<argument><expr><name>Curl_HMAC_MD5</name></expr></argument>, <argument><expr><name>ntlmhash</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>identity</name></expr></argument>, <argument><expr><name>identity_len</name></expr></argument>,
<argument><expr><name>ntlmv2hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


















<function><type><name>CURLcode</name></type> <name>Curl_ntlm_core_mk_ntlmv2_resp</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ntlmv2hash</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>challenge_client</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ntlmdata</name></name> <modifier>*</modifier></type><name>ntlm</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ntresp</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>ntresp_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>















<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hmac_output</name><index>[<expr><name>HMAC_MD5_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>tw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_SIZEOF_CURL_OFF_T</name> <operator>&lt;</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"this section needs 64bit support to work"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>force_timestamp</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"CURL_FORCETIME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>force_timestamp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tw</name> <operator>=</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">11644473600</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">10000000</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>tw</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>curl_off_t</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">11644473600</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">10000000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <name>HMAC_MD5_LENGTH</name> <operator>+</operator> <name>NTLMv2_BLOB_LEN</name></expr>;</expr_stmt>


<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name> <operator>+</operator> <name>HMAC_MD5_LENGTH</name></expr></argument>, <argument><expr><name>NTLMv2_BLOB_LEN</name></expr></argument>,
<argument><expr><literal type="string">"%c%c%c%c"</literal> 
<literal type="string">"%c%c%c%c"</literal></expr></argument>, 
<argument><expr><name><name>NTLMv2_BLOB_SIGNATURE</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>NTLMv2_BLOB_SIGNATURE</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>NTLMv2_BLOB_SIGNATURE</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>NTLMv2_BLOB_SIGNATURE</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_write64_le</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>challenge_client</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">44</literal></expr></argument>, <argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>target_info</name></name></expr></argument>, <argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>target_info_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ntlm</name><operator>-&gt;</operator><name>nonce</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_hmacit</name><argument_list>(<argument><expr><name>Curl_HMAC_MD5</name></expr></argument>, <argument><expr><name>ntlmv2hash</name></expr></argument>, <argument><expr><name>HMAC_MD5_LENGTH</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>,
<argument><expr><name>NTLMv2_BLOB_LEN</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>hmac_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>hmac_output</name></expr></argument>, <argument><expr><name>HMAC_MD5_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>ntresp</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ntresp_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>















<function><type><name>CURLcode</name></type> <name>Curl_ntlm_core_mk_lmv2_resp</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ntlmv2hash</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>challenge_client</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>challenge_server</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lmresp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hmac_output</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>challenge_server</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>challenge_client</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_hmacit</name><argument_list>(<argument><expr><name>Curl_HMAC_MD5</name></expr></argument>, <argument><expr><name>ntlmv2hash</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
<argument><expr><name>hmac_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lmresp</name></expr></argument>, <argument><expr><name>hmac_output</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lmresp</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>challenge_client</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
