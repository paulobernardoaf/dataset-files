<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\hmac.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_hmac.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>









<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>hmac_ipad</name> <init>= <expr><literal type="number">0x36</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>hmac_opad</name> <init>= <expr><literal type="number">0x5C</literal></expr></init></decl>;</decl_stmt>



<function><type><name>HMAC_context</name> <modifier>*</modifier></type>
<name>Curl_HMAC_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HMAC_params</name> <modifier>*</modifier></type> <name>hashparams</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMAC_context</name> <modifier>*</modifier></type><name>ctxt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name></decl>;</decl_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctxt</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>hashparams</name><operator>-&gt;</operator><name>hmac_ctxtsize</name></name> <operator>+</operator>
<name><name>hashparams</name><operator>-&gt;</operator><name>hmac_resultlen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ctxt</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctxt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ctxt</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hash</name></name> <operator>=</operator> <name>hashparams</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hashctxt1</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ctxt</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hashctxt2</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hashctxt1</name></name> <operator>+</operator>
<name><name>hashparams</name><operator>-&gt;</operator><name>hmac_ctxtsize</name></name><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>keylen</name> <operator>&gt;</operator> <name><name>hashparams</name><operator>-&gt;</operator><name>hmac_maxkeylen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>hashparams</name><operator>-&gt;</operator><name>hmac_hinit</name></name>)<argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hashctxt1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>hashparams</name><operator>-&gt;</operator><name>hmac_hupdate</name></name>)<argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hashctxt1</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hkey</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hashctxt2</name></name> <operator>+</operator> <name><name>hashparams</name><operator>-&gt;</operator><name>hmac_ctxtsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>hashparams</name><operator>-&gt;</operator><name>hmac_hfinal</name></name>)<argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hashctxt1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>hkey</name></expr>;</expr_stmt>
<expr_stmt><expr><name>keylen</name> <operator>=</operator> <name><name>hashparams</name><operator>-&gt;</operator><name>hmac_resultlen</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call>(<modifier>*</modifier><name><name>hashparams</name><operator>-&gt;</operator><name>hmac_hinit</name></name>)<argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hashctxt1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>hashparams</name><operator>-&gt;</operator><name>hmac_hinit</name></name>)<argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hashctxt2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keylen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>*</operator><name>key</name> <operator>^</operator> <name>hmac_ipad</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>hashparams</name><operator>-&gt;</operator><name>hmac_hupdate</name></name>)<argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hashctxt1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>*</operator><name>key</name><operator>++</operator> <operator>^</operator> <name>hmac_opad</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>hashparams</name><operator>-&gt;</operator><name>hmac_hupdate</name></name>)<argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hashctxt2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hashparams</name><operator>-&gt;</operator><name>hmac_maxkeylen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>hashparams</name><operator>-&gt;</operator><name>hmac_hupdate</name></name>)<argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hashctxt1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hmac_ipad</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>hashparams</name><operator>-&gt;</operator><name>hmac_hupdate</name></name>)<argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hashctxt2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hmac_opad</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<return>return <expr><name>ctxt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_HMAC_update</name><parameter_list>(<parameter><decl><type><name>HMAC_context</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hash</name><operator>-&gt;</operator><name>hmac_hupdate</name></name>)<argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hashctxt1</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>Curl_HMAC_final</name><parameter_list>(<parameter><decl><type><name>HMAC_context</name> <modifier>*</modifier></type><name>ctxt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>HMAC_params</name> <modifier>*</modifier></type> <name>hashparams</name> <init>= <expr><name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hash</name></name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hashctxt2</name></name> <operator>+</operator>
<name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hash</name><operator>-&gt;</operator><name>hmac_ctxtsize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>hashparams</name><operator>-&gt;</operator><name>hmac_hfinal</name></name>)<argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hashctxt1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>hashparams</name><operator>-&gt;</operator><name>hmac_hupdate</name></name>)<argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hashctxt2</name></name></expr></argument>,
<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>hashparams</name><operator>-&gt;</operator><name>hmac_resultlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>hashparams</name><operator>-&gt;</operator><name>hmac_hfinal</name></name>)<argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>hmac_hashctxt2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


















<function><type><name>CURLcode</name></type> <name>Curl_hmacit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HMAC_params</name> <modifier>*</modifier></type><name>hashparams</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>datalen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HMAC_context</name> <modifier>*</modifier></type><name>ctxt</name> <init>= <expr><call><name>Curl_HMAC_init</name><argument_list>(<argument><expr><name>hashparams</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctxt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>Curl_HMAC_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_HMAC_final</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
