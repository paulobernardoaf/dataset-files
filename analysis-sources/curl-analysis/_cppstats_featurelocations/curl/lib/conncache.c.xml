<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\conncache.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conncache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"share.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sigpipe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASHKEY_SIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>conn_llist_dtor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>element</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>element</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bundle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>bundle_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>cb_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>cb_ptr</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cb_ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>connectbundle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>cb_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>cb_ptr</name><operator>)</operator><operator>-&gt;</operator><name>num_connections</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>cb_ptr</name><operator>)</operator><operator>-&gt;</operator><name>multiuse</name></name> <operator>=</operator> <name>BUNDLE_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_llist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>cb_ptr</name><operator>)</operator><operator>-&gt;</operator><name>conn_list</name></name></expr></argument>, <argument><expr><operator>(</operator><name>curl_llist_dtor</name><operator>)</operator> <name>conn_llist_dtor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bundle_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>cb_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cb_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_llist_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb_ptr</name><operator>-&gt;</operator><name>conn_list</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>bundle_add_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>cb_ptr</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Curl_llist_insert_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb_ptr</name><operator>-&gt;</operator><name>conn_list</name></name></expr></argument>, <argument><expr><name><name>cb_ptr</name><operator>-&gt;</operator><name>conn_list</name><operator>.</operator><name>tail</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>bundle_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bundle</name></name> <operator>=</operator> <name>cb_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb_ptr</name><operator>-&gt;</operator><name>num_connections</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>bundle_remove_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>cb_ptr</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>cb_ptr</name><operator>-&gt;</operator><name>conn_list</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>curr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>conn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_llist_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb_ptr</name><operator>-&gt;</operator><name>conn_list</name></name></expr></argument>, <argument><expr><name>curr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb_ptr</name><operator>-&gt;</operator><name>num_connections</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bundle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_bundle_hash_entry</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>freethis</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator>struct <name>connectbundle</name> <operator>*</operator><operator>)</operator> <name>freethis</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bundle_destroy</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_conncache_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type><name>connc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>connc</name><operator>-&gt;</operator><name>closure_handle</name></name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>connc</name><operator>-&gt;</operator><name>closure_handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>connc</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>Curl_hash_str</name></expr></argument>,
<argument><expr><name>Curl_str_key_compare</name></expr></argument>, <argument><expr><name>free_bundle_hash_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>connc</name><operator>-&gt;</operator><name>closure_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>connc</name><operator>-&gt;</operator><name>closure_handle</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn_cache</name></name> <operator>=</operator> <name>connc</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_conncache_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type><name>connc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>connc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_hash_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>connc</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>hashkey</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, 
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hostp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>port</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>hostp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>hostp</name> <operator>=</operator> <name>hostname</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%ld%s"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_conncache_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CONN_UNLOCK</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>size_t</name></type> <name>Curl_conncache_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>num</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONN_LOCK</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn_cache</name><operator>-&gt;</operator><name>num_conn</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONN_UNLOCK</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>





<function><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>Curl_conncache_find_bundle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type><name>connc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hostp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>bundle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CONN_LOCK</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>connc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><name>HASHKEY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hashkey</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>hostp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bundle</name> <operator>=</operator> <call><name>Curl_hash_pick</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>connc</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>bundle</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>conncache_add_bundle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type><name>connc</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>bundle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>Curl_hash_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>connc</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>p</name></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>conncache_remove_bundle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type><name>connc</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>bundle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash_iterator</name></name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash_element</name></name> <modifier>*</modifier></type><name>he</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>connc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_hash_start_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>connc</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>he</name> <operator>=</operator> <call><name>Curl_hash_next_element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>he</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>he</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>bundle</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>Curl_hash_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>connc</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>he</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>he</name><operator>-&gt;</operator><name>key_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>he</name> <operator>=</operator> <call><name>Curl_hash_next_element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_conncache_add_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type><name>connc</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>bundle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>new_bundle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>bundle</name> <operator>=</operator> <call><name>Curl_conncache_find_bundle</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn_cache</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>bundle</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><name>HASHKEY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bundle_create</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_bundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>unlock</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hashkey</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>conncache_add_bundle</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn_cache</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>new_bundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bundle_destroy</name><argument_list>(<argument><expr><name>new_bundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>unlock</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bundle</name> <operator>=</operator> <name>new_bundle</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bundle_add_conn</name><argument_list>(<argument><expr><name>bundle</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>connection_id</name></name> <operator>=</operator> <name><name>connc</name><operator>-&gt;</operator><name>next_connection_id</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>connc</name><operator>-&gt;</operator><name>num_conn</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Added connection %ld. "</literal>
<literal type="string">"The cache now contains %zu members\n"</literal></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>connection_id</name></name></expr></argument>, <argument><expr><name><name>connc</name><operator>-&gt;</operator><name>num_conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>unlock</name>:</label>
<expr_stmt><expr><call><name>CONN_UNLOCK</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>Curl_conncache_remove_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>bundle</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>bundle</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type><name>connc</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn_cache</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><name>bundle</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CONN_LOCK</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bundle_remove_conn</name><argument_list>(<argument><expr><name>bundle</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>bundle</name><operator>-&gt;</operator><name>num_connections</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>conncache_remove_bundle</name><argument_list>(<argument><expr><name>connc</name></expr></argument>, <argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bundle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>connc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>connc</name><operator>-&gt;</operator><name>num_conn</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"The cache now contains %zu members\n"</literal></expr></argument>,
<argument><expr><name><name>connc</name><operator>-&gt;</operator><name>num_conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CONN_UNLOCK</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>













<function><type><name>bool</name></type> <name>Curl_conncache_foreach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type><name>connc</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash_iterator</name></name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash_element</name></name> <modifier>*</modifier></type><name>he</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>connc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CONN_LOCK</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_hash_start_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>connc</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>he</name> <operator>=</operator> <call><name>Curl_hash_next_element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>he</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>bundle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bundle</name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>he</name> <operator>=</operator> <call><name>Curl_hash_next_element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>bundle</name><operator>-&gt;</operator><name>conn_list</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>curr</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>curr</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>==</operator> <call><name>func</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CONN_UNLOCK</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
<expr_stmt><expr><call><name>CONN_UNLOCK</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type>
<name>conncache_find_first_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type><name>connc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash_iterator</name></name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash_element</name></name> <modifier>*</modifier></type><name>he</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>bundle</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_hash_start_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>connc</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>he</name> <operator>=</operator> <call><name>Curl_hash_next_element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>he</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bundle</name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>bundle</name><operator>-&gt;</operator><name>conn_list</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>curr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>curr</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>he</name> <operator>=</operator> <call><name>Curl_hash_next_element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>Curl_conncache_return_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>maxconnects</name> <init>=
<expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>multi</name><operator>-&gt;</operator><name>maxconnects</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>multi</name><operator>-&gt;</operator><name>num_easy</name></name> <operator>*</operator> <literal type="number">4</literal></expr></then><else>:
<expr><name><name>data</name><operator>-&gt;</operator><name>multi</name><operator>-&gt;</operator><name>maxconnects</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn_candidate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>lastused</name></name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>maxconnects</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>Curl_conncache_size</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>maxconnects</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Connection cache is full, closing the oldest one.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>conn_candidate</name> <operator>=</operator> <call><name>Curl_conncache_extract_oldest</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>conn_candidate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Curl_disconnect</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn_candidate</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>conn_candidate</name> <operator>==</operator> <name>conn</name><operator>)</operator></expr> ?</condition><then> <expr><name>FALSE</name></expr> </then><else>: <expr><name>TRUE</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>










<function><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type>
<name>Curl_conncache_extract_bundle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>bundle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>highscore</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>score</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn_candidate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>bundle</name><operator>-&gt;</operator><name>conn_list</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>curr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>conn</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CONN_INUSE</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>score</name> <operator>=</operator> <call><name>Curl_timediff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>lastused</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>score</name> <operator>&gt;</operator> <name>highscore</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>highscore</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><name>conn_candidate</name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><name>conn_candidate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bundle_remove_conn</name><argument_list>(<argument><expr><name>bundle</name></expr></argument>, <argument><expr><name>conn_candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn_cache</name><operator>-&gt;</operator><name>num_conn</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"The cache now contains %zu members\n"</literal></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn_cache</name><operator>-&gt;</operator><name>num_conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn_candidate</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<return>return <expr><name>conn_candidate</name></expr>;</return>
</block_content>}</block></function>







<function><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type>
<name>Curl_conncache_extract_oldest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type><name>connc</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn_cache</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash_iterator</name></name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash_element</name></name> <modifier>*</modifier></type><name>he</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>highscore</name> <init>=<expr><operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>score</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn_candidate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>bundle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>bundle_candidate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CONN_LOCK</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_hash_start_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>connc</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>he</name> <operator>=</operator> <call><name>Curl_hash_next_element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>he</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bundle</name> <operator>=</operator> <name><name>he</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>bundle</name><operator>-&gt;</operator><name>conn_list</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>curr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>conn</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CONN_INUSE</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>close</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>connect_only</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>score</name> <operator>=</operator> <call><name>Curl_timediff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>lastused</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>score</name> <operator>&gt;</operator> <name>highscore</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>highscore</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><name>conn_candidate</name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bundle_candidate</name> <operator>=</operator> <name>bundle</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>he</name> <operator>=</operator> <call><name>Curl_hash_next_element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><name>conn_candidate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bundle_remove_conn</name><argument_list>(<argument><expr><name>bundle_candidate</name></expr></argument>, <argument><expr><name>conn_candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>connc</name><operator>-&gt;</operator><name>num_conn</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"The cache now contains %zu members\n"</literal></expr></argument>,
<argument><expr><name><name>connc</name><operator>-&gt;</operator><name>num_conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn_candidate</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CONN_UNLOCK</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>conn_candidate</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_conncache_close_all_connections</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type><name>connc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>conncache_find_first_connection</name><argument_list>(<argument><expr><name>connc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>conn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SIGPIPE_VARIABLE</name><argument_list>(<argument><expr><name>pipe_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>connc</name><operator>-&gt;</operator><name>closure_handle</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigpipe_ignore</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pipe_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"kill all"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Curl_disconnect</name><argument_list>(<argument><expr><name><name>connc</name><operator>-&gt;</operator><name>closure_handle</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigpipe_restore</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pipe_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>conncache_find_first_connection</name><argument_list>(<argument><expr><name>connc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name><name>connc</name><operator>-&gt;</operator><name>closure_handle</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SIGPIPE_VARIABLE</name><argument_list>(<argument><expr><name>pipe_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigpipe_ignore</name><argument_list>(<argument><expr><name><name>connc</name><operator>-&gt;</operator><name>closure_handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pipe_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_hostcache_clean</name><argument_list>(<argument><expr><name><name>connc</name><operator>-&gt;</operator><name>closure_handle</name></name></expr></argument>,
<argument><expr><name><name>connc</name><operator>-&gt;</operator><name>closure_handle</name><operator>-&gt;</operator><name>dns</name><operator>.</operator><name>hostcache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>connc</name><operator>-&gt;</operator><name>closure_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigpipe_restore</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pipe_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

void Curl_conncache_print(struct conncache *connc)
{
struct curl_hash_iterator iter;
struct curl_llist_element *curr;
struct curl_hash_element *he;

if(!connc)
return;

fprintf(stderr, "=Bundle cache=\n");

Curl_hash_start_iterate(connc-&gt;hash, &amp;iter);

he = Curl_hash_next_element(&amp;iter);
while(he) {
struct connectbundle *bundle;
struct connectdata *conn;

bundle = he-&gt;ptr;

fprintf(stderr, "%s -", he-&gt;key);
curr = bundle-&gt;conn_list-&gt;head;
while(curr) {
conn = curr-&gt;ptr;

fprintf(stderr, " [%p %d]", (void *)conn, conn-&gt;inuse);
curr = curr-&gt;next;
}
fprintf(stderr, "\n");

he = Curl_hash_next_element(&amp;iter);
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
