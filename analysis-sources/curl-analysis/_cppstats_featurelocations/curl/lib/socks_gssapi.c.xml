<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\socks_gssapi.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_gssapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timeval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"socks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>gss_ctx_id_t</name></type> <name>gss_context</name> <init>= <expr><name>GSS_C_NO_CONTEXT</name></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type> <name>check_gss_err</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>OM_uint32</name></type> <name>major_status</name></decl></parameter>,
<parameter><decl><type><name>OM_uint32</name></type> <name>minor_status</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>function</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>GSS_ERROR</name><argument_list>(<argument><expr><name>major_status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>OM_uint32</name></type> <name>maj_stat</name></decl>, <decl><type ref="prev"/><name>min_stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OM_uint32</name></type> <name>msg_ctx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gss_buffer_desc</name></type> <name>status_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_ctx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>!</operator><name>msg_ctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maj_stat</name> <operator>=</operator> <call><name>gss_display_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min_stat</name></expr></argument>, <argument><expr><name>major_status</name></expr></argument>,
<argument><expr><name>GSS_C_GSS_CODE</name></expr></argument>,
<argument><expr><name>GSS_C_NULL_OID</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>msg_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>maj_stat</name> <operator>==</operator> <name>GSS_S_COMPLETE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>len</name> <operator>+</operator> <name><name>status_string</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>status_string</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name><name>status_string</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min_stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min_stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>len</name> <operator>+</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>msg_ctx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>!</operator><name>msg_ctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maj_stat</name> <operator>=</operator> <call><name>gss_display_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min_stat</name></expr></argument>, <argument><expr><name>minor_status</name></expr></argument>,
<argument><expr><name>GSS_C_MECH_CODE</name></expr></argument>,
<argument><expr><name>GSS_C_NULL_OID</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>msg_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>maj_stat</name> <operator>==</operator> <name>GSS_S_COMPLETE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>len</name> <operator>+</operator> <name><name>status_string</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>status_string</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min_stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min_stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"GSS-API error: %s failed:\n%s"</literal></expr></argument>, <argument><expr><name>function</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_SOCKS5_gssapi_negotiate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>actualread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OM_uint32</name></type> <name>gss_major_status</name></decl>, <decl><type ref="prev"/><name>gss_minor_status</name></decl>, <decl><type ref="prev"/><name>gss_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OM_uint32</name></type> <name>gss_ret_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gss_conf_state</name></decl>, <decl><type ref="prev"/><name>gss_enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gss_buffer_desc</name></type> <name>service</name> <init>= <expr><name>GSS_C_EMPTY_BUFFER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gss_buffer_desc</name></type> <name>gss_send_token</name> <init>= <expr><name>GSS_C_EMPTY_BUFFER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gss_buffer_desc</name></type> <name>gss_recv_token</name> <init>= <expr><name>GSS_C_EMPTY_BUFFER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gss_buffer_desc</name></type> <name>gss_w_token</name> <init>= <expr><name>GSS_C_EMPTY_BUFFER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gss_buffer_desc</name><modifier>*</modifier></type> <name>gss_token</name> <init>= <expr><name>GSS_C_NO_BUFFER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gss_name_t</name></type> <name>server</name> <init>= <expr><name>GSS_C_NO_NAME</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gss_name_t</name></type> <name>gss_client_name</name> <init>= <expr><name>GSS_C_NO_NAME</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>us_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>socksreq</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>serviceptr</name> <init>= <expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXY_SERVICE_NAME</name></expr>]</index></name></expr> ?</condition><then>
<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXY_SERVICE_NAME</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"rcmd"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>serviceptr_length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>serviceptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>










<if_stmt><if>if<condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>serviceptr</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>service</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>serviceptr_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>service</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>service</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>service</name><operator>.</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>service</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>serviceptr</name></expr></argument>, <argument><expr><name><name>service</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gss_major_status</name> <operator>=</operator> <call><name>gss_import_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_minor_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>service</name></expr></argument>,
<argument><expr><operator>(</operator><name>gss_OID</name><operator>)</operator> <name>GSS_C_NULL_OID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>service</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>serviceptr_length</name> <operator>+</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>service</name><operator>.</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>service</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>serviceptr_length</name> <operator>+</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name><name>service</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>service</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s@%s"</literal></expr></argument>,
<argument><expr><name>serviceptr</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gss_major_status</name> <operator>=</operator> <call><name>gss_import_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_minor_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>service</name></expr></argument>,
<argument><expr><name>GSS_C_NT_HOSTBASED_SERVICE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><call><name>check_gss_err</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>gss_major_status</name></expr></argument>,
<argument><expr><name>gss_minor_status</name></expr></argument>, <argument><expr><literal type="string">"gss_import_name()"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to create service name."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>curlx_nonblock</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>gss_major_status</name> <operator>=</operator> <call><name>Curl_gss_init_sec_context</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>gss_minor_status</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>,
<argument><expr><name>server</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>Curl_krb5_mech_oid</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>gss_token</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>gss_send_token</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>gss_ret_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>gss_token</name> <operator>!=</operator> <name>GSS_C_NO_BUFFER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_recv_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>check_gss_err</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>gss_major_status</name></expr></argument>,
<argument><expr><name>gss_minor_status</name></expr></argument>, <argument><expr><literal type="string">"gss_init_sec_context"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gss_release_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_recv_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_send_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to initial GSS-API token."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>gss_send_token</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>us_length</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><name><name>gss_send_token</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>socksreq</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>us_length</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>socksreq</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>code</name> <operator>||</operator> <operator>(</operator><literal type="number">4</literal> <operator>!=</operator> <name>written</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to send GSS-API authentication request."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_recv_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_send_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>gss_send_token</name><operator>.</operator><name>value</name></name></expr></argument>,
<argument><expr><name><name>gss_send_token</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>code</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>gss_send_token</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <name>written</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to send GSS-API authentication token."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_recv_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_send_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_send_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_recv_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>gss_major_status</name> <operator>!=</operator> <name>GSS_S_CONTINUE_NEEDED</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>











<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_blockread_all</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>socksreq</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>(</operator><name>actualread</name> <operator>!=</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to receive GSS-API authentication response."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"User was rejected by the SOCKS5 server (%d %d)."</literal></expr></argument>,
<argument><expr><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Invalid GSS-API authentication response type (%d %d)."</literal></expr></argument>,
<argument><expr><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>us_length</name></expr></argument>, <argument><expr><name>socksreq</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us_length</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>us_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gss_recv_token</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>us_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gss_recv_token</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>us_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>gss_recv_token</name><operator>.</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"Could not allocate memory for GSS-API authentication "</literal>
<literal type="string">"response token."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_blockread_all</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>gss_recv_token</name><operator>.</operator><name>value</name></name></expr></argument>,
<argument><expr><name><name>gss_recv_token</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>(</operator><name>actualread</name> <operator>!=</operator> <name>us_length</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to receive GSS-API authentication token."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_recv_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gss_token</name> <operator>=</operator> <operator>&amp;</operator><name>gss_recv_token</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>gss_release_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>gss_major_status</name> <operator>=</operator> <call><name>gss_inquire_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_minor_status</name></expr></argument>, <argument><expr><name>gss_context</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>gss_client_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>check_gss_err</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>gss_major_status</name></expr></argument>,
<argument><expr><name>gss_minor_status</name></expr></argument>, <argument><expr><literal type="string">"gss_inquire_context"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_client_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to determine user name."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>gss_major_status</name> <operator>=</operator> <call><name>gss_display_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_minor_status</name></expr></argument>, <argument><expr><name>gss_client_name</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>gss_send_token</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>check_gss_err</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>gss_major_status</name></expr></argument>,
<argument><expr><name>gss_minor_status</name></expr></argument>, <argument><expr><literal type="string">"gss_display_name"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_client_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_send_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to determine user name."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>user</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>gss_send_token</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>user</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_client_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_send_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>gss_send_token</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>gss_send_token</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>user</name><index>[<expr><name><name>gss_send_token</name><operator>.</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_client_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_send_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS5 server authencticated user %s with GSS-API.\n"</literal></expr></argument>,<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>user</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>gss_enc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>gss_ret_flags</name> <operator>&amp;</operator> <name>GSS_C_CONF_FLAG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gss_enc</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>gss_ret_flags</name> <operator>&amp;</operator> <name>GSS_C_INTEG_FLAG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gss_enc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS5 server supports GSS-API %s data protection.\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>gss_enc</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"no"</literal></expr></then><else>:<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>gss_enc</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"integrity"</literal></expr></then><else>:<expr><literal type="string">"confidentiality"</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gss_enc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>






























<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>socks5_gssapi_nec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>us_length</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>socksreq</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>us_length</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>gss_send_token</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gss_send_token</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>gss_send_token</name><operator>.</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>gss_send_token</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_enc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gss_major_status</name> <operator>=</operator> <call><name>gss_wrap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_minor_status</name></expr></argument>, <argument><expr><name>gss_context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>GSS_C_QOP_DEFAULT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_send_token</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>gss_conf_state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_w_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>check_gss_err</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>gss_major_status</name></expr></argument>, <argument><expr><name>gss_minor_status</name></expr></argument>, <argument><expr><literal type="string">"gss_wrap"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_send_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_w_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to wrap GSS-API encryption value into token."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_send_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us_length</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><name><name>gss_w_token</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>socksreq</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>us_length</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>socksreq</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>code</name> <operator>||</operator> <operator>(</operator><literal type="number">4</literal> <operator>!=</operator> <name>written</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to send GSS-API encryption request."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_w_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>socks5_gssapi_nec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>socksreq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_enc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>socksreq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>code</name> <operator>||</operator> <operator>(</operator> <literal type="number">1</literal> <operator>!=</operator> <name>written</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to send GSS-API encryption type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>gss_w_token</name><operator>.</operator><name>value</name></name></expr></argument>,
<argument><expr><name><name>gss_w_token</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>code</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>gss_w_token</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <name>written</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to send GSS-API encryption type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_w_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_w_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_blockread_all</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>socksreq</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>(</operator><name>actualread</name> <operator>!=</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to receive GSS-API encryption response."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"User was rejected by the SOCKS5 server (%d %d)."</literal></expr></argument>,
<argument><expr><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Invalid GSS-API encryption response type (%d %d)."</literal></expr></argument>,
<argument><expr><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>us_length</name></expr></argument>, <argument><expr><name>socksreq</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us_length</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>us_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gss_recv_token</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>us_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gss_recv_token</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>gss_recv_token</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>gss_recv_token</name><operator>.</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_blockread_all</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>gss_recv_token</name><operator>.</operator><name>value</name></name></expr></argument>,
<argument><expr><name><name>gss_recv_token</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>(</operator><name>actualread</name> <operator>!=</operator> <name>us_length</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to receive GSS-API encryptrion type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_recv_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>socks5_gssapi_nec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gss_major_status</name> <operator>=</operator> <call><name>gss_unwrap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_minor_status</name></expr></argument>, <argument><expr><name>gss_context</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>gss_recv_token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_w_token</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GSS_C_QOP_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>check_gss_err</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>gss_major_status</name></expr></argument>, <argument><expr><name>gss_minor_status</name></expr></argument>, <argument><expr><literal type="string">"gss_unwrap"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_recv_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_w_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to unwrap GSS-API encryption value into token."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_recv_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>gss_w_token</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Invalid GSS-API encryption response length (%d)."</literal></expr></argument>,
<argument><expr><name><name>gss_w_token</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_w_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>socksreq</name></expr></argument>, <argument><expr><name><name>gss_w_token</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>gss_w_token</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_w_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>gss_recv_token</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Invalid GSS-API encryption response length (%d)."</literal></expr></argument>,
<argument><expr><name><name>gss_recv_token</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_recv_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>socksreq</name></expr></argument>, <argument><expr><name><name>gss_recv_token</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>gss_recv_token</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_recv_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>curlx_nonblock</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS5 access with%s protection granted.\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"out GSS-API data"</literal></expr></then><else>:
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">" GSS-API integrity"</literal></expr></then><else>:<expr><literal type="string">" GSS-API confidentiality"</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>socks5_gssapi_enctype</name></name> <operator>=</operator> <name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gss_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
