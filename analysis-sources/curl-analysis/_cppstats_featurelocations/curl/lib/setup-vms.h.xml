<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\setup-vms.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEADER_CURL_SETUP_VMS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_CURL_SETUP_VMS_H</name></cpp:macro></cpp:define>




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name> <name>save</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name> <name>disable</name> <name>dollarid</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getenv</name></cpp:macro> <cpp:value>decc_getenv</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__INITIAL_POINTER_SIZE</name> <operator>!=</operator> <literal type="number">64</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getpwuid</name></cpp:macro> <cpp:value>decc_getpwuid</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>decc$getenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__name</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unixlib.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getenv</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getpwuid</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getenv</name></cpp:macro> <cpp:value>vms_getenv</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getpwuid</name></cpp:macro> <cpp:value>vms_getpwuid</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sys$assign</name></cpp:macro> <cpp:value>SYS$ASSIGN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sys$dassgn</name></cpp:macro> <cpp:value>SYS$DASSGN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sys$qiow</name></cpp:macro> <cpp:value>SYS$QIOW</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__INITIAL_POINTER_SIZE</name></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>__pointer_size</name> <name>__save</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__USE_LONG_GID_T</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decc_getpwuid</name></cpp:macro> <cpp:value>DECC$__LONG_GID_GETPWUID</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__INITIAL_POINTER_SIZE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decc_getpwuid</name></cpp:macro> <cpp:value>decc$__32_getpwuid</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decc_getpwuid</name></cpp:macro> <cpp:value>decc$getpwuid</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type> <name>decc_getpwuid</name><parameter_list>(<parameter><decl><type><name>uid_t</name></type> <name>uid</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__INITIAL_POINTER_SIZE</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:if>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>vms_translate_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>unix_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>test_str</name></decl>;</decl_stmt>



<expr_stmt><expr><name>test_str</name> <operator>=</operator> <call><name>strpbrk</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">":[&lt;^"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>test_str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>path</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>unix_path</name> <operator>=</operator> <call><name>decc$translate_vms</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>unix_path</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>path</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vms_translate_path</name><parameter_list>(<parameter><type><name>__path</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__path</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__INITIAL_POINTER_SIZE</name></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>__pointer_size</name> <name>__restore</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>vms_getenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>envvar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vms_path</name></decl>;</decl_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>decc$getenv</name><argument_list>(<argument><expr><name>envvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vms_path</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vms_translate_path</name><argument_list>(<argument><expr><name>vms_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>passwd</name></name></type> <name>vms_passwd_cache</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type> <name>vms_getpwuid</name><parameter_list>(<parameter><decl><type><name>uid_t</name></type> <name>uid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type> <name>my_passwd</name></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__INITIAL_POINTER_SIZE</name></expr></cpp:if>
<decl_stmt><decl><type><name>__char_ptr32</name></type> <name>unix_path</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>unix_path</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>unix_path</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>my_passwd</name> <operator>=</operator> <call><name>decc_getpwuid</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>my_passwd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>my_passwd</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>unix_path</name> <operator>=</operator> <call><name>vms_translate_path</name><argument_list>(<argument><expr><name><name>my_passwd</name><operator>-&gt;</operator><name>pw_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>unix_path</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>my_passwd</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>unix_path</name> <operator>==</operator> <name><name>my_passwd</name><operator>-&gt;</operator><name>pw_dir</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>my_passwd</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>vms_passwd_cache</name><operator>.</operator><name>pw_name</name></name> <operator>=</operator> <name><name>my_passwd</name><operator>-&gt;</operator><name>pw_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vms_passwd_cache</name><operator>.</operator><name>pw_uid</name></name> <operator>=</operator> <name><name>my_passwd</name><operator>-&gt;</operator><name>pw_uid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vms_passwd_cache</name><operator>.</operator><name>pw_gid</name></name> <operator>=</operator> <name><name>my_passwd</name><operator>-&gt;</operator><name>pw_uid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vms_passwd_cache</name><operator>.</operator><name>pw_dir</name></name> <operator>=</operator> <name>unix_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vms_passwd_cache</name><operator>.</operator><name>pw_shell</name></name> <operator>=</operator> <name><name>my_passwd</name><operator>-&gt;</operator><name>pw_shell</name></name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name>vms_passwd_cache</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name> <name>restore</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASN1_INTEGER_get</name></cpp:macro> <cpp:value>ASN1_INTEGER_GET</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASN1_STRING_data</name></cpp:macro> <cpp:value>ASN1_STRING_DATA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASN1_STRING_length</name></cpp:macro> <cpp:value>ASN1_STRING_LENGTH</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASN1_STRING_print</name></cpp:macro> <cpp:value>ASN1_STRING_PRINT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASN1_STRING_to_UTF8</name></cpp:macro> <cpp:value>ASN1_STRING_TO_UTF8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASN1_STRING_type</name></cpp:macro> <cpp:value>ASN1_STRING_TYPE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIO_ctrl</name></cpp:macro> <cpp:value>BIO_CTRL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIO_free</name></cpp:macro> <cpp:value>BIO_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIO_new</name></cpp:macro> <cpp:value>BIO_NEW</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIO_s_mem</name></cpp:macro> <cpp:value>BIO_S_MEM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BN_bn2bin</name></cpp:macro> <cpp:value>BN_BN2BIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BN_num_bits</name></cpp:macro> <cpp:value>BN_NUM_BITS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYPTO_cleanup_all_ex_data</name></cpp:macro> <cpp:value>CRYPTO_CLEANUP_ALL_EX_DATA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYPTO_free</name></cpp:macro> <cpp:value>CRYPTO_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYPTO_malloc</name></cpp:macro> <cpp:value>CRYPTO_MALLOC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONF_modules_load_file</name></cpp:macro> <cpp:value>CONF_MODULES_LOAD_FILE</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS_OLD_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONF_MFLAGS_IGNORE_MISSING_FILE</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CONF_modules_load_file</name></cpp:undef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>CONF_modules_load_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>appname</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DES_ecb_encrypt</name></cpp:macro> <cpp:value>DES_ECB_ENCRYPT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DES_set_key</name></cpp:macro> <cpp:value>DES_SET_KEY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DES_set_odd_parity</name></cpp:macro> <cpp:value>DES_SET_ODD_PARITY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENGINE_ctrl</name></cpp:macro> <cpp:value>ENGINE_CTRL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENGINE_ctrl_cmd</name></cpp:macro> <cpp:value>ENGINE_CTRL_CMD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENGINE_finish</name></cpp:macro> <cpp:value>ENGINE_FINISH</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENGINE_free</name></cpp:macro> <cpp:value>ENGINE_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENGINE_get_first</name></cpp:macro> <cpp:value>ENGINE_GET_FIRST</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENGINE_get_id</name></cpp:macro> <cpp:value>ENGINE_GET_ID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENGINE_get_next</name></cpp:macro> <cpp:value>ENGINE_GET_NEXT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENGINE_init</name></cpp:macro> <cpp:value>ENGINE_INIT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENGINE_load_builtin_engines</name></cpp:macro> <cpp:value>ENGINE_LOAD_BUILTIN_ENGINES</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENGINE_load_private_key</name></cpp:macro> <cpp:value>ENGINE_LOAD_PRIVATE_KEY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENGINE_set_default</name></cpp:macro> <cpp:value>ENGINE_SET_DEFAULT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_clear_error</name></cpp:macro> <cpp:value>ERR_CLEAR_ERROR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_error_string</name></cpp:macro> <cpp:value>ERR_ERROR_STRING</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_error_string_n</name></cpp:macro> <cpp:value>ERR_ERROR_STRING_N</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_free_strings</name></cpp:macro> <cpp:value>ERR_FREE_STRINGS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_get_error</name></cpp:macro> <cpp:value>ERR_GET_ERROR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_peek_error</name></cpp:macro> <cpp:value>ERR_PEEK_ERROR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_remove_state</name></cpp:macro> <cpp:value>ERR_REMOVE_STATE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVP_PKEY_copy_parameters</name></cpp:macro> <cpp:value>EVP_PKEY_COPY_PARAMETERS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVP_PKEY_free</name></cpp:macro> <cpp:value>EVP_PKEY_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVP_cleanup</name></cpp:macro> <cpp:value>EVP_CLEANUP</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GENERAL_NAMES_free</name></cpp:macro> <cpp:value>GENERAL_NAMES_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>i2d_X509_PUBKEY</name></cpp:macro> <cpp:value>I2D_X509_PUBKEY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD4_Final</name></cpp:macro> <cpp:value>MD4_FINAL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD4_Init</name></cpp:macro> <cpp:value>MD4_INIT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD4_Update</name></cpp:macro> <cpp:value>MD4_UPDATE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_Final</name></cpp:macro> <cpp:value>MD5_FINAL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_Init</name></cpp:macro> <cpp:value>MD5_INIT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_Update</name></cpp:macro> <cpp:value>MD5_UPDATE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENSSL_add_all_algo_noconf</name></cpp:macro> <cpp:value>OPENSSL_ADD_ALL_ALGO_NOCONF</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENSSL_load_builtin_modules</name></cpp:macro> <cpp:value>OPENSSL_LOAD_BUILTIN_MODULES</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEM_read_X509</name></cpp:macro> <cpp:value>PEM_READ_X509</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEM_write_bio_X509</name></cpp:macro> <cpp:value>PEM_WRITE_BIO_X509</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PKCS12_PBE_add</name></cpp:macro> <cpp:value>PKCS12_PBE_ADD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PKCS12_free</name></cpp:macro> <cpp:value>PKCS12_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PKCS12_parse</name></cpp:macro> <cpp:value>PKCS12_PARSE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND_add</name></cpp:macro> <cpp:value>RAND_ADD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND_bytes</name></cpp:macro> <cpp:value>RAND_BYTES</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND_egd</name></cpp:macro> <cpp:value>RAND_EGD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND_file_name</name></cpp:macro> <cpp:value>RAND_FILE_NAME</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND_load_file</name></cpp:macro> <cpp:value>RAND_LOAD_FILE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND_status</name></cpp:macro> <cpp:value>RAND_STATUS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CIPHER_get_name</name></cpp:macro> <cpp:value>SSL_CIPHER_GET_NAME</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_add_client_CA</name></cpp:macro> <cpp:value>SSL_CTX_ADD_CLIENT_CA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_callback_ctrl</name></cpp:macro> <cpp:value>SSL_CTX_CALLBACK_CTRL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_check_private_key</name></cpp:macro> <cpp:value>SSL_CTX_CHECK_PRIVATE_KEY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_ctrl</name></cpp:macro> <cpp:value>SSL_CTX_CTRL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_free</name></cpp:macro> <cpp:value>SSL_CTX_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_get_cert_store</name></cpp:macro> <cpp:value>SSL_CTX_GET_CERT_STORE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_load_verify_locations</name></cpp:macro> <cpp:value>SSL_CTX_LOAD_VERIFY_LOCATIONS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_new</name></cpp:macro> <cpp:value>SSL_CTX_NEW</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_set_cipher_list</name></cpp:macro> <cpp:value>SSL_CTX_SET_CIPHER_LIST</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_set_def_passwd_cb_ud</name></cpp:macro> <cpp:value>SSL_CTX_SET_DEF_PASSWD_CB_UD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_set_default_passwd_cb</name></cpp:macro> <cpp:value>SSL_CTX_SET_DEFAULT_PASSWD_CB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_set_msg_callback</name></cpp:macro> <cpp:value>SSL_CTX_SET_MSG_CALLBACK</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_set_verify</name></cpp:macro> <cpp:value>SSL_CTX_SET_VERIFY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_use_PrivateKey</name></cpp:macro> <cpp:value>SSL_CTX_USE_PRIVATEKEY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_use_PrivateKey_file</name></cpp:macro> <cpp:value>SSL_CTX_USE_PRIVATEKEY_FILE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_use_cert_chain_file</name></cpp:macro> <cpp:value>SSL_CTX_USE_CERT_CHAIN_FILE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_use_certificate</name></cpp:macro> <cpp:value>SSL_CTX_USE_CERTIFICATE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_use_certificate_file</name></cpp:macro> <cpp:value>SSL_CTX_USE_CERTIFICATE_FILE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_SESSION_free</name></cpp:macro> <cpp:value>SSL_SESSION_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_connect</name></cpp:macro> <cpp:value>SSL_CONNECT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_free</name></cpp:macro> <cpp:value>SSL_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_get1_session</name></cpp:macro> <cpp:value>SSL_GET1_SESSION</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_get_certificate</name></cpp:macro> <cpp:value>SSL_GET_CERTIFICATE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_get_current_cipher</name></cpp:macro> <cpp:value>SSL_GET_CURRENT_CIPHER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_get_error</name></cpp:macro> <cpp:value>SSL_GET_ERROR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_get_peer_cert_chain</name></cpp:macro> <cpp:value>SSL_GET_PEER_CERT_CHAIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_get_peer_certificate</name></cpp:macro> <cpp:value>SSL_GET_PEER_CERTIFICATE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_get_privatekey</name></cpp:macro> <cpp:value>SSL_GET_PRIVATEKEY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_get_session</name></cpp:macro> <cpp:value>SSL_GET_SESSION</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_get_shutdown</name></cpp:macro> <cpp:value>SSL_GET_SHUTDOWN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_get_verify_result</name></cpp:macro> <cpp:value>SSL_GET_VERIFY_RESULT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_library_init</name></cpp:macro> <cpp:value>SSL_LIBRARY_INIT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_load_error_strings</name></cpp:macro> <cpp:value>SSL_LOAD_ERROR_STRINGS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_new</name></cpp:macro> <cpp:value>SSL_NEW</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_peek</name></cpp:macro> <cpp:value>SSL_PEEK</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_pending</name></cpp:macro> <cpp:value>SSL_PENDING</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_read</name></cpp:macro> <cpp:value>SSL_READ</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_set_connect_state</name></cpp:macro> <cpp:value>SSL_SET_CONNECT_STATE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_set_fd</name></cpp:macro> <cpp:value>SSL_SET_FD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_set_session</name></cpp:macro> <cpp:value>SSL_SET_SESSION</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_shutdown</name></cpp:macro> <cpp:value>SSL_SHUTDOWN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_version</name></cpp:macro> <cpp:value>SSL_VERSION</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_write</name></cpp:macro> <cpp:value>SSL_WRITE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSLeay</name></cpp:macro> <cpp:value>SSLEAY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSLv23_client_method</name></cpp:macro> <cpp:value>SSLV23_CLIENT_METHOD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSLv3_client_method</name></cpp:macro> <cpp:value>SSLV3_CLIENT_METHOD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLSv1_client_method</name></cpp:macro> <cpp:value>TLSV1_CLIENT_METHOD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_create_method</name></cpp:macro> <cpp:value>UI_CREATE_METHOD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_destroy_method</name></cpp:macro> <cpp:value>UI_DESTROY_METHOD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_get0_user_data</name></cpp:macro> <cpp:value>UI_GET0_USER_DATA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_get_input_flags</name></cpp:macro> <cpp:value>UI_GET_INPUT_FLAGS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_get_string_type</name></cpp:macro> <cpp:value>UI_GET_STRING_TYPE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_create_method</name></cpp:macro> <cpp:value>UI_CREATE_METHOD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_destroy_method</name></cpp:macro> <cpp:value>UI_DESTROY_METHOD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_method_get_closer</name></cpp:macro> <cpp:value>UI_METHOD_GET_CLOSER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_method_get_opener</name></cpp:macro> <cpp:value>UI_METHOD_GET_OPENER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_method_get_reader</name></cpp:macro> <cpp:value>UI_METHOD_GET_READER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_method_get_writer</name></cpp:macro> <cpp:value>UI_METHOD_GET_WRITER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_method_set_closer</name></cpp:macro> <cpp:value>UI_METHOD_SET_CLOSER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_method_set_opener</name></cpp:macro> <cpp:value>UI_METHOD_SET_OPENER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_method_set_reader</name></cpp:macro> <cpp:value>UI_METHOD_SET_READER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_method_set_writer</name></cpp:macro> <cpp:value>UI_METHOD_SET_WRITER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_OpenSSL</name></cpp:macro> <cpp:value>UI_OPENSSL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI_set_result</name></cpp:macro> <cpp:value>UI_SET_RESULT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509V3_EXT_print</name></cpp:macro> <cpp:value>X509V3_EXT_PRINT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_EXTENSION_get_critical</name></cpp:macro> <cpp:value>X509_EXTENSION_GET_CRITICAL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_EXTENSION_get_data</name></cpp:macro> <cpp:value>X509_EXTENSION_GET_DATA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_EXTENSION_get_object</name></cpp:macro> <cpp:value>X509_EXTENSION_GET_OBJECT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_LOOKUP_file</name></cpp:macro> <cpp:value>X509_LOOKUP_FILE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_NAME_ENTRY_get_data</name></cpp:macro> <cpp:value>X509_NAME_ENTRY_GET_DATA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_NAME_get_entry</name></cpp:macro> <cpp:value>X509_NAME_GET_ENTRY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_NAME_get_index_by_NID</name></cpp:macro> <cpp:value>X509_NAME_GET_INDEX_BY_NID</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_NAME_print_ex</name></cpp:macro> <cpp:value>X509_NAME_PRINT_EX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_STORE_CTX_get_current_cert</name></cpp:macro> <cpp:value>X509_STORE_CTX_GET_CURRENT_CERT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_STORE_add_lookup</name></cpp:macro> <cpp:value>X509_STORE_ADD_LOOKUP</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_STORE_set_flags</name></cpp:macro> <cpp:value>X509_STORE_SET_FLAGS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_check_issued</name></cpp:macro> <cpp:value>X509_CHECK_ISSUED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_free</name></cpp:macro> <cpp:value>X509_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_get_ext_d2i</name></cpp:macro> <cpp:value>X509_GET_EXT_D2I</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_get_issuer_name</name></cpp:macro> <cpp:value>X509_GET_ISSUER_NAME</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_get_pubkey</name></cpp:macro> <cpp:value>X509_GET_PUBKEY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_get_serialNumber</name></cpp:macro> <cpp:value>X509_GET_SERIALNUMBER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_get_subject_name</name></cpp:macro> <cpp:value>X509_GET_SUBJECT_NAME</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_load_crl_file</name></cpp:macro> <cpp:value>X509_LOAD_CRL_FILE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_verify_cert_error_string</name></cpp:macro> <cpp:value>X509_VERIFY_CERT_ERROR_STRING</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d2i_PKCS12_fp</name></cpp:macro> <cpp:value>D2I_PKCS12_FP</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>i2t_ASN1_OBJECT</name></cpp:macro> <cpp:value>I2T_ASN1_OBJECT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sk_num</name></cpp:macro> <cpp:value>SK_NUM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sk_pop</name></cpp:macro> <cpp:value>SK_POP</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sk_pop_free</name></cpp:macro> <cpp:value>SK_POP_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sk_value</name></cpp:macro> <cpp:value>SK_VALUE</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENSSL_NO_SHA256</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA256_Final</name></cpp:macro> <cpp:value>SHA256_FINAL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA256_Init</name></cpp:macro> <cpp:value>SHA256_INIT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA256_Update</name></cpp:macro> <cpp:value>SHA256_UPDATE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_UPPERCASE_GSSAPI</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gss_seal</name></cpp:macro> <cpp:value>GSS_SEAL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gss_unseal</name></cpp:macro> <cpp:value>GSS_UNSEAL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_UPPERCASE_KRBAPI</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ENABLE_IPV6</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inflate</name></cpp:macro> <cpp:value>INFLATE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inflateEnd</name></cpp:macro> <cpp:value>INFLATEEND</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inflateInit2_</name></cpp:macro> <cpp:value>INFLATEINIT2_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inflateInit_</name></cpp:macro> <cpp:value>INFLATEINIT_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zlibVersion</name></cpp:macro> <cpp:value>ZLIBVERSION</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x00907001L</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>des_set_odd_parity</name></cpp:macro> <cpp:value>DES_SET_ODD_PARITY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>des_set_key</name></cpp:macro> <cpp:value>DES_SET_KEY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>des_ecb_encrypt</name></cpp:macro> <cpp:value>DES_ECB_ENCRYPT</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/evp.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OpenSSL_add_all_algorithms</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OpenSSL_add_all_algorithms</name></cpp:macro> <cpp:value>OPENSSL_ADD_ALL_ALGORITHMS</cpp:value></cpp:define>
<function_decl><type><name>void</name></type> <name>OPENSSL_ADD_ALL_ALGORITHMS</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x00907001L</literal><operator>)</operator></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>des_set_odd_parity</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DES_set_odd_parity</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>des_set_key</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DES_set_key</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>des_ecb_encrypt</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DES_ecb_encrypt</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>des_set_odd_parity</name><parameter_list>(<parameter><decl><type><name>des_cblock</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DES_SET_ODD_PARITY</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>des_set_key</name><parameter_list>(<parameter><decl><type><name>const_des_cblock</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>des_key_schedule</name></type> <name>schedule</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>DES_SET_KEY</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>schedule</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>des_ecb_encrypt</name><parameter_list>(<parameter><decl><type><name>const_des_cblock</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
<parameter><decl><type><name>des_cblock</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>des_key_schedule</name></type> <name>ks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>DES_ECB_ENCRYPT</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>ks</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x00907000L</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X509_STORE_set_flags</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X509_STORE_set_flags</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_STORE_set_flags</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
