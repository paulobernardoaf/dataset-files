<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\splay.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"splay.h"</cpp:file></cpp:include>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>compare</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_splaycomparekeys((i),(j))</cpp:value></cpp:define>





<function><type><name><name>struct</name> <name>Curl_tree</name></name> <modifier>*</modifier></type><name>Curl_splay</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>i</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_tree</name></name></type> <name>N</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>t</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>N</name><operator>.</operator><name>smaller</name></name> <operator>=</operator> <name><name>N</name><operator>.</operator><name>larger</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>r</name> <operator>=</operator> <operator>&amp;</operator><name>N</name></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>comp</name> <init>= <expr><call><name>compare</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>comp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>smaller</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>smaller</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>smaller</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>smaller</name></name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>larger</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>larger</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>smaller</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>smaller</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>smaller</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>comp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>larger</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>larger</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>larger</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>larger</name></name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>smaller</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>smaller</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>larger</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>larger</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>larger</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>larger</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>smaller</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>smaller</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>larger</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>smaller</name></name> <operator>=</operator> <name><name>N</name><operator>.</operator><name>larger</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>larger</name></name> <operator>=</operator> <name><name>N</name><operator>.</operator><name>smaller</name></name></expr>;</expr_stmt>

<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>






<function><type><name><name>struct</name> <name>Curl_tree</name></name> <modifier>*</modifier></type><name>Curl_splayinsert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>i</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_tree</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>curltime</name></name></type> <name>KEY_NOTUSED</name> <init>= <expr><block>{
<expr><operator>(</operator><name>time_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>t</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>Curl_splay</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>KEY_NOTUSED</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>samen</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>samep</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>samep</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>samep</name><operator>-&gt;</operator><name>samen</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>samep</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<return>return <expr><name>t</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>smaller</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>larger</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>smaller</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>smaller</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>larger</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>smaller</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>larger</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>larger</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>smaller</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>larger</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>samen</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>samep</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>




<function><type><name><name>struct</name> <name>Curl_tree</name></name> <modifier>*</modifier></type><name>Curl_splaygetbest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>i</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_tree</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>removed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>curltime</name></name></type> <name>tv_zero</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_tree</name></name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>removed</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>Curl_splay</name><argument_list>(<argument><expr><name>tv_zero</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>removed</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>samen</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>!=</operator> <name>t</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>larger</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>larger</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>smaller</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>smaller</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>samep</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>samep</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>samep</name><operator>-&gt;</operator><name>samen</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>removed</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>larger</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>removed</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>Curl_splayremovebyaddr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_tree</name></name> <modifier>*</modifier></type><name>removenode</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_tree</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>newroot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>curltime</name></name></type> <name>KEY_NOTUSED</name> <init>= <expr><block>{
<expr><operator>(</operator><name>time_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_tree</name></name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>t</name> <operator>||</operator> <operator>!</operator><name>removenode</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>KEY_NOTUSED</name></expr></argument>, <argument><expr><name><name>removenode</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><name><name>removenode</name><operator>-&gt;</operator><name>samen</name></name> <operator>==</operator> <name>removenode</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>removenode</name><operator>-&gt;</operator><name>samep</name><operator>-&gt;</operator><name>samen</name></name> <operator>=</operator> <name><name>removenode</name><operator>-&gt;</operator><name>samen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>removenode</name><operator>-&gt;</operator><name>samen</name><operator>-&gt;</operator><name>samep</name></name> <operator>=</operator> <name><name>removenode</name><operator>-&gt;</operator><name>samep</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>removenode</name><operator>-&gt;</operator><name>samen</name></name> <operator>=</operator> <name>removenode</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>newroot</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>Curl_splay</name><argument_list>(<argument><expr><name><name>removenode</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<if_stmt><if>if<condition>(<expr><name>t</name> <operator>!=</operator> <name>removenode</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>samen</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>!=</operator> <name>t</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>larger</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>larger</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>smaller</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>smaller</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>samep</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>samep</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>samep</name><operator>-&gt;</operator><name>samen</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>smaller</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>larger</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>Curl_splay</name><argument_list>(<argument><expr><name><name>removenode</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>smaller</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>larger</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>larger</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>newroot</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
