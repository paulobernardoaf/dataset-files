<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\curl_gssapi.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_gssapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>spnego_oid_bytes</name><index>[]</index></name> <init>= <expr><literal type="string">"\x2b\x06\x01\x05\x05\x02"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gss_OID_desc</name></type> <name>Curl_spnego_mech_oid</name> <init>= <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><operator>&amp;</operator><name>spnego_oid_bytes</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>krb5_oid_bytes</name><index>[]</index></name> <init>= <expr><literal type="string">"\x2a\x86\x48\x86\xf7\x12\x01\x02\x02"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gss_OID_desc</name></type> <name>Curl_krb5_mech_oid</name> <init>= <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><operator>&amp;</operator><name>krb5_oid_bytes</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>OM_uint32</name></type> <name>Curl_gss_init_sec_context</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>minor_status</name></decl></parameter>,
<parameter><decl><type><name>gss_ctx_id_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>gss_name_t</name></type> <name>target_name</name></decl></parameter>,
<parameter><decl><type><name>gss_OID</name></type> <name>mech_type</name></decl></parameter>,
<parameter><decl><type><name>gss_channel_bindings_t</name></type> <name>input_chan_bindings</name></decl></parameter>,
<parameter><decl><type><name>gss_buffer_t</name></type> <name>input_token</name></decl></parameter>,
<parameter><decl><type><name>gss_buffer_t</name></type> <name>output_token</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>mutual_auth</name></decl></parameter>,
<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>ret_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OM_uint32</name></type> <name>req_flags</name> <init>= <expr><name>GSS_C_REPLAY_FLAG</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>mutual_auth</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>req_flags</name> <operator>|=</operator> <name>GSS_C_MUTUAL_FLAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>gssapi_delegation</name></name> <operator>&amp;</operator> <name>CURLGSSAPI_DELEGATION_POLICY_FLAG</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GSS_C_DELEG_POLICY_FLAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>req_flags</name> <operator>|=</operator> <name>GSS_C_DELEG_POLICY_FLAG</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"warning: support for CURLGSSAPI_DELEGATION_POLICY_FLAG not "</literal>
<literal type="string">"compiled in\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>gssapi_delegation</name></name> <operator>&amp;</operator> <name>CURLGSSAPI_DELEGATION_FLAG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>req_flags</name> <operator>|=</operator> <name>GSS_C_DELEG_FLAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>gss_init_sec_context</name><argument_list>(<argument><expr><name>minor_status</name></expr></argument>,
<argument><expr><name>GSS_C_NO_CREDENTIAL</name></expr></argument>, 
<argument><expr><name>context</name></expr></argument>,
<argument><expr><name>target_name</name></expr></argument>,
<argument><expr><name>mech_type</name></expr></argument>,
<argument><expr><name>req_flags</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><name>input_chan_bindings</name></expr></argument>,
<argument><expr><name>input_token</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, 
<argument><expr><name>output_token</name></expr></argument>,
<argument><expr><name>ret_flags</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GSS_LOG_BUFFER_LEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>display_gss_error</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>OM_uint32</name></type> <name>maj_stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OM_uint32</name></type> <name>min_stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OM_uint32</name></type> <name>msg_ctx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gss_buffer_desc</name></type> <name>status_string</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>maj_stat</name> <operator>=</operator> <call><name>gss_display_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min_stat</name></expr></argument>,
<argument><expr><name>status</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>,
<argument><expr><name>GSS_C_NO_OID</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>msg_ctx</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>status_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>GSS_LOG_BUFFER_LEN</name> <operator>&gt;</operator> <name>len</name> <operator>+</operator> <name><name>status_string</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>GSS_LOG_BUFFER_LEN</name> <operator>-</operator> <name>len</name></expr></argument>,
<argument><expr><literal type="string">"%.*s. "</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>status_string</name><operator>.</operator><name>length</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>status_string</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min_stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><operator>!</operator><call><name>GSS_ERROR</name><argument_list>(<argument><expr><name>maj_stat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>msg_ctx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>void</name></type> <name>Curl_gss_log_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
<parameter><decl><type><name>OM_uint32</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>OM_uint32</name></type> <name>minor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>GSS_LOG_BUFFER_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>major</name> <operator>!=</operator> <name>GSS_S_FAILURE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>display_gss_error</name><argument_list>(<argument><expr><name>major</name></expr></argument>, <argument><expr><name>GSS_C_GSS_CODE</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>display_gss_error</name><argument_list>(<argument><expr><name>minor</name></expr></argument>, <argument><expr><name>GSS_C_MECH_CODE</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
