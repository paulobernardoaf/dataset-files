<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\strtoofft.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtoofft.h"</cpp:file></cpp:include>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SIZEOF_CURL_OFF_T</name> <operator>&gt;</operator> <name>SIZEOF_LONG</name><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRTOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtooff</name></cpp:macro> <cpp:value>strtoll</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1300</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>_INTEGRAL_MAX_BITS</name> <operator>&gt;=</operator> <literal type="number">64</literal><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_SAL_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>_Check_return_</name> <name>_CRTIMP</name> <name>__int64</name> <name>__cdecl</name></type> <name>_strtoi64</name><parameter_list>(
<parameter><decl><type><name>_In_z_</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_String</name></decl></parameter>,
<parameter><decl><type><name>_Out_opt_</name> <name>_Deref_post_z_</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>_EndPtr</name></decl></parameter>, <parameter><decl><type><name>_In_</name> <name>int</name></type> <name>_Radix</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>_CRTIMP</name> <name>__int64</name> <name>__cdecl</name></type> <name>_strtoi64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_String</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>_EndPtr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_Radix</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtooff</name></cpp:macro> <cpp:value>_strtoi64</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIVATE_STRTOOFF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtooff</name></cpp:macro> <cpp:value>strtol</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRIVATE_STRTOOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:if>#<cpp:directive>if</cpp:directive><expr><operator>(</operator><literal type="char">'9'</literal> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>!=</operator> <literal type="number">9</literal> <operator>||</operator> <operator>(</operator><literal type="char">'Z'</literal> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>!=</operator> <literal type="number">25</literal> <operator>||</operator> <operator>(</operator><literal type="char">'z'</literal> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>!=</operator> <literal type="number">25</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_RANGE_TEST</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>valchars</name><index>[]</index></name> <init>=
<expr><literal type="string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_char</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>;</function_decl>





<function><type><specifier>static</specifier> <name>curl_off_t</name></type> <name>strtooff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_negative</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>overflow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>newval</name></decl>;</decl_stmt>


<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nptr</name></expr>;</expr_stmt>
<while>while<condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if<condition>(<expr><name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_negative</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>endptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">16</literal> <operator>||</operator> <name>base</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">8</literal> <operator>||</operator> <name>base</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if<condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>overflow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <call><name>get_char</name><argument_list>(<argument><expr><name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition>
<incr><expr><name>end</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <call><name>get_char</name><argument_list>(<argument><expr><name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>newval</name> <operator>=</operator> <name>base</name> <operator>*</operator> <name>value</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>newval</name> <operator>&lt;</operator> <name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>overflow</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>overflow</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>is_negative</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>is_negative</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>CURL_OFF_T_MIN</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>CURL_OFF_T_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>endptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type> <name>get_char</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_RANGE_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>valchars</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>+</operator> <literal type="number">26</literal> <operator>+</operator> <literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>cp</name> <operator>-</operator> <name>valchars</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">26</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>-=</operator> <literal type="number">26</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>value</name> <operator>&gt;=</operator> <name>base</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




<function><type><name>CURLofft</name></type> <name>curlx_strtoofft</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>,
<parameter><decl><type><name>curl_off_t</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>number</name></decl>;</decl_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<while>while<condition>(<expr><operator>*</operator><name>str</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if<condition>(<expr><literal type="char">'-'</literal> <operator>==</operator> <operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>endp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>endp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<return>return <expr><name>CURL_OFFT_INVAL</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>number</name> <operator>=</operator> <call><name>strtooff</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>endp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>endp</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURL_OFFT_FLOW</name></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>str</name> <operator>==</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURL_OFFT_INVAL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name>number</name></expr>;</expr_stmt>
<return>return <expr><name>CURL_OFFT_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
