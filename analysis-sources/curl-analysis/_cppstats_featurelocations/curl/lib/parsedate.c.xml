<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\parsedate.c">










































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parsedate.h"</cpp:file></cpp:include>












<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>parsedate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>, <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSEDATE_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSEDATE_FAIL</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSEDATE_LATER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSEDATE_SOONER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PARSEDATE</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>Curl_wkday</name><index>[]</index></name> <init>=
<expr><block>{<expr><literal type="string">"Mon"</literal></expr>, <expr><literal type="string">"Tue"</literal></expr>, <expr><literal type="string">"Wed"</literal></expr>, <expr><literal type="string">"Thu"</literal></expr>, <expr><literal type="string">"Fri"</literal></expr>, <expr><literal type="string">"Sat"</literal></expr>, <expr><literal type="string">"Sun"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>Curl_month</name><index>[]</index></name><init>=
<expr><block>{ <expr><literal type="string">"Jan"</literal></expr>, <expr><literal type="string">"Feb"</literal></expr>, <expr><literal type="string">"Mar"</literal></expr>, <expr><literal type="string">"Apr"</literal></expr>, <expr><literal type="string">"May"</literal></expr>, <expr><literal type="string">"Jun"</literal></expr>,
<expr><literal type="string">"Jul"</literal></expr>, <expr><literal type="string">"Aug"</literal></expr>, <expr><literal type="string">"Sep"</literal></expr>, <expr><literal type="string">"Oct"</literal></expr>, <expr><literal type="string">"Nov"</literal></expr>, <expr><literal type="string">"Dec"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PARSEDATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>weekday</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="string">"Monday"</literal></expr>, <expr><literal type="string">"Tuesday"</literal></expr>, <expr><literal type="string">"Wednesday"</literal></expr>, <expr><literal type="string">"Thursday"</literal></expr>,
<expr><literal type="string">"Friday"</literal></expr>, <expr><literal type="string">"Saturday"</literal></expr>, <expr><literal type="string">"Sunday"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>tzinfo</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt> 
}</block>;</struct>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tDAYZONE</name></cpp:macro> <cpp:value>-60</cpp:value></cpp:define> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>tzinfo</name></name></type> <name><name>tz</name><index>[]</index></name><init>= <expr><block>{
<expr><block>{<expr><literal type="string">"GMT"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"UT"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"UTC"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"WET"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"BST"</literal></expr>, <expr><literal type="number">0</literal> <name>tDAYZONE</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"WAT"</literal></expr>, <expr><literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"AST"</literal></expr>, <expr><literal type="number">240</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"ADT"</literal></expr>, <expr><literal type="number">240</literal> <name>tDAYZONE</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"EST"</literal></expr>, <expr><literal type="number">300</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"EDT"</literal></expr>, <expr><literal type="number">300</literal> <name>tDAYZONE</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"CST"</literal></expr>, <expr><literal type="number">360</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"CDT"</literal></expr>, <expr><literal type="number">360</literal> <name>tDAYZONE</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"MST"</literal></expr>, <expr><literal type="number">420</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"MDT"</literal></expr>, <expr><literal type="number">420</literal> <name>tDAYZONE</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"PST"</literal></expr>, <expr><literal type="number">480</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"PDT"</literal></expr>, <expr><literal type="number">480</literal> <name>tDAYZONE</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"YST"</literal></expr>, <expr><literal type="number">540</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"YDT"</literal></expr>, <expr><literal type="number">540</literal> <name>tDAYZONE</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"HST"</literal></expr>, <expr><literal type="number">600</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"HDT"</literal></expr>, <expr><literal type="number">600</literal> <name>tDAYZONE</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"CAT"</literal></expr>, <expr><literal type="number">600</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"AHST"</literal></expr>, <expr><literal type="number">600</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"NT"</literal></expr>, <expr><literal type="number">660</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"IDLW"</literal></expr>, <expr><literal type="number">720</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"CET"</literal></expr>, <expr><operator>-</operator><literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"MET"</literal></expr>, <expr><operator>-</operator><literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"MEWT"</literal></expr>, <expr><operator>-</operator><literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"MEST"</literal></expr>, <expr><operator>-</operator><literal type="number">60</literal> <name>tDAYZONE</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"CEST"</literal></expr>, <expr><operator>-</operator><literal type="number">60</literal> <name>tDAYZONE</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"MESZ"</literal></expr>, <expr><operator>-</operator><literal type="number">60</literal> <name>tDAYZONE</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"FWT"</literal></expr>, <expr><operator>-</operator><literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"FST"</literal></expr>, <expr><operator>-</operator><literal type="number">60</literal> <name>tDAYZONE</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"EET"</literal></expr>, <expr><operator>-</operator><literal type="number">120</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"WAST"</literal></expr>, <expr><operator>-</operator><literal type="number">420</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"WADT"</literal></expr>, <expr><operator>-</operator><literal type="number">420</literal> <name>tDAYZONE</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"CCT"</literal></expr>, <expr><operator>-</operator><literal type="number">480</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"JST"</literal></expr>, <expr><operator>-</operator><literal type="number">540</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"EAST"</literal></expr>, <expr><operator>-</operator><literal type="number">600</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"EADT"</literal></expr>, <expr><operator>-</operator><literal type="number">600</literal> <name>tDAYZONE</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"GST"</literal></expr>, <expr><operator>-</operator><literal type="number">600</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"NZT"</literal></expr>, <expr><operator>-</operator><literal type="number">720</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"NZST"</literal></expr>, <expr><operator>-</operator><literal type="number">720</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"NZDT"</literal></expr>, <expr><operator>-</operator><literal type="number">720</literal> <name>tDAYZONE</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"IDLE"</literal></expr>, <expr><operator>-</operator><literal type="number">720</literal></expr>}</block></expr>, 




<expr><block>{<expr><literal type="string">"A"</literal></expr>, <expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"B"</literal></expr>, <expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"C"</literal></expr>, <expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"D"</literal></expr>, <expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"E"</literal></expr>, <expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"F"</literal></expr>, <expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"G"</literal></expr>, <expr><literal type="number">7</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"H"</literal></expr>, <expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"I"</literal></expr>, <expr><literal type="number">9</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 


<expr><block>{<expr><literal type="string">"K"</literal></expr>, <expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"L"</literal></expr>, <expr><literal type="number">11</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"M"</literal></expr>, <expr><literal type="number">12</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"N"</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"O"</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"P"</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"Q"</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"R"</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"S"</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"T"</literal></expr>, <expr><operator>-</operator><literal type="number">7</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"U"</literal></expr>, <expr><operator>-</operator><literal type="number">8</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"V"</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"W"</literal></expr>, <expr><operator>-</operator><literal type="number">10</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"X"</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"Y"</literal></expr>, <expr><operator>-</operator><literal type="number">12</literal> <operator>*</operator> <literal type="number">60</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"Z"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
}</block></expr></init></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <name>int</name></type> <name>checkday</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>check</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>what</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>what</name> <operator>=</operator> <operator>&amp;</operator><name><name>weekday</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>what</name> <operator>=</operator> <operator>&amp;</operator><name><name>Curl_wkday</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>check</name></expr></argument>, <argument><expr><name><name>what</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>what</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><ternary><condition><expr><name>found</name></expr>?</condition><then><expr><name>i</name></expr></then><else>:<expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>checkmonth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>what</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>what</name> <operator>=</operator> <operator>&amp;</operator><name><name>Curl_month</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>check</name></expr></argument>, <argument><expr><name><name>what</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>what</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><ternary><condition><expr><name>found</name></expr>?</condition><then><expr><name>i</name></expr></then><else>:<expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return> 
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>checktz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tzinfo</name></name> <modifier>*</modifier></type><name>what</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>what</name> <operator>=</operator> <name>tz</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tz</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>check</name></expr></argument>, <argument><expr><name><name>what</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>what</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><ternary><condition><expr><name>found</name></expr>?</condition><then><expr><name><name>what</name><operator>-&gt;</operator><name>offset</name></name><operator>*</operator><literal type="number">60</literal></expr></then><else>:<expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>skip</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<while>while<condition>(<expr><operator>*</operator><operator>*</operator><name>date</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>date</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>date</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<enum>enum <name>assume</name> <block>{
<decl><name>DATE_MDAY</name></decl>,
<decl><name>DATE_YEAR</name></decl>,
<decl><name>DATE_TIME</name></decl>
}</block>;</enum>



<struct>struct <name>my_tm</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>tm_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tm_min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tm_hour</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tm_mday</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tm_mon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tm_year</name></decl>;</decl_stmt> 
}</block>;</struct>








<function><type><specifier>static</specifier> <name>void</name></type> <name>my_timegm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>my_tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>month_days_cumulative</name> <index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">243</literal></expr>, <expr><literal type="number">273</literal></expr>, <expr><literal type="number">304</literal></expr>, <expr><literal type="number">334</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>month</name></decl>, <decl><type ref="prev"/><name>year</name></decl>, <decl><type ref="prev"/><name>leap_days</name></decl>;</decl_stmt>

<expr_stmt><expr><name>year</name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>month</name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>month</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>year</name> <operator>+=</operator> <operator>(</operator><literal type="number">11</literal> <operator>-</operator> <name>month</name><operator>)</operator> <operator>/</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>month</name> <operator>=</operator> <literal type="number">11</literal> <operator>-</operator> <operator>(</operator><literal type="number">11</literal> <operator>-</operator> <name>month</name><operator>)</operator> <operator>%</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>month</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>year</name> <operator>-=</operator> <name>month</name> <operator>/</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>month</name> <operator>=</operator> <name>month</name> <operator>%</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>leap_days</name> <operator>=</operator> <name>year</name> <operator>-</operator> <operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>leap_days</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>leap_days</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>leap_days</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>leap_days</name> <operator>/</operator> <literal type="number">400</literal><operator>)</operator>
<operator>-</operator> <operator>(</operator><literal type="number">1969</literal> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1969</literal> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">1969</literal> <operator>/</operator> <literal type="number">400</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>time_t</name><operator>)</operator> <operator>(</operator><name>year</name> <operator>-</operator> <literal type="number">1970</literal><operator>)</operator> <operator>*</operator> <literal type="number">365</literal>
<operator>+</operator> <name>leap_days</name> <operator>+</operator> <name><name>month_days_cumulative</name><index>[<expr><name>month</name></expr>]</index></name> <operator>+</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">24</literal>
<operator>+</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type> <name>parsedate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>, <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wdaynum</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>monnum</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mdaynum</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>hournum</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minnum</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>secnum</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yearnum</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tzoff</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>my_tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>assume</name></name></type> <name>dignext</name> <init>= <expr><name>DATE_MDAY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>indate</name> <init>= <expr><name>date</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>part</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<while>while<condition>(<expr><operator>*</operator><name>date</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ISALPHA</name><argument_list>(<argument><expr><operator>*</operator><name>date</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><literal type="string">"%31[ABCDEFGHIJKLMNOPQRSTUVWXYZ"</literal>
<literal type="string">"abcdefghijklmnopqrstuvwxyz]"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>wdaynum</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wdaynum</name> <operator>=</operator> <call><name>checkday</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>wdaynum</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>monnum</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>monnum</name> <operator>=</operator> <call><name>checkmonth</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>monnum</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>tzoff</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tzoff</name> <operator>=</operator> <call><name>checktz</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>tzoff</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PARSEDATE_FAIL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>date</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>date</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>secnum</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><literal type="number">3</literal> <operator>==</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><literal type="string">"%02d:%02d:%02d%n"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hournum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>secnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>date</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>(</operator><name>secnum</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><literal type="number">2</literal> <operator>==</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><literal type="string">"%02d:%02d%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hournum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>date</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>secnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>lval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_errno</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lval</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>!=</operator> <name>old_errno</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>old_errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PARSEDATE_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LONG_MAX</name> <operator>!=</operator> <name>INT_MAX</name></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>lval</name> <operator>&gt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>INT_MAX</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>lval</name> <operator>&lt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>INT_MIN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PARSEDATE_FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>curlx_sltosi</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>tzoff</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>date</name><operator>)</operator> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>val</name> <operator>&lt;=</operator> <literal type="number">1400</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>indate</name><operator>&lt;</operator> <name>date</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>date</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name><name>date</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tzoff</name> <operator>=</operator> <operator>(</operator><name>val</name><operator>/</operator><literal type="number">100</literal> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>val</name><operator>%</operator><literal type="number">100</literal><operator>)</operator><operator>*</operator><literal type="number">60</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>tzoff</name> <operator>=</operator> <ternary><condition><expr><name><name>date</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'+'</literal></expr>?</condition><then><expr><operator>-</operator><name>tzoff</name></expr></then><else>:<expr><name>tzoff</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>date</name><operator>)</operator> <operator>==</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>yearnum</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>monnum</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>mdaynum</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yearnum</name> <operator>=</operator> <name>val</name><operator>/</operator><literal type="number">10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>monnum</name> <operator>=</operator> <operator>(</operator><name>val</name><operator>%</operator><literal type="number">10000</literal><operator>)</operator><operator>/</operator><literal type="number">100</literal><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>mdaynum</name> <operator>=</operator> <name>val</name><operator>%</operator><literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>dignext</name> <operator>==</operator> <name>DATE_MDAY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>mdaynum</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>val</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>val</name><operator>&lt;</operator><literal type="number">32</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mdaynum</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dignext</name> <operator>=</operator> <name>DATE_YEAR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>dignext</name> <operator>==</operator> <name>DATE_YEAR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>yearnum</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>yearnum</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>yearnum</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>yearnum</name> <operator>&gt;</operator> <literal type="number">70</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>yearnum</name> <operator>+=</operator> <literal type="number">1900</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>yearnum</name> <operator>+=</operator> <literal type="number">2000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>mdaynum</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dignext</name> <operator>=</operator> <name>DATE_MDAY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PARSEDATE_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>date</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>part</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>secnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>secnum</name> <operator>=</operator> <name>minnum</name> <operator>=</operator> <name>hournum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>mdaynum</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>monnum</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>yearnum</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARSEDATE_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIME_T_UNSIGNED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>yearnum</name> <operator>&lt;</operator> <literal type="number">1970</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <name>TIME_T_MIN</name></expr>;</expr_stmt>
<return>return <expr><name>PARSEDATE_SOONER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SIZEOF_TIME_T</name> <operator>&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIME_T_UNSIGNED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>yearnum</name> <operator>&gt;</operator> <literal type="number">2105</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <name>TIME_T_MAX</name></expr>;</expr_stmt>
<return>return <expr><name>PARSEDATE_LATER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><name>yearnum</name> <operator>&gt;</operator> <literal type="number">2037</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <name>TIME_T_MAX</name></expr>;</expr_stmt>
<return>return <expr><name>PARSEDATE_LATER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>yearnum</name> <operator>&lt;</operator> <literal type="number">1903</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <name>TIME_T_MIN</name></expr>;</expr_stmt>
<return>return <expr><name>PARSEDATE_SOONER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><name>yearnum</name> <operator>&lt;</operator> <literal type="number">1583</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PARSEDATE_FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>mdaynum</name> <operator>&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>monnum</name> <operator>&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>hournum</name> <operator>&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>minnum</name> <operator>&gt;</operator> <literal type="number">59</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>secnum</name> <operator>&gt;</operator> <literal type="number">60</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PARSEDATE_FAIL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name>secnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <name>minnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <name>hournum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name>mdaynum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name>monnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name>yearnum</name></expr>;</expr_stmt>





<expr_stmt><expr><call><name>my_timegm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>tzoff</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tzoff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>tzoff</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>t</name> <operator>&gt;</operator> <name>TIME_T_MAX</name> <operator>-</operator> <name>tzoff</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <name>TIME_T_MAX</name></expr>;</expr_stmt>
<return>return <expr><name>PARSEDATE_LATER</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>tzoff</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<return>return <expr><name>PARSEDATE_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parsedate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>, <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>date</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>PARSEDATE_OK</name></expr>;</return> 
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>time_t</name></type> <name>curl_getdate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>parsed</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>parsedate</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parsed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>now</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>PARSEDATE_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>parsed</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>parsed</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>parsed</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>time_t</name></type> <name>Curl_getdate_capped</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>parsed</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>parsedate</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parsed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PARSEDATE_OK</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>parsed</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>parsed</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>parsed</name></expr>;</return>
<case>case <expr><name>PARSEDATE_LATER</name></expr>:</case>

<return>return <expr><name>parsed</name></expr>;</return>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></switch>

</block_content>}</block></function>







<function><type><name>CURLcode</name></type> <name>Curl_gmtime</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>intime</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GMTIME_R</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>tm</name> <operator>=</operator> <operator>(</operator>struct <name>tm</name> <operator>*</operator><operator>)</operator><call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>intime</name></expr></argument>, <argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>gmtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>intime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>tm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>store</name> <operator>=</operator> <operator>*</operator><name>tm</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tm</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
