<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\connect.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_TCP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/tcp.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_TCP_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_IOCTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IOCTL_FIONBIO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/filio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>in_addr_t</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in_addr_t</name></cpp:macro> <cpp:value>unsigned long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"if2ip.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sockaddr.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_ntop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_pton.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conncache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multihandle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"system_win32.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"socks.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SYMBIAN32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SO_NOSIGPIPE</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>verifyconnect</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DragonFly__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WINSOCK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEEPALIVE_FACTOR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x *= 1000)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEEPALIVE_FACTOR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WINSOCK2_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIO_KEEPALIVE_VALS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIO_KEEPALIVE_VALS</name></cpp:macro> <cpp:value>_WSAIOW(IOC_VENDOR,4)</cpp:value></cpp:define>

<struct>struct <name>tcp_keepalive</name> <block>{
<decl_stmt><decl><type><name>u_long</name></type> <name>onoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>keepalivetime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>keepaliveinterval</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tcpkeepalive</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>optval</name> <init>= <expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tcp_keepalive</name></name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_KEEPALIVE</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>optval</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>optval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to set SO_KEEPALIVE on fd %d\n"</literal></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIO_KEEPALIVE_VALS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>tcp_keepalive</name></name></type> <name>vals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dummy</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>vals</name><operator>.</operator><name>onoff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>optval</name> <operator>=</operator> <call><name>curlx_sltosi</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tcp_keepidle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>KEEPALIVE_FACTOR</name><argument_list>(<argument><expr><name>optval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vals</name><operator>.</operator><name>keepalivetime</name></name> <operator>=</operator> <name>optval</name></expr>;</expr_stmt>
<expr_stmt><expr><name>optval</name> <operator>=</operator> <call><name>curlx_sltosi</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tcp_keepintvl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>KEEPALIVE_FACTOR</name><argument_list>(<argument><expr><name>optval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vals</name><operator>.</operator><name>keepaliveinterval</name></name> <operator>=</operator> <name>optval</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>WSAIoctl</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>SIO_KEEPALIVE_VALS</name></expr></argument>, <argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator> <operator>&amp;</operator><name>vals</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vals</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to set SIO_KEEPALIVE_VALS on fd %d: %d\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>sockfd</name></expr></argument>, <argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_KEEPIDLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>optval</name> <operator>=</operator> <call><name>curlx_sltosi</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tcp_keepidle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>KEEPALIVE_FACTOR</name><argument_list>(<argument><expr><name>optval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPIDLE</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>optval</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>optval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to set TCP_KEEPIDLE on fd %d\n"</literal></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_KEEPINTVL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>optval</name> <operator>=</operator> <call><name>curlx_sltosi</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tcp_keepintvl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>KEEPALIVE_FACTOR</name><argument_list>(<argument><expr><name>optval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPINTVL</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>optval</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>optval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to set TCP_KEEPINTVL on fd %d\n"</literal></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_KEEPALIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>optval</name> <operator>=</operator> <call><name>curlx_sltosi</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tcp_keepidle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>KEEPALIVE_FACTOR</name><argument_list>(<argument><expr><name>optval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPALIVE</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>optval</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>optval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to set TCP_KEEPALIVE on fd %d\n"</literal></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type>
<name>singleipconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ai</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>tempindex</name></decl></parameter>)</parameter_list>;</function_decl> 















<function><type><name>timediff_t</name></type> <name>Curl_timeleft</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>curltime</name></name> <modifier>*</modifier></type><name>nowp</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>duringconnect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>timeout_set</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>timeout_ms</name> <init>= <expr><ternary><condition><expr><name>duringconnect</name></expr>?</condition><then><expr><name>DEFAULT_CONNECT_TIMEOUT</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timeout_set</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>duringconnect</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>connecttimeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timeout_set</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>timeout_set</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timeout</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>connecttimeout</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timeout</name></name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>connecttimeout</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timeout</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>connecttimeout</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<default>default:</default>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>duringconnect</name></expr>)</condition><block type="pseudo"><block_content>



<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nowp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nowp</name> <operator>=</operator> <operator>&amp;</operator><name>now</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>duringconnect</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timeout_ms</name> <operator>-=</operator> <call><name>Curl_timediff</name><argument_list>(<argument><expr><operator>*</operator><name>nowp</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>t_startsingle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>timeout_ms</name> <operator>-=</operator> <call><name>Curl_timediff</name><argument_list>(<argument><expr><operator>*</operator><name>nowp</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>t_startop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>timeout_ms</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>timeout_ms</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>bindlocal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>scope</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_sockaddr_storage</name></name></type> <name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sock</name> <init>= <expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>curl_socklen_t</name></type> <name>sizeof_sa</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>si4</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>si6</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sa</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>localport</name></name></expr></init></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>portnum</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>localportrange</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DEVICE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>




<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dev</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>port</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Curl_sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dev</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">255</literal><operator>)</operator></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>myhost</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>is_interface</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_host</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>if_prefix</name> <init>= <expr><literal type="string">"if!"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host_prefix</name> <init>= <expr><literal type="string">"host!"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>if_prefix</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>if_prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dev</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>if_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_interface</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>host_prefix</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>host_prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dev</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>host_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_host</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>is_host</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_BINDTODEVICE</name></expr></argument>)</argument_list></call></expr></cpp:if>















<if_stmt><if>if<condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_BINDTODEVICE</name></expr></argument>,
<argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>(</operator><name>curl_socklen_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch<condition>(<expr><call><name>Curl_if2ip</name><argument_list>(<argument><expr><name>af</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>scope_id</name></name></expr></argument>, <argument><expr><name>dev</name></expr></argument>,
<argument><expr><name>myhost</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>myhost</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>IF2IP_NOT_FOUND</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>is_interface</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Couldn't bind to interface '%s'"</literal></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_INTERFACE_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>IF2IP_AF_NOT_SUPPORTED</name></expr>:</case>

<return>return <expr><name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>;</return>
<case>case <expr><name>IF2IP_FOUND</name></expr>:</case>
<expr_stmt><expr><name>is_interface</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Local Interface %s is ip %s using address family %i\n"</literal></expr></argument>,
<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>myhost</name></expr></argument>, <argument><expr><name>af</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>is_interface</name></expr>)</condition> <block>{<block_content>








<decl_stmt><decl><type><name>long</name></type> <name>ipver</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>ip_version</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>af</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ip_version</name></name> <operator>=</operator> <name>CURL_IPRESOLVE_V4</name></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>(<expr><name>af</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ip_version</name></name> <operator>=</operator> <name>CURL_IPRESOLVE_V6</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_resolv</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>CURLRESOLV_PENDING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Curl_resolver_wait_resolv</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ip_version</name></name> <operator>=</operator> <name>ipver</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_printable_address</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>myhost</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>myhost</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Name '%s' family %i resolved to '%s' family %i\n"</literal></expr></argument>,
<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>af</name></expr></argument>, <argument><expr><name>myhost</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_resolv_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>af</name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ai_family</name></name></expr>)</condition> <block>{<block_content>


<return>return <expr><name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>




<expr_stmt><expr><name>done</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>done</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>af</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scope_ptr</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>myhost</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>scope_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>scope_ptr</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>myhost</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>si6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>si6</name><operator>-&gt;</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si6</name><operator>-&gt;</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>scope_ptr</name></expr>)</condition><block type="pseudo"><block_content>




<expr_stmt><expr><name><name>si6</name><operator>-&gt;</operator><name>sin6_scope_id</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>scope_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sizeof_sa</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if<condition>(<expr><operator>(</operator><name>af</name> <operator>==</operator> <name>AF_INET</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>myhost</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>si4</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>si4</name><operator>-&gt;</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si4</name><operator>-&gt;</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sizeof_sa</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>done</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>errorbuf</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Couldn't bind to '%s'"</literal></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_INTERFACE_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>af</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>si6</name><operator>-&gt;</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si6</name><operator>-&gt;</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sizeof_sa</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if<condition>(<expr><name>af</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>si4</name><operator>-&gt;</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si4</name><operator>-&gt;</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sizeof_sa</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>sizeof_sa</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_sockaddr_storage</name></name></type> <name>add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socklen_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>add</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Curl_sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>add</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>os_errno</name></name> <operator>=</operator> <name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"getsockname() failed with errno %d: %s"</literal></expr></argument>,
<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_INTERFACE_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Local port: %hu\n"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>bound</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>--</operator><name>portnum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Bind to local port %hu failed, trying next\n"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>si4</name><operator>-&gt;</operator><name>sin_port</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>si6</name><operator>-&gt;</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>os_errno</name></name> <operator>=</operator> <name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"bind failed with errno %d: %s"</literal></expr></argument>,
<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><name>CURLE_INTERFACE_FAILED</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>verifyconnect</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>rc</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socklen_t</name></type> <name>errSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SleepEx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>getsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errSize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>WSAENOPROTOOPT</name> <operator>==</operator> <name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SET_SOCKERRNO</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBADIOCTL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__minix</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>EBADIOCTL</name> <operator>==</operator> <name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SET_SOCKERRNO</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <name>err</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>EISCONN</name> <operator>==</operator> <name>err</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockfd</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ainext</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>tempindex</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>next</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ai</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>tempaddr</name><index>[<expr><name>tempindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>ai</name> <operator>&amp;&amp;</operator> <name>next</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while<condition>(<expr><name>ai</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>!=</operator> <name><name>conn</name><operator>-&gt;</operator><name>tempfamily</name><index>[<expr><name>tempindex</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>tempaddr</name><index>[<expr><name>tempindex</name></expr>]</index></name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>
<return>return <expr><name>ai</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>trynextip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>tempindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_COULDNT_CONNECT</name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>fd_to_close</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><name>tempindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><name>tempindex</name></expr>]</index></name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sockindex</name> <operator>==</operator> <name>FIRSTSOCKET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ai</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>tempaddr</name><index>[<expr><name>tempindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>ai</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>ai</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>singleipconnect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ai</name></expr></argument>, <argument><expr><name>tempindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_COULDNT_CONNECT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>ainext</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>tempindex</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>fd_to_close</name> <operator>!=</operator> <name>CURL_SOCKET_BAD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_closesocket</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>fd_to_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>Curl_persistconninfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn_primary_ip</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>primary_ip</name></name></expr></argument>, <argument><expr><name>MAX_IPADR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn_local_ip</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>local_ip</name></name></expr></argument>, <argument><expr><name>MAX_IPADR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn_scheme</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>scheme</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn_protocol</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn_primary_port</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>primary_port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn_local_port</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>local_port</name></name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>Curl_addr2string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>curl_socklen_t</name></type> <name>salen</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>si</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>si6</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UN_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>su</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>salen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch<condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<expr_stmt><expr><name>si</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sa</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>Curl_inet_ntop</name><argument_list>(<argument><expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>,
<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>MAX_IPADR_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>us_port</name> <init>= <expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <name>us_port</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<expr_stmt><expr><name>si6</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sa</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>Curl_inet_ntop</name><argument_list>(<argument><expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>si6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>,
<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>MAX_IPADR_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>us_port</name> <init>= <expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>si6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <name>us_port</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UN_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_UNIX</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>salen</name> <operator>&gt;</operator> <operator>(</operator><name>curl_socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sa_family_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>su</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_un</name><operator>*</operator><operator>)</operator><name>sa</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>MAX_IPADR_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>su</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAFNOSUPPORT</name></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>Curl_updateconninfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>transport</name></name> <operator>!=</operator> <name>TRNSPRT_TCP</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPEERNAME</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETSOCKNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>reuse</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tcp_fastopen</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_sockaddr_storage</name></name></type> <name>ssrem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_sockaddr_storage</name></name></type> <name>ssloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socklen_t</name></type> <name>plen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socklen_t</name></type> <name>slen</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPEERNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>plen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>Curl_sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>getpeername</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ssrem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>SOCKERRNO</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"getpeername() failed with errno %d: %s"</literal></expr></argument>,
<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETSOCKNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>Curl_sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ssloc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ssloc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ssloc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>SOCKERRNO</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"getsockname() failed with errno %d: %s"</literal></expr></argument>,
<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPEERNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_addr2string</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ssrem</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>primary_ip</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>primary_port</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ssrem inet_ntop() failed with errno %d: %s"</literal></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ip_addr_str</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>primary_ip</name></name></expr></argument>, <argument><expr><name>MAX_IPADR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETSOCKNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_addr2string</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ssloc</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>local_ip</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>local_port</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ssloc inet_ntop() failed with errno %d: %s"</literal></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockfd</name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>Curl_persistconninfo</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>connect_SOCKS</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>socksproxy</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>host</name> <init>=
<expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name></expr> ?</condition><then>
<expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:
<expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name></expr> ?</condition><then>
<expr><name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name><operator>.</operator><name>name</name></name></expr> </then><else>:
<expr><ternary><condition><expr><name>sockindex</name> <operator>==</operator> <name>SECONDARYSOCKET</name></expr> ?</condition><then>
<expr><name><name>conn</name><operator>-&gt;</operator><name>secondaryhostname</name></name></expr> </then><else>: <expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>port</name> <init>=
<expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>port</name></name></expr> </then><else>:
<expr><ternary><condition><expr><name>sockindex</name> <operator>==</operator> <name>SECONDARYSOCKET</name></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>secondary_port</name></name></expr> </then><else>:
<expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_port</name></name></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>conn_to_port</name></name></expr> </then><else>:
<expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>proxytype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLPROXY_SOCKS5</name></expr>:</case>
<case>case <expr><name>CURLPROXY_SOCKS5_HOSTNAME</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_SOCKS5</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>passwd</name></name></expr></argument>,
<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLPROXY_SOCKS4</name></expr>:</case>
<case>case <expr><name>CURLPROXY_SOCKS4A</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_SOCKS4</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>,
<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"unknown proxytype option given"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_COULDNT_CONNECT</name></expr>;</expr_stmt>
</block_content>}</block></switch> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockindex</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>post_SOCKS</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>connected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tcpconnect</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>connected</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>sockindex</name> <operator>==</operator> <name>FIRSTSOCKET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_pgrsTime</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>TIMER_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>Curl_updateconninfo</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_verboseconnect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>numconnects</name></name><operator>++</operator></expr>;</expr_stmt> 
</block_content>}</block></function>





<function><type><name>CURLcode</name></type> <name>Curl_is_connected</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>connected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>allow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>sockindex</name> <operator>&gt;=</operator> <name>FIRSTSOCKET</name> <operator>&amp;&amp;</operator> <name>sockindex</name> <operator>&lt;=</operator> <name>SECONDARYSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>connected</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tcpconnect</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>connected</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>allow</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>allow</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Connection time-out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SOCKS_STATE</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>cnnct</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>connect_SOCKS</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>connected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>connected</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>post_SOCKS</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>connected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>other</name> <init>= <expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>CURL_SOCKET_BAD</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_QUIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>TRNSPRT_QUIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_quic_is_connected</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>connected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>connected</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ip_addr</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>tempaddr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>connkeep</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"HTTP/3 default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>mpeix</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>verifyconnect</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SOCKET_WRITABLE</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>Curl_timediff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>connecttime</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>conn</name><operator>-&gt;</operator><name>timeoutms_per_addr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"After %"</literal> <name>CURL_FORMAT_TIMEDIFF_T</name>
<literal type="string">"ms connect time, move on!\n"</literal></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>timeoutms_per_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ETIMEDOUT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>parallel_connect</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>Curl_timediff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>connecttime</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>happy_eyeballs_timeout</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>parallel_connect</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>trynextip</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>CURL_CSELECT_OUT</name> <operator>||</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tcp_fastopen</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>verifyconnect</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ip_addr</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>tempaddr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>ipv6</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>ip_addr</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET6</name><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><name>other</name></expr>]</index></name> <operator>!=</operator> <name>CURL_SOCKET_BAD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_closesocket</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><name>other</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><name>other</name></expr>]</index></name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>connect_SOCKS</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>connected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>connected</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>post_SOCKS</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>connected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Connection failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>&amp;</operator> <name>CURL_CSELECT_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>verifyconnect</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_QUIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<label><name>error</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>os_errno</name></name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_SOCKERRNO</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>tempaddr</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>status</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>ipaddress</name><index>[<expr><name>MAX_IPADR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Curl_printable_address</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>tempaddr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ipaddress</name></expr></argument>, <argument><expr><name>MAX_IPADR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"connect to %s port %ld failed: %s\n"</literal></expr></argument>,
<argument><expr><name>ipaddress</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
<argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>timeoutms_per_addr</name></name> <operator>=</operator> <ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>tempaddr</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ai_next</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then>
<expr><name>allow</name></expr> </then><else>: <expr><name>allow</name> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ainext</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>trynextip</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>status</name> <operator>!=</operator> <name>CURLE_COULDNT_CONNECT</name><operator>)</operator> <operator>||</operator>
<name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><name>other</name></expr>]</index></name> <operator>==</operator> <name>CURL_SOCKET_BAD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>



<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>trynextip</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>socksproxy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to connect to %s port %ld: %s"</literal></expr></argument>,
<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
<argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WSAETIMEDOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>WSAETIMEDOUT</name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>os_errno</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OPERATION_TIMEDOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ETIMEDOUT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if<condition>(<expr><name>ETIMEDOUT</name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>os_errno</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OPERATION_TIMEDOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tcpnodelay</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_NODELAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>curl_socklen_t</name></type> <name>onoff</name> <init>= <expr><operator>(</operator><name>curl_socklen_t</name><operator>)</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name>IPPROTO_TCP</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>conn</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>TCP_NODELAY</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>onoff</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>onoff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not set TCP_NODELAY: %s\n"</literal></expr></argument>,
<argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>SOCKERRNO</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockfd</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_NOSIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>void</name></type> <name>nosigpipe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>onoff</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_NOSIGPIPE</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>onoff</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>onoff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not set SO_NOSIGPIPE: %s\n"</literal></expr></argument>,
<argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>SOCKERRNO</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nosigpipe</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DETECT_OS_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DETECT_OS_PREVISTA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DETECT_OS_VISTA_OR_LATER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>Curl_sndbufset</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name>CURL_MAX_WRITE_SIZE</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>curval</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>detectOsState</name> <init>= <expr><name>DETECT_OS_NONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>detectOsState</name> <operator>==</operator> <name>DETECT_OS_NONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>Curl_verify_windows_version</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PLATFORM_WINNT</name></expr></argument>,
<argument><expr><name>VERSION_GREATER_THAN_EQUAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>detectOsState</name> <operator>=</operator> <name>DETECT_OS_VISTA_OR_LATER</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>detectOsState</name> <operator>=</operator> <name>DETECT_OS_PREVISTA</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>detectOsState</name> <operator>==</operator> <name>DETECT_OS_VISTA_OR_LATER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDBUF</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>curval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name>curval</name> <operator>&gt;</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDBUF</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>singleipconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ai</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>tempindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_sockaddr_ex</name></name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isconnected</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ipaddress</name><index>[<expr><name>MAX_IPADR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_tcp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_FASTOPEN_CONNECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>optval</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sockp</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><name>tempindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>sockp</name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_socket</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ai</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_addr2string</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>sa_addr</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>addrlen</name></name></expr></argument>,
<argument><expr><name>ipaddress</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"sa_addr inet_ntop() failed with errno %d: %s"</literal></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_closesocket</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" Trying %s:%ld...\n"</literal></expr></argument>, <argument><expr><name>ipaddress</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>is_tcp</name> <operator>=</operator> <operator>(</operator><name><name>addr</name><operator>.</operator><name>family</name></name> <operator>==</operator> <name>AF_INET</name> <operator>||</operator> <name><name>addr</name><operator>.</operator><name>family</name></name> <operator>==</operator> <name>AF_INET6</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>addr</name><operator>.</operator><name>socktype</name></name> <operator>==</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>is_tcp</name> <operator>=</operator> <operator>(</operator><name><name>addr</name><operator>.</operator><name>family</name></name> <operator>==</operator> <name>AF_INET</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>addr</name><operator>.</operator><name>socktype</name></name> <operator>==</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><name>is_tcp</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tcp_nodelay</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tcpnodelay</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>nosigpipe</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_sndbufset</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>is_tcp</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tcp_keepalive</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tcpkeepalive</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fsockopt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fsockopt</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>sockopt_client</name></name></expr></argument>,
<argument><expr><name>sockfd</name></expr></argument>,
<argument><expr><name>CURLSOCKTYPE_IPCXN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>error</name> <operator>==</operator> <name>CURL_SOCKOPT_ALREADY_CONNECTED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>isconnected</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_closesocket</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>addr</name><operator>.</operator><name>family</name></name> <operator>==</operator> <name>AF_INET</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>addr</name><operator>.</operator><name>family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bindlocal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>family</name></name></expr></argument>,
<argument><expr><call><name>Curl_ipv6_scope</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>sa_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_closesocket</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>)</condition> <block>{<block_content>


<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>curlx_nonblock</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>connecttime</name></name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>num_addr</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>timeoutms_per_addr</name></name></expr></argument>, <argument><expr><name>EXPIRE_DNS_PER_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>isconnected</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>transport</name></name> <operator>!=</operator> <name>TRNSPRT_UDP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tcp_fastopen</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CONNECT_DATA_IDEMPOTENT</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN_AVAILABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if<condition>(<expr><call><name>__builtin_available</name><argument_list>(<argument><expr><name>macOS</name> <literal type="number">10.11</literal></expr></argument>, <argument><expr><name>iOS</name> <literal type="number">9.0</literal></expr></argument>, <argument><expr><name>tvOS</name> <literal type="number">9.0</literal></expr></argument>, <argument><expr><name>watchOS</name> <literal type="number">2.0</literal></expr></argument>, <argument><expr><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>sa_endpoints_t</name></type> <name>endpoints</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>endpoints</name><operator>.</operator><name>sae_srcif</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>endpoints</name><operator>.</operator><name>sae_srcaddr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>endpoints</name><operator>.</operator><name>sae_srcaddrlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>endpoints</name><operator>.</operator><name>sae_dstaddr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>sa_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>endpoints</name><operator>.</operator><name>sae_dstaddrlen</name></name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>addrlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>connectx</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endpoints</name></expr></argument>, <argument><expr><name>SAE_ASSOCID_ANY</name></expr></argument>,
<argument><expr><name>CONNECT_RESUME_ON_READ_WRITE</name> <operator>|</operator> <name>CONNECT_DATA_IDEMPOTENT</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>connect</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>sa_addr</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>connect</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>sa_addr</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_FASTOPEN_CONNECT</name></expr></argument>)</argument_list></call></expr></cpp:elif> 
<if_stmt><if>if<condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_FASTOPEN_CONNECT</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>optval</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>optval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to enable TCP Fast Open on fd %d\n"</literal></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>connect</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>sa_addr</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSG_FASTOPEN</name></expr></argument>)</argument_list></call></expr></cpp:elif> 
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>given</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_SSL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>connect</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>sa_addr</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>connect</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>sa_addr</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>rc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_QUIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>TRNSPRT_QUIC</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_quic_connect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>tempindex</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>sa_addr</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sockp</name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>rc</name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EINPROGRESS</name></expr>:</case>
<case>case <expr><name>EWOULDBLOCK</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>EAGAIN</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>EWOULDBLOCK</name><operator>)</operator></expr></cpp:if>




<case>case <expr><name>EAGAIN</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Immediate connect fail for %s: %s\n"</literal></expr></argument>,
<argument><expr><name>ipaddress</name></expr></argument>, <argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>os_errno</name></name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_closesocket</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_COULDNT_CONNECT</name></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>sockp</name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>CURLcode</name></type> <name>Curl_connecthost</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, 
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>remotehost</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>before</name> <init>= <expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_COULDNT_CONNECT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>timeout_ms</name> <init>= <expr><call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>before</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Connection time-out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>num_addr</name></name> <operator>=</operator> <call><name>Curl_num_addresses</name><argument_list>(<argument><expr><name><name>remotehost</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>tempaddr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>tempaddr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>remotehost</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>timeoutms_per_addr</name></name> <operator>=</operator>
<ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>tempaddr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ai_next</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>timeout_ms</name></expr> </then><else>: <expr><name>timeout_ms</name> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>tempfamily</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>tempaddr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>?</condition><then>
<expr><name><name>conn</name><operator>-&gt;</operator><name>tempaddr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ai_family</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>tempfamily</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>tempfamily</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>AF_INET6</name></expr> ?</condition><then>
<expr><name>AF_INET</name></expr> </then><else>: <expr><name>AF_INET6</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ainext</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"family0 == %s, family1 == %s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>tempfamily</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>AF_INET</name></expr> ?</condition><then> <expr><literal type="string">"v4"</literal></expr> </then><else>: <expr><literal type="string">"v6"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>tempfamily</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>AF_INET</name></expr> ?</condition><then> <expr><literal type="string">"v4"</literal></expr> </then><else>: <expr><literal type="string">"v6"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>result</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<while>while<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>tempaddr</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>singleipconnect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>tempaddr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ainext</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>happy_eyeballs_timeout</name></name></expr></argument>,
<argument><expr><name>EXPIRE_HAPPY_EYEBALLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>connfind</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>tofind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>conn_is_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connfind</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>(</operator>struct <name>connfind</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>conn</name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>tofind</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>found</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>curl_socket_t</name></type> <name>Curl_getconnectinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>connp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>lastconnect</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>multi_easy</name></name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>multi</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>lastconnect</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connfind</name></name></type> <name>find</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>find</name><operator>.</operator><name>tofind</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>lastconnect</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>find</name><operator>.</operator><name>found</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_conncache_foreach</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>multi_easy</name></name></expr>?</condition><then>
<expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>multi_easy</name><operator>-&gt;</operator><name>conn_cache</name></name></expr></then><else>:
<expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>multi</name><operator>-&gt;</operator><name>conn_cache</name></name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>find</name></expr></argument>, <argument><expr><name>conn_is_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>find</name><operator>.</operator><name>found</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>lastconnect</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>CURL_SOCKET_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>connp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>connp</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>CURL_SOCKET_BAD</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>Curl_connalive</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name><operator>.</operator><name>use</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_ssl_check_cxn</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt> 
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSG_PEEK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>==</operator> <name>CURL_SOCKET_BAD</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>buf</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>recv</name><argument_list>(<argument><expr><operator>(</operator><name>RECV_TYPE_ARG1</name><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>RECV_TYPE_ARG2</name><operator>)</operator><operator>&amp;</operator><name>buf</name></expr></argument>,
<argument><expr><operator>(</operator><name>RECV_TYPE_ARG3</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>RECV_TYPE_ARG4</name><operator>)</operator><name>MSG_PEEK</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>Curl_closesocket</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>curl_socket_t</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>conn</name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>fclosesocket</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>sock</name> <operator>==</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>SECONDARYSOCKET</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock_accepted</name></name></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sock_accepted</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Curl_multi_closed</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>conn</name><operator>-&gt;</operator><name>fclosesocket</name></name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>closesocket_client</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_multi_closed</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>










<function><type><name>CURLcode</name></type> <name>Curl_socket</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ai</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_sockaddr_ex</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sockfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_sockaddr_ex</name></name></type> <name>dummy</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>addr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>&amp;</operator><name>dummy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>









<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>socktype</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>TRNSPRT_TCP</name><operator>)</operator></expr> ?</condition><then> <expr><name>SOCK_STREAM</name></expr> </then><else>: <expr><name>SOCK_DGRAM</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>transport</name></name> <operator>!=</operator> <name>TRNSPRT_TCP</name></expr> ?</condition><then> <expr><name>IPPROTO_UDP</name></expr> </then><else>:
<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addrlen</name></name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>addrlen</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>Curl_sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addrlen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>Curl_sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>sa_addr</name></name></expr></argument>, <argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fopensocket</name></name></expr>)</condition> <block>{<block_content>









<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sockfd</name> <operator>=</operator> <call><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fopensocket</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opensocket_client</name></name></expr></argument>,
<argument><expr><name>CURLSOCKTYPE_IPCXN</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>curl_sockaddr</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>sockfd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>family</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>socktype</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>sockfd</name> <operator>==</operator> <name>CURL_SOCKET_BAD</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>TRNSPRT_QUIC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>curlx_nonblock</name><argument_list>(<argument><expr><operator>*</operator><name>sockfd</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>scope_id</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>addr</name><operator>-&gt;</operator><name>family</name></name> <operator>==</operator> <name>AF_INET6</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier> <specifier>const</specifier></type> <name>sa6</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>sa_addr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sa6</name><operator>-&gt;</operator><name>sin6_scope_id</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>scope_id</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>




<function><type><name>void</name></type> <name>Curl_conncontrol</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ctrl</name></decl></parameter> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reason</name></decl></parameter>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>closeit</name> <init>= <expr><operator>(</operator><name>ctrl</name> <operator>==</operator> <name>CONNCTRL_CONNECTION</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>ctrl</name> <operator>==</operator> <name>CONNCTRL_STREAM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_STREAM</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ctrl</name> <operator>==</operator> <name>CONNCTRL_STREAM</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_STREAM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Kill stream: %s\n"</literal></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>(</operator><name>bit</name><operator>)</operator><name>closeit</name> <operator>!=</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>close</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Marked for [%s]: %s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>closeit</name></expr>?</condition><then><expr><literal type="string">"closure"</literal></expr></then><else>:<expr><literal type="string">"keep alive"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>close</name></name> <operator>=</operator> <name>closeit</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>Curl_conn_data_pending</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>readable</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_ssl_data_pending</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>Curl_recv_has_postponed_data</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>readable</name> <operator>=</operator> <call><name>SOCKET_READABLE</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>readable</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>readable</name> <operator>&amp;</operator> <name>CURL_CSELECT_IN</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
