<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\memdebug.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEADER_CURL_MEMDEBUG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_CURL_MEMDEBUG_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>



























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MT_LOGFNAME_BUFSIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>FILE</name> <modifier>*</modifier></type><name>curl_dbg_logfile</name></decl>;</decl_stmt>


<function_decl><type><name>CURL_EXTERN</name> <name>void</name> <modifier>*</modifier></type><name>curl_dbg_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURL_EXTERN</name> <name>void</name> <modifier>*</modifier></type><name>curl_dbg_calloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>elements</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURL_EXTERN</name> <name>void</name> <modifier>*</modifier></type><name>curl_dbg_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURL_EXTERN</name> <name>void</name></type> <name>curl_dbg_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURL_EXTERN</name> <name>char</name> <modifier>*</modifier></type><name>curl_dbg_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>CURL_EXTERN</name> <name>wchar_t</name> <modifier>*</modifier></type><name>curl_dbg_wcsdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>CURL_EXTERN</name> <name>void</name></type> <name>curl_dbg_memdebug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURL_EXTERN</name> <name>void</name></type> <name>curl_dbg_memlimit</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>limit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURL_EXTERN</name> <name>void</name></type> <name>curl_dbg_log</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>CURL_EXTERN</name> <name>curl_socket_t</name></type> <name>curl_dbg_socket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURL_EXTERN</name> <name>void</name></type> <name>curl_dbg_mark_sclose</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURL_EXTERN</name> <name>int</name></type> <name>curl_dbg_sclose</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURL_EXTERN</name> <name>curl_socket_t</name></type> <name>curl_dbg_accept</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOCKETPAIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>CURL_EXTERN</name> <name>int</name></type> <name>curl_dbg_socketpair</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>,
<parameter><decl><type><name>curl_socket_t</name></type> <name><name>socket_vector</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><name>CURL_EXTERN</name> <name>SEND_TYPE_RETV</name></type> <name>curl_dbg_send</name><parameter_list>(<parameter><decl><type><name>SEND_TYPE_ARG1</name></type> <name>sockfd</name></decl></parameter>,
<parameter><decl><type><name>SEND_QUAL_ARG2</name> <name>SEND_TYPE_ARG2</name></type> <name>buf</name></decl></parameter>,
<parameter><decl><type><name>SEND_TYPE_ARG3</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>SEND_TYPE_ARG4</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURL_EXTERN</name> <name>RECV_TYPE_RETV</name></type> <name>curl_dbg_recv</name><parameter_list>(<parameter><decl><type><name>RECV_TYPE_ARG1</name></type> <name>sockfd</name></decl></parameter>,
<parameter><decl><type><name>RECV_TYPE_ARG2</name></type> <name>buf</name></decl></parameter>,
<parameter><decl><type><name>RECV_TYPE_ARG3</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>RECV_TYPE_ARG4</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>CURL_EXTERN</name> <name>FILE</name> <modifier>*</modifier></type><name>curl_dbg_fopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CURL_EXTERN</name> <name>int</name></type> <name>curl_dbg_fclose</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MEMDEBUG_NODEFINES</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>strdup</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strdup</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_strdup(ptr, __LINE__, __FILE__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>malloc</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_malloc(size, __LINE__, __FILE__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>calloc</name><parameter_list>(<parameter><type><name>nbelem</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_calloc(nbelem, size, __LINE__, __FILE__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>realloc</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_realloc(ptr, size, __LINE__, __FILE__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>free</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_free(ptr, __LINE__, __FILE__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>send</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_send(a,b,c,d, __LINE__, __FILE__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>recv</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_recv(a,b,c,d, __LINE__, __FILE__)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>wcsdup</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wcsdup</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_wcsdup(ptr, __LINE__, __FILE__)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_wcsdup</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_wcsdup</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_wcsdup(ptr, __LINE__, __FILE__)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_tcsdup</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_tcsdup</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_wcsdup(ptr, __LINE__, __FILE__)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_tcsdup</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_tcsdup</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_strdup(ptr, __LINE__, __FILE__)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>socket</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>socket</name><parameter_list>(<parameter><type><name>domain</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>protocol</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>curl_dbg_socket(domain, type, protocol, __LINE__, __FILE__)</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>accept</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>accept</name><parameter_list>(<parameter><type><name>sock</name></type></parameter>,<parameter><type><name>addr</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>curl_dbg_accept(sock, addr, len, __LINE__, __FILE__)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOCKETPAIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>socketpair</name><parameter_list>(<parameter><type><name>domain</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>protocol</name></type></parameter>,<parameter><type><name>socket_vector</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>curl_dbg_socketpair(domain, type, protocol, socket_vector, __LINE__, __FILE__)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>getaddrinfo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__osf__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ogetaddrinfo</name><parameter_list>(<parameter><type><name>host</name></type></parameter>,<parameter><type><name>serv</name></type></parameter>,<parameter><type><name>hint</name></type></parameter>,<parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_getaddrinfo(host, serv, hint, res, __LINE__, __FILE__)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getaddrinfo</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getaddrinfo</name><parameter_list>(<parameter><type><name>host</name></type></parameter>,<parameter><type><name>serv</name></type></parameter>,<parameter><type><name>hint</name></type></parameter>,<parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_getaddrinfo(host, serv, hint, res, __LINE__, __FILE__)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FREEADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>freeaddrinfo</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>freeaddrinfo</name><parameter_list>(<parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_freeaddrinfo(data, __LINE__, __FILE__)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>sclose</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sclose</name><parameter_list>(<parameter><type><name>sockfd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_sclose(sockfd,__LINE__,__FILE__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fake_sclose</name><parameter_list>(<parameter><type><name>sockfd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_mark_sclose(sockfd,__LINE__,__FILE__)</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fopen</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fopen</name><parameter_list>(<parameter><type><name>file</name></type></parameter>,<parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_fopen(file,mode,__LINE__,__FILE__)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fdopen</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fdopen</name><parameter_list>(<parameter><type><name>file</name></type></parameter>,<parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_fdopen(file,mode,__LINE__,__FILE__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fclose</name><parameter_list>(<parameter><type><name>file</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_dbg_fclose(file,__LINE__,__FILE__)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>fake_sclose</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fake_sclose</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Curl_safefree</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { free((ptr)); (ptr) = NULL;} while(0)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
