<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\setup-os400.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEADER_CURL_SETUP_OS400_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_CURL_SETUP_OS400_H</name></cpp:macro></cpp:define>
























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_MAXHOST</name></cpp:macro> <cpp:value>1025</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_MAXSERV</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>


<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>u_int32_t</name>;</typedef>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gskssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qsoasync.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gssapi.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_getaddrinfo_a</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getaddrinfo</name></cpp:macro> <cpp:value>Curl_getaddrinfo_a</cpp:value></cpp:define>


<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_getnameinfo_a</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>,
<parameter><decl><type><name>curl_socklen_t</name></type> <name>salen</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>, <parameter><decl><type><name>curl_socklen_t</name></type> <name>nodenamelen</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>, <parameter><decl><type><name>curl_socklen_t</name></type> <name>servnamelen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getnameinfo</name></cpp:macro> <cpp:value>Curl_getnameinfo_a</cpp:value></cpp:define>




<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_gsk_environment_open</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name> <modifier>*</modifier></type> <name>my_env_handle</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_environment_open</name></cpp:macro> <cpp:value>Curl_gsk_environment_open</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_gsk_secure_soc_open</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_env_handle</name></decl></parameter>,
<parameter><decl><type><name>gsk_handle</name> <modifier>*</modifier></type> <name>my_session_handle</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_secure_soc_open</name></cpp:macro> <cpp:value>Curl_gsk_secure_soc_open</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_gsk_environment_close</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name> <modifier>*</modifier></type> <name>my_env_handle</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_environment_close</name></cpp:macro> <cpp:value>Curl_gsk_environment_close</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_gsk_secure_soc_close</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name> <modifier>*</modifier></type> <name>my_session_handle</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_secure_soc_close</name></cpp:macro> <cpp:value>Curl_gsk_secure_soc_close</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_gsk_environment_init</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_env_handle</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_environment_init</name></cpp:macro> <cpp:value>Curl_gsk_environment_init</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_gsk_secure_soc_init</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_session_handle</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_secure_soc_init</name></cpp:macro> <cpp:value>Curl_gsk_secure_soc_init</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_gsk_attribute_set_buffer_a</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_gsk_handle</name></decl></parameter>,
<parameter><decl><type><name>GSK_BUF_ID</name></type> <name>bufID</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bufSize</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_attribute_set_buffer</name></cpp:macro> <cpp:value>Curl_gsk_attribute_set_buffer_a</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_gsk_attribute_set_enum</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_gsk_handle</name></decl></parameter>,
<parameter><decl><type><name>GSK_ENUM_ID</name></type> <name>enumID</name></decl></parameter>,
<parameter><decl><type><name>GSK_ENUM_VALUE</name></type> <name>enumValue</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_attribute_set_enum</name></cpp:macro> <cpp:value>Curl_gsk_attribute_set_enum</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_gsk_attribute_set_numeric_value</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_gsk_handle</name></decl></parameter>,
<parameter><decl><type><name>GSK_NUM_ID</name></type> <name>numID</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>numValue</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_attribute_set_numeric_value</name></cpp:macro> <cpp:value>Curl_gsk_attribute_set_numeric_value</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_gsk_attribute_set_callback</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_gsk_handle</name></decl></parameter>,
<parameter><decl><type><name>GSK_CALLBACK_ID</name></type> <name>callBackID</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callBackAreaPtr</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_attribute_set_callback</name></cpp:macro> <cpp:value>Curl_gsk_attribute_set_callback</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_gsk_attribute_get_buffer_a</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_gsk_handle</name></decl></parameter>,
<parameter><decl><type><name>GSK_BUF_ID</name></type> <name>bufID</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bufSize</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_attribute_get_buffer</name></cpp:macro> <cpp:value>Curl_gsk_attribute_get_buffer_a</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_gsk_attribute_get_enum</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_gsk_handle</name></decl></parameter>,
<parameter><decl><type><name>GSK_ENUM_ID</name></type> <name>enumID</name></decl></parameter>,
<parameter><decl><type><name>GSK_ENUM_VALUE</name> <modifier>*</modifier></type><name>enumValue</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_attribute_get_enum</name></cpp:macro> <cpp:value>Curl_gsk_attribute_get_enum</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_gsk_attribute_get_numeric_value</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_gsk_handle</name></decl></parameter>,
<parameter><decl><type><name>GSK_NUM_ID</name></type> <name>numID</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>numValue</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_attribute_get_numeric_value</name></cpp:macro> <cpp:value>Curl_gsk_attribute_get_numeric_value</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_gsk_attribute_get_cert_info</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_gsk_handle</name></decl></parameter>,
<parameter><decl><type><name>GSK_CERT_ID</name></type> <name>certID</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>gsk_cert_data_elem</name> <modifier>*</modifier><modifier>*</modifier></type><name>certDataElem</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>certDataElementCount</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_attribute_get_cert_info</name></cpp:macro> <cpp:value>Curl_gsk_attribute_get_cert_info</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_gsk_secure_soc_misc</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_session_handle</name></decl></parameter>,
<parameter><decl><type><name>GSK_MISC_ID</name></type> <name>miscID</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_secure_soc_misc</name></cpp:macro> <cpp:value>Curl_gsk_secure_soc_misc</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_gsk_secure_soc_read</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_session_handle</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>readBuffer</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>readBufSize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>amtRead</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_secure_soc_read</name></cpp:macro> <cpp:value>Curl_gsk_secure_soc_read</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_gsk_secure_soc_write</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_session_handle</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>writeBuffer</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>writeBufSize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>amtWritten</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_secure_soc_write</name></cpp:macro> <cpp:value>Curl_gsk_secure_soc_write</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>Curl_gsk_strerror_a</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gsk_return_value</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_strerror</name></cpp:macro> <cpp:value>Curl_gsk_strerror_a</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_gsk_secure_soc_startInit</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_session_handle</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>IOCompletionPort</name></decl></parameter>,
<parameter><decl><type><name>Qso_OverlappedIO_t</name> <modifier>*</modifier></type> <name>communicationsArea</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gsk_secure_soc_startInit</name></cpp:macro> <cpp:value>Curl_gsk_secure_soc_startInit</cpp:value></cpp:define>




<function_decl><type><specifier>extern</specifier> <name>OM_uint32</name></type> <name>Curl_gss_import_name_a</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type> <name>minor_status</name></decl></parameter>,
<parameter><decl><type><name>gss_buffer_t</name></type> <name>in_name</name></decl></parameter>,
<parameter><decl><type><name>gss_OID</name></type> <name>in_name_type</name></decl></parameter>,
<parameter><decl><type><name>gss_name_t</name> <modifier>*</modifier></type> <name>out_name</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gss_import_name</name></cpp:macro> <cpp:value>Curl_gss_import_name_a</cpp:value></cpp:define>


<function_decl><type><specifier>extern</specifier> <name>OM_uint32</name></type> <name>Curl_gss_display_status_a</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type> <name>minor_status</name></decl></parameter>,
<parameter><decl><type><name>OM_uint32</name></type> <name>status_value</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>status_type</name></decl></parameter>, <parameter><decl><type><name>gss_OID</name></type> <name>mech_type</name></decl></parameter>,
<parameter><decl><type><name>gss_msg_ctx_t</name> <modifier>*</modifier></type> <name>message_context</name></decl></parameter>,
<parameter><decl><type><name>gss_buffer_t</name></type> <name>status_string</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gss_display_status</name></cpp:macro> <cpp:value>Curl_gss_display_status_a</cpp:value></cpp:define>


<function_decl><type><specifier>extern</specifier> <name>OM_uint32</name></type> <name>Curl_gss_init_sec_context_a</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type> <name>minor_status</name></decl></parameter>,
<parameter><decl><type><name>gss_cred_id_t</name></type> <name>cred_handle</name></decl></parameter>,
<parameter><decl><type><name>gss_ctx_id_t</name> <modifier>*</modifier></type> <name>context_handle</name></decl></parameter>,
<parameter><decl><type><name>gss_name_t</name></type> <name>target_name</name></decl></parameter>,
<parameter><decl><type><name>gss_OID</name></type> <name>mech_type</name></decl></parameter>,
<parameter><decl><type><name>gss_flags_t</name></type> <name>req_flags</name></decl></parameter>,
<parameter><decl><type><name>OM_uint32</name></type> <name>time_req</name></decl></parameter>,
<parameter><decl><type><name>gss_channel_bindings_t</name></type>
<name>input_chan_bindings</name></decl></parameter>,
<parameter><decl><type><name>gss_buffer_t</name></type> <name>input_token</name></decl></parameter>,
<parameter><decl><type><name>gss_OID</name> <modifier>*</modifier></type> <name>actual_mech_type</name></decl></parameter>,
<parameter><decl><type><name>gss_buffer_t</name></type> <name>output_token</name></decl></parameter>,
<parameter><decl><type><name>gss_flags_t</name> <modifier>*</modifier></type> <name>ret_flags</name></decl></parameter>,
<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type> <name>time_rec</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gss_init_sec_context</name></cpp:macro> <cpp:value>Curl_gss_init_sec_context_a</cpp:value></cpp:define>


<function_decl><type><specifier>extern</specifier> <name>OM_uint32</name></type> <name>Curl_gss_delete_sec_context_a</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type> <name>minor_status</name></decl></parameter>,
<parameter><decl><type><name>gss_ctx_id_t</name> <modifier>*</modifier></type> <name>context_handle</name></decl></parameter>,
<parameter><decl><type><name>gss_buffer_t</name></type> <name>output_token</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gss_delete_sec_context</name></cpp:macro> <cpp:value>Curl_gss_delete_sec_context_a</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BerValue</name></cpp:macro> <cpp:value>struct berval</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldap_url_parse</name></cpp:macro> <cpp:value>ldap_url_parse_utf8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldap_init</name></cpp:macro> <cpp:value>Curl_ldap_init_a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldap_simple_bind_s</name></cpp:macro> <cpp:value>Curl_ldap_simple_bind_s_a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldap_search_s</name></cpp:macro> <cpp:value>Curl_ldap_search_s_a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldap_get_values_len</name></cpp:macro> <cpp:value>Curl_ldap_get_values_len_a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldap_err2string</name></cpp:macro> <cpp:value>Curl_ldap_err2string_a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldap_get_dn</name></cpp:macro> <cpp:value>Curl_ldap_get_dn_a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldap_first_attribute</name></cpp:macro> <cpp:value>Curl_ldap_first_attribute_a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldap_next_attribute</name></cpp:macro> <cpp:value>Curl_ldap_next_attribute_a</cpp:value></cpp:define>




<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_os400_connect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type> <name>destaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_os400_bind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type> <name>localaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_os400_sendto</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type> <name>dstaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_os400_recvfrom</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>fromaddr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_os400_getpeername</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>Curl_os400_getsockname</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>connect</name></cpp:macro> <cpp:value>Curl_os400_connect</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bind</name></cpp:macro> <cpp:value>Curl_os400_bind</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sendto</name></cpp:macro> <cpp:value>Curl_os400_sendto</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>recvfrom</name></cpp:macro> <cpp:value>Curl_os400_recvfrom</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getpeername</name></cpp:macro> <cpp:value>Curl_os400_getpeername</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getsockname</name></cpp:macro> <cpp:value>Curl_os400_getsockname</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zlibVersion</name></cpp:macro> <cpp:value>Curl_os400_zlibVersion</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inflateInit_</name></cpp:macro> <cpp:value>Curl_os400_inflateInit_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inflateInit2_</name></cpp:macro> <cpp:value>Curl_os400_inflateInit2_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inflate</name></cpp:macro> <cpp:value>Curl_os400_inflate</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inflateEnd</name></cpp:macro> <cpp:value>Curl_os400_inflateEnd</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
