<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\netrc.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_NETRC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PWD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"netrc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtok.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>



<enum>enum <name>host_lookup_state</name> <block>{
<decl><name>NOTHING</name></decl>,
<decl><name>HOSTFOUND</name></decl>, 
<decl><name>HOSTVALID</name></decl> 
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETRC_FILE_MISSING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETRC_FAILED</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETRC_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type> <name>parsenetrc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>loginp</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>passwordp</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>login_changed</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>password_changed</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>netrcfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retcode</name> <init>= <expr><name>NETRC_FILE_MISSING</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>login</name> <init>= <expr><operator>*</operator><name>loginp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>password</name> <init>= <expr><operator>*</operator><name>passwordp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>specific_login</name> <init>= <expr><operator>(</operator><name>login</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>login</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>login_alloc</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>password_alloc</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>host_lookup_state</name></name></type> <name>state</name> <init>= <expr><name>NOTHING</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>state_login</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name>state_password</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>state_our_login</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 


<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>netrcfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>netrcfile</name></expr></argument>, <argument><expr><name>FOPEN_READTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tok_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>netrcbuffer</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>netrcbuffsize</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>netrcbuffer</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>!</operator><name>done</name> <operator>&amp;&amp;</operator> <call><name>fgets</name><argument_list>(<argument><expr><name>netrcbuffer</name></expr></argument>, <argument><expr><name>netrcbuffsize</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>netrcbuffer</name></expr></argument>, <argument><expr><literal type="string">" \t\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>tok</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>tok</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>
<while>while<condition>(<expr><name>tok</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>login</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>login</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>password</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>password</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NOTHING</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"machine"</literal></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>state</name> <operator>=</operator> <name>HOSTFOUND</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>HOSTVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name>retcode</name> <operator>=</operator> <name>NETRC_SUCCESS</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>HOSTFOUND</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>HOSTVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name>retcode</name> <operator>=</operator> <name>NETRC_SUCCESS</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>NOTHING</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>HOSTVALID</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>state_login</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>specific_login</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state_our_login</name> <operator>=</operator> <call><name>strcasecompare</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name>login</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>login_alloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>login</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>login_alloc</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>login</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>login</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retcode</name> <operator>=</operator> <name>NETRC_FAILED</name></expr>;</expr_stmt> 
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>login_alloc</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>state_login</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>state_password</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>state_our_login</name> <operator>||</operator> <operator>!</operator><name>specific_login</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>password</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>password_alloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>password_alloc</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>password</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>password</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retcode</name> <operator>=</operator> <name>NETRC_FAILED</name></expr>;</expr_stmt> 
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>password_alloc</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>state_password</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"login"</literal></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>state_login</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"password"</literal></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>state_password</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"machine"</literal></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>HOSTFOUND</name></expr>;</expr_stmt>
<expr_stmt><expr><name>state_our_login</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch> 

<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" \t\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while> 
</block_content>}</block></while> 

<label><name>out</name>:</label>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>retcode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>login_changed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>password_changed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>login_alloc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>loginp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>loginp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>loginp</name> <operator>=</operator> <name>login</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>login_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>password_alloc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>passwordp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>passwordp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>passwordp</name> <operator>=</operator> <name>password</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>password_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>login_alloc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>login</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>password_alloc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>retcode</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>Curl_parsenetrc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>loginp</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>passwordp</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>login_changed</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>password_changed</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>netrcfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retcode</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filealloc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>netrcfile</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>home</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>homea</name> <init>= <expr><call><name>curl_getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if<condition>(<expr><name>homea</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>home</name> <operator>=</operator> <name>homea</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPWUID_R</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETEUID</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name></type> <name>pw</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pw_res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pwbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>getpwuid_r</name><argument_list>(<argument><expr><call><name>geteuid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pw</name></expr></argument>, <argument><expr><name>pwbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pwbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pw_res</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name>pw_res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>home</name> <operator>=</operator> <name><name>pw</name><operator>.</operator><name>pw_dir</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPWUID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETEUID</name></expr></argument>)</argument_list></call></expr></cpp:elif>
</block_content>}</block></else></if_stmt>
<if_stmt><else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>pw</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pw</name> <operator>=</operator> <call><name>getpwuid</name><argument_list>(<argument><expr><call><name>geteuid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>pw</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>home</name> <operator>=</operator> <name><name>pw</name><operator>-&gt;</operator><name>pw_dir</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>home</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>retcode</name></expr>;</return></block_content></block></if></if_stmt> 


<expr_stmt><expr><name>filealloc</name> <operator>=</operator> <call><name>curl_maprintf</name><argument_list>(<argument><expr><literal type="string">"%s%s.netrc"</literal></expr></argument>, <argument><expr><name>home</name></expr></argument>, <argument><expr><name>DIR_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>filealloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>homea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>retcode</name> <operator>=</operator> <call><name>parsenetrc</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>loginp</name></expr></argument>, <argument><expr><name>passwordp</name></expr></argument>, <argument><expr><name>login_changed</name></expr></argument>,
<argument><expr><name>password_changed</name></expr></argument>, <argument><expr><name>filealloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filealloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>retcode</name> <operator>==</operator> <name>NETRC_FILE_MISSING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>filealloc</name> <operator>=</operator> <call><name>curl_maprintf</name><argument_list>(<argument><expr><literal type="string">"%s%s_netrc"</literal></expr></argument>, <argument><expr><name>home</name></expr></argument>, <argument><expr><name>DIR_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>filealloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>homea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>retcode</name> <operator>=</operator> <call><name>parsenetrc</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>loginp</name></expr></argument>, <argument><expr><name>passwordp</name></expr></argument>, <argument><expr><name>login_changed</name></expr></argument>,
<argument><expr><name>password_changed</name></expr></argument>, <argument><expr><name>filealloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filealloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>homea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>retcode</name> <operator>=</operator> <call><name>parsenetrc</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>loginp</name></expr></argument>, <argument><expr><name>passwordp</name></expr></argument>, <argument><expr><name>login_changed</name></expr></argument>,
<argument><expr><name>password_changed</name></expr></argument>, <argument><expr><name>netrcfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>retcode</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
