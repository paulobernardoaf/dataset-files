<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\asyn-ares.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLRES_ARES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PROCESS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NOVELL_LIBC__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>in_addr_t</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in_addr_t</name></cpp:macro> <cpp:value>unsigned long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hostip.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"share.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_pton.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_STATICLIB</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CARES_STATICLIB</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SYMBIAN32__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CARES_STATICLIB</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ares.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ares_version.h&gt;</cpp:file></cpp:include> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARES_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x010500</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_CARES_CALLBACK_TIMEOUTS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<struct>struct <name>ResolverResults</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>num_pending</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>temp_ai</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>last_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>happy_eyeballs_dns_time</name></decl>;</decl_stmt> 
}</block>;</struct>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAPPY_EYEBALLS_DNS_TIMEOUT</name></cpp:macro> <cpp:value>5000</cpp:value></cpp:define>






<function><type><name>int</name></type> <name>Curl_resolver_global_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CARES_HAVE_ARES_LIBRARY_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>ares_library_init</name><argument_list>(<argument><expr><name>ARES_LIB_INIT_ALL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>Curl_resolver_global_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CARES_HAVE_ARES_LIBRARY_CLEANUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ares_library_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_ares_sock_state_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>ares_socket_t</name></type> <name>socket_fd</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>readable</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>writable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>easy</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>readable</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>writable</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>easy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_multi_closed</name><argument_list>(<argument><expr><name>easy</name></expr></argument>, <argument><expr><name>socket_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>








<function><type><name>CURLcode</name></type> <name>Curl_resolver_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>easy</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>resolver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ares_options</name></name></type> <name>options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optmask</name> <init>= <expr><name>ARES_OPT_SOCK_STATE_CB</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>options</name><operator>.</operator><name>sock_state_cb</name></name> <operator>=</operator> <name>Curl_ares_sock_state_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><operator>.</operator><name>sock_state_cb_data</name></name> <operator>=</operator> <name>easy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ares_init_options</name><argument_list>(<argument><expr><operator>(</operator><name>ares_channel</name><operator>*</operator><operator>)</operator><name>resolver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>optmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>ARES_SUCCESS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>ARES_ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>


</block_content>}</block></function>








<function><type><name>void</name></type> <name>Curl_resolver_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>resolver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ares_destroy</name><argument_list>(<argument><expr><operator>(</operator><name>ares_channel</name><operator>)</operator><name>resolver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>CURLcode</name></type> <name>Curl_resolver_duphandle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>easy</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>from</name></expr>;</expr_stmt>





<return>return <expr><call><name>Curl_resolver_init</name><argument_list>(<argument><expr><name>easy</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>destroy_async_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_async</name></name> <modifier>*</modifier></type><name>async</name></decl></parameter>)</parameter_list>;</function_decl>




<function><type><name>void</name></type> <name>Curl_resolver_cancel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ares_cancel</name><argument_list>(<argument><expr><operator>(</operator><name>ares_channel</name><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>destroy_async_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>async</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>Curl_resolver_kill</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>Curl_resolver_cancel</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy_async_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_async</name></name> <modifier>*</modifier></type><name>async</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>async</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>async</name><operator>-&gt;</operator><name>os_specific</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ResolverResults</name></name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator>struct <name>ResolverResults</name> <operator>*</operator><operator>)</operator><name><name>async</name><operator>-&gt;</operator><name>os_specific</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>temp_ai</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_freeaddrinfo</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>temp_ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>temp_ai</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>async</name><operator>-&gt;</operator><name>os_specific</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>async</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>Curl_resolver_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>maxtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timebuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>milli</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><call><name>ares_getsock</name><argument_list>(<argument><expr><operator>(</operator><name>ares_channel</name><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>ares_socket_t</name> <operator>*</operator><operator>)</operator><name>socks</name></expr></argument>, <argument><expr><name>MAX_SOCKSPEREASYHANDLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>maxtime</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>CURL_TIMEOUT_RESOLVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>maxtime</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>ares_timeout</name><argument_list>(<argument><expr><operator>(</operator><name>ares_channel</name><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxtime</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>timebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>milli</name> <operator>=</operator> <operator>(</operator><name><name>timeout</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>timeout</name><operator>-&gt;</operator><name>tv_usec</name></name><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>milli</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>milli</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>milli</name></expr></argument>, <argument><expr><name>EXPIRE_ASYNC_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>max</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type> <name>waitperform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout_ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nfds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ares_socket_t</name></type> <name><name>socks</name><index>[<expr><name>ARES_GETSOCK_MAXNUM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>pfd</name><index>[<expr><name>ARES_GETSOCK_MAXNUM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bitmask</name> <operator>=</operator> <call><name>ares_getsock</name><argument_list>(<argument><expr><operator>(</operator><name>ares_channel</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>, <argument><expr><name>socks</name></expr></argument>,
<argument><expr><name>ARES_GETSOCK_MAXNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ARES_GETSOCK_MAXNUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>ARES_GETSOCK_READABLE</name><argument_list>(<argument><expr><name>bitmask</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>socks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>|=</operator> <name>POLLRDNORM</name><operator>|</operator><name>POLLIN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>ARES_GETSOCK_WRITABLE</name><argument_list>(<argument><expr><name>bitmask</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>socks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>|=</operator> <name>POLLWRNORM</name><operator>|</operator><name>POLLOUT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>num</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nfds</name> <operator>=</operator> <call><name>Curl_poll</name><argument_list>(<argument><expr><name>pfd</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>timeout_ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nfds</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nfds</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><call><name>ares_process_fd</name><argument_list>(<argument><expr><operator>(</operator><name>ares_channel</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>, <argument><expr><name>ARES_SOCKET_BAD</name></expr></argument>,
<argument><expr><name>ARES_SOCKET_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ares_process_fd</name><argument_list>(<argument><expr><operator>(</operator><name>ares_channel</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <operator>(</operator><name>POLLRDNORM</name><operator>|</operator><name>POLLIN</name><operator>)</operator><operator>)</operator></expr>?</condition><then>
<expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></then><else>:<expr><name>ARES_SOCKET_BAD</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <operator>(</operator><name>POLLWRNORM</name><operator>|</operator><name>POLLOUT</name><operator>)</operator><operator>)</operator></expr>?</condition><then>
<expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></then><else>:<expr><name>ARES_SOCKET_BAD</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>nfds</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>CURLcode</name></type> <name>Curl_resolver_is_resolved</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>dns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ResolverResults</name></name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator>struct <name>ResolverResults</name> <operator>*</operator><operator>)</operator>
<name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>os_specific</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>dns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dns</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>waitperform</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if<condition>(<expr><name>res</name>
<operator>&amp;&amp;</operator> <name><name>res</name><operator>-&gt;</operator><name>num_pending</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>res</name><operator>-&gt;</operator><name>happy_eyeballs_dns_time</name><operator>.</operator><name>tv_sec</name></name>
<operator>||</operator> <name><name>res</name><operator>-&gt;</operator><name>happy_eyeballs_dns_time</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>Curl_timediff</name><argument_list>(<argument><expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>happy_eyeballs_dns_time</name></name></expr></argument>)</argument_list></call>
<operator>&gt;=</operator> <name>HAPPY_EYEBALLS_DNS_TIMEOUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>memset</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>happy_eyeballs_dns_time</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>happy_eyeballs_dns_time</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>ares_cancel</name><argument_list>(<argument><expr><operator>(</operator><name>ares_channel</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>num_pending</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>res</name><operator>-&gt;</operator><name>num_pending</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>dns</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Curl_addrinfo_callback</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>last_status</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>temp_ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>temp_ai</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>dns</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not resolve: %s (%s)"</literal></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>hostname</name></name></expr></argument>, <argument><expr><call><name>ares_strerror</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy</name></name></expr>?</condition><then><expr><name>CURLE_COULDNT_RESOLVE_PROXY</name></expr></then><else>:
<expr><name>CURLE_COULDNT_RESOLVE_HOST</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>dns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dns</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>dns</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>destroy_async_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>async</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>












<function><type><name>CURLcode</name></type> <name>Curl_resolver_wait_resolv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name> <init>= <expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>temp_entry</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>entry</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>entry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Timed out before name resolve started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>timeout</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>CURL_TIMEOUT_RESOLVE</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<while>while<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tvp</name></decl>, <decl><type ref="prev"/><name>tv</name></decl>, <decl><type ref="prev"/><name>store</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>itimeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timeout_ms</name></decl>;</decl_stmt>

<expr_stmt><expr><name>itimeout</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>timeout</name> <operator>&gt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>INT_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT_MAX</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name>timeout</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>store</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>itimeout</name><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>store</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>itimeout</name><operator>%</operator><literal type="number">1000</literal><operator>)</operator><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tvp</name> <operator>=</operator> <call><name>ares_timeout</name><argument_list>(<argument><expr><operator>(</operator><name>ares_channel</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>store</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>tvp</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>tvp</name><operator>-&gt;</operator><name>tv_usec</name></name><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>waitperform</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>timeout_ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_resolver_is_resolved</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><ternary><condition><expr><name>entry</name></expr>?</condition><then><expr><operator>&amp;</operator><name>temp_entry</name></expr></then><else>:<expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>done</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsUpdate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now2</name> <init>= <expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>timediff</name> <init>= <expr><call><name>Curl_timediff</name><argument_list>(<argument><expr><name>now2</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if<condition>(<expr><name>timediff</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timeout</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if<condition>(<expr><name>timediff</name> <operator>&gt;</operator> <name>timeout</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>timeout</name> <operator>-=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>timediff</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>now</name> <operator>=</operator> <name>now2</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OPERATION_TIMEDOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ares_cancel</name><argument_list>(<argument><expr><operator>(</operator><name>ares_channel</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><name>entry</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>entry</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>dns</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"c-ares resolve failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>compound_results</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ResolverResults</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ai_tail</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ai</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ai_tail</name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name><name>ai_tail</name><operator>-&gt;</operator><name>ai_next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ai_tail</name> <operator>=</operator> <name><name>ai_tail</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><name><name>ai_tail</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>temp_ai</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>temp_ai</name></name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>query_completed_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CARES_CALLBACK_TIMEOUTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<parameter><decl><type><name>int</name></type> <name>timeouts</name></decl></parameter>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<parameter><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>hostent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator>struct <name>connectdata</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ResolverResults</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CARES_CALLBACK_TIMEOUTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>timeouts</name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>ARES_EDESTRUCTION</name> <operator>==</operator> <name>status</name></expr>)</condition><block type="pseudo"><block_content>


<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator>struct <name>ResolverResults</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>os_specific</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>num_pending</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>CURL_ASYNC_SUCCESS</name> <operator>==</operator> <name>status</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ai</name> <init>= <expr><call><name>Curl_he2ai</name><argument_list>(<argument><expr><name>hostent</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>ai</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>compound_results</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>last_status</name></name> <operator>!=</operator> <name>ARES_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>last_status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if<condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>num_pending</name></name>







<operator>&amp;&amp;</operator> <operator>(</operator><name>status</name> <operator>==</operator> <name>ARES_SUCCESS</name> <operator>||</operator> <name>status</name> <operator>==</operator> <name>ARES_ENOTFOUND</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>num_pending</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






































<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>happy_eyeballs_dns_time</name></name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>HAPPY_EYEBALLS_DNS_TIMEOUT</name></expr></argument>, <argument><expr><name>EXPIRE_HAPPY_EYEBALLS_DNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>









<function><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>Curl_resolver_getaddrinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>waitp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><name>PF_INET</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>waitp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ip_version</name></name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARES_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x010601</literal></expr></cpp:if>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt> 


<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURL_IPRESOLVE_V4</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>PF_INET</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_IPRESOLVE_V6</name></expr>:</case>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>PF_INET6</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>bufp</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bufp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ResolverResults</name></name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>hostname</name></name> <operator>=</operator> <name>bufp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>done</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>dns</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ResolverResults</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>hostname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>os_specific</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>last_status</name></name> <operator>=</operator> <name>ARES_ENOTFOUND</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>family</name> <operator>==</operator> <name>PF_UNSPEC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>Curl_ipv6works</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>num_pending</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ares_gethostbyname</name><argument_list>(<argument><expr><operator>(</operator><name>ares_channel</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>,
<argument><expr><name>PF_INET</name></expr></argument>, <argument><expr><name>query_completed_cb</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ares_gethostbyname</name><argument_list>(<argument><expr><operator>(</operator><name>ares_channel</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>,
<argument><expr><name>PF_INET6</name></expr></argument>, <argument><expr><name>query_completed_cb</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>num_pending</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ares_gethostbyname</name><argument_list>(<argument><expr><operator>(</operator><name>ares_channel</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>,
<argument><expr><name>PF_INET</name></expr></argument>, <argument><expr><name>query_completed_cb</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<block>{<block_content>
<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>num_pending</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ares_gethostbyname</name><argument_list>(<argument><expr><operator>(</operator><name>ares_channel</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>family</name></expr></argument>,
<argument><expr><name>query_completed_cb</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>waitp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return> 
</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_set_dns_servers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>servers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_NOT_BUILT_IN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ares_result</name></decl>;</decl_stmt>







<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>servers</name> <operator>&amp;&amp;</operator> <name><name>servers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ARES_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x010704</literal><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ARES_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x010b00</literal><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><name>ares_result</name> <operator>=</operator> <call><name>ares_set_servers_ports_csv</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>, <argument><expr><name>servers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ares_result</name> <operator>=</operator> <call><name>ares_set_servers_csv</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>, <argument><expr><name>servers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch<condition>(<expr><name>ares_result</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ARES_SUCCESS</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARES_ENOMEM</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ARES_ENOTINITIALIZED</name></expr>:</case>
<case>case <expr><name>ARES_ENODATA</name></expr>:</case>
<case>case <expr><name>ARES_EBADSTR</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><name>ares_result</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_set_dns_interface</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>interf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ARES_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x010704</literal><operator>)</operator></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>interf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>interf</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ares_set_local_dev</name><argument_list>(<argument><expr><operator>(</operator><name>ares_channel</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>, <argument><expr><name>interf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>interf</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_set_dns_local_ip4</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>local_ip4</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ARES_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x010704</literal><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>a4</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>!</operator><name>local_ip4</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>local_ip4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a4</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>local_ip4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a4</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ares_set_local_ip4</name><argument_list>(<argument><expr><operator>(</operator><name>ares_channel</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>a4</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>local_ip4</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_set_dns_local_ip6</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>local_ip6</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ARES_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x010704</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>a6</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>!</operator><name>local_ip6</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>local_ip6</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>a6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>a6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>local_ip6</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ares_set_local_ip6</name><argument_list>(<argument><expr><operator>(</operator><name>ares_channel</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>, <argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>local_ip6</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
