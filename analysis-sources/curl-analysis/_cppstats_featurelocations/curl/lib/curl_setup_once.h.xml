<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\curl_setup_once.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEADER_CURL_SETUP_ONCE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_CURL_SETUP_ONCE_H</name></cpp:macro></cpp:define>



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERRNO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_MALLOC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_MEMORY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_STAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIME_WITH_SYS_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDBOOL_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BOOL_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_XOPEN_SOURCE_EXTENDED</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_KERNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_APP32_64BIT_OFF_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OLD_APP32_64BIT_OFF_T</name></cpp:macro> <cpp:value>_APP32_64BIT_OFF_T</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_APP32_64BIT_OFF_T</name></cpp:undef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OLD_APP32_64BIT_OFF_T</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_XOPEN_SOURCE_EXTENDED</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_KERNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OLD_APP32_64BIT_OFF_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_APP32_64BIT_OFF_T</name></cpp:macro> <cpp:value>OLD_APP32_64BIT_OFF_T</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OLD_APP32_64BIT_OFF_T</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TIMEVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>timeval</name> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>tv_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>tv_usec</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MSG_NOSIGNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEND_4TH_ARG</name></cpp:macro> <cpp:value>MSG_NOSIGNAL</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEND_4TH_ARG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__minix</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sread</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ssize_t)read((RECV_TYPE_ARG1)(x), (RECV_TYPE_ARG2)(y), (RECV_TYPE_ARG3)(z))</cpp:value></cpp:define>



<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RECV</name></expr></argument>)</argument_list></call></expr></cpp:elif>






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RECV_TYPE_ARG1</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RECV_TYPE_ARG2</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RECV_TYPE_ARG3</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RECV_TYPE_ARG4</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RECV_TYPE_RETV</name></expr></argument>)</argument_list></call></expr></cpp:if>





<expr_stmt><expr><name>Error</name> <name>Missing_definition_of_return_and_arguments_types_of_recv</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sread</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ssize_t)recv((RECV_TYPE_ARG1)(x), (RECV_TYPE_ARG2)(y), (RECV_TYPE_ARG3)(z), (RECV_TYPE_ARG4)(0))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>sread</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name>Error</name> <name>Missing_definition_of_macro_sread</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__minix</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>swrite</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ssize_t)write((SEND_TYPE_ARG1)(x), (SEND_TYPE_ARG2)(y), (SEND_TYPE_ARG3)(z))</cpp:value></cpp:define>



<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SEND</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SEND_TYPE_ARG1</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SEND_QUAL_ARG2</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SEND_TYPE_ARG2</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SEND_TYPE_ARG3</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SEND_TYPE_ARG4</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SEND_TYPE_RETV</name></expr></argument>)</argument_list></call></expr></cpp:if>






<name>Error</name> <name>Missing_definition_of_return_and_arguments_types_of_send</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>swrite</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ssize_t)send((SEND_TYPE_ARG1)(x), (SEND_QUAL_ARG2 SEND_TYPE_ARG2)(y), (SEND_TYPE_ARG3)(z), (SEND_TYPE_ARG4)(SEND_4TH_ARG))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>swrite</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name>Error</name> <name>Missing_definition_of_macro_swrite</name></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RECVFROM</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RECVFROM_TYPE_ARG1</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RECVFROM_TYPE_ARG2</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RECVFROM_TYPE_ARG3</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RECVFROM_TYPE_ARG4</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RECVFROM_TYPE_ARG5</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RECVFROM_TYPE_ARG6</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RECVFROM_TYPE_RETV</name></expr></argument>)</argument_list></call></expr></cpp:if>







Error Missing_definition_of_return_and_arguments_types_of_recvfrom

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sreadfrom</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>bl</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>fl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ssize_t)recvfrom((RECVFROM_TYPE_ARG1) (s), (RECVFROM_TYPE_ARG2 *)(b), (RECVFROM_TYPE_ARG3) (bl), (RECVFROM_TYPE_ARG4) (0), (RECVFROM_TYPE_ARG5 *)(f), (RECVFROM_TYPE_ARG6 *)(fl))</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>sreadfrom</name></expr></argument>)</argument_list></call></expr></cpp:if>

Error Missing_definition_of_macro_sreadfrom

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RECVFROM_TYPE_ARG6_IS_VOID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECVFROM_ARG6_T</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECVFROM_ARG6_T</name></cpp:macro> <cpp:value>RECVFROM_TYPE_ARG6</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CLOSESOCKET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sclose</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>closesocket((x))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CLOSESOCKET_CAMEL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sclose</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CloseSocket((x))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CLOSE_S</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sclose</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>close_s((x))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LWIPSOCK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sclose</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lwip_close((x))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sclose</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>close((x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LWIPSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sfcntl</name></cpp:macro> <cpp:value>lwip_fcntl</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sfcntl</name></cpp:macro> <cpp:value>fcntl</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOLOWER</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(tolower((int) ((unsigned char)x)))</cpp:value></cpp:define>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BOOL_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>bool</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>false</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>true</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_BOOL_T</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BOOL_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><enum>enum <block>{
<decl><name>bool_false</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>bool_true</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block></enum></type> <name>bool</name>;</typedef>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>false</name></cpp:macro> <cpp:value>bool_false</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>true</name></cpp:macro> <cpp:value>bool_true</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_BOOL_T</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUE</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALSE</name></cpp:macro> <cpp:value>false</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_ctype.h"</cpp:file></cpp:include>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIG_ATOMIC_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>sig_atomic_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SIG_ATOMIC_T</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIG_ATOMIC_T_VOLATILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_ATOMIC_T</name></cpp:macro> <cpp:value>static sig_atomic_t</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_ATOMIC_T</name></cpp:macro> <cpp:value>static volatile sig_atomic_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RETSIGTYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETSIGTYPE</name></cpp:macro> <cpp:value>void</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUGF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUGF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEBUGASSERT</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ASSERT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUGASSERT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert(x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUGASSERT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKERRNO</name></cpp:macro> <cpp:value>((int)WSAGetLastError())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_SOCKERRNO</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(WSASetLastError((int)(x)))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKERRNO</name></cpp:macro> <cpp:value>(errno)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_SOCKERRNO</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(errno = (x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EBADF</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EBADF</name></cpp:macro> <cpp:value>WSAEBADF</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EINTR</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EINTR</name></cpp:macro> <cpp:value>WSAEINTR</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EINVAL</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EINVAL</name></cpp:macro> <cpp:value>WSAEINVAL</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EWOULDBLOCK</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EWOULDBLOCK</name></cpp:macro> <cpp:value>WSAEWOULDBLOCK</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EINPROGRESS</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EINPROGRESS</name></cpp:macro> <cpp:value>WSAEINPROGRESS</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EALREADY</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EALREADY</name></cpp:macro> <cpp:value>WSAEALREADY</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ENOTSOCK</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOTSOCK</name></cpp:macro> <cpp:value>WSAENOTSOCK</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EDESTADDRREQ</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDESTADDRREQ</name></cpp:macro> <cpp:value>WSAEDESTADDRREQ</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EMSGSIZE</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMSGSIZE</name></cpp:macro> <cpp:value>WSAEMSGSIZE</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EPROTOTYPE</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPROTOTYPE</name></cpp:macro> <cpp:value>WSAEPROTOTYPE</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ENOPROTOOPT</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOPROTOOPT</name></cpp:macro> <cpp:value>WSAENOPROTOOPT</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EPROTONOSUPPORT</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPROTONOSUPPORT</name></cpp:macro> <cpp:value>WSAEPROTONOSUPPORT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESOCKTNOSUPPORT</name></cpp:macro> <cpp:value>WSAESOCKTNOSUPPORT</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EOPNOTSUPP</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOPNOTSUPP</name></cpp:macro> <cpp:value>WSAEOPNOTSUPP</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPFNOSUPPORT</name></cpp:macro> <cpp:value>WSAEPFNOSUPPORT</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAFNOSUPPORT</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAFNOSUPPORT</name></cpp:macro> <cpp:value>WSAEAFNOSUPPORT</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EADDRINUSE</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EADDRINUSE</name></cpp:macro> <cpp:value>WSAEADDRINUSE</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EADDRNOTAVAIL</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EADDRNOTAVAIL</name></cpp:macro> <cpp:value>WSAEADDRNOTAVAIL</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ENETDOWN</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENETDOWN</name></cpp:macro> <cpp:value>WSAENETDOWN</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ENETUNREACH</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENETUNREACH</name></cpp:macro> <cpp:value>WSAENETUNREACH</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ENETRESET</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENETRESET</name></cpp:macro> <cpp:value>WSAENETRESET</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ECONNABORTED</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONNABORTED</name></cpp:macro> <cpp:value>WSAECONNABORTED</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ECONNRESET</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONNRESET</name></cpp:macro> <cpp:value>WSAECONNRESET</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ENOBUFS</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOBUFS</name></cpp:macro> <cpp:value>WSAENOBUFS</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EISCONN</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EISCONN</name></cpp:macro> <cpp:value>WSAEISCONN</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ENOTCONN</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOTCONN</name></cpp:macro> <cpp:value>WSAENOTCONN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESHUTDOWN</name></cpp:macro> <cpp:value>WSAESHUTDOWN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETOOMANYREFS</name></cpp:macro> <cpp:value>WSAETOOMANYREFS</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ETIMEDOUT</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETIMEDOUT</name></cpp:macro> <cpp:value>WSAETIMEDOUT</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ECONNREFUSED</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONNREFUSED</name></cpp:macro> <cpp:value>WSAECONNREFUSED</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ELOOP</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELOOP</name></cpp:macro> <cpp:value>WSAELOOP</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENAMETOOLONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENAMETOOLONG</name></cpp:macro> <cpp:value>WSAENAMETOOLONG</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EHOSTDOWN</name></cpp:macro> <cpp:value>WSAEHOSTDOWN</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EHOSTUNREACH</name></cpp:undef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EHOSTUNREACH</name></cpp:macro> <cpp:value>WSAEHOSTUNREACH</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENOTEMPTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOTEMPTY</name></cpp:macro> <cpp:value>WSAENOTEMPTY</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPROCLIM</name></cpp:macro> <cpp:value>WSAEPROCLIM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EUSERS</name></cpp:macro> <cpp:value>WSAEUSERS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDQUOT</name></cpp:macro> <cpp:value>WSAEDQUOT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESTALE</name></cpp:macro> <cpp:value>WSAESTALE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EREMOTE</name></cpp:macro> <cpp:value>WSAEREMOTE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>argv_item_t</name></cpp:macro> <cpp:value>__char_ptr32</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>argv_item_t</name></cpp:macro> <cpp:value>char *</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZERO_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
