<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\progress.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timeval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_RATE_LIMIT_PERIOD</name></cpp:macro> <cpp:value>3000</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROGRESS_METER</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><specifier>static</specifier> <name>void</name></type> <name>time2str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>h</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>seconds</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"--:--:--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>seconds</name> <operator>/</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>h</name> <operator>&lt;=</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>seconds</name> <operator>-</operator> <operator>(</operator><name>h</name><operator>*</operator><call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>/</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>seconds</name> <operator>-</operator> <operator>(</operator><name>h</name><operator>*</operator><call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><name>m</name><operator>*</operator><call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"%2"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">":%02"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>
<literal type="string">":%02"</literal> <name>CURL_FORMAT_CURL_OFF_T</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>


<decl_stmt><decl><type><name>curl_off_t</name></type> <name>d</name> <init>= <expr><name>seconds</name> <operator>/</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">86400</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>seconds</name> <operator>-</operator> <operator>(</operator><name>d</name><operator>*</operator><call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">86400</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>/</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>d</name> <operator>&lt;=</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">999</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"%3"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>
<literal type="string">"d %02"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"h"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"%7"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"d"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>max5data</name><parameter_list>(<parameter><decl><type><name>curl_off_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>max5</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_KILOBYTE</name></cpp:macro> <cpp:value>CURL_OFF_T_C(1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_MEGABYTE</name></cpp:macro> <cpp:value>(CURL_OFF_T_C(1024) * ONE_KILOBYTE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_GIGABYTE</name></cpp:macro> <cpp:value>(CURL_OFF_T_C(1024) * ONE_MEGABYTE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_TERABYTE</name></cpp:macro> <cpp:value>(CURL_OFF_T_C(1024) * ONE_GIGABYTE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_PETABYTE</name></cpp:macro> <cpp:value>(CURL_OFF_T_C(1024) * ONE_TERABYTE)</cpp:value></cpp:define>

<if_stmt><if>if<condition>(<expr><name>bytes</name> <operator>&lt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>max5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%5"</literal> <name>CURL_FORMAT_CURL_OFF_T</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>bytes</name> <operator>&lt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>ONE_KILOBYTE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>max5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%4"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"k"</literal></expr></argument>, <argument><expr><name>bytes</name><operator>/</operator><name>ONE_KILOBYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>bytes</name> <operator>&lt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>ONE_MEGABYTE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>max5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%2"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">".%0"</literal>
<name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"M"</literal></expr></argument>, <argument><expr><name>bytes</name><operator>/</operator><name>ONE_MEGABYTE</name></expr></argument>,
<argument><expr><operator>(</operator><name>bytes</name><operator>%</operator><name>ONE_MEGABYTE</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>ONE_MEGABYTE</name><operator>/</operator><call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>CURL_SIZEOF_CURL_OFF_T</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></cpp:if>

<if type="elseif">else if<condition>(<expr><name>bytes</name> <operator>&lt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>ONE_MEGABYTE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>max5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%4"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"M"</literal></expr></argument>, <argument><expr><name>bytes</name><operator>/</operator><name>ONE_MEGABYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>bytes</name> <operator>&lt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>ONE_GIGABYTE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>max5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%2"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">".%0"</literal>
<name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"G"</literal></expr></argument>, <argument><expr><name>bytes</name><operator>/</operator><name>ONE_GIGABYTE</name></expr></argument>,
<argument><expr><operator>(</operator><name>bytes</name><operator>%</operator><name>ONE_GIGABYTE</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>ONE_GIGABYTE</name><operator>/</operator><call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>bytes</name> <operator>&lt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>ONE_GIGABYTE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>max5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%4"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"G"</literal></expr></argument>, <argument><expr><name>bytes</name><operator>/</operator><name>ONE_GIGABYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>bytes</name> <operator>&lt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>ONE_TERABYTE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>max5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%4"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"T"</literal></expr></argument>, <argument><expr><name>bytes</name><operator>/</operator><name>ONE_TERABYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>max5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%4"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"P"</literal></expr></argument>, <argument><expr><name>bytes</name><operator>/</operator><name>ONE_PETABYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>max5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%4"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"M"</literal></expr></argument>, <argument><expr><name>bytes</name><operator>/</operator><name>ONE_MEGABYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>max5</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>















<function><type><name>int</name></type> <name>Curl_pgrsDone</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>lastshow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_pgrsUpdate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PGRS_HIDE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>callback</name></name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>err</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>speeder_c</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>Curl_pgrsResetTransferSizes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>Curl_pgrsTime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>timerid</name></type> <name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name> <init>= <expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name> <modifier>*</modifier></type><name>delta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>timer</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><name>TIMER_NONE</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>TIMER_STARTOP</name></expr>:</case>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>t_startop</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIMER_STARTSINGLE</name></expr>:</case>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>t_startsingle</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>is_t_startransfer_set</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIMER_STARTACCEPT</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>t_acceptdata</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIMER_NAMELOOKUP</name></expr>:</case>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>t_nslookup</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIMER_CONNECT</name></expr>:</case>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>t_connect</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIMER_APPCONNECT</name></expr>:</case>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>t_appconnect</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIMER_PRETRANSFER</name></expr>:</case>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>t_pretransfer</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIMER_STARTTRANSFER</name></expr>:</case>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>t_starttransfer</name></name></expr>;</expr_stmt>






<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>is_t_startransfer_set</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>is_t_startransfer_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<case>case <expr><name>TIMER_POSTRANSFER</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>TIMER_REDIRECT</name></expr>:</case>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>t_redirect</name></name> <operator>=</operator> <call><name>Curl_timediff_us</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if<condition>(<expr><name>delta</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>us</name> <init>= <expr><call><name>Curl_timediff_us</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>t_startsingle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>us</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>us</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><operator>*</operator><name>delta</name> <operator>+=</operator> <name>us</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_pgrsStartNow</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>speeder_c</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>is_t_startransfer_set</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>ul_limit_start</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>ul_limit_start</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>dl_limit_start</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>dl_limit_start</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>downloaded</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>uploaded</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <name>PGRS_HIDE</name><operator>|</operator><name>PGRS_HEADERS_OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_ratelimit</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



















<function><type><name>timediff_t</name></type> <name>Curl_pgrsLimitWaitTime</name><parameter_list>(<parameter><decl><type><name>curl_off_t</name></type> <name>cursize</name></decl></parameter>,
<parameter><decl><type><name>curl_off_t</name></type> <name>startsize</name></decl></parameter>,
<parameter><decl><type><name>curl_off_t</name></type> <name>limit</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>start</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>size</name> <init>= <expr><name>cursize</name> <operator>-</operator> <name>startsize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>minimum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>actual</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>limit</name> <operator>||</operator> <operator>!</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <name>CURL_OFF_T_MAX</name><operator>/</operator><literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>minimum</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <operator>(</operator><call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>size</name> <operator>/</operator> <name>limit</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>minimum</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <operator>(</operator><name>size</name> <operator>/</operator> <name>limit</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>minimum</name> <operator>&lt;</operator> <name>TIMEDIFF_T_MAX</name><operator>/</operator><literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>minimum</name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>minimum</name> <operator>=</operator> <name>TIMEDIFF_T_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>





<expr_stmt><expr><name>actual</name> <operator>=</operator> <call><name>Curl_timediff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>actual</name> <operator>&lt;</operator> <name>minimum</name></expr>)</condition> <block>{<block_content>


<return>return <expr><operator>(</operator><name>minimum</name> <operator>-</operator> <name>actual</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>Curl_pgrsSetDownloadCounter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>downloaded</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>Curl_ratelimit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>max_recv_speed</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>Curl_timediff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>dl_limit_start</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator>
<name>MIN_RATE_LIMIT_PERIOD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>dl_limit_start</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>dl_limit_size</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>downloaded</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>max_send_speed</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>Curl_timediff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>ul_limit_start</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator>
<name>MIN_RATE_LIMIT_PERIOD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>ul_limit_start</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>ul_limit_size</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>uploaded</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>Curl_pgrsSetUploadCounter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>uploaded</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_pgrsSetDownloadSize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_dl</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>PGRS_DL_SIZE_KNOWN</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_dl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>PGRS_DL_SIZE_KNOWN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_pgrsSetUploadSize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_ul</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>PGRS_UL_SIZE_KNOWN</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_ul</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>PGRS_UL_SIZE_KNOWN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>progress_calc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>timespent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>timespent_ms</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>dl</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>downloaded</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>ul</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>uploaded</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>timetoshow</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>timespent</name></name> <operator>=</operator> <call><name>Curl_timediff_us</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timespent</name> <operator>=</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>timespent</name></name><operator>/</operator><literal type="number">1000000</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>timespent_ms</name> <operator>=</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>timespent</name></name><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt> 


<if_stmt><if>if<condition>(<expr><name>dl</name> <operator>&lt;</operator> <name>CURL_OFF_T_MAX</name><operator>/</operator><literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>dlspeed</name></name> <operator>=</operator> <operator>(</operator><name>dl</name> <operator>*</operator> <literal type="number">1000</literal> <operator>/</operator> <operator>(</operator><ternary><condition><expr><name>timespent_ms</name><operator>&gt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>timespent_ms</name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>dlspeed</name></name> <operator>=</operator> <operator>(</operator><name>dl</name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><name>timespent</name><operator>&gt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>timespent</name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><name>ul</name> <operator>&lt;</operator> <name>CURL_OFF_T_MAX</name><operator>/</operator><literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>ulspeed</name></name> <operator>=</operator> <operator>(</operator><name>ul</name> <operator>*</operator> <literal type="number">1000</literal> <operator>/</operator> <operator>(</operator><ternary><condition><expr><name>timespent_ms</name><operator>&gt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>timespent_ms</name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>ulspeed</name></name> <operator>=</operator> <operator>(</operator><name>ul</name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><name>timespent</name><operator>&gt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>timespent</name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>lastshow</name></name> <operator>!=</operator> <name><name>now</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>countindex</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nowindex</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>speeder_c</name></name><operator>%</operator> <name>CURR_TIME</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>lastshow</name></name> <operator>=</operator> <name><name>now</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>timetoshow</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>speeder</name><index>[ <expr><name>nowindex</name></expr> ]</index></name> <operator>=</operator>
<name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>downloaded</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>uploaded</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>speeder_time</name> <index>[ <expr><name>nowindex</name></expr> ]</index></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>speeder_c</name></name><operator>++</operator></expr>;</expr_stmt>





<expr_stmt><expr><name>countindex</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>speeder_c</name></name> <operator>&gt;=</operator> <name>CURR_TIME</name><operator>)</operator></expr>?</condition><then>
<expr><name>CURR_TIME</name></expr></then><else>:<expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>speeder_c</name></name></expr></else></ternary><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>countindex</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>checkindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>span_ms</name></decl>;</decl_stmt>




<expr_stmt><expr><name>checkindex</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>speeder_c</name></name> <operator>&gt;=</operator> <name>CURR_TIME</name><operator>)</operator></expr>?</condition><then>
<expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>speeder_c</name></name><operator>%</operator><name>CURR_TIME</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><name>span_ms</name> <operator>=</operator> <call><name>Curl_timediff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>speeder_time</name><index>[<expr><name>checkindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>span_ms</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>span_ms</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<block>{<block_content>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>amount</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>speeder</name><index>[<expr><name>nowindex</name></expr>]</index></name><operator>-</operator>
<name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>speeder</name><index>[<expr><name>checkindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>amount</name> <operator>&gt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">4294967</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>current_speed</name></name> <operator>=</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator>
<operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>amount</name><operator>/</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>span_ms</name><operator>/</operator><literal type="number">1000.0</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>current_speed</name></name> <operator>=</operator> <name>amount</name><operator>*</operator><call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call><operator>/</operator><name>span_ms</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>current_speed</name></name> <operator>=</operator>
<name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>ulspeed</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>dlspeed</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt> 
<return>return <expr><name>timetoshow</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROGRESS_METER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>progress_meter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>max5</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>dlpercen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>ulpercen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>total_percen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>total_transfer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>total_expected_transfer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>time_left</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>time_total</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>time_spent</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>ulestimate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>dlestimate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>total_estimate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>timespent</name> <init>=
<expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>timespent</name></name><operator>/</operator><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PGRS_HEADERS_OUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>err</name></name></expr></argument>,
<argument><expr><literal type="string">"** Resuming transfer from byte position %"</literal>
<name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>err</name></name></expr></argument>,
<argument><expr><literal type="string">" %% Total %% Received %% Xferd Average Speed "</literal>
<literal type="string">"Time Time Time Current\n"</literal>
<literal type="string">" Dload Upload "</literal>
<literal type="string">"Total Spent Left Speed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>PGRS_HEADERS_OUT</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PGRS_UL_SIZE_KNOWN</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>ulspeed</name></name> <operator>&gt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ulestimate</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_ul</name></name> <operator>/</operator> <name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>ulspeed</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_ul</name></name> <operator>&gt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ulpercen</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>uploaded</name></name> <operator>/</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_ul</name></name><operator>/</operator><call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_ul</name></name> <operator>&gt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ulpercen</name> <operator>=</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>uploaded</name></name><operator>*</operator><literal type="number">100</literal><operator>)</operator> <operator>/</operator>
<name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_ul</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PGRS_DL_SIZE_KNOWN</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>dlspeed</name></name> <operator>&gt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dlestimate</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_dl</name></name> <operator>/</operator> <name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>dlspeed</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_dl</name></name> <operator>&gt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dlpercen</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>downloaded</name></name> <operator>/</operator>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_dl</name></name><operator>/</operator><call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_dl</name></name> <operator>&gt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dlpercen</name> <operator>=</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>downloaded</name></name><operator>*</operator><literal type="number">100</literal><operator>)</operator> <operator>/</operator>
<name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_dl</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>total_estimate</name> <operator>=</operator> <ternary><condition><expr><name>ulestimate</name><operator>&gt;</operator><name>dlestimate</name></expr>?</condition><then><expr><name>ulestimate</name></expr></then><else>:<expr><name>dlestimate</name></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><call><name>time2str</name><argument_list>(<argument><expr><name>time_left</name></expr></argument>, <argument><expr><ternary><condition><expr><name>total_estimate</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>?</condition><then><expr><operator>(</operator><name>total_estimate</name> <operator>-</operator> <name>timespent</name><operator>)</operator></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>time2str</name><argument_list>(<argument><expr><name>time_total</name></expr></argument>, <argument><expr><name>total_estimate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>time2str</name><argument_list>(<argument><expr><name>time_spent</name></expr></argument>, <argument><expr><name>timespent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>total_expected_transfer</name> <operator>=</operator>
<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PGRS_UL_SIZE_KNOWN</name><operator>)</operator></expr>?</condition><then>
<expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_ul</name></name></expr></then><else>:<expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>uploaded</name></name></expr></else></ternary><operator>)</operator><operator>+</operator>
<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PGRS_DL_SIZE_KNOWN</name><operator>)</operator></expr>?</condition><then>
<expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_dl</name></name></expr></then><else>:<expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>downloaded</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>total_transfer</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>downloaded</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>uploaded</name></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>total_expected_transfer</name> <operator>&gt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>total_percen</name> <operator>=</operator> <name>total_transfer</name> <operator>/</operator>
<operator>(</operator><name>total_expected_transfer</name><operator>/</operator><call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>total_expected_transfer</name> <operator>&gt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>total_percen</name> <operator>=</operator> <operator>(</operator><name>total_transfer</name><operator>*</operator><literal type="number">100</literal><operator>)</operator> <operator>/</operator> <name>total_expected_transfer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>err</name></name></expr></argument>,
<argument><expr><literal type="string">"\r"</literal>
<literal type="string">"%3"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" %s "</literal>
<literal type="string">"%3"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" %s "</literal>
<literal type="string">"%3"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" %s %s %s %s %s %s %s"</literal></expr></argument>,
<argument><expr><name>total_percen</name></expr></argument>, 
<argument><expr><call><name>max5data</name><argument_list>(<argument><expr><name>total_expected_transfer</name></expr></argument>, <argument><expr><name><name>max5</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, 
<argument><expr><name>dlpercen</name></expr></argument>, 
<argument><expr><call><name>max5data</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>downloaded</name></name></expr></argument>, <argument><expr><name><name>max5</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, 
<argument><expr><name>ulpercen</name></expr></argument>, 
<argument><expr><call><name>max5data</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>uploaded</name></name></expr></argument>, <argument><expr><name><name>max5</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, 
<argument><expr><call><name>max5data</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>dlspeed</name></name></expr></argument>, <argument><expr><name><name>max5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, 
<argument><expr><call><name>max5data</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>ulspeed</name></name></expr></argument>, <argument><expr><name><name>max5</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, 
<argument><expr><name>time_total</name></expr></argument>, 
<argument><expr><name>time_spent</name></expr></argument>, 
<argument><expr><name>time_left</name></expr></argument>, 
<argument><expr><call><name>max5data</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>current_speed</name></name></expr></argument>, <argument><expr><name><name>max5</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>progress_meter</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>int</name></type> <name>Curl_pgrsUpdate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name> <init>= <expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>showprogress</name> <init>= <expr><call><name>progress_calc</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PGRS_HIDE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fxferinfo</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fxferinfo</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>progress_client</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_dl</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>downloaded</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_ul</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>uploaded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURL_PROGRESSFUNC_CONTINUE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Callback aborted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fprogress</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fprogress</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>progress_client</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_dl</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>downloaded</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>size_ul</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>uploaded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURL_PROGRESSFUNC_CONTINUE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Callback aborted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>showprogress</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>progress_meter</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
