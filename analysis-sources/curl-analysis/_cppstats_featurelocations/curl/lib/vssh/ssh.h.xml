<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\vssh\ssh.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEADER_CURL_SSH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_CURL_SSH_H</name></cpp:macro></cpp:define>






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libssh2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libssh2_sftp.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH_LIBSSH_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libssh/libssh.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libssh/sftp.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WOLFSSH</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wolfssh/ssh.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wolfssh/wolfsftp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<typedef>typedef <type><enum>enum <block>{
<decl><name>SSH_NO_STATE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, 
<decl><name>SSH_STOP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>SSH_INIT</name></decl>, 
<decl><name>SSH_S_STARTUP</name></decl>, 
<decl><name>SSH_HOSTKEY</name></decl>, 
<decl><name>SSH_AUTHLIST</name></decl>,
<decl><name>SSH_AUTH_PKEY_INIT</name></decl>,
<decl><name>SSH_AUTH_PKEY</name></decl>,
<decl><name>SSH_AUTH_PASS_INIT</name></decl>,
<decl><name>SSH_AUTH_PASS</name></decl>,
<decl><name>SSH_AUTH_AGENT_INIT</name></decl>, 
<decl><name>SSH_AUTH_AGENT_LIST</name></decl>, 
<decl><name>SSH_AUTH_AGENT</name></decl>, 
<decl><name>SSH_AUTH_HOST_INIT</name></decl>,
<decl><name>SSH_AUTH_HOST</name></decl>,
<decl><name>SSH_AUTH_KEY_INIT</name></decl>,
<decl><name>SSH_AUTH_KEY</name></decl>,
<decl><name>SSH_AUTH_GSSAPI</name></decl>,
<decl><name>SSH_AUTH_DONE</name></decl>,
<decl><name>SSH_SFTP_INIT</name></decl>,
<decl><name>SSH_SFTP_REALPATH</name></decl>, 

<decl><name>SSH_SFTP_QUOTE_INIT</name></decl>, 
<decl><name>SSH_SFTP_POSTQUOTE_INIT</name></decl>, 
<decl><name>SSH_SFTP_QUOTE</name></decl>,
<decl><name>SSH_SFTP_NEXT_QUOTE</name></decl>,
<decl><name>SSH_SFTP_QUOTE_STAT</name></decl>,
<decl><name>SSH_SFTP_QUOTE_SETSTAT</name></decl>,
<decl><name>SSH_SFTP_QUOTE_SYMLINK</name></decl>,
<decl><name>SSH_SFTP_QUOTE_MKDIR</name></decl>,
<decl><name>SSH_SFTP_QUOTE_RENAME</name></decl>,
<decl><name>SSH_SFTP_QUOTE_RMDIR</name></decl>,
<decl><name>SSH_SFTP_QUOTE_UNLINK</name></decl>,
<decl><name>SSH_SFTP_QUOTE_STATVFS</name></decl>,
<decl><name>SSH_SFTP_GETINFO</name></decl>,
<decl><name>SSH_SFTP_FILETIME</name></decl>,
<decl><name>SSH_SFTP_TRANS_INIT</name></decl>,
<decl><name>SSH_SFTP_UPLOAD_INIT</name></decl>,
<decl><name>SSH_SFTP_CREATE_DIRS_INIT</name></decl>,
<decl><name>SSH_SFTP_CREATE_DIRS</name></decl>,
<decl><name>SSH_SFTP_CREATE_DIRS_MKDIR</name></decl>,
<decl><name>SSH_SFTP_READDIR_INIT</name></decl>,
<decl><name>SSH_SFTP_READDIR</name></decl>,
<decl><name>SSH_SFTP_READDIR_LINK</name></decl>,
<decl><name>SSH_SFTP_READDIR_BOTTOM</name></decl>,
<decl><name>SSH_SFTP_READDIR_DONE</name></decl>,
<decl><name>SSH_SFTP_DOWNLOAD_INIT</name></decl>,
<decl><name>SSH_SFTP_DOWNLOAD_STAT</name></decl>, 
<decl><name>SSH_SFTP_CLOSE</name></decl>, 
<decl><name>SSH_SFTP_SHUTDOWN</name></decl>, 
<decl><name>SSH_SCP_TRANS_INIT</name></decl>, 
<decl><name>SSH_SCP_UPLOAD_INIT</name></decl>,
<decl><name>SSH_SCP_DOWNLOAD_INIT</name></decl>,
<decl><name>SSH_SCP_DOWNLOAD</name></decl>,
<decl><name>SSH_SCP_DONE</name></decl>,
<decl><name>SSH_SCP_SEND_EOF</name></decl>,
<decl><name>SSH_SCP_WAIT_EOF</name></decl>,
<decl><name>SSH_SCP_WAIT_CLOSE</name></decl>,
<decl><name>SSH_SCP_CHANNEL_FREE</name></decl>, 
<decl><name>SSH_SESSION_DISCONNECT</name></decl>, 
<decl><name>SSH_SESSION_FREE</name></decl>, 
<decl><name>SSH_QUIT</name></decl>,
<decl><name>SSH_LAST</name></decl> 
}</block></enum></type> <name>sshstate</name>;</typedef>





<struct>struct <name>SSHPROTO</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt> 
}</block>;</struct>



<struct>struct <name>ssh_conn</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>authlist</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>passphrase</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rsa_pub</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rsa</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>authed</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>sshstate</name></type> <name>state</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>sshstate</name></type> <name>nextstate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>CURLcode</name></type> <name>actualcode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>quote_item</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>quote_path1</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>quote_path2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>acceptfail</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>homedir</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>readdir_len</name></decl>, <decl><type ref="prev"/><name>readdir_totalLen</name></decl>, <decl><type ref="prev"/><name>readdir_currLen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>readdir_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>readdir_linkPath</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>secondCreateDirs</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slash_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>orig_waitfor</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBSSH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>unsigned</name></type> <name>kbd_state</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ssh_key</name></type> <name>privkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssh_key</name></type> <name>pubkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>auth_methods</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssh_session</name></type> <name>ssh_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssh_scp</name></type> <name>scp_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sftp_session</name></type> <name>sftp_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sftp_file</name></type> <name>sftp_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sftp_dir</name></type> <name>sftp_dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>sftp_recv_state</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sftp_file_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>sftp_attributes</name></type> <name>readdir_attrs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>sftp_attributes</name></type> <name>readdir_link_attrs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>sftp_attributes</name></type> <name>quote_attrs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>readdir_filename</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>readdir_longentry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>readdir_tmp</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBSSH2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>readdir_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>readdir_longentry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LIBSSH2_SFTP_ATTRIBUTES</name></type> <name>quote_attrs</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>LIBSSH2_SFTP_ATTRIBUTES</name></type> <name>readdir_attrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LIBSSH2_SESSION</name> <modifier>*</modifier></type><name>ssh_session</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>LIBSSH2_CHANNEL</name> <modifier>*</modifier></type><name>ssh_channel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>LIBSSH2_SFTP</name> <modifier>*</modifier></type><name>sftp_session</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>LIBSSH2_SFTP_HANDLE</name> <modifier>*</modifier></type><name>sftp_handle</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_AGENT_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>LIBSSH2_AGENT</name> <modifier>*</modifier></type><name>ssh_agent</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>libssh2_agent_publickey</name></name> <modifier>*</modifier></type><name>sshagent_identity</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sshagent_prev_identity</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_KNOWNHOST_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>LIBSSH2_KNOWNHOSTS</name> <modifier>*</modifier></type><name>kh</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WOLFSSH</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>WOLFSSH</name> <modifier>*</modifier></type><name>ssh_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WOLFSSH_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>word32</name></type> <name>handleSz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>byte</name></type> <name><name>handle</name><index>[<expr><name>WOLFSSH_MAX_HANDLE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>offset</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBSSH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_LIBSSH_VERSION</name></cpp:macro> <cpp:value>ssh_version(0)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBSSH2</name></expr></argument>)</argument_list></call></expr></cpp:elif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBSSH2_VERSION_NUM</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>LIBSSH2_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">0x001000</literal><operator>)</operator></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"SCP/SFTP protocols require libssh2 0.16 or later"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSSH2_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x010000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LIBSSH2_SFTP_SEEK64</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSSH2_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x010100</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LIBSSH2_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSSH2_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x010205</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LIBSSH2_INIT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LIBSSH2_EXIT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSSH2_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x010206</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LIBSSH2_KNOWNHOST_CHECKP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LIBSSH2_SCP_SEND64</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSSH2_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x010208</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LIBSSH2_SESSION_HANDSHAKE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_LIBSSH2_VERSION</name></cpp:macro> <cpp:value>libssh2_version(0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_LIBSSH2_VERSION</name></cpp:macro> <cpp:value>LIBSSH2_VERSION</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_scp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_sftp</name></decl>;</decl_stmt>


<function_decl><type><name>CURLcode</name></type> <name>Curl_ssh_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Curl_ssh_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>Curl_ssh_version</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Curl_ssh_cleanup</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
