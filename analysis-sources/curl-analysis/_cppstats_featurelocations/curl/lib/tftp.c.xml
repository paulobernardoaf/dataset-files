<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\tftp.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_TFTP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NET_IF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_IOCTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_PARAM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transfer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tftp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sockaddr.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"speedcheck.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"escape.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TFTP_BLKSIZE_DEFAULT</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TFTP_BLKSIZE_MIN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TFTP_BLKSIZE_MAX</name></cpp:macro> <cpp:value>65464</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TFTP_OPTION_BLKSIZE</name></cpp:macro> <cpp:value>"blksize"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TFTP_OPTION_TSIZE</name></cpp:macro> <cpp:value>"tsize"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TFTP_OPTION_INTERVAL</name></cpp:macro> <cpp:value>"timeout"</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{
<decl><name>TFTP_MODE_NETASCII</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>TFTP_MODE_OCTET</name></decl>
}</block></enum></type> <name>tftp_mode_t</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>TFTP_STATE_START</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>TFTP_STATE_RX</name></decl>,
<decl><name>TFTP_STATE_TX</name></decl>,
<decl><name>TFTP_STATE_FIN</name></decl>
}</block></enum></type> <name>tftp_state_t</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>TFTP_EVENT_NONE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>TFTP_EVENT_INIT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>TFTP_EVENT_RRQ</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>TFTP_EVENT_WRQ</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>TFTP_EVENT_DATA</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>TFTP_EVENT_ACK</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>TFTP_EVENT_ERROR</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>TFTP_EVENT_OACK</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>TFTP_EVENT_TIMEOUT</name></decl>
}</block></enum></type> <name>tftp_event_t</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>TFTP_ERR_UNDEF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>TFTP_ERR_NOTFOUND</name></decl>,
<decl><name>TFTP_ERR_PERM</name></decl>,
<decl><name>TFTP_ERR_DISKFULL</name></decl>,
<decl><name>TFTP_ERR_ILLEGAL</name></decl>,
<decl><name>TFTP_ERR_UNKNOWNID</name></decl>,
<decl><name>TFTP_ERR_EXISTS</name></decl>,
<decl><name>TFTP_ERR_NOSUCHUSER</name></decl>, 


<decl><name>TFTP_ERR_NONE</name> <init>= <expr><operator>-</operator><literal type="number">100</literal></expr></init></decl>,
<decl><name>TFTP_ERR_TIMEOUT</name></decl>,
<decl><name>TFTP_ERR_NORESPONSE</name></decl>
}</block></enum></type> <name>tftp_error_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>tftp_packet</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block></struct></type> <name>tftp_packet_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>tftp_state_data</name> <block>{
<decl_stmt><decl><type><name>tftp_state_t</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tftp_mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tftp_error_t</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tftp_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retry_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retry_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>start_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>max_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>rx_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_sockaddr_storage</name></name></type> <name>local_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_sockaddr_storage</name></name></type> <name>remote_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socklen_t</name></type> <name>remote_addrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blksize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>requested_blksize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tftp_packet_t</name></type> <name>rpacket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tftp_packet_t</name></type> <name>spacket</name></decl>;</decl_stmt>
}</block></struct></type> <name>tftp_state_data_t</name>;</typedef>



<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_rx</name><parameter_list>(<parameter><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>tftp_event_t</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_tx</name><parameter_list>(<parameter><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>tftp_event_t</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>CURLcode</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_multi_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_doing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tftp_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_translate_code</name><parameter_list>(<parameter><decl><type><name>tftp_error_t</name></type> <name>error</name></decl></parameter>)</parameter_list>;</function_decl>






<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_tftp</name> <init>= <expr><block>{
<expr><literal type="string">"TFTP"</literal></expr>, 
<expr><name>tftp_setup_connection</name></expr>, 
<expr><name>tftp_do</name></expr>, 
<expr><name>tftp_done</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>tftp_connect</name></expr>, 
<expr><name>tftp_multi_statemach</name></expr>, 
<expr><name>tftp_doing</name></expr>, 
<expr><name>tftp_getsock</name></expr>, 
<expr><name>tftp_getsock</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>tftp_disconnect</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>PORT_TFTP</name></expr>, 
<expr><name>CURLPROTO_TFTP</name></expr>, 
<expr><name>PROTOPT_NONE</name> <operator>|</operator> <name>PROTOPT_NOURLQUERY</name></expr> 
}</block></expr></init></decl>;</decl_stmt>











<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_set_timeouts</name><parameter_list>(<parameter><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>maxtime</name></decl>, <decl><type ref="prev"/><name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>timeout_ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>start</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TFTP_STATE_START</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Connection time-out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxtime</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>timeout_ms</name> <operator>+</operator> <literal type="number">500</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>max_time</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>start_time</name></name> <operator>+</operator> <name>maxtime</name></expr>;</expr_stmt>


<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>maxtime</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>retry_max</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>timeout</name><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>retry_max</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>retry_max</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>retry_time</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>timeout</name><operator>/</operator><name><name>state</name><operator>-&gt;</operator><name>retry_max</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>retry_time</name></name><operator>&lt;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>retry_time</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxtime</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>timeout_ms</name> <operator>+</operator> <literal type="number">500</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>maxtime</name> <operator>=</operator> <literal type="number">3600</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>max_time</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>start_time</name></name> <operator>+</operator> <name>maxtime</name></expr>;</expr_stmt>


<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>maxtime</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>retry_max</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>timeout</name><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>retry_max</name></name><operator>&lt;</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>retry_max</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>retry_max</name></name><operator>&gt;</operator><literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>retry_max</name></name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>retry_time</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>timeout</name><operator>/</operator><name><name>state</name><operator>-&gt;</operator><name>retry_max</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>retry_time</name></name><operator>&lt;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>retry_time</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><literal type="string">"set timeouts for state %d; Total %ld, retry %d maxtry %d\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>max_time</name></name><operator>-</operator><name><name>state</name><operator>-&gt;</operator><name>start_time</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>retry_time</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>retry_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>rx_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>setpacketevent</name><parameter_list>(<parameter><decl><type><name>tftp_packet_t</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>setpacketblock</name><parameter_list>(<parameter><decl><type><name>tftp_packet_t</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name>getrpacketevent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tftp_packet_t</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name>getrpacketblock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tftp_packet_t</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>packet</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>Curl_strnlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>end</name></expr> ?</condition><then> <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>string</name><operator>)</operator></expr> </then><else>: <expr><name>maxlen</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tftp_option_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>loc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>Curl_strnlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>loc</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>option</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>loc</name> <operator>+=</operator> <call><name>Curl_strnlen</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>loc</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>loc</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>option</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>loc</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_parse_option_ack</name><parameter_list>(<parameter><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>blksize</name></name> <operator>=</operator> <name>TFTP_BLKSIZE_DEFAULT</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>tmp</name> <operator>&lt;</operator> <name>ptr</name> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>tftp_option_get</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>option</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Malformed ACK packet, rejecting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_TFTP_ILLEGAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"got option=(%s) value=(%s)\n"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><name>TFTP_OPTION_BLKSIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>blksize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>blksize</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>blksize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"invalid blocksize value in OACK packet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_TFTP_ILLEGAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>blksize</name> <operator>&gt;</operator> <name>TFTP_BLKSIZE_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s (%d)"</literal></expr></argument>, <argument><expr><literal type="string">"blksize is larger than max supported"</literal></expr></argument>,
<argument><expr><name>TFTP_BLKSIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_TFTP_ILLEGAL</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>blksize</name> <operator>&lt;</operator> <name>TFTP_BLKSIZE_MIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s (%d)"</literal></expr></argument>, <argument><expr><literal type="string">"blksize is smaller than min supported"</literal></expr></argument>,
<argument><expr><name>TFTP_BLKSIZE_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_TFTP_ILLEGAL</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>blksize</name> <operator>&gt;</operator> <name><name>state</name><operator>-&gt;</operator><name>requested_blksize</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s (%ld)"</literal></expr></argument>,
<argument><expr><literal type="string">"server requested blksize larger than allocated"</literal></expr></argument>, <argument><expr><name>blksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_TFTP_ILLEGAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>blksize</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>blksize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s (%d) %s (%d)\n"</literal></expr></argument>, <argument><expr><literal type="string">"blksize parsed from OACK"</literal></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>blksize</name></name></expr></argument>, <argument><expr><literal type="string">"requested"</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>requested_blksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><name>TFTP_OPTION_TSIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>tsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tsize</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s (%ld)\n"</literal></expr></argument>, <argument><expr><literal type="string">"tsize parsed from OACK"</literal></expr></argument>, <argument><expr><name>tsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"invalid tsize -:%s:- value in OACK packet"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_TFTP_ILLEGAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>tsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_option_add</name><parameter_list>(<parameter><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>csize</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>*</operator><name>csize</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>blksize</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_TFTP_ILLEGAL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>csize</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_connect_for_tx</name><parameter_list>(<parameter><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><name>tftp_event_t</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><literal type="string">"Connected for transmit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TFTP_STATE_TX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_set_timeouts</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>tftp_tx</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_connect_for_rx</name><parameter_list>(<parameter><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><name>tftp_event_t</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><literal type="string">"Connected for receive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TFTP_STATE_RX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_set_timeouts</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>tftp_rx</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_send_first</name><parameter_list>(<parameter><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>tftp_event_t</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>sbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>senddata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><literal type="string">"octet"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>prefer_ascii</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"netascii"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>event</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TFTP_EVENT_INIT</name></expr>:</case> 
<case>case <expr><name>TFTP_EVENT_TIMEOUT</name></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>retries</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>retries</name></name><operator>&gt;</operator><name><name>state</name><operator>-&gt;</operator><name>retry_max</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>TFTP_ERR_NORESPONSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TFTP_STATE_FIN</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setpacketevent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name></name></expr></argument>, <argument><expr><name>TFTP_EVENT_WRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_fromhere</name></name> <operator>=</operator>
<operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>setpacketevent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name></name></expr></argument>, <argument><expr><name>TFTP_EVENT_RRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_urldecode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>blksize</name></name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"TFTP file name too long\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_TFTP_ILLEGAL</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>blksize</name></name></expr></argument>,
<argument><expr><literal type="string">"%s%c%s%c"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sbytes</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tftp_no_options</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_option_add</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbytes</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>sbytes</name></expr></argument>,
<argument><expr><name>TFTP_OPTION_TSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_option_add</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbytes</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>sbytes</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>requested_blksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_option_add</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbytes</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>sbytes</name></expr></argument>,
<argument><expr><name>TFTP_OPTION_BLKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_option_add</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbytes</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>sbytes</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>retry_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_option_add</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbytes</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>sbytes</name></expr></argument>,
<argument><expr><name>TFTP_OPTION_INTERVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_option_add</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbytes</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>sbytes</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"TFTP buffer too small for options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_TFTP_ILLEGAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>senddata</name> <operator>=</operator> <call><name>sendto</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>SEND_TYPE_ARG3</name><operator>)</operator><name>sbytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>ip_addr</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>ip_addr</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>senddata</name> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>sbytes</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>SOCKERRNO</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TFTP_EVENT_OACK</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_connect_for_tx</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_connect_for_rx</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>TFTP_EVENT_ACK</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_connect_for_tx</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TFTP_EVENT_DATA</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_connect_for_rx</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TFTP_EVENT_ERROR</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TFTP_STATE_FIN</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"tftp_send_first: internal error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT_BLOCKNUM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + 1)&amp;0xffff)</cpp:value></cpp:define>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_rx</name><parameter_list>(<parameter><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>tftp_event_t</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>sbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rblock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>event</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TFTP_EVENT_DATA</name></expr>:</case>

<expr_stmt><expr><name>rblock</name> <operator>=</operator> <call><name>getrpacketblock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>rpacket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>NEXT_BLOCKNUM</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>rblock</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>retries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>block</name></name> <operator>==</operator> <name>rblock</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Received last DATA packet block %d again.\n"</literal></expr></argument>, <argument><expr><name>rblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"Received unexpected DATA packet block %d, expecting block %d\n"</literal></expr></argument>,
<argument><expr><name>rblock</name></expr></argument>, <argument><expr><call><name>NEXT_BLOCKNUM</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>rblock</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setpacketevent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name></name></expr></argument>, <argument><expr><name>TFTP_EVENT_ACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setpacketblock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sbytes</name> <operator>=</operator> <call><name>sendto</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>SEND_4TH_ARG</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>remote_addr</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>remote_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>sbytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>SOCKERRNO</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>rbytes</name></name> <operator>&lt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>blksize</name></name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TFTP_STATE_FIN</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TFTP_STATE_RX</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>rx_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TFTP_EVENT_OACK</name></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>retries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setpacketevent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name></name></expr></argument>, <argument><expr><name>TFTP_EVENT_ACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setpacketblock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sbytes</name> <operator>=</operator> <call><name>sendto</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>SEND_4TH_ARG</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>remote_addr</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>remote_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>sbytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>SOCKERRNO</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TFTP_STATE_RX</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>rx_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TFTP_EVENT_TIMEOUT</name></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>retries</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"Timeout waiting for block %d ACK. Retries = %d\n"</literal></expr></argument>,
<argument><expr><call><name>NEXT_BLOCKNUM</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>retries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>retries</name></name> <operator>&gt;</operator> <name><name>state</name><operator>-&gt;</operator><name>retry_max</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>TFTP_ERR_TIMEOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TFTP_STATE_FIN</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>sbytes</name> <operator>=</operator> <call><name>sendto</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>SEND_4TH_ARG</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>remote_addr</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>remote_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>sbytes</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>SOCKERRNO</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>TFTP_EVENT_ERROR</name></expr>:</case>
<expr_stmt><expr><call><name>setpacketevent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name></name></expr></argument>, <argument><expr><name>TFTP_EVENT_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setpacketblock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sendto</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>SEND_4TH_ARG</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>remote_addr</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>remote_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TFTP_STATE_FIN</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"tftp_rx: internal error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_TFTP_ILLEGAL</name></expr>;</return> 

</block_content>}</block></switch>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_tx</name><parameter_list>(<parameter><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>tftp_event_t</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>sbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cb</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>event</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TFTP_EVENT_ACK</name></expr>:</case>
<case>case <expr><name>TFTP_EVENT_OACK</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>event</name> <operator>==</operator> <name>TFTP_EVENT_ACK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rblock</name> <init>= <expr><call><name>getrpacketblock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>rpacket</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rblock</name> <operator>!=</operator> <name><name>state</name><operator>-&gt;</operator><name>block</name></name> <operator>&amp;&amp;</operator>





<operator>!</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>block</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rblock</name> <operator>==</operator> <literal type="number">65535</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Received ACK for block %d, expecting %d\n"</literal></expr></argument>,
<argument><expr><name>rblock</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>retries</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>retries</name></name><operator>&gt;</operator><name><name>state</name><operator>-&gt;</operator><name>retry_max</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"tftp_tx: giving up waiting for block %d ack"</literal></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>sbytes</name> <operator>=</operator> <call><name>sendto</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><literal type="number">4</literal> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>sbytes</name></name></expr></argument>, <argument><expr><name>SEND_4TH_ARG</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>remote_addr</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>remote_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sbytes</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>SOCKERRNO</name></expr></argument>,
<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>rx_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>block</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>retries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setpacketevent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name></name></expr></argument>, <argument><expr><name>TFTP_EVENT_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setpacketblock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>block</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>sbytes</name></name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>blksize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TFTP_STATE_FIN</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>sbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_fromhere</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_fillreadbuffer</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>blksize</name></name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>sbytes</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>sbytes</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_fromhere</name></name> <operator>+=</operator> <name>cb</name></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>sbytes</name></name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>blksize</name></name> <operator>&amp;&amp;</operator> <name>cb</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><name>sbytes</name> <operator>=</operator> <call><name>sendto</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><literal type="number">4</literal> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>sbytes</name></name></expr></argument>, <argument><expr><name>SEND_4TH_ARG</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>remote_addr</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>remote_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sbytes</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>SOCKERRNO</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>writebytecount</name></name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>sbytes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_pgrsSetUploadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>writebytecount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>TFTP_EVENT_TIMEOUT</name></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>retries</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Timeout waiting for block %d ACK. "</literal>
<literal type="string">" Retries = %d\n"</literal></expr></argument>, <argument><expr><call><name>NEXT_BLOCKNUM</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>retries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>retries</name></name> <operator>&gt;</operator> <name><name>state</name><operator>-&gt;</operator><name>retry_max</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>TFTP_ERR_TIMEOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TFTP_STATE_FIN</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>sbytes</name> <operator>=</operator> <call><name>sendto</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><literal type="number">4</literal> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>sbytes</name></name></expr></argument>, <argument><expr><name>SEND_4TH_ARG</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>remote_addr</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>remote_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sbytes</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>SOCKERRNO</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>writebytecount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>TFTP_EVENT_ERROR</name></expr>:</case>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TFTP_STATE_FIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setpacketevent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name></name></expr></argument>, <argument><expr><name>TFTP_EVENT_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setpacketblock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sendto</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>SEND_4TH_ARG</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>remote_addr</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>remote_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TFTP_STATE_FIN</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"tftp_tx: internal error, event: %i"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>event</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_translate_code</name><parameter_list>(<parameter><decl><type><name>tftp_error_t</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>error</name> <operator>!=</operator> <name>TFTP_ERR_NONE</name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TFTP_ERR_NOTFOUND</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_TFTP_NOTFOUND</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TFTP_ERR_PERM</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_TFTP_PERM</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TFTP_ERR_DISKFULL</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_REMOTE_DISK_FULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TFTP_ERR_UNDEF</name></expr>:</case>
<case>case <expr><name>TFTP_ERR_ILLEGAL</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_TFTP_ILLEGAL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TFTP_ERR_UNKNOWNID</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_TFTP_UNKNOWNID</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TFTP_ERR_EXISTS</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_REMOTE_FILE_EXISTS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TFTP_ERR_NOSUCHUSER</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_TFTP_NOSUCHUSER</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TFTP_ERR_TIMEOUT</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OPERATION_TIMEDOUT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TFTP_ERR_NORESPONSE</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_COULDNT_CONNECT</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_state_machine</name><parameter_list>(<parameter><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><name>tftp_event_t</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TFTP_STATE_START</name></expr>:</case>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"TFTP_STATE_START\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_send_first</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TFTP_STATE_RX</name></expr>:</case>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"TFTP_STATE_RX\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_rx</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TFTP_STATE_TX</name></expr>:</case>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"TFTP_STATE_TX\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_tx</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TFTP_STATE_FIN</name></expr>:</case>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><literal type="string">"TFTP finished"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"STATE: %d\n"</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"Internal state machine error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_TFTP_ILLEGAL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>tftpc</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dead_connection</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>rpacket</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blksize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_blksize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>blksize</name> <operator>=</operator> <name>TFTP_BLKSIZE_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>tftpc</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tftp_state_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>state</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tftp_blksize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>blksize</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>tftp_blksize</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>blksize</name> <operator>&gt;</operator> <name>TFTP_BLKSIZE_MAX</name> <operator>||</operator> <name>blksize</name> <operator>&lt;</operator> <name>TFTP_BLKSIZE_MIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_TFTP_ILLEGAL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>need_blksize</name> <operator>=</operator> <name>blksize</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>need_blksize</name> <operator>&lt;</operator> <name>TFTP_BLKSIZE_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_blksize</name> <operator>=</operator> <name>TFTP_BLKSIZE_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>rpacket</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>rpacket</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>need_blksize</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>rpacket</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>need_blksize</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>spacket</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"TFTP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>sockfd</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TFTP_STATE_START</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>TFTP_ERR_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>blksize</name></name> <operator>=</operator> <name>TFTP_BLKSIZE_DEFAULT</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>requested_blksize</name></name> <operator>=</operator> <name>blksize</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>local_addr</name></name><operator>)</operator><operator>-&gt;</operator><name>sa_family</name> <operator>=</operator>
<operator>(</operator><name>CURL_SA_FAMILY_T</name><operator>)</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>ip_addr</name><operator>-&gt;</operator><name>ai_family</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tftp_set_timeouts</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>bound</name></name></expr>)</condition> <block>{<block_content>













<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>bind</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>local_addr</name></name></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ip_addr</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"bind() failed; %s"</literal></expr></argument>,
<argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>SOCKERRNO</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>bound</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_pgrsStartNow</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>tftp_state_data_t</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>tftpc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>status</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premature</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsDone</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>state</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_translate_code</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>tftp_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>socks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><call><name>GETSOCK_READSOCK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_receive_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_sockaddr_storage</name></name></type> <name>fromaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socklen_t</name></type> <name>fromlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>tftp_state_data_t</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>tftpc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>fromlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fromaddr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>rbytes</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>recvfrom</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>rpacket</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>blksize</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>fromaddr</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>fromlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>remote_addrlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>remote_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fromaddr</name></expr></argument>, <argument><expr><name>fromlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>remote_addrlen</name></name> <operator>=</operator> <name>fromlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>rbytes</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Received too short packet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <name>TFTP_EVENT_TIMEOUT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>event</name> <init>= <expr><call><name>getrpacketevent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>rpacket</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <operator>(</operator><name>tftp_event_t</name><operator>)</operator><name>event</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TFTP_EVENT_DATA</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>rbytes</name></name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>NEXT_BLOCKNUM</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>getrpacketblock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>rpacket</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>rpacket</name><operator>.</operator><name>data</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>rbytes</name></name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tftp_state_machine</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>TFTP_EVENT_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>bytecount</name></name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>rbytes</name></name><operator>-</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_pgrsSetDownloadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>curl_off_t</name><operator>)</operator> <name><name>k</name><operator>-&gt;</operator><name>bytecount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TFTP_EVENT_ERROR</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>error</name> <init>= <expr><call><name>getrpacketblock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>rpacket</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>rpacket</name><operator>.</operator><name>data</name></name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>strn</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>rbytes</name></name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <operator>(</operator><name>tftp_error_t</name><operator>)</operator><name>error</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>Curl_strnlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>strn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>strn</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"TFTP error: %s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>TFTP_EVENT_ACK</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>TFTP_EVENT_OACK</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_parse_option_ack</name><argument_list>(<argument><expr><name>state</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>rpacket</name><operator>.</operator><name>data</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>rbytes</name></name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TFTP_EVENT_RRQ</name></expr>:</case>
<case>case <expr><name>TFTP_EVENT_WRQ</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"Internal error: Unexpected packet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsUpdate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tftp_state_machine</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>TFTP_EVENT_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>long</name></type> <name>tftp_state_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>tftp_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>tftp_state_data_t</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>tftpc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>event</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>event</name> <operator>=</operator> <name>TFTP_EVENT_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>current</name> <operator>&gt;</operator> <name><name>state</name><operator>-&gt;</operator><name>max_time</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"timeout: %ld &gt; %ld\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>current</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>max_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>TFTP_ERR_TIMEOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TFTP_STATE_FIN</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>current</name> <operator>&gt;</operator> <name><name>state</name><operator>-&gt;</operator><name>rx_time</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>retry_time</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>event</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>event</name> <operator>=</operator> <name>TFTP_EVENT_TIMEOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>rx_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>




<return>return <expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>max_time</name></name> <operator>-</operator> <name>current</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_multi_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tftp_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>tftp_state_data_t</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>tftpc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>timeout_ms</name> <init>= <expr><call><name>tftp_state_timeout</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"TFTP response timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>event</name> <operator>!=</operator> <name>TFTP_EVENT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_state_machine</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TFTP_STATE_FIN</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>done</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>SOCKET_READABLE</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>SOCKERRNO</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <name>TFTP_EVENT_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_receive_packet</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_state_machine</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TFTP_STATE_FIN</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>done</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_doing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>dophase_done</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase is complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsUpdate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_speedcheck</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_perform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>tftp_state_data_t</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>tftpc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dophase_done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_state_machine</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>TFTP_EVENT_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>TFTP_STATE_FIN</name><operator>)</operator> <operator>||</operator> <name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>tftp_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>dophase_done</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase is complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>tftp_state_data_t</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>tftpc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_connect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>tftp_state_data_t</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>tftpc</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>state</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_TFTP_ILLEGAL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_perform</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tftp_translate_code</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tftp_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>transport</name></name> <operator>=</operator> <name>TRNSPRT_UDP</name></expr>;</expr_stmt>



<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="string">";mode="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>rawalloc</name></name></expr></argument>, <argument><expr><literal type="string">";mode="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>command</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>command</name> <operator>=</operator> <call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><name><name>type</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>command</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'A'</literal></expr>:</case> 
<case>case <expr><literal type="char">'N'</literal></expr>:</case> 
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>prefer_ascii</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'O'</literal></expr>:</case> 
<case>case <expr><literal type="char">'I'</literal></expr>:</case> 
<default>default:</default>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>prefer_ascii</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
