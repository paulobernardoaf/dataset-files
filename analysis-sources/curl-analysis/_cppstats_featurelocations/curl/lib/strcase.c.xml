<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\strcase.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>char</name></type> <name>raw_tolower</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>in</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name>char</name></type> <name>Curl_raw_toupper</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>in</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>in</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'A'</literal> <operator>+</operator> <name>in</name> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<switch>switch<condition>(<expr><name>in</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<return>return <expr><literal type="char">'A'</literal></expr>;</return>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<return>return <expr><literal type="char">'B'</literal></expr>;</return>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<return>return <expr><literal type="char">'C'</literal></expr>;</return>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<return>return <expr><literal type="char">'D'</literal></expr>;</return>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<return>return <expr><literal type="char">'E'</literal></expr>;</return>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<return>return <expr><literal type="char">'F'</literal></expr>;</return>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<return>return <expr><literal type="char">'G'</literal></expr>;</return>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<return>return <expr><literal type="char">'H'</literal></expr>;</return>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<return>return <expr><literal type="char">'I'</literal></expr>;</return>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<return>return <expr><literal type="char">'J'</literal></expr>;</return>
<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<return>return <expr><literal type="char">'K'</literal></expr>;</return>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<return>return <expr><literal type="char">'L'</literal></expr>;</return>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<return>return <expr><literal type="char">'M'</literal></expr>;</return>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<return>return <expr><literal type="char">'N'</literal></expr>;</return>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<return>return <expr><literal type="char">'O'</literal></expr>;</return>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<return>return <expr><literal type="char">'P'</literal></expr>;</return>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<return>return <expr><literal type="char">'Q'</literal></expr>;</return>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<return>return <expr><literal type="char">'R'</literal></expr>;</return>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<return>return <expr><literal type="char">'S'</literal></expr>;</return>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<return>return <expr><literal type="char">'T'</literal></expr>;</return>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<return>return <expr><literal type="char">'U'</literal></expr>;</return>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<return>return <expr><literal type="char">'V'</literal></expr>;</return>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<return>return <expr><literal type="char">'W'</literal></expr>;</return>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<return>return <expr><literal type="char">'X'</literal></expr>;</return>
<case>case <expr><literal type="char">'y'</literal></expr>:</case>
<return>return <expr><literal type="char">'Y'</literal></expr>;</return>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<return>return <expr><literal type="char">'Z'</literal></expr>;</return>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>in</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name></type> <name>raw_tolower</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>in</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>in</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'a'</literal> <operator>+</operator> <name>in</name> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<switch>switch<condition>(<expr><name>in</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<return>return <expr><literal type="char">'a'</literal></expr>;</return>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<return>return <expr><literal type="char">'b'</literal></expr>;</return>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<return>return <expr><literal type="char">'c'</literal></expr>;</return>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<return>return <expr><literal type="char">'d'</literal></expr>;</return>
<case>case <expr><literal type="char">'E'</literal></expr>:</case>
<return>return <expr><literal type="char">'e'</literal></expr>;</return>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<return>return <expr><literal type="char">'f'</literal></expr>;</return>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<return>return <expr><literal type="char">'g'</literal></expr>;</return>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<return>return <expr><literal type="char">'h'</literal></expr>;</return>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<return>return <expr><literal type="char">'i'</literal></expr>;</return>
<case>case <expr><literal type="char">'J'</literal></expr>:</case>
<return>return <expr><literal type="char">'j'</literal></expr>;</return>
<case>case <expr><literal type="char">'K'</literal></expr>:</case>
<return>return <expr><literal type="char">'k'</literal></expr>;</return>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<return>return <expr><literal type="char">'l'</literal></expr>;</return>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<return>return <expr><literal type="char">'m'</literal></expr>;</return>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<return>return <expr><literal type="char">'n'</literal></expr>;</return>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<return>return <expr><literal type="char">'o'</literal></expr>;</return>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<return>return <expr><literal type="char">'p'</literal></expr>;</return>
<case>case <expr><literal type="char">'Q'</literal></expr>:</case>
<return>return <expr><literal type="char">'q'</literal></expr>;</return>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<return>return <expr><literal type="char">'r'</literal></expr>;</return>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<return>return <expr><literal type="char">'s'</literal></expr>;</return>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<return>return <expr><literal type="char">'t'</literal></expr>;</return>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<return>return <expr><literal type="char">'u'</literal></expr>;</return>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<return>return <expr><literal type="char">'v'</literal></expr>;</return>
<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<return>return <expr><literal type="char">'w'</literal></expr>;</return>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<return>return <expr><literal type="char">'x'</literal></expr>;</return>
<case>case <expr><literal type="char">'Y'</literal></expr>:</case>
<return>return <expr><literal type="char">'y'</literal></expr>;</return>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<return>return <expr><literal type="char">'z'</literal></expr>;</return>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>in</name></expr>;</return>
</block_content>}</block></function>















<function><type><name>int</name></type> <name>Curl_strcasecompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>second</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while<condition>(<expr><operator>*</operator><name>first</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>second</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>first</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>second</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>first</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>second</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>



<return>return <expr><operator>(</operator><call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>first</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>second</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_safe_strcasecompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>second</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>first</name> <operator>&amp;&amp;</operator> <name>second</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>Curl_strcasecompare</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><operator>(</operator><name>NULL</name> <operator>==</operator> <name>first</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name>second</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>Curl_strncasecompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>second</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while<condition>(<expr><operator>*</operator><name>first</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>second</name> <operator>&amp;&amp;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>first</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>second</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>max</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>second</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>first</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>Curl_strntoupper</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><operator>*</operator><name>src</name><operator>++</operator> <operator>&amp;&amp;</operator> <operator>--</operator><name>n</name></expr>)</condition>;</do>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>Curl_strntolower</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>raw_tolower</name><argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><operator>*</operator><name>src</name><operator>++</operator> <operator>&amp;&amp;</operator> <operator>--</operator><name>n</name></expr>)</condition>;</do>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>curl_strequal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>second</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>Curl_strcasecompare</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>curl_strnequal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>second</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>Curl_strncasecompare</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
