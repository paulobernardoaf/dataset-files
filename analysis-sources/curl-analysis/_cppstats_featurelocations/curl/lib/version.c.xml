<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\version.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vssh/ssh.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ARES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_STATICLIB</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CARES_STATICLIB</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SYMBIAN32__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CARES_STATICLIB</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ares.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBIDN2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;idn2.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBPSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libpsl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iconv.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBRTMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;librtmp/rtmp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SYMBIAN32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WIN32</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BROTLI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/decode.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BROTLI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>brotli_version</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>brotli_version</name> <init>= <expr><call><name>BrotliDecoderVersion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>major</name> <init>= <expr><name>brotli_version</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>minor</name> <init>= <expr><operator>(</operator><name>brotli_version</name> <operator>&amp;</operator> <literal type="number">0x00FFFFFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>patch</name> <init>= <expr><name>brotli_version</name> <operator>&amp;</operator> <literal type="number">0x00000FFF</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsz</name></expr></argument>, <argument><expr><literal type="string">"%u.%u.%u"</literal></expr></argument>, <argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><name>char</name> <modifier>*</modifier></type><name>curl_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">250</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>outlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>ssl_version</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>z_version</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BROTLI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>br_version</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <init>= <expr><literal type="string">"brotli/"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ARES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>cares_version</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBIDN2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_IDN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>idn_version</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBPSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>psl_version</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>iconv_version</name><index>[<expr><literal type="number">40</literal></expr>]</index></name><init>=<expr><literal type="string">"iconv"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>ssh_version</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>h2_version</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_QUIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>h3_version</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBRTMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>rtmp_version</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>debugversion</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"CURL_VERSION"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>debugversion</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>debugversion</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>LIBCURL_NAME</name> <literal type="string">"/"</literal> <name>LIBCURL_VERSION</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Curl_ssl_version</name><argument_list>(<argument><expr><name>ssl_version</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ssl_version</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ssl_version</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>z_version</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>z_version</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"zlib/%s"</literal></expr></argument>, <argument><expr><call><name>zlibVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>z_version</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BROTLI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>brotli_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>br_version</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_version</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>br_version</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ARES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>cares_version</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cares_version</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"c-ares/%s"</literal></expr></argument>, <argument><expr><call><name>ares_version</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>cares_version</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBIDN2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>idn2_check_version</name><argument_list>(<argument><expr><name>IDN2_VERSION</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>idn_version</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>idn_version</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"libidn2/%s"</literal></expr></argument>, <argument><expr><call><name>idn2_check_version</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>idn_version</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_IDN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>idn_version</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>idn_version</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"WinIDN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>idn_version</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBPSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>psl_version</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psl_version</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"libpsl/%s"</literal></expr></argument>, <argument><expr><call><name>psl_get_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>psl_version</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBICONV_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>iconv_version</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iconv_version</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"iconv/%d.%d"</literal></expr></argument>,
<argument><expr><name>_LIBICONV_VERSION</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>_LIBICONV_VERSION</name> <operator>&amp;</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>iconv_version</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Curl_ssh_version</name><argument_list>(<argument><expr><name>ssh_version</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ssh_version</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ssh_version</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Curl_http2_ver</name><argument_list>(<argument><expr><name>h2_version</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h2_version</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>h2_version</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_QUIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Curl_quic_ver</name><argument_list>(<argument><expr><name>h3_version</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h3_version</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>h3_version</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBRTMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>suff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>RTMP_LIB_VERSION</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>suff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>RTMP_LIB_VERSION</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>+</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>suff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>suff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>rtmp_version</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rtmp_version</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"librtmp/%d.%d%s"</literal></expr></argument>,
<argument><expr><name>RTMP_LIB_VERSION</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><operator>(</operator><name>RTMP_LIB_VERSION</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>,
<argument><expr><name>suff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>rtmp_version</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>outp</name> <operator>=</operator> <operator>&amp;</operator><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>outlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>outlen</name> <operator>&lt;=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>outp</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>outlen</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>outp</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outp</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outlen</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>outp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>







<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>protocols</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_DICT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"dict"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"file"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"ftp"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"ftps"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_GOPHER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"gopher"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"http"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"https"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_IMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"imap"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_IMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"imaps"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_LDAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"ldap"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_LDAPS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENLDAP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENLDAP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LDAP_SSL</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></cpp:if>


<expr><literal type="string">"ldaps"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_POP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"pop3"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_POP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"pop3s"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBRTMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"rtmp"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_RTSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"rtsp"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WOLFSSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"scp"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"sftp"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_SMB</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>CURL_SIZEOF_CURL_OFF_T</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_CRYPTO</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>


<expr><literal type="string">"smb"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"smbs"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_SMTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"smtp"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_SMTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"smtps"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_TELNET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"telnet"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_TFTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"tftp"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>curl_version_info_data</name></type> <name>version_info</name> <init>= <expr><block>{
<expr><name>CURLVERSION_NOW</name></expr>,
<expr><name>LIBCURL_VERSION</name></expr>,
<expr><name>LIBCURL_VERSION_NUM</name></expr>,
<expr><name>OS</name></expr>, 
<expr><literal type="number">0</literal> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_IPV6</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_SSL</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_NTLM</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>NTLM_WB_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>|</operator> <name>CURL_VERSION_NTLM_WB</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SPNEGO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_SPNEGO</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_KERBEROS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_KERBEROS5</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_GSSAPI</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_SSPI</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_LIBZ</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_DEBUG</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_CURLDEBUG</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLRES_ASYNCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_ASYNCHDNS</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>CURL_SIZEOF_CURL_OFF_T</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>(</operator><name>SIZEOF_OFF_T</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_LARGE_FILES</name></expr></argument>)</argument_list></call> <operator>)</operator></expr></cpp:if>

<operator>|</operator> <name>CURL_VERSION_LARGEFILE</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_CONV</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TLS_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_TLSAUTH_SRP</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_HTTP2</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_QUIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_HTTP3</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNIX_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_UNIX_SOCKETS</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBPSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_PSL</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_WITH_MULTI_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_MULTI_SSL</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BROTLI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_BROTLI</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ALTSVC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURL_VERSION_ALTSVC</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
,
<expr><name>NULL</name></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><name>NULL</name></expr>, 
<expr><name>protocols</name></expr>,
<expr><name>NULL</name></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><name>NULL</name></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><name>NULL</name></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><name>NULL</name></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><name>NULL</name></expr>, 
<expr><name>NULL</name></expr>, 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_CA_BUNDLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>CURL_CA_BUNDLE</name></expr>, 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_CA_PATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>CURL_CA_PATH</name> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>NULL</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>curl_version_info_data</name> <modifier>*</modifier></type><name>curl_version_info</name><parameter_list>(<parameter><decl><type><name>CURLversion</name></type> <name>stamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>ssh_buffer</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_WITH_MULTI_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>ssl_buffer</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>ssl_buffer</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BROTLI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>brotli_buffer</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Curl_ssl_version</name><argument_list>(<argument><expr><name>ssl_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ssl_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>version_info</name><operator>.</operator><name>ssl_version</name></name> <operator>=</operator> <name>ssl_buffer</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>Curl_ssl</name><operator>-&gt;</operator><name>supports</name></name> <operator>&amp;</operator> <name>SSLSUPP_HTTPS_PROXY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>version_info</name><operator>.</operator><name>features</name></name> <operator>|=</operator> <name>CURL_VERSION_HTTPS_PROXY</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>version_info</name><operator>.</operator><name>features</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CURL_VERSION_HTTPS_PROXY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>version_info</name><operator>.</operator><name>libz_version</name></name> <operator>=</operator> <call><name>zlibVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ARES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>aresnum</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>version_info</name><operator>.</operator><name>ares</name></name> <operator>=</operator> <call><name>ares_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aresnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>version_info</name><operator>.</operator><name>ares_num</name></name> <operator>=</operator> <name>aresnum</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBIDN2</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><name><name>version_info</name><operator>.</operator><name>libidn</name></name> <operator>=</operator> <call><name>idn2_check_version</name><argument_list>(<argument><expr><name>IDN2_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>version_info</name><operator>.</operator><name>libidn</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>version_info</name><operator>.</operator><name>features</name></name> <operator>|=</operator> <name>CURL_VERSION_IDN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_IDN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>version_info</name><operator>.</operator><name>features</name></name> <operator>|=</operator> <name>CURL_VERSION_IDN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBICONV_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>version_info</name><operator>.</operator><name>iconv_ver_num</name></name> <operator>=</operator> <name>_LIBICONV_VERSION</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>version_info</name><operator>.</operator><name>iconv_ver_num</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Curl_ssh_version</name><argument_list>(<argument><expr><name>ssh_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ssh_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>version_info</name><operator>.</operator><name>libssh_version</name></name> <operator>=</operator> <name>ssh_buffer</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BROTLI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>version_info</name><operator>.</operator><name>brotli_ver_num</name></name> <operator>=</operator> <call><name>BrotliDecoderVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>brotli_version</name><argument_list>(<argument><expr><name>brotli_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>brotli_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>version_info</name><operator>.</operator><name>brotli_version</name></name> <operator>=</operator> <name>brotli_buffer</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>nghttp2_info</name> <modifier>*</modifier></type><name>h2</name> <init>= <expr><call><name>nghttp2_version</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>version_info</name><operator>.</operator><name>nghttp2_ver_num</name></name> <operator>=</operator> <name><name>h2</name><operator>-&gt;</operator><name>version_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>version_info</name><operator>.</operator><name>nghttp2_version</name></name> <operator>=</operator> <name><name>h2</name><operator>-&gt;</operator><name>version_str</name></name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_QUIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>quicbuffer</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Curl_quic_ver</name><argument_list>(<argument><expr><name>quicbuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>quicbuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>version_info</name><operator>.</operator><name>quic_version</name></name> <operator>=</operator> <name>quicbuffer</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stamp</name></expr>;</expr_stmt> 
<return>return <expr><operator>&amp;</operator><name>version_info</name></expr>;</return>
</block_content>}</block></function>
</unit>
