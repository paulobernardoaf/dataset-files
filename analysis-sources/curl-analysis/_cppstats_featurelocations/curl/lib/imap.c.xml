<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\imap.c">


































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_IMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTSNAME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NOVELL_LIBC__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>in_addr_t</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in_addr_t</name></cpp:macro> <cpp:value>unsigned long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hostip.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transfer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"escape.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"socks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"imap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtoofft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_sasl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_regular_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_multi_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>imap_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_doing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>imap_atom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>escape_only</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_sendf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_parse_url_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_parse_url_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_parse_custom_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_perform_authenticate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mech</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>initresp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_continue_authenticate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>imap_get_message</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outptr</name></decl></parameter>)</parameter_list>;</function_decl>





<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_imap</name> <init>= <expr><block>{
<expr><literal type="string">"IMAP"</literal></expr>, 
<expr><name>imap_setup_connection</name></expr>, 
<expr><name>imap_do</name></expr>, 
<expr><name>imap_done</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>imap_connect</name></expr>, 
<expr><name>imap_multi_statemach</name></expr>, 
<expr><name>imap_doing</name></expr>, 
<expr><name>imap_getsock</name></expr>, 
<expr><name>imap_getsock</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>imap_disconnect</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>PORT_IMAP</name></expr>, 
<expr><name>CURLPROTO_IMAP</name></expr>, 
<expr><name>PROTOPT_CLOSEACTION</name><operator>|</operator> 
<name>PROTOPT_URLOPTIONS</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>




<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_imaps</name> <init>= <expr><block>{
<expr><literal type="string">"IMAPS"</literal></expr>, 
<expr><name>imap_setup_connection</name></expr>, 
<expr><name>imap_do</name></expr>, 
<expr><name>imap_done</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>imap_connect</name></expr>, 
<expr><name>imap_multi_statemach</name></expr>, 
<expr><name>imap_doing</name></expr>, 
<expr><name>imap_getsock</name></expr>, 
<expr><name>imap_getsock</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>imap_disconnect</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>PORT_IMAPS</name></expr>, 
<expr><name>CURLPROTO_IMAPS</name></expr>, 
<expr><name>PROTOPT_CLOSEACTION</name> <operator>|</operator> <name>PROTOPT_SSL</name> <operator>|</operator> 
<name>PROTOPT_URLOPTIONS</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAP_RESP_OK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAP_RESP_NOT_OK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAP_RESP_PREAUTH</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>SASLproto</name></name></type> <name>saslimap</name> <init>= <expr><block>{
<expr><literal type="string">"imap"</literal></expr>, 
<expr><literal type="char">'+'</literal></expr>, 
<expr><name>IMAP_RESP_OK</name></expr>, 
<expr><literal type="number">0</literal></expr>, 
<expr><name>imap_perform_authenticate</name></expr>, 
<expr><name>imap_continue_authenticate</name></expr>, 
<expr><name>imap_get_message</name></expr> 
}</block></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>imap_to_imaps</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <operator>&amp;</operator><name>Curl_handler_imaps</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>tls_upgraded</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>imap_to_imaps</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<function><type><specifier>static</specifier> <name>bool</name></type> <name>imap_matchresp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>line</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cmd_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>line</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>line</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <call><name>ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt></block_content></block>
while<condition>(<expr><name>line</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <call><name>ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>


<if_stmt><if>if<condition>(<expr><name>line</name> <operator>==</operator> <name>end</name> <operator>||</operator> <operator>*</operator><name>line</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><name>line</name> <operator>+</operator> <name>cmd_len</name> <operator>&lt;=</operator> <name>end</name> <operator>&amp;&amp;</operator> <call><name>strncasecompare</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cmd_len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>line</name><index>[<expr><name>cmd_len</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>line</name> <operator>+</operator> <name>cmd_len</name> <operator>+</operator> <literal type="number">2</literal> <operator>==</operator> <name>end</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>bool</name></type> <name>imap_endofresp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>IMAP</name></name> <modifier>*</modifier></type><name>imap</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name><name>imapc</name><operator>-&gt;</operator><name>resptag</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>id_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>id_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>id_len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>id_len</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>id_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>id_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>resp</name> <operator>=</operator> <name>IMAP_RESP_OK</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"PREAUTH"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>resp</name> <operator>=</operator> <name>IMAP_RESP_PREAUTH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>resp</name> <operator>=</operator> <name>IMAP_RESP_NOT_OK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"* "</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>IMAP_CAPABILITY</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>imap_matchresp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"CAPABILITY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>IMAP_LIST</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>imap_matchresp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"LIST"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>imap_matchresp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name></expr></argument>, <argument><expr><literal type="string">"STORE"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>imap_matchresp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"FETCH"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name></expr></argument>, <argument><expr><literal type="string">"SELECT"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name></expr></argument>, <argument><expr><literal type="string">"EXAMINE"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name></expr></argument>, <argument><expr><literal type="string">"SEARCH"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name></expr></argument>, <argument><expr><literal type="string">"EXPUNGE"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name></expr></argument>, <argument><expr><literal type="string">"LSUB"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name></expr></argument>, <argument><expr><literal type="string">"UID"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name></expr></argument>, <argument><expr><literal type="string">"NOOP"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>IMAP_SELECT</name></expr>:</case>


<break>break;</break>

<case>case <expr><name>IMAP_FETCH</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>imap_matchresp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"FETCH"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>IMAP_SEARCH</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>imap_matchresp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"SEARCH"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>


<default>default:</default>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>resp</name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if<condition>(<expr><name>imap</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"+ "</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>IMAP_AUTHENTICATE</name></expr>:</case>
<case>case <expr><name>IMAP_APPEND</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>resp</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Unexpected continuation response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>resp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return> 
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>imap_get_message</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>message</name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><operator>*</operator><name>message</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>message</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>;</condition>
<incr><expr><name>message</name><operator>++</operator></expr><operator>,</operator> <expr><name>len</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>


<for>for<control>(<init>;</init> <condition><expr><name>len</name><operator>--</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name><name>message</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name><name>message</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>message</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator>
<name><name>message</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>


<if_stmt><if>if<condition>(<expr><operator>++</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>message</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>message</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>outptr</name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>imapstate</name></type> <name>newstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>names</name><index>[]</index></name><init>=<expr><block>{
<expr><literal type="string">"STOP"</literal></expr>,
<expr><literal type="string">"SERVERGREET"</literal></expr>,
<expr><literal type="string">"CAPABILITY"</literal></expr>,
<expr><literal type="string">"STARTTLS"</literal></expr>,
<expr><literal type="string">"UPGRADETLS"</literal></expr>,
<expr><literal type="string">"AUTHENTICATE"</literal></expr>,
<expr><literal type="string">"LOGIN"</literal></expr>,
<expr><literal type="string">"LIST"</literal></expr>,
<expr><literal type="string">"SELECT"</literal></expr>,
<expr><literal type="string">"FETCH"</literal></expr>,
<expr><literal type="string">"FETCH_FINAL"</literal></expr>,
<expr><literal type="string">"APPEND"</literal></expr>,
<expr><literal type="string">"APPEND_FINAL"</literal></expr>,
<expr><literal type="string">"SEARCH"</literal></expr>,
<expr><literal type="string">"LOGOUT"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>newstate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"IMAP %p state change from %s to %s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>imapc</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>newstate</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>newstate</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_perform_capability</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>imapc</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>authmechs</name></name> <operator>=</operator> <name>SASL_AUTH_NONE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>imapc</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>authused</name></name> <operator>=</operator> <name>SASL_AUTH_NONE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>imapc</name><operator>-&gt;</operator><name>tls_supported</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_sendf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"CAPABILITY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_CAPABILITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_perform_starttls</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>imap_sendf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"STARTTLS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_STARTTLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_perform_upgrade_tls</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_ssl_connect_nonblocking</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>imapc</name><operator>-&gt;</operator><name>ssldone</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>IMAP_UPGRADETLS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_UPGRADETLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>imapc</name><operator>-&gt;</operator><name>ssldone</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>imap_to_imaps</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform_capability</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_perform_login</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>passwd</name></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>user</name> <operator>=</operator> <call><name>imap_atom</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>passwd</name> <operator>=</operator> <call><name>imap_atom</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_sendf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"LOGIN %s %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>user</name></expr> ?</condition><then> <expr><name>user</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>passwd</name></expr> ?</condition><then> <expr><name>passwd</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_LOGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_perform_authenticate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mech</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>initresp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>initresp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_sendf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"AUTHENTICATE %s %s"</literal></expr></argument>, <argument><expr><name>mech</name></expr></argument>, <argument><expr><name>initresp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_sendf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"AUTHENTICATE %s"</literal></expr></argument>, <argument><expr><name>mech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_continue_authenticate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imapc</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_perform_authentication</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saslprogress</name></type> <name>progress</name></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><name><name>imapc</name><operator>-&gt;</operator><name>preauth</name></name> <operator>||</operator>
<operator>!</operator><call><name>Curl_sasl_can_authenticate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imapc</name><operator>-&gt;</operator><name>sasl</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_sasl_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imapc</name><operator>-&gt;</operator><name>sasl</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>ir_supported</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>progress</name> <operator>==</operator> <name>SASL_INPROGRESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_AUTHENTICATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>imapc</name><operator>-&gt;</operator><name>login_disabled</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>imapc</name><operator>-&gt;</operator><name>preftype</name></name> <operator>&amp;</operator> <name>IMAP_TYPE_CLEARTEXT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform_login</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"No known authentication mechanisms supported!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_LOGIN_DENIED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_perform_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>IMAP</name></name> <modifier>*</modifier></type><name>imap</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_sendf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>imap</name><operator>-&gt;</operator><name>custom_params</name></name></expr> ?</condition><then> <expr><name><name>imap</name><operator>-&gt;</operator><name>custom_params</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mailbox</name> <init>= <expr><ternary><condition><expr><name><name>imap</name><operator>-&gt;</operator><name>mailbox</name></name></expr> ?</condition><then> <expr><call><name>imap_atom</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>mailbox</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mailbox</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_sendf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"LIST \"%s\" *"</literal></expr></argument>, <argument><expr><name>mailbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mailbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_perform_select</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>IMAP</name></name> <modifier>*</modifier></type><name>imap</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mailbox</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>mailbox</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>mailbox_uidvalidity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>mailbox</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Cannot SELECT without a mailbox."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>mailbox</name> <operator>=</operator> <call><name>imap_atom</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>mailbox</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mailbox</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_sendf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SELECT %s"</literal></expr></argument>, <argument><expr><name>mailbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mailbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_SELECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_perform_fetch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>IMAP</name></name> <modifier>*</modifier></type><name>imap</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>imap</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><name><name>imap</name><operator>-&gt;</operator><name>partial</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_sendf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"UID FETCH %s BODY[%s]&lt;%s&gt;"</literal></expr></argument>,
<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>imap</name><operator>-&gt;</operator><name>section</name></name></expr> ?</condition><then> <expr><name><name>imap</name><operator>-&gt;</operator><name>section</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>partial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_sendf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"UID FETCH %s BODY[%s]"</literal></expr></argument>,
<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>imap</name><operator>-&gt;</operator><name>section</name></name></expr> ?</condition><then> <expr><name><name>imap</name><operator>-&gt;</operator><name>section</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>imap</name><operator>-&gt;</operator><name>mindex</name></name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><name><name>imap</name><operator>-&gt;</operator><name>partial</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_sendf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"FETCH %s BODY[%s]&lt;%s&gt;"</literal></expr></argument>,
<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>mindex</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>imap</name><operator>-&gt;</operator><name>section</name></name></expr> ?</condition><then> <expr><name><name>imap</name><operator>-&gt;</operator><name>section</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>partial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_sendf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"FETCH %s BODY[%s]"</literal></expr></argument>,
<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>mindex</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>imap</name><operator>-&gt;</operator><name>section</name></name></expr> ?</condition><then> <expr><name><name>imap</name><operator>-&gt;</operator><name>section</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Cannot FETCH without a UID."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_FETCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_perform_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>IMAP</name></name> <modifier>*</modifier></type><name>imap</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mailbox</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>mailbox</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Cannot APPEND without a mailbox."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name><operator>.</operator><name>kind</name></name> <operator>!=</operator> <name>MIMEKIND_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MIME_BODY_ONLY</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>curl_mime_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>headers</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_mime_prepare_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MIMESTRATEGY_MAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_checkheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Mime-Version"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_mime_add_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name><operator>.</operator><name>curlheaders</name></name></expr></argument>,
<argument><expr><literal type="string">"Mime-Version: 1.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_mime_rewind</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>=</operator> <call><name>Curl_mime_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fread_func</name></name> <operator>=</operator> <operator>(</operator><name>curl_read_callback</name><operator>)</operator> <name>Curl_mime_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>in</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Cannot APPEND with unknown input file size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_UPLOAD_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>mailbox</name> <operator>=</operator> <call><name>imap_atom</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>mailbox</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mailbox</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_sendf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"APPEND %s (\\Seen) {%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"}"</literal></expr></argument>,
<argument><expr><name>mailbox</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mailbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_perform_search</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>IMAP</name></name> <modifier>*</modifier></type><name>imap</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>query</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Cannot SEARCH without a query string."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_sendf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SEARCH %s"</literal></expr></argument>, <argument><expr><name><name>imap</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_SEARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_perform_logout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>imap_sendf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"LOGOUT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_LOGOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_state_servergreet_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>imapcode</name></decl></parameter>,
<parameter><decl><type><name>imapstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>imapcode</name> <operator>==</operator> <name>IMAP_RESP_PREAUTH</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>imapc</name><operator>-&gt;</operator><name>preauth</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"PREAUTH connection, already authenticated!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>imapcode</name> <operator>!=</operator> <name>IMAP_RESP_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Got unexpected imap-server response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_WEIRD_SERVER_REPLY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>imap_perform_capability</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_state_capability_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>imapcode</name></decl></parameter>,
<parameter><decl><type><name>imapstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 


<if_stmt><if>if<condition>(<expr><name>imapcode</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>wordlen</name></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>*</operator><name>line</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator>
<operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>line</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<for>for<control>(<init><expr><name>wordlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>line</name><index>[<expr><name>wordlen</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>wordlen</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator>
<name><name>line</name><index>[<expr><name>wordlen</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>wordlen</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator>
<name><name>line</name><index>[<expr><name>wordlen</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>wordlen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if<condition>(<expr><name>wordlen</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"STARTTLS"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>imapc</name><operator>-&gt;</operator><name>tls_supported</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>


<if type="elseif">else if<condition>(<expr><name>wordlen</name> <operator>==</operator> <literal type="number">13</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"LOGINDISABLED"</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>imapc</name><operator>-&gt;</operator><name>login_disabled</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>


<if type="elseif">else if<condition>(<expr><name>wordlen</name> <operator>==</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"SASL-IR"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>imapc</name><operator>-&gt;</operator><name>ir_supported</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>


<if type="elseif">else if<condition>(<expr><name>wordlen</name> <operator>&gt;</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"AUTH="</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>llen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mechbit</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wordlen</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>mechbit</name> <operator>=</operator> <call><name>Curl_sasl_decode_mech</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>wordlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>llen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>mechbit</name> <operator>&amp;&amp;</operator> <name>llen</name> <operator>==</operator> <name>wordlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>imapc</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>authmechs</name></name> <operator>|=</operator> <name>mechbit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>wordlen</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>imapcode</name> <operator>==</operator> <name>IMAP_RESP_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>use_ssl</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name><operator>.</operator><name>use</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>imapc</name><operator>-&gt;</operator><name>tls_supported</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform_starttls</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>use_ssl</name></name> <operator>==</operator> <name>CURLUSESSL_TRY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform_authentication</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"STARTTLS not supported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_USE_SSL_FAILED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform_authentication</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform_authentication</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_state_starttls_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>imapcode</name></decl></parameter>,
<parameter><decl><type><name>imapstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>imapcode</name> <operator>!=</operator> <name>IMAP_RESP_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>use_ssl</name></name> <operator>!=</operator> <name>CURLUSESSL_TRY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"STARTTLS denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_USE_SSL_FAILED</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform_authentication</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform_upgrade_tls</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_state_auth_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>imapcode</name></decl></parameter>,
<parameter><decl><type><name>imapstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saslprogress</name></type> <name>progress</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_sasl_continue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imapc</name><operator>-&gt;</operator><name>sasl</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>imapcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch<condition>(<expr><name>progress</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SASL_DONE</name></expr>:</case>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>SASL_IDLE</name></expr>:</case> 
<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>!</operator><name><name>imapc</name><operator>-&gt;</operator><name>login_disabled</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>imapc</name><operator>-&gt;</operator><name>preftype</name></name> <operator>&amp;</operator> <name>IMAP_TYPE_CLEARTEXT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform_login</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Authentication cancelled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_LOGIN_DENIED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_state_login_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>imapcode</name></decl></parameter>,
<parameter><decl><type><name>imapstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>imapcode</name> <operator>!=</operator> <name>IMAP_RESP_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Access denied. %c"</literal></expr></argument>, <argument><expr><name>imapcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_LOGIN_DENIED</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_state_listsearch_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>imapcode</name></decl></parameter>,
<parameter><decl><type><name>imapstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>imapcode</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>imapcode</name> <operator>!=</operator> <name>IMAP_RESP_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_state_select_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>imapcode</name></decl></parameter>,
<parameter><decl><type><name>imapstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>IMAP</name></name> <modifier>*</modifier></type><name>imap</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>imapcode</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"OK [UIDVALIDITY %19[0123456789]]"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>mailbox_uidvalidity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imapc</name><operator>-&gt;</operator><name>mailbox_uidvalidity</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>imapcode</name> <operator>==</operator> <name>IMAP_RESP_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>imap</name><operator>-&gt;</operator><name>uidvalidity</name></name> <operator>&amp;&amp;</operator> <name><name>imapc</name><operator>-&gt;</operator><name>mailbox_uidvalidity</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>uidvalidity</name></name></expr></argument>, <argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>mailbox_uidvalidity</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Mailbox UIDVALIDITY has changed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_REMOTE_FILE_NOT_FOUND</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>imapc</name><operator>-&gt;</operator><name>mailbox</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>mailbox</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>imap</name><operator>-&gt;</operator><name>query</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform_search</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform_fetch</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Select failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_LOGIN_DENIED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_state_fetch_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>imapcode</name></decl></parameter>,
<parameter><decl><type><name>imapstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>imapc</name><operator>-&gt;</operator><name>pp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>parsed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>imapcode</name> <operator>!=</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_REMOTE_FILE_NOT_FOUND</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'{'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>curlx_strtoofft</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>endptr</name> <operator>-</operator> <name>ptr</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>endptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'}'</literal> <operator>&amp;&amp;</operator>
<name><name>endptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name><name>endptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>parsed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>parsed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Found %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" bytes to download\n"</literal></expr></argument>,
<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>size_t</name></type> <name>chunk</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>cache_size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>chunk</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>chunk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name> <operator>+=</operator> <name>chunk</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Written %zu bytes, %"</literal> <name>CURL_FORMAT_CURL_OFF_TU</name>
<literal type="string">" bytes are left for transfer\n"</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>cache_size</name></name> <operator>&gt;</operator> <name>chunk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>cache</name></name> <operator>+</operator> <name>chunk</name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>cache_size</name></name> <operator>-</operator> <name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>cache_size</name></name> <operator>-=</operator> <name>chunk</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>cache_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name> <operator>==</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>maxdownload</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Failed to parse FETCH response."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_WEIRD_SERVER_REPLY</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_state_fetch_final_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>imapcode</name></decl></parameter>,
<parameter><decl><type><name>imapstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>imapcode</name> <operator>!=</operator> <name>IMAP_RESP_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_WEIRD_SERVER_REPLY</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_state_append_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>imapcode</name></decl></parameter>,
<parameter><decl><type><name>imapstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>imapcode</name> <operator>!=</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_UPLOAD_FAILED</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_state_append_final_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>imapcode</name></decl></parameter>,
<parameter><decl><type><name>imapstate</name></type> <name>instate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>imapcode</name> <operator>!=</operator> <name>IMAP_RESP_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_UPLOAD_FAILED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_statemach_act</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>imapcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>imapc</name><operator>-&gt;</operator><name>pp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>IMAP_UPGRADETLS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>imap_perform_upgrade_tls</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>sendleft</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Curl_pp_flushsend</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_readresp</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imapcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>imapcode</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_WEIRD_SERVER_REPLY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>imapcode</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<switch>switch<condition>(<expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>IMAP_SERVERGREET</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_state_servergreet_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>imapcode</name></expr></argument>, <argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>IMAP_CAPABILITY</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_state_capability_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>imapcode</name></expr></argument>, <argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>IMAP_STARTTLS</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_state_starttls_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>imapcode</name></expr></argument>, <argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>IMAP_AUTHENTICATE</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_state_auth_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>imapcode</name></expr></argument>, <argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>IMAP_LOGIN</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_state_login_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>imapcode</name></expr></argument>, <argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>IMAP_LIST</name></expr>:</case>
<case>case <expr><name>IMAP_SEARCH</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_state_listsearch_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>imapcode</name></expr></argument>, <argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>IMAP_SELECT</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_state_select_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>imapcode</name></expr></argument>, <argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>IMAP_FETCH</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_state_fetch_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>imapcode</name></expr></argument>, <argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>IMAP_FETCH_FINAL</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_state_fetch_final_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>imapcode</name></expr></argument>, <argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>IMAP_APPEND</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_state_append_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>imapcode</name></expr></argument>, <argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>IMAP_APPEND_FINAL</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_state_append_final_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>imapcode</name></expr></argument>, <argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>IMAP_LOGOUT</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block> while<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name><name>imapc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>IMAP_STOP</name> <operator>&amp;&amp;</operator> <call><name>Curl_pp_moredata</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_multi_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_SSL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>imapc</name><operator>-&gt;</operator><name>ssldone</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ssl_connect_nonblocking</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>imapc</name><operator>-&gt;</operator><name>ssldone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>!</operator><name><name>imapc</name><operator>-&gt;</operator><name>ssldone</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_statemach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imapc</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>IMAP_STOP</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_block_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>disconnecting</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>imapc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>IMAP_STOP</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_statemach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imapc</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>disconnecting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>IMAP</name></name> <modifier>*</modifier></type><name>imap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>imap</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>IMAP</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>imap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>imap_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>Curl_pp_getsock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><name>socks</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>imapc</name><operator>-&gt;</operator><name>pp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>connkeep</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"IMAP default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>response_time</name></name> <operator>=</operator> <name>RESP_TIMEOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>statemach_act</name></name> <operator>=</operator> <name>imap_statemach_act</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>endofresp</name></name> <operator>=</operator> <name>imap_endofresp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>imapc</name><operator>-&gt;</operator><name>preftype</name></name> <operator>=</operator> <name>IMAP_TYPE_ANY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_sasl_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imapc</name><operator>-&gt;</operator><name>sasl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saslimap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_pp_init</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_parse_url_options</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_SERVERGREET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>resptag</name></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>IMAP</name></name> <modifier>*</modifier></type><name>imap</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premature</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>imap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"IMAP done with bad status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>connect_only</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>imap</name><operator>-&gt;</operator><name>uid</name></name> <operator>||</operator> <name><name>imap</name><operator>-&gt;</operator><name>mindex</name></name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name> <operator>||</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name><operator>.</operator><name>kind</name></name> <operator>!=</operator> <name>MIMEKIND_NONE</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name><operator>.</operator><name>kind</name></name> <operator>==</operator> <name>MIMEKIND_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_FETCH_FINAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>IMAP_APPEND_FINAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_block_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>mailbox</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>uidvalidity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>mindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>section</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>partial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>custom_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>FTPTRANSFER_BODY</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_perform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>connected</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>IMAP</name></name> <modifier>*</modifier></type><name>imap</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>selected</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase starts\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>FTPTRANSFER_INFO</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dophase_done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 



<if_stmt><if>if<condition>(<expr><name><name>imap</name><operator>-&gt;</operator><name>mailbox</name></name> <operator>&amp;&amp;</operator> <name><name>imapc</name><operator>-&gt;</operator><name>mailbox</name></name> <operator>&amp;&amp;</operator>
<call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>mailbox</name></name></expr></argument>, <argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>mailbox</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>uidvalidity</name></name> <operator>||</operator> <operator>!</operator><name><name>imapc</name><operator>-&gt;</operator><name>mailbox_uidvalidity</name></name> <operator>||</operator>
<call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>imap</name><operator>-&gt;</operator><name>uidvalidity</name></name></expr></argument>, <argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>mailbox_uidvalidity</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>selected</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name><operator>.</operator><name>kind</name></name> <operator>!=</operator> <name>MIMEKIND_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform_append</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>selected</name> <operator>||</operator> <operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>mailbox</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name> <operator>&amp;&amp;</operator> <name>selected</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>imap</name><operator>-&gt;</operator><name>uid</name></name> <operator>||</operator> <name><name>imap</name><operator>-&gt;</operator><name>mindex</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform_fetch</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name> <operator>&amp;&amp;</operator> <name>selected</name> <operator>&amp;&amp;</operator> <name><name>imap</name><operator>-&gt;</operator><name>query</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform_search</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>imap</name><operator>-&gt;</operator><name>mailbox</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>selected</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name> <operator>||</operator> <name><name>imap</name><operator>-&gt;</operator><name>uid</name></name> <operator>||</operator> <name><name>imap</name><operator>-&gt;</operator><name>mindex</name></name> <operator>||</operator> <name><name>imap</name><operator>-&gt;</operator><name>query</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform_select</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>connected</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tcpconnect</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>dophase_done</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase is complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_parse_url_path</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_parse_custom_request</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_regular_transfer</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>







<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dead_connection</name> <operator>&amp;&amp;</operator> <name><name>imapc</name><operator>-&gt;</operator><name>pp</name><operator>.</operator><name>conn</name></name> <operator>&amp;&amp;</operator> <name><name>imapc</name><operator>-&gt;</operator><name>pp</name><operator>.</operator><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>protoconnstart</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>imap_perform_logout</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>imap_block_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt> 


<expr_stmt><expr><call><name>Curl_pp_disconnect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imapc</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_sasl_cleanup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>authused</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>mailbox</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>mailbox_uidvalidity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_dophase_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>connected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>IMAP</name></name> <modifier>*</modifier></type><name>imap</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>connected</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>imap</name><operator>-&gt;</operator><name>transfer</name></name> <operator>!=</operator> <name>FTPTRANSFER_BODY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_doing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>imap_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase failed\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>*</operator><name>dophase_done</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_dophase_done</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase is complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_regular_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>connected</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_pgrsSetUploadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_pgrsSetDownloadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_perform</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connected</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dophase_done</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>imap_dophase_done</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>connected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>imap_init</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>tls_upgraded</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_sendf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>taggedfmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>imapc</name><operator>-&gt;</operator><name>cmdid</name></name> <operator>=</operator> <operator>(</operator><name><name>imapc</name><operator>-&gt;</operator><name>cmdid</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">1000</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>resptag</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>resptag</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%c%03d"</literal></expr></argument>,
<argument><expr><literal type="char">'A'</literal> <operator>+</operator> <call><name>curlx_sltosi</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>connection_id</name></name> <operator>%</operator> <literal type="number">26</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>cmdid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>taggedfmt</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>imapc</name><operator>-&gt;</operator><name>resptag</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>taggedfmt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_vsendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imapc</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><name>taggedfmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>taggedfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>imap_atom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>escape_only</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>atom_specials</name><index>[]</index></name> <init>= <expr><literal type="string">"(){ %*]"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>backsp_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>quote_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>others_exists</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>newlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>*</operator><name>p1</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p1</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>backsp_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>*</operator><name>p1</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quote_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name>escape_only</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p3</name> <init>= <expr><name>atom_specials</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>*</operator><name>p3</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>others_exists</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p1</name> <operator>==</operator> <operator>*</operator><name>p3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>others_exists</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p3</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p1</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>backsp_count</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>quote_count</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>others_exists</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>newlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>backsp_count</name> <operator>+</operator> <name>quote_count</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>escape_only</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>newstr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>newlen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newstr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>newstr</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>escape_only</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>newstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newstr</name><index>[<expr><name>newlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>*</operator><name>p1</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p1</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>p1</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <operator>*</operator><name>p1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name><name>newstr</name><index>[<expr><name>newlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>newstr</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>bool</name></type> <name>imap_is_bchar</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">':'</literal></expr>:</case> <case>case <expr><literal type="char">'@'</literal></expr>:</case> <case>case <expr><literal type="char">'/'</literal></expr>:</case>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case> <case>case <expr><literal type="char">'='</literal></expr>:</case>

<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case> <case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case>
<case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
<case>case <expr><literal type="char">'A'</literal></expr>:</case> <case>case <expr><literal type="char">'B'</literal></expr>:</case> <case>case <expr><literal type="char">'C'</literal></expr>:</case> <case>case <expr><literal type="char">'D'</literal></expr>:</case> <case>case <expr><literal type="char">'E'</literal></expr>:</case> <case>case <expr><literal type="char">'F'</literal></expr>:</case> <case>case <expr><literal type="char">'G'</literal></expr>:</case>
<case>case <expr><literal type="char">'H'</literal></expr>:</case> <case>case <expr><literal type="char">'I'</literal></expr>:</case> <case>case <expr><literal type="char">'J'</literal></expr>:</case> <case>case <expr><literal type="char">'K'</literal></expr>:</case> <case>case <expr><literal type="char">'L'</literal></expr>:</case> <case>case <expr><literal type="char">'M'</literal></expr>:</case> <case>case <expr><literal type="char">'N'</literal></expr>:</case>
<case>case <expr><literal type="char">'O'</literal></expr>:</case> <case>case <expr><literal type="char">'P'</literal></expr>:</case> <case>case <expr><literal type="char">'Q'</literal></expr>:</case> <case>case <expr><literal type="char">'R'</literal></expr>:</case> <case>case <expr><literal type="char">'S'</literal></expr>:</case> <case>case <expr><literal type="char">'T'</literal></expr>:</case> <case>case <expr><literal type="char">'U'</literal></expr>:</case>
<case>case <expr><literal type="char">'V'</literal></expr>:</case> <case>case <expr><literal type="char">'W'</literal></expr>:</case> <case>case <expr><literal type="char">'X'</literal></expr>:</case> <case>case <expr><literal type="char">'Y'</literal></expr>:</case> <case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'e'</literal></expr>:</case> <case>case <expr><literal type="char">'f'</literal></expr>:</case> <case>case <expr><literal type="char">'g'</literal></expr>:</case>
<case>case <expr><literal type="char">'h'</literal></expr>:</case> <case>case <expr><literal type="char">'i'</literal></expr>:</case> <case>case <expr><literal type="char">'j'</literal></expr>:</case> <case>case <expr><literal type="char">'k'</literal></expr>:</case> <case>case <expr><literal type="char">'l'</literal></expr>:</case> <case>case <expr><literal type="char">'m'</literal></expr>:</case> <case>case <expr><literal type="char">'n'</literal></expr>:</case>
<case>case <expr><literal type="char">'o'</literal></expr>:</case> <case>case <expr><literal type="char">'p'</literal></expr>:</case> <case>case <expr><literal type="char">'q'</literal></expr>:</case> <case>case <expr><literal type="char">'r'</literal></expr>:</case> <case>case <expr><literal type="char">'s'</literal></expr>:</case> <case>case <expr><literal type="char">'t'</literal></expr>:</case> <case>case <expr><literal type="char">'u'</literal></expr>:</case>
<case>case <expr><literal type="char">'v'</literal></expr>:</case> <case>case <expr><literal type="char">'w'</literal></expr>:</case> <case>case <expr><literal type="char">'x'</literal></expr>:</case> <case>case <expr><literal type="char">'y'</literal></expr>:</case> <case>case <expr><literal type="char">'z'</literal></expr>:</case>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <case>case <expr><literal type="char">'.'</literal></expr>:</case> <case>case <expr><literal type="char">'_'</literal></expr>:</case> <case>case <expr><literal type="char">'~'</literal></expr>:</case>

<case>case <expr><literal type="char">'!'</literal></expr>:</case> <case>case <expr><literal type="char">'$'</literal></expr>:</case> <case>case <expr><literal type="char">'\''</literal></expr>:</case> <case>case <expr><literal type="char">'('</literal></expr>:</case> <case>case <expr><literal type="char">')'</literal></expr>:</case> <case>case <expr><literal type="char">'*'</literal></expr>:</case>
<case>case <expr><literal type="char">'+'</literal></expr>:</case> <case>case <expr><literal type="char">','</literal></expr>:</case>

<case>case <expr><literal type="char">'%'</literal></expr>:</case> 
<return>return <expr><name>true</name></expr>;</return>

<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_parse_url_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name> <modifier>*</modifier></type><name>imapc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>imapc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>options</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>imapc</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>resetprefs</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"AUTH="</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_sasl_parse_url_auth_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imapc</name><operator>-&gt;</operator><name>sasl</name></name></expr></argument>,
<argument><expr><name>value</name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_URL_MALFORMAT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<switch>switch<condition>(<expr><name><name>imapc</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>prefmech</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SASL_AUTH_NONE</name></expr>:</case>
<expr_stmt><expr><name><name>imapc</name><operator>-&gt;</operator><name>preftype</name></name> <operator>=</operator> <name>IMAP_TYPE_NONE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SASL_AUTH_DEFAULT</name></expr>:</case>
<expr_stmt><expr><name><name>imapc</name><operator>-&gt;</operator><name>preftype</name></name> <operator>=</operator> <name>IMAP_TYPE_ANY</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>imapc</name><operator>-&gt;</operator><name>preftype</name></name> <operator>=</operator> <name>IMAP_TYPE_SASL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_parse_url_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>IMAP</name></name> <modifier>*</modifier></type><name>imap</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>begin</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>begin</name></expr></init></decl>;</decl_stmt>


<while>while<condition>(<expr><call><name>imap_is_bchar</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><name>ptr</name> <operator>!=</operator> <name>begin</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>end</name> <operator>&gt;</operator> <name>begin</name> <operator>&amp;&amp;</operator> <name><name>end</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_urldecode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>begin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>imap</name><operator>-&gt;</operator><name>mailbox</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>mailbox</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>valuelen</name></decl>;</decl_stmt>


<expr_stmt><expr><name>begin</name> <operator>=</operator> <operator>++</operator><name>ptr</name></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_urldecode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <name>begin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>begin</name> <operator>=</operator> <operator>++</operator><name>ptr</name></expr>;</expr_stmt>
<while>while<condition>(<expr><call><name>imap_is_bchar</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_urldecode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <name>begin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valuelen</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"IMAP URL parameter '%s' = '%s'\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"UIDVALIDITY"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>uidvalidity</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>valuelen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><name>valuelen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><index>[<expr><name>valuelen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>uidvalidity</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"UID"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>valuelen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><name>valuelen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><index>[<expr><name>valuelen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"MAILINDEX"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>mindex</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>valuelen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><name>valuelen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><index>[<expr><name>valuelen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>mindex</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"SECTION"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>section</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>valuelen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><name>valuelen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><index>[<expr><name>valuelen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>section</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"PARTIAL"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>partial</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>valuelen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><name>valuelen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><index>[<expr><name>valuelen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>partial</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>



<if_stmt><if>if<condition>(<expr><name><name>imap</name><operator>-&gt;</operator><name>mailbox</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>uid</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>mindex</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>curl_url_get</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uh</name></name></expr></argument>, <argument><expr><name>CURLUPART_QUERY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>imap</name><operator>-&gt;</operator><name>query</name></name></expr></argument>,
<argument><expr><name>CURLU_URLDECODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>imap_parse_custom_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>IMAP</name></name> <modifier>*</modifier></type><name>imap</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>custom</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_CUSTOMREQUEST</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>custom</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_urldecode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>custom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><name><name>imap</name><operator>-&gt;</operator><name>custom</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>*</operator><name>params</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>params</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>params</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>params</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>custom_params</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imap</name><operator>-&gt;</operator><name>custom</name><index>[<expr><name>params</name> <operator>-</operator> <name><name>imap</name><operator>-&gt;</operator><name>custom</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>imap</name><operator>-&gt;</operator><name>custom_params</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
