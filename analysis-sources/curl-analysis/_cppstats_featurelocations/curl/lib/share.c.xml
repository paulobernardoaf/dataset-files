<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\share.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"share.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<function><type><name><name>struct</name> <name>Curl_share</name></name> <modifier>*</modifier></type>
<name>curl_share_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_share</name></name> <modifier>*</modifier></type><name>share</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Curl_share</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>share</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>share</name><operator>-&gt;</operator><name>specifier</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>CURL_LOCK_DATA_SHARE</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_mk_dnscache</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>share</name><operator>-&gt;</operator><name>hostcache</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>share</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>share</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>curl_share_setopt</name></cpp:undef>
<function><type><name>CURLSHcode</name></type>
<name>curl_share_setopt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_share</name></name> <modifier>*</modifier></type><name>share</name></decl></parameter>, <parameter><decl><type><name>CURLSHoption</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_lock_function</name></type> <name>lockfunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_unlock_function</name></type> <name>unlockfunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLSHcode</name></type> <name>res</name> <init>= <expr><name>CURLSHE_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition><block type="pseudo"><block_content>


<return>return <expr><name>CURLSHE_IN_USE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>option</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLSHOPT_SHARE</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>share</name><operator>-&gt;</operator><name>specifier</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>type</name><operator>)</operator></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_LOCK_DATA_DNS</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>CURL_LOCK_DATA_COOKIE</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_COOKIES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>share</name><operator>-&gt;</operator><name>cookies</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>share</name><operator>-&gt;</operator><name>cookies</name></name> <operator>=</operator> <call><name>Curl_cookie_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>share</name><operator>-&gt;</operator><name>cookies</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>CURLSHE_NOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>CURLSHE_NOT_BUILT_IN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>

<case>case <expr><name>CURL_LOCK_DATA_SSL_SESSION</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>share</name><operator>-&gt;</operator><name>sslsession</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>share</name><operator>-&gt;</operator><name>max_ssl_sessions</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>share</name><operator>-&gt;</operator><name>sslsession</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>share</name><operator>-&gt;</operator><name>max_ssl_sessions</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>curl_ssl_session</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>share</name><operator>-&gt;</operator><name>sessionage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>share</name><operator>-&gt;</operator><name>sslsession</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>CURLSHE_NOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>CURLSHE_NOT_BUILT_IN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>

<case>case <expr><name>CURL_LOCK_DATA_CONNECT</name></expr>:</case> 
<if_stmt><if>if<condition>(<expr><call><name>Curl_conncache_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>share</name><operator>-&gt;</operator><name>conn_cache</name></name></expr></argument>, <argument><expr><literal type="number">103</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>CURLSHE_NOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>CURL_LOCK_DATA_PSL</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBPSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>CURLSHE_NOT_BUILT_IN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>CURLSHE_BAD_OPTION</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>CURLSHOPT_UNSHARE</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>share</name><operator>-&gt;</operator><name>specifier</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>type</name><operator>)</operator></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_LOCK_DATA_DNS</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>CURL_LOCK_DATA_COOKIE</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_COOKIES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>cookies</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_cookie_cleanup</name><argument_list>(<argument><expr><name><name>share</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>share</name><operator>-&gt;</operator><name>cookies</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>CURLSHE_NOT_BUILT_IN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>

<case>case <expr><name>CURL_LOCK_DATA_SSL_SESSION</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>share</name><operator>-&gt;</operator><name>sslsession</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>CURLSHE_NOT_BUILT_IN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>

<case>case <expr><name>CURL_LOCK_DATA_CONNECT</name></expr>:</case>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>CURLSHE_BAD_OPTION</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>CURLSHOPT_LOCKFUNC</name></expr>:</case>
<expr_stmt><expr><name>lockfunc</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_lock_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>share</name><operator>-&gt;</operator><name>lockfunc</name></name> <operator>=</operator> <name>lockfunc</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLSHOPT_UNLOCKFUNC</name></expr>:</case>
<expr_stmt><expr><name>unlockfunc</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>curl_unlock_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>share</name><operator>-&gt;</operator><name>unlockfunc</name></name> <operator>=</operator> <name>unlockfunc</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURLSHOPT_USERDATA</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>share</name><operator>-&gt;</operator><name>clientdata</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>CURLSHE_BAD_OPTION</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CURLSHcode</name></type>
<name>curl_share_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_share</name></name> <modifier>*</modifier></type><name>share</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>share</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLSHE_INVALID</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>lockfunc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>share</name><operator>-&gt;</operator><name>lockfunc</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_SHARE</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>,
<argument><expr><name><name>share</name><operator>-&gt;</operator><name>clientdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>unlockfunc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>share</name><operator>-&gt;</operator><name>unlockfunc</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_SHARE</name></expr></argument>, <argument><expr><name><name>share</name><operator>-&gt;</operator><name>clientdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>CURLSHE_IN_USE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_conncache_close_all_connections</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>share</name><operator>-&gt;</operator><name>conn_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_conncache_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>share</name><operator>-&gt;</operator><name>conn_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_hash_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>share</name><operator>-&gt;</operator><name>hostcache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_COOKIES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Curl_cookie_cleanup</name><argument_list>(<argument><expr><name><name>share</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>sslsession</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>share</name><operator>-&gt;</operator><name>max_ssl_sessions</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_ssl_kill_session</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>share</name><operator>-&gt;</operator><name>sslsession</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>share</name><operator>-&gt;</operator><name>sslsession</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>Curl_psl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>share</name><operator>-&gt;</operator><name>psl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>unlockfunc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>share</name><operator>-&gt;</operator><name>unlockfunc</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_SHARE</name></expr></argument>, <argument><expr><name><name>share</name><operator>-&gt;</operator><name>clientdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>share</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLSHE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>CURLSHcode</name></type>
<name>Curl_share_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>curl_lock_data</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>curl_lock_access</name></type> <name>accesstype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_share</name></name> <modifier>*</modifier></type><name>share</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>share</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLSHE_INVALID</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>specifier</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>type</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>lockfunc</name></name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name><name>share</name><operator>-&gt;</operator><name>lockfunc</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>accesstype</name></expr></argument>, <argument><expr><name><name>share</name><operator>-&gt;</operator><name>clientdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><name>CURLSHE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CURLSHcode</name></type>
<name>Curl_share_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>curl_lock_data</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_share</name></name> <modifier>*</modifier></type><name>share</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>share</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLSHE_INVALID</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>specifier</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>type</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>share</name><operator>-&gt;</operator><name>unlockfunc</name></name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name><name>share</name><operator>-&gt;</operator><name>unlockfunc</name></name> <argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>share</name><operator>-&gt;</operator><name>clientdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLSHE_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
