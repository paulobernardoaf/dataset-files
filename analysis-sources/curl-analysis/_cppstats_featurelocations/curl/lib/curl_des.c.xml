<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\curl_des.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_des.h"</cpp:file></cpp:include>

















<function><type><name>void</name></type> <name>Curl_des_set_odd_parity</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name> <init>= <expr><name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>needs_parity</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>^</operator>
<operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>^</operator>
<operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>needs_parity</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xfe</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
