<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\non-ascii.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"non-ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formdata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iconv.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_ICONV_CODESET_OF_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_ICONV_CODESET_OF_NETWORK</name></cpp:macro> <cpp:value>"ISO8859-1"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_ICONV_CODESET_FOR_UTF8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_ICONV_CODESET_FOR_UTF8</name></cpp:macro> <cpp:value>"UTF-8"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICONV_ERROR</name></cpp:macro> <cpp:value>(size_t)-1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 





<function><type><name>CURLcode</name></type> <name>Curl_convert_clone</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>indata</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>insize</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>convbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>convbuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>insize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>convbuf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>convbuf</name></expr></argument>, <argument><expr><name>indata</name></expr></argument>, <argument><expr><name>insize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_convert_to_network</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>convbuf</name></expr></argument>, <argument><expr><name>insize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>convbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>outbuf</name> <operator>=</operator> <name>convbuf</name></expr>;</expr_stmt> 

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>CURLcode</name></type> <name>Curl_convert_to_network</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>convtonetwork</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>convtonetwork</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"CURLOPT_CONV_TO_NETWORK_FUNCTION callback returned %d: %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>result</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>iconv_t</name></type> <name>tmpcd</name> <init>= <expr><operator>(</operator><name>iconv_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iconv_t</name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><operator>&amp;</operator><name>tmpcd</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>input_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>output_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>in_bytes</name></decl>, <decl><type ref="prev"/><name>out_bytes</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cd</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>outbound_cd</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>cd</name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cd</name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><name>CURL_ICONV_CODESET_OF_NETWORK</name></expr></argument>,
<argument><expr><name>CURL_ICONV_CODESET_OF_HOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>cd</name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"The iconv_open(\"%s\", \"%s\") call failed with errno %i: %s"</literal></expr></argument>,
<argument><expr><name>CURL_ICONV_CODESET_OF_NETWORK</name></expr></argument>,
<argument><expr><name>CURL_ICONV_CODESET_OF_HOST</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_CONV_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input_ptr</name> <operator>=</operator> <name>output_ptr</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in_bytes</name> <operator>=</operator> <name>out_bytes</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iconv</name><argument_list>(<argument><expr><operator>*</operator><name>cd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_bytes</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>output_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name>tmpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>ICONV_ERROR</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>in_bytes</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"The Curl_convert_to_network iconv call failed with errno %i: %s"</literal></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_CONV_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"CURLOPT_CONV_TO_NETWORK_FUNCTION callback required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_CONV_REQD</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></else></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>CURLcode</name></type> <name>Curl_convert_from_network</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>convfromnetwork</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>convfromnetwork</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"CURLOPT_CONV_FROM_NETWORK_FUNCTION callback returned %d: %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>result</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>iconv_t</name></type> <name>tmpcd</name> <init>= <expr><operator>(</operator><name>iconv_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iconv_t</name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><operator>&amp;</operator><name>tmpcd</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>input_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>output_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>in_bytes</name></decl>, <decl><type ref="prev"/><name>out_bytes</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cd</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>inbound_cd</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>cd</name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cd</name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><name>CURL_ICONV_CODESET_OF_HOST</name></expr></argument>,
<argument><expr><name>CURL_ICONV_CODESET_OF_NETWORK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>cd</name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"The iconv_open(\"%s\", \"%s\") call failed with errno %i: %s"</literal></expr></argument>,
<argument><expr><name>CURL_ICONV_CODESET_OF_HOST</name></expr></argument>,
<argument><expr><name>CURL_ICONV_CODESET_OF_NETWORK</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_CONV_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input_ptr</name> <operator>=</operator> <name>output_ptr</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in_bytes</name> <operator>=</operator> <name>out_bytes</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iconv</name><argument_list>(<argument><expr><operator>*</operator><name>cd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_bytes</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>output_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name>tmpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>ICONV_ERROR</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>in_bytes</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"Curl_convert_from_network iconv call failed with errno %i: %s"</literal></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_CONV_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"CURLOPT_CONV_FROM_NETWORK_FUNCTION callback required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_CONV_REQD</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></else></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>CURLcode</name></type> <name>Curl_convert_from_utf8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>convfromutf8</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>convfromutf8</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"CURLOPT_CONV_FROM_UTF8_FUNCTION callback returned %d: %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>result</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>iconv_t</name></type> <name>tmpcd</name> <init>= <expr><operator>(</operator><name>iconv_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iconv_t</name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><operator>&amp;</operator><name>tmpcd</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>input_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>output_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>in_bytes</name></decl>, <decl><type ref="prev"/><name>out_bytes</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cd</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>utf8_cd</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>cd</name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cd</name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><name>CURL_ICONV_CODESET_OF_HOST</name></expr></argument>,
<argument><expr><name>CURL_ICONV_CODESET_FOR_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>cd</name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"The iconv_open(\"%s\", \"%s\") call failed with errno %i: %s"</literal></expr></argument>,
<argument><expr><name>CURL_ICONV_CODESET_OF_HOST</name></expr></argument>,
<argument><expr><name>CURL_ICONV_CODESET_FOR_UTF8</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_CONV_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input_ptr</name> <operator>=</operator> <name>output_ptr</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in_bytes</name> <operator>=</operator> <name>out_bytes</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iconv</name><argument_list>(<argument><expr><operator>*</operator><name>cd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_bytes</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>output_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name>tmpcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>ICONV_ERROR</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>in_bytes</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"The Curl_convert_from_utf8 iconv call failed with errno %i: %s"</literal></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_CONV_FAILED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>output_ptr</name> <operator>&lt;</operator> <name>input_ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>output_ptr</name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"CURLOPT_CONV_FROM_UTF8_FUNCTION callback required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_CONV_REQD</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></else></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>Curl_convert_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>outbound_cd</name></name> <operator>=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>inbound_cd</name></name> <operator>=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>utf8_cd</name></name> <operator>=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>




<function><type><name>void</name></type> <name>Curl_convert_setup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>inbound_cd</name></name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><name>CURL_ICONV_CODESET_OF_HOST</name></expr></argument>,
<argument><expr><name>CURL_ICONV_CODESET_OF_NETWORK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>outbound_cd</name></name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><name>CURL_ICONV_CODESET_OF_NETWORK</name></expr></argument>,
<argument><expr><name>CURL_ICONV_CODESET_OF_HOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>utf8_cd</name></name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><name>CURL_ICONV_CODESET_OF_HOST</name></expr></argument>,
<argument><expr><name>CURL_ICONV_CODESET_FOR_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>Curl_convert_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>inbound_cd</name></name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>inbound_cd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>outbound_cd</name></name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>outbound_cd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>utf8_cd</name></name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>utf8_cd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
