<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\vauth\ntlm.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_ME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"non-ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_ntlm_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_gethostname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_multibyte.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rand.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NTLM_NEEDS_NSS_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/nssg.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILDING_CURL_NTLM_MSGS_C</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vauth/vauth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vauth/ntlm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTLMSSP_SIGNATURE</name></cpp:macro> <cpp:value>"\x4e\x54\x4c\x4d\x53\x53\x50"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHORTPAIR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((x) &amp; 0xff)), ((int)(((x) &gt;&gt; 8) &amp; 0xff))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONGQUARTET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((x) &amp; 0xff)), ((int)(((x) &gt;&gt; 8) &amp; 0xff)), ((int)(((x) &gt;&gt; 16) &amp; 0xff)), ((int)(((x) &gt;&gt; 24) &amp; 0xff))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_ME</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_OUT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ntlm_print_flags</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_UNICODE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_NEGOTIATE_UNICODE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_OEM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_NEGOTIATE_OEM "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_REQUEST_TARGET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_REQUEST_TARGET "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_UNKNOWN_3 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_SIGN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_NEGOTIATE_SIGN "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_SEAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_NEGOTIATE_SEAL "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_DATAGRAM_STYLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_NEGOTIATE_DATAGRAM_STYLE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_LM_KEY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_NEGOTIATE_LM_KEY "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_NETWARE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_NEGOTIATE_NETWARE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_NTLM_KEY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_NEGOTIATE_NTLM_KEY "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">10</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_UNKNOWN_10 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_ANONYMOUS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_NEGOTIATE_ANONYMOUS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_DOMAIN_SUPPLIED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_NEGOTIATE_DOMAIN_SUPPLIED "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_WORKSTATION_SUPPLIED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_NEGOTIATE_WORKSTATION_SUPPLIED "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_LOCAL_CALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_NEGOTIATE_LOCAL_CALL "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_ALWAYS_SIGN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_NEGOTIATE_ALWAYS_SIGN "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_TARGET_TYPE_DOMAIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_TARGET_TYPE_DOMAIN "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_TARGET_TYPE_SERVER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_TARGET_TYPE_SERVER "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_TARGET_TYPE_SHARE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_TARGET_TYPE_SHARE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_NTLM2_KEY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_NEGOTIATE_NTLM2_KEY "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_REQUEST_INIT_RESPONSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_REQUEST_INIT_RESPONSE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_REQUEST_ACCEPT_RESPONSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_REQUEST_ACCEPT_RESPONSE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_REQUEST_NONNT_SESSION_KEY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_REQUEST_NONNT_SESSION_KEY "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_TARGET_INFO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_NEGOTIATE_TARGET_INFO "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_UNKNOWN_24 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">25</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_UNKNOWN_25 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">26</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_UNKNOWN_26 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">27</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_UNKNOWN_27 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">28</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_UNKNOWN_28 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_128</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_NEGOTIATE_128 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_KEY_EXCHANGE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_NEGOTIATE_KEY_EXCHANGE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_56</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"NTLMFLAG_NEGOTIATE_56 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ntlm_print_hex</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>handle</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"0x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%02.2x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_OUT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
















<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ntlm_decode_type2_target</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ntlmdata</name></name> <modifier>*</modifier></type><name>ntlm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>target_info_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>target_info_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">48</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>target_info_len</name> <operator>=</operator> <call><name>Curl_read16_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target_info_offset</name> <operator>=</operator> <call><name>Curl_read32_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">44</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>target_info_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>target_info_offset</name> <operator>&gt;=</operator> <name>size</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>target_info_offset</name> <operator>+</operator> <name>target_info_len</name><operator>)</operator> <operator>&gt;</operator> <name>size</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>target_info_offset</name> <operator>&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NTLM handshake failure (bad type-2 message). "</literal>
<literal type="string">"Target Info Offset Len is set incorrect by the peer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>target_info</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>target_info_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ntlm</name><operator>-&gt;</operator><name>target_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>target_info</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><name>target_info_offset</name></expr>]</index></name></expr></argument>, <argument><expr><name>target_info_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>target_info_len</name></name> <operator>=</operator> <name>target_info_len</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>


























<function><type><name>bool</name></type> <name>Curl_auth_is_ntlm_supported</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

















<function><type><name>CURLcode</name></type> <name>Curl_auth_decode_ntlm_type2_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type2msg</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ntlmdata</name></name> <modifier>*</modifier></type><name>ntlm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>type2_marker</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>

















<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>type2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>type2_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NTLM_NEEDS_NSS_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_nss_force_init</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>type2msg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>type2msg</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><name>type2msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type2_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>type2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NTLM handshake failure (empty type-2 message)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>type2_len</name> <operator>&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>type2</name></expr></argument>, <argument><expr><name>NTLMSSP_SIGNATURE</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>type2</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>type2_marker</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>type2_marker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NTLM handshake failure (bad type-2 message)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>Curl_read32_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>type2</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>type2</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ntlm</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_TARGET_INFO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ntlm_decode_type2_target</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>, <argument><expr><name>type2_len</name></expr></argument>, <argument><expr><name>ntlm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NTLM handshake failure (bad type-2 message)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<macro><name>DEBUG_OUT</name><argument_list>(<argument>{
fprintf(stderr, <literal type="string">"**** TYPE2 header flags=0x%08.8lx "</literal>, ntlm-&gt;flags);
ntlm_print_flags(stderr, ntlm-&gt;flags);
fprintf(stderr, <literal type="string">"\n nonce="</literal>);
ntlm_print_hex(stderr, (char *)ntlm-&gt;nonce, <literal type="number">8</literal>);
fprintf(stderr, <literal type="string">"\n****\n"</literal>);
fprintf(stderr, <literal type="string">"**** Header %s\n "</literal>, header);
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>unicodecpy</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





















<function><type><name>CURLcode</name></type> <name>Curl_auth_create_ntlm_type1_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>passwdp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ntlmdata</name></name> <modifier>*</modifier></type><name>ntlm</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>














<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ntlmbuf</name><index>[<expr><name>NTLM_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>hostlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>domlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hostoff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>domoff</name> <init>= <expr><name>hostoff</name> <operator>+</operator> <name>hostlen</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>userp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>passwdp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>service</name></expr><operator>,</operator>
<expr><operator>(</operator><name>void</name><operator>)</operator><name>hostname</name></expr><operator>,</operator>


<expr><call><name>Curl_auth_cleanup_ntlm</name><argument_list>(<argument><expr><name>ntlm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTRESPONSES</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM2SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTLM2FLAG</name></cpp:macro> <cpp:value>NTLMFLAG_NEGOTIATE_NTLM2_KEY</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTLM2FLAG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ntlmbuf</name></expr></argument>, <argument><expr><name>NTLM_BUFSIZE</name></expr></argument>,
<argument><expr><name>NTLMSSP_SIGNATURE</name> <literal type="string">"%c"</literal>
<literal type="string">"\x01%c%c%c"</literal> 
<literal type="string">"%c%c%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%s"</literal> 
<literal type="string">"%s"</literal></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><call><name>LONGQUARTET</name><argument_list>(<argument><expr><name>NTLMFLAG_NEGOTIATE_OEM</name> <operator>|</operator>
<name>NTLMFLAG_REQUEST_TARGET</name> <operator>|</operator>
<name>NTLMFLAG_NEGOTIATE_NTLM_KEY</name> <operator>|</operator>
<name>NTLM2FLAG</name> <operator>|</operator>
<name>NTLMFLAG_NEGOTIATE_ALWAYS_SIGN</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>domlen</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>domlen</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>domoff</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>hostlen</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>hostlen</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>hostoff</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>host</name></expr></argument>, 
<argument><expr><name>domain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">32</literal> <operator>+</operator> <name>hostlen</name> <operator>+</operator> <name>domlen</name></expr>;</expr_stmt>

<macro><name>DEBUG_OUT</name><argument_list>(<argument>{
fprintf(stderr, <literal type="string">"* TYPE1 header flags=0x%02.2x%02.2x%02.2x%02.2x "</literal>
<literal type="string">"0x%08.8x "</literal>,
LONGQUARTET(NTLMFLAG_NEGOTIATE_OEM |
NTLMFLAG_REQUEST_TARGET |
NTLMFLAG_NEGOTIATE_NTLM_KEY |
NTLM2FLAG |
NTLMFLAG_NEGOTIATE_ALWAYS_SIGN),
NTLMFLAG_NEGOTIATE_OEM |
NTLMFLAG_REQUEST_TARGET |
NTLMFLAG_NEGOTIATE_NTLM_KEY |
NTLM2FLAG |
NTLMFLAG_NEGOTIATE_ALWAYS_SIGN);
ntlm_print_flags(stderr,
NTLMFLAG_NEGOTIATE_OEM |
NTLMFLAG_REQUEST_TARGET |
NTLMFLAG_NEGOTIATE_NTLM_KEY |
NTLM2FLAG |
NTLMFLAG_NEGOTIATE_ALWAYS_SIGN);
fprintf(stderr, <literal type="string">"\n****\n"</literal>);
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<return>return <expr><call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ntlmbuf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>outptr</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><name>CURLcode</name></type> <name>Curl_auth_create_ntlm_type3_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>passwdp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>ntlmdata</name></name> <modifier>*</modifier></type><name>ntlm</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>


















<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ntlmbuf</name><index>[<expr><name>NTLM_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lmrespoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>lmresp</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTRESPONSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ntrespoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ntresplen</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ntresp</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr_ntresp</name> <init>= <expr><operator>&amp;</operator><name><name>ntresp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ntlmv2resp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>bool</name></type> <name>unicode</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>ntlm</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_UNICODE</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><name>HOSTNAME_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hostoff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>useroff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>domoff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hostlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>userlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>domlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>user</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>userp</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>user</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>user</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>userp</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>user</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>domain</name> <operator>=</operator> <name>userp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>domlen</name> <operator>=</operator> <operator>(</operator><name>user</name> <operator>-</operator> <name>domain</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>user</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>user</name> <operator>=</operator> <name>userp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>userlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><call><name>Curl_gethostname</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gethostname() failed, continuing without!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hostlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>hostlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTRESPONSES</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM_V2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>ntlm</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_NTLM2_KEY</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ntbuffer</name><index>[<expr><literal type="number">0x18</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>entropy</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ntlmv2hash</name><index>[<expr><literal type="number">0x18</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_rand</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>entropy</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ntlm_core_mk_nt_hash</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>passwdp</name></expr></argument>, <argument><expr><name>ntbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ntlm_core_mk_ntlmv2_hash</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>userlen</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>domlen</name></expr></argument>,
<argument><expr><name>ntbuffer</name></expr></argument>, <argument><expr><name>ntlmv2hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ntlm_core_mk_lmv2_resp</name><argument_list>(<argument><expr><name>ntlmv2hash</name></expr></argument>, <argument><expr><name>entropy</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ntlm</name><operator>-&gt;</operator><name>nonce</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lmresp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ntlm_core_mk_ntlmv2_resp</name><argument_list>(<argument><expr><name>ntlmv2hash</name></expr></argument>, <argument><expr><name>entropy</name></expr></argument>,
<argument><expr><name>ntlm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ntlmv2resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ntresplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr_ntresp</name> <operator>=</operator> <name>ntlmv2resp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTRESPONSES</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM2SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

if<condition>(<expr><name><name>ntlm</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>NTLMFLAG_NEGOTIATE_NTLM_KEY</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ntbuffer</name><index>[<expr><literal type="number">0x18</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">0x18</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>md5sum</name><index>[<expr><name>MD5_DIGEST_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>entropy</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_rand</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>entropy</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lmresp</name></expr></argument>, <argument><expr><name>entropy</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lmresp</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ntlm</name><operator>-&gt;</operator><name>nonce</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>entropy</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_md5it</name><argument_list>(<argument><expr><name>md5sum</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ntlm_core_mk_nt_hash</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>passwdp</name></expr></argument>, <argument><expr><name>ntbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_ntlm_core_lm_resp</name><argument_list>(<argument><expr><name>ntbuffer</name></expr></argument>, <argument><expr><name>md5sum</name></expr></argument>, <argument><expr><name>ntresp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTRESPONSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ntbuffer</name><index>[<expr><literal type="number">0x18</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>lmbuffer</name><index>[<expr><literal type="number">0x18</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTRESPONSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ntlm_core_mk_nt_hash</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>passwdp</name></expr></argument>, <argument><expr><name>ntbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_ntlm_core_lm_resp</name><argument_list>(<argument><expr><name>ntbuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ntlm</name><operator>-&gt;</operator><name>nonce</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ntresp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ntlm_core_mk_lm_hash</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>passwdp</name></expr></argument>, <argument><expr><name>lmbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_ntlm_core_lm_resp</name><argument_list>(<argument><expr><name>lmbuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ntlm</name><operator>-&gt;</operator><name>nonce</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lmresp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>unicode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>domlen</name> <operator>=</operator> <name>domlen</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>userlen</name> <operator>=</operator> <name>userlen</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hostlen</name> <operator>=</operator> <name>hostlen</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lmrespoff</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTRESPONSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ntrespoff</name> <operator>=</operator> <name>lmrespoff</name> <operator>+</operator> <literal type="number">0x18</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>domoff</name> <operator>=</operator> <name>ntrespoff</name> <operator>+</operator> <name>ntresplen</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>domoff</name> <operator>=</operator> <name>lmrespoff</name> <operator>+</operator> <literal type="number">0x18</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>useroff</name> <operator>=</operator> <name>domoff</name> <operator>+</operator> <name>domlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hostoff</name> <operator>=</operator> <name>useroff</name> <operator>+</operator> <name>userlen</name></expr>;</expr_stmt>


<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>msnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ntlmbuf</name></expr></argument>, <argument><expr><name>NTLM_BUFSIZE</name></expr></argument>,
<argument><expr><name>NTLMSSP_SIGNATURE</name> <literal type="string">"%c"</literal>
<literal type="string">"\x03%c%c%c"</literal> 

<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 

<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 

<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 

<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 

<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 

<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 
<literal type="string">"%c%c"</literal> 

<literal type="string">"%c%c%c%c"</literal></expr></argument>, 







<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><literal type="number">0x18</literal></expr></argument>)</argument_list></call></expr></argument>, 
<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><literal type="number">0x18</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>lmrespoff</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTRESPONSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>ntresplen</name></expr></argument>)</argument_list></call></expr></argument>, 
<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>ntresplen</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>ntrespoff</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>,
<argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>,
<argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>,
<argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>domlen</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>domlen</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>domoff</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>,

<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>userlen</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>userlen</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>useroff</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>,

<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>hostlen</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>hostlen</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SHORTPAIR</name><argument_list>(<argument><expr><name>hostoff</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>,

<argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>,
<argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>,
<argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>,
<argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>,

<argument><expr><call><name>LONGQUARTET</name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>lmrespoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <operator>(</operator><name>NTLM_BUFSIZE</name> <operator>-</operator> <literal type="number">0x18</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ntlmbuf</name><index>[<expr><name>size</name></expr>]</index></name></expr></argument>, <argument><expr><name>lmresp</name></expr></argument>, <argument><expr><literal type="number">0x18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">0x18</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<macro><name>DEBUG_OUT</name><argument_list>(<argument>{
fprintf(stderr, <literal type="string">"**** TYPE3 header lmresp="</literal>);
ntlm_print_hex(stderr, (char *)&amp;ntlmbuf[lmrespoff], <literal type="number">0x18</literal>);
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTRESPONSES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>ntresplen</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ntlmbuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"incoming NTLM message too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>ntrespoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ntlmbuf</name><index>[<expr><name>size</name></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_ntresp</name></expr></argument>, <argument><expr><name>ntresplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>ntresplen</name></expr>;</expr_stmt>

<macro><name>DEBUG_OUT</name><argument_list>(<argument>{
fprintf(stderr, <literal type="string">"\n ntresp="</literal>);
ntlm_print_hex(stderr, (char *)&amp;ntlmbuf[ntrespoff], ntresplen);
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ntlmv2resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>DEBUG_OUT</name><argument_list>(<argument>{
fprintf(stderr, <literal type="string">"\n flags=0x%02.2x%02.2x%02.2x%02.2x 0x%08.8x "</literal>,
LONGQUARTET(ntlm-&gt;flags), ntlm-&gt;flags);
ntlm_print_flags(stderr, ntlm-&gt;flags);
fprintf(stderr, <literal type="string">"\n****\n"</literal>);
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>



<if_stmt><if>if<condition>(<expr><name>size</name> <operator>+</operator> <name>userlen</name> <operator>+</operator> <name>domlen</name> <operator>+</operator> <name>hostlen</name> <operator>&gt;=</operator> <name>NTLM_BUFSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"user + domain + host name too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <name>domoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>unicode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unicodecpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ntlmbuf</name><index>[<expr><name>size</name></expr>]</index></name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>domlen</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ntlmbuf</name><index>[<expr><name>size</name></expr>]</index></name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>domlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>domlen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <name>useroff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>unicode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unicodecpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ntlmbuf</name><index>[<expr><name>size</name></expr>]</index></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>userlen</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ntlmbuf</name><index>[<expr><name>size</name></expr>]</index></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>userlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>userlen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <name>hostoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>unicode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unicodecpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ntlmbuf</name><index>[<expr><name>size</name></expr>]</index></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>hostlen</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ntlmbuf</name><index>[<expr><name>size</name></expr>]</index></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>hostlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>hostlen</name></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_convert_to_network</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ntlmbuf</name><index>[<expr><name>domoff</name></expr>]</index></name></expr></argument>,
<argument><expr><name>size</name> <operator>-</operator> <name>domoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_CONV_FAILED</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ntlmbuf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>outptr</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_auth_cleanup_ntlm</name><argument_list>(<argument><expr><name>ntlm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>Curl_auth_cleanup_ntlm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ntlmdata</name></name> <modifier>*</modifier></type><name>ntlm</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>target_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>target_info_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
