<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\vauth\digest.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vauth/vauth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vauth/digest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_hmac.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_sha256.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtok.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"non-ascii.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rand.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGEST_QOP_VALUE_AUTH</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGEST_QOP_VALUE_AUTH_INT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGEST_QOP_VALUE_AUTH_CONF</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGEST_QOP_VALUE_STRING_AUTH</name></cpp:macro> <cpp:value>"auth"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGEST_QOP_VALUE_STRING_AUTH_INT</name></cpp:macro> <cpp:value>"auth-int"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGEST_QOP_VALUE_STRING_AUTH_CONF</name></cpp:macro> <cpp:value>"auth-conf"</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_OUTPUT_DIGEST_CONV</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>result = Curl_convert_to_network(a, b, strlen(b)); if(result) { free(b); return result; }</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>bool</name></type> <name>Curl_auth_digest_get_pair</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>content</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>starts_with_quote</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>escape</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <name>DIGEST_MAX_VALUE_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><operator>*</operator><name>str</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'='</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name><operator>--</operator><operator>)</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>value</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="char">'='</literal> <operator>!=</operator> <operator>*</operator><name>str</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><literal type="char">'\"'</literal> <operator>==</operator> <operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>starts_with_quote</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <name>DIGEST_MAX_CONTENT_LENGTH</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>str</name> <operator>&amp;&amp;</operator> <name>c</name><operator>--</operator></expr>;</condition> <incr><expr><name>str</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch<condition>(<expr><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>escape</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>escape</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>content</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt> 

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">','</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>starts_with_quote</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'\"'</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>escape</name> <operator>&amp;&amp;</operator> <name>starts_with_quote</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>escape</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>content</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>str</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>content</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>auth_digest_md5_to_ascii</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, 
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>source</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>auth_digest_sha256_to_ascii</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, 
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>source</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>auth_digest_string_quoted</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>source</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 


<while>while<condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>dest</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>dest</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>auth_digest_get_key_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chlg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>max_val_len</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>end_char</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>find_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>find_pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>chlg</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>find_pos</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>find_pos</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>find_pos</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>find_pos</name> <operator>!=</operator> <name>end_char</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>max_val_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>find_pos</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>auth_digest_get_qop_values</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tok_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>token</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>DIGEST_QOP_VALUE_STRING_AUTH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>|=</operator> <name>DIGEST_QOP_VALUE_AUTH</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>DIGEST_QOP_VALUE_STRING_AUTH_INT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>|=</operator> <name>DIGEST_QOP_VALUE_AUTH_INT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>DIGEST_QOP_VALUE_STRING_AUTH_CONF</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>|=</operator> <name>DIGEST_QOP_VALUE_AUTH_CONF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>auth_decode_digest_md5_message</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chlg64</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nonce</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nlen</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>realm</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>rlen</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>alg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alen</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>qop</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>qlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>chlg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>chlglen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>chlg64len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>chlg64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>chlg64len</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>chlg64</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><name>chlg64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chlg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chlglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>chlg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>auth_digest_get_key_value</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>chlg</name></expr></argument>, <argument><expr><literal type="string">"nonce=\""</literal></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>,
<argument><expr><literal type="char">'\"'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>auth_digest_get_key_value</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>chlg</name></expr></argument>, <argument><expr><literal type="string">"realm=\""</literal></expr></argument>, <argument><expr><name>realm</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>,
<argument><expr><literal type="char">'\"'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>realm</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>auth_digest_get_key_value</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>chlg</name></expr></argument>, <argument><expr><literal type="string">"algorithm="</literal></expr></argument>, <argument><expr><name>alg</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>auth_digest_get_key_value</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>chlg</name></expr></argument>, <argument><expr><literal type="string">"qop=\""</literal></expr></argument>, <argument><expr><name>qop</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><literal type="char">'\"'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>bool</name></type> <name>Curl_auth_is_digest_supported</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>




















<function><type><name>CURLcode</name></type> <name>Curl_auth_create_digest_md5_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chlg64</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>passwdp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MD5_context</name> <modifier>*</modifier></type><name>ctxt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>response</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>MD5_DIGEST_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>HA1_hex</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>MD5_DIGEST_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>HA2_hex</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>MD5_DIGEST_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>resp_hash_hex</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>MD5_DIGEST_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>nonce</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>realm</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>algorithm</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>qop_options</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qop_values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cnonce</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>nonceCount</name><index>[]</index></name> <init>= <expr><literal type="string">"00000001"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>method</name><index>[]</index></name> <init>= <expr><literal type="string">"AUTHENTICATE"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>qop</name><index>[]</index></name> <init>= <expr><name>DIGEST_QOP_VALUE_STRING_AUTH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>spn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>auth_decode_digest_md5_message</name><argument_list>(<argument><expr><name>chlg64</name></expr></argument>, <argument><expr><name>nonce</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nonce</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>realm</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>realm</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>algorithm</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>qop_options</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>qop_options</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>, <argument><expr><literal type="string">"md5-sess"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>auth_digest_get_qop_values</name><argument_list>(<argument><expr><name>qop_options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qop_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>qop_values</name> <operator>&amp;</operator> <name>DIGEST_QOP_VALUE_AUTH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_rand_hex</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>cnonce</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cnonce</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ctxt</name> <operator>=</operator> <call><name>Curl_MD5_init</name><argument_list>(<argument><expr><name>Curl_DIGEST_MD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctxt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>userp</name></expr></argument>,
<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>userp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>realm</name></expr></argument>,
<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>passwdp</name></expr></argument>,
<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>passwdp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_final</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ctxt</name> <operator>=</operator> <call><name>Curl_MD5_init</name><argument_list>(<argument><expr><name>Curl_DIGEST_MD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctxt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>digest</name></expr></argument>, <argument><expr><name>MD5_DIGEST_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>nonce</name></expr></argument>,
<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>nonce</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>cnonce</name></expr></argument>,
<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cnonce</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_final</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MD5_DIGEST_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>HA1_hex</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>spn</name> <operator>=</operator> <call><name>Curl_auth_build_spn</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>realm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>spn</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ctxt</name> <operator>=</operator> <call><name>Curl_MD5_init</name><argument_list>(<argument><expr><name>Curl_DIGEST_MD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctxt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>spn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>method</name></expr></argument>,
<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>spn</name></expr></argument>,
<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>spn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_final</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MD5_DIGEST_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>HA2_hex</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>ctxt</name> <operator>=</operator> <call><name>Curl_MD5_init</name><argument_list>(<argument><expr><name>Curl_DIGEST_MD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctxt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>spn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>HA1_hex</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>MD5_DIGEST_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>nonce</name></expr></argument>,
<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>nonce</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>nonceCount</name></expr></argument>,
<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>nonceCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>cnonce</name></expr></argument>,
<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cnonce</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>qop</name></expr></argument>,
<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>qop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>HA2_hex</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>MD5_DIGEST_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_MD5_final</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MD5_DIGEST_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>resp_hash_hex</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"username=\"%s\",realm=\"%s\",nonce=\"%s\","</literal>
<literal type="string">"cnonce=\"%s\",nc=\"%s\",digest-uri=\"%s\",response=%s,"</literal>
<literal type="string">"qop=%s"</literal></expr></argument>,
<argument><expr><name>userp</name></expr></argument>, <argument><expr><name>realm</name></expr></argument>, <argument><expr><name>nonce</name></expr></argument>,
<argument><expr><name>cnonce</name></expr></argument>, <argument><expr><name>nonceCount</name></expr></argument>, <argument><expr><name>spn</name></expr></argument>, <argument><expr><name>resp_hash_hex</name></expr></argument>, <argument><expr><name>qop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>spn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>response</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>outptr</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>














<function><type><name>CURLcode</name></type> <name>Curl_auth_decode_digest_http_message</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chlg</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>digestdata</name></name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>before</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>foundAuth</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>foundAuthInt</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>before</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>Curl_auth_digest_cleanup</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>value</name><index>[<expr><name>DIGEST_MAX_VALUE_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>content</name><index>[<expr><name>DIGEST_MAX_CONTENT_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>


<while>while<condition>(<expr><operator>*</operator><name>chlg</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>chlg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chlg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>


<if_stmt><if>if<condition>(<expr><call><name>Curl_auth_digest_get_pair</name><argument_list>(<argument><expr><name>chlg</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chlg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"nonce"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"stale"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>stale</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>nc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"realm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>realm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>realm</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>digest</name><operator>-&gt;</operator><name>realm</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"opaque"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>digest</name><operator>-&gt;</operator><name>opaque</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"qop"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tok_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>token</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>DIGEST_QOP_VALUE_STRING_AUTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>foundAuth</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>DIGEST_QOP_VALUE_STRING_AUTH_INT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>foundAuthInt</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>foundAuth</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>DIGEST_QOP_VALUE_STRING_AUTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>foundAuthInt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>DIGEST_QOP_VALUE_STRING_AUTH_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"algorithm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>algorithm</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>digest</name><operator>-&gt;</operator><name>algorithm</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><literal type="string">"MD5-sess"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>algo</name></name> <operator>=</operator> <name>CURLDIGESTALGO_MD5SESS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><literal type="string">"MD5"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>algo</name></name> <operator>=</operator> <name>CURLDIGESTALGO_MD5</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><literal type="string">"SHA-256"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>algo</name></name> <operator>=</operator> <name>CURLDIGESTALGO_SHA256</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><literal type="string">"SHA-256-SESS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>algo</name></name> <operator>=</operator> <name>CURLDIGESTALGO_SHA256SESS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><literal type="string">"SHA-512-256"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>algo</name></name> <operator>=</operator> <name>CURLDIGESTALGO_SHA512_256</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><literal type="string">"SHA-512-256-SESS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>algo</name></name> <operator>=</operator> <name>CURLDIGESTALGO_SHA512_256SESS</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"userhash"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>userhash</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt> 


<while>while<condition>(<expr><operator>*</operator><name>chlg</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>chlg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chlg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>


<if_stmt><if>if<condition>(<expr><literal type="char">','</literal> <operator>==</operator> <operator>*</operator><name>chlg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chlg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>




<if_stmt><if>if<condition>(<expr><name>before</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>digest</name><operator>-&gt;</operator><name>stale</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>auth_create_digest_http_message</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>passwdp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>request</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uripath</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>digestdata</name></name> <modifier>*</modifier></type><name>digest</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>convert_to_ascii</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>hash</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hashbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>request_digest</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ha1</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ha2</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>userh</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cnonce</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cnonce_sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>userp_quoted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>response</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hashthis</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>digest</name><operator>-&gt;</operator><name>nc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>nc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>digest</name><operator>-&gt;</operator><name>cnonce</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>cnoncebuf</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_rand_hex</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>cnoncebuf</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cnoncebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cnoncebuf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cnoncebuf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cnonce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnonce_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>cnonce</name></name> <operator>=</operator> <name>cnonce</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>userhash</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hashthis</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>userp</name></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>realm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hashthis</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CURL_OUTPUT_DIGEST_CONV</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>hashthis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hash</name><argument_list>(<argument><expr><name>hashbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>hashthis</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>hashthis</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hashthis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>convert_to_ascii</name><argument_list>(<argument><expr><name>hashbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>userh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>












<expr_stmt><expr><name>hashthis</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s:%s:%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>digest</name><operator>-&gt;</operator><name>userhash</name></name></expr> ?</condition><then> <expr><name>userh</name></expr> </then><else>: <expr><name>userp</name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>realm</name></name></expr></argument>, <argument><expr><name>passwdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hashthis</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CURL_OUTPUT_DIGEST_CONV</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>hashthis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>hash</name><argument_list>(<argument><expr><name>hashbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>hashthis</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>hashthis</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hashthis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>convert_to_ascii</name><argument_list>(<argument><expr><name>hashbuf</name></expr></argument>, <argument><expr><name>ha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>algo</name></name> <operator>==</operator> <name>CURLDIGESTALGO_MD5SESS</name> <operator>||</operator>
<name><name>digest</name><operator>-&gt;</operator><name>algo</name></name> <operator>==</operator> <name>CURLDIGESTALGO_SHA256SESS</name> <operator>||</operator>
<name><name>digest</name><operator>-&gt;</operator><name>algo</name></name> <operator>==</operator> <name>CURLDIGESTALGO_SHA512_256SESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s:%s:%s"</literal></expr></argument>, <argument><expr><name>ha1</name></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>cnonce</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CURL_OUTPUT_DIGEST_CONV</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>hash</name><argument_list>(<argument><expr><name>hashbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>tmp</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>convert_to_ascii</name><argument_list>(<argument><expr><name>hashbuf</name></expr></argument>, <argument><expr><name>ha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>














<expr_stmt><expr><name>hashthis</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>uripath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hashthis</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name> <operator>&amp;&amp;</operator> <call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr></argument>, <argument><expr><literal type="string">"auth-int"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>hashed</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hashthis2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hash</name><argument_list>(<argument><expr><name>hashbuf</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>convert_to_ascii</name><argument_list>(<argument><expr><name>hashbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>hashed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hashthis2</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>hashthis</name></expr></argument>, <argument><expr><name>hashed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hashthis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hashthis</name> <operator>=</operator> <name>hashthis2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hashthis</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CURL_OUTPUT_DIGEST_CONV</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>hashthis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>hash</name><argument_list>(<argument><expr><name>hashbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>hashthis</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>hashthis</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hashthis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>convert_to_ascii</name><argument_list>(<argument><expr><name>hashbuf</name></expr></argument>, <argument><expr><name>ha2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hashthis</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s:%s:%08x:%s:%s:%s"</literal></expr></argument>, <argument><expr><name>ha1</name></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>nc</name></name></expr></argument>,
<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>cnonce</name></name></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr></argument>, <argument><expr><name>ha2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>hashthis</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s:%s:%s"</literal></expr></argument>, <argument><expr><name>ha1</name></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><name>ha2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hashthis</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CURL_OUTPUT_DIGEST_CONV</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>hashthis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>hash</name><argument_list>(<argument><expr><name>hashbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>hashthis</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>hashthis</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hashthis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>convert_to_ascii</name><argument_list>(<argument><expr><name>hashbuf</name></expr></argument>, <argument><expr><name>request_digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>














<expr_stmt><expr><name>userp_quoted</name> <operator>=</operator> <call><name>auth_digest_string_quoted</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>digest</name><operator>-&gt;</operator><name>userhash</name></name></expr> ?</condition><then> <expr><name>userh</name></expr> </then><else>: <expr><name>userp</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>userp_quoted</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"username=\"%s\", "</literal>
<literal type="string">"realm=\"%s\", "</literal>
<literal type="string">"nonce=\"%s\", "</literal>
<literal type="string">"uri=\"%s\", "</literal>
<literal type="string">"cnonce=\"%s\", "</literal>
<literal type="string">"nc=%08x, "</literal>
<literal type="string">"qop=%s, "</literal>
<literal type="string">"response=\"%s\""</literal></expr></argument>,
<argument><expr><name>userp_quoted</name></expr></argument>,
<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>realm</name></name></expr></argument>,
<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>,
<argument><expr><name>uripath</name></expr></argument>,
<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>cnonce</name></name></expr></argument>,
<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>nc</name></name></expr></argument>,
<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr></argument>,
<argument><expr><name>request_digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr></argument>, <argument><expr><literal type="string">"auth"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>nc</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 


</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"username=\"%s\", "</literal>
<literal type="string">"realm=\"%s\", "</literal>
<literal type="string">"nonce=\"%s\", "</literal>
<literal type="string">"uri=\"%s\", "</literal>
<literal type="string">"response=\"%s\""</literal></expr></argument>,
<argument><expr><name>userp_quoted</name></expr></argument>,
<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>realm</name></name></expr></argument>,
<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>,
<argument><expr><name>uripath</name></expr></argument>,
<argument><expr><name>request_digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>userp_quoted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>response</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>opaque</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s, opaque=\"%s\""</literal></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>response</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>algorithm</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s, algorithm=%s"</literal></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>response</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>userhash</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s, userhash=true"</literal></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>response</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>outptr</name> <operator>=</operator> <name>response</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>





















<function><type><name>CURLcode</name></type> <name>Curl_auth_create_digest_http_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>passwdp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>request</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uripath</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>digestdata</name></name> <modifier>*</modifier></type><name>digest</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>algo</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLDIGESTALGO_MD5</name></expr>:</case>
<case>case <expr><name>CURLDIGESTALGO_MD5SESS</name></expr>:</case>
<return>return <expr><call><name>auth_create_digest_http_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>userp</name></expr></argument>, <argument><expr><name>passwdp</name></expr></argument>,
<argument><expr><name>request</name></expr></argument>, <argument><expr><name>uripath</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>,
<argument><expr><name>outptr</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>,
<argument><expr><name>auth_digest_md5_to_ascii</name></expr></argument>,
<argument><expr><name>Curl_md5it</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CURLDIGESTALGO_SHA256</name></expr>:</case>
<case>case <expr><name>CURLDIGESTALGO_SHA256SESS</name></expr>:</case>
<case>case <expr><name>CURLDIGESTALGO_SHA512_256</name></expr>:</case>
<case>case <expr><name>CURLDIGESTALGO_SHA512_256SESS</name></expr>:</case>
<return>return <expr><call><name>auth_create_digest_http_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>userp</name></expr></argument>, <argument><expr><name>passwdp</name></expr></argument>,
<argument><expr><name>request</name></expr></argument>, <argument><expr><name>uripath</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>,
<argument><expr><name>outptr</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>,
<argument><expr><name>auth_digest_sha256_to_ascii</name></expr></argument>,
<argument><expr><name>Curl_sha256it</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>
<return>return <expr><name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>Curl_auth_digest_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>digestdata</name></name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>cnonce</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>realm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>nc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>algo</name></name> <operator>=</operator> <name>CURLDIGESTALGO_MD5</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>stale</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>userhash</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
