<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\vauth\vauth.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vauth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_multibyte.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>char</name> <modifier>*</modifier></type><name>Curl_auth_build_spn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>realm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>spn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>host</name> <operator>&amp;&amp;</operator> <name>realm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>spn</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s/%s@%s"</literal></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>host</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>spn</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>realm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>spn</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s@%s"</literal></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<return>return <expr><name>spn</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>TCHAR</name> <modifier>*</modifier></type><name>Curl_auth_build_spn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>realm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>utf8_spn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>tchar_spn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>realm</name></expr>;</expr_stmt>









<expr_stmt><expr><name>utf8_spn</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>utf8_spn</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>tchar_spn</name> <operator>=</operator> <call><name>Curl_convert_UTF8_to_tchar</name><argument_list>(<argument><expr><name>utf8_spn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tchar_spn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>utf8_spn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name>utf8_spn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><name>tchar_spn</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 






















<function><type><name>bool</name></type> <name>Curl_auth_user_contains_domain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>user</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>user</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strpbrk</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><literal type="string">"\\/@"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>valid</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&gt;</operator> <name>user</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>user</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>:
<expr><name>FALSE</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>


<expr_stmt><expr><name>valid</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>valid</name></expr>;</return>
</block_content>}</block></function>
</unit>
