<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\vauth\digest_sspi.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vauth/vauth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vauth/digest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_multibyte.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strdup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>










<function><type><name>bool</name></type> <name>Curl_auth_is_digest_supported</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PSecPkgInfo</name></type> <name>SecurityPackage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>status</name></decl>;</decl_stmt>


<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>QuerySecurityPackageInfo</name></name><argument_list>(<argument><expr><operator>(</operator><name>TCHAR</name> <operator>*</operator><operator>)</operator> <call><name>TEXT</name><argument_list>(<argument><expr><name>SP_NAME_DIGEST</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>SecurityPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name>SecurityPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>status</name> <operator>==</operator> <name>SEC_E_OK</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>




















<function><type><name>CURLcode</name></type> <name>Curl_auth_create_digest_md5_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chlg64</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>passwdp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>spn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>chlglen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>token_max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input_token</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output_token</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CredHandle</name></type> <name>credentials</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CtxtHandle</name></type> <name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PSecPkgInfo</name></type> <name>SecurityPackage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SEC_WINNT_AUTH_IDENTITY</name></type> <name>identity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SEC_WINNT_AUTH_IDENTITY</name> <modifier>*</modifier></type><name>p_identity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBuffer</name></type> <name>chlg_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBuffer</name></type> <name>resp_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>chlg_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>resp_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>attrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeStamp</name></type> <name>expiry</name></decl>;</decl_stmt> 


<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>chlg64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>chlg64</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><name>chlg64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chlglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>input_token</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"DIGEST-MD5 handshake failure (empty challenge message)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>QuerySecurityPackageInfo</name></name><argument_list>(<argument><expr><operator>(</operator><name>TCHAR</name> <operator>*</operator><operator>)</operator> <call><name>TEXT</name><argument_list>(<argument><expr><name>SP_NAME_DIGEST</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>SecurityPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>input_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>token_max</name> <operator>=</operator> <name><name>SecurityPackage</name><operator>-&gt;</operator><name>cbMaxToken</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name>SecurityPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>output_token</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>token_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>output_token</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>input_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>spn</name> <operator>=</operator> <call><name>Curl_auth_build_spn</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>spn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>output_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>input_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>userp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>userp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_create_sspi_identity</name><argument_list>(<argument><expr><name>userp</name></expr></argument>, <argument><expr><name>passwdp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>spn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>output_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>input_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_identity</name> <operator>=</operator> <operator>&amp;</operator><name>identity</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p_identity</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>AcquireCredentialsHandle</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><name>TCHAR</name> <operator>*</operator><operator>)</operator> <call><name>TEXT</name><argument_list>(<argument><expr><name>SP_NAME_DIGEST</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SECPKG_CRED_OUTBOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>p_identity</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>credentials</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expiry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_sspi_free_identity</name><argument_list>(<argument><expr><name>p_identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>spn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>output_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>input_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_LOGIN_DENIED</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>chlg_desc</name><operator>.</operator><name>ulVersion</name></name> <operator>=</operator> <name>SECBUFFER_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_desc</name><operator>.</operator><name>cBuffers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_desc</name><operator>.</operator><name>pBuffers</name></name> <operator>=</operator> <operator>&amp;</operator><name>chlg_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><operator>.</operator><name>BufferType</name></name> <operator>=</operator> <name>SECBUFFER_TOKEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><operator>.</operator><name>pvBuffer</name></name> <operator>=</operator> <name>input_token</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><operator>.</operator><name>cbBuffer</name></name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><name>chlglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>resp_desc</name><operator>.</operator><name>ulVersion</name></name> <operator>=</operator> <name>SECBUFFER_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp_desc</name><operator>.</operator><name>cBuffers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp_desc</name><operator>.</operator><name>pBuffers</name></name> <operator>=</operator> <operator>&amp;</operator><name>resp_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp_buf</name><operator>.</operator><name>BufferType</name></name> <operator>=</operator> <name>SECBUFFER_TOKEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp_buf</name><operator>.</operator><name>pvBuffer</name></name> <operator>=</operator> <name>output_token</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp_buf</name><operator>.</operator><name>cbBuffer</name></name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><name>token_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>InitializeSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>credentials</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>spn</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>chlg_desc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrs</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>expiry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>SEC_I_COMPLETE_NEEDED</name> <operator>||</operator>
<name>status</name> <operator>==</operator> <name>SEC_I_COMPLETE_AND_CONTINUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>CompleteAuthToken</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>credentials</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_E_OK</name> <operator>&amp;&amp;</operator> <name>status</name> <operator>!=</operator> <name>SEC_I_CONTINUE_NEEDED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeCredentialsHandle</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>credentials</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_sspi_free_identity</name><argument_list>(<argument><expr><name>p_identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>spn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>output_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>input_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>SEC_E_INSUFFICIENT_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_AUTH_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>output_token</name></expr></argument>, <argument><expr><name><name>resp_buf</name><operator>.</operator><name>cbBuffer</name></name></expr></argument>,
<argument><expr><name>outptr</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeCredentialsHandle</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>credentials</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_sspi_free_identity</name><argument_list>(<argument><expr><name>p_identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>spn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>output_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>input_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>















<function><type><name>CURLcode</name></type> <name>Curl_override_sspi_http_realm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chlg</name></decl></parameter>,
<parameter><decl><type><name>SEC_WINNT_AUTH_IDENTITY</name> <modifier>*</modifier></type><name>identity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xcharp_u</name></type> <name>domain</name></decl>, <decl><type ref="prev"/><name>dup_domain</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>identity</name><operator>-&gt;</operator><name>Domain</name></name> <operator>||</operator> <operator>!</operator><name><name>identity</name><operator>-&gt;</operator><name>DomainLength</name></name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>value</name><index>[<expr><name>DIGEST_MAX_VALUE_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>content</name><index>[<expr><name>DIGEST_MAX_CONTENT_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>


<while>while<condition>(<expr><operator>*</operator><name>chlg</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>chlg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chlg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>


<if_stmt><if>if<condition>(<expr><call><name>Curl_auth_digest_get_pair</name><argument_list>(<argument><expr><name>chlg</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chlg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"realm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>domain</name><operator>.</operator><name>tchar_ptr</name></name> <operator>=</operator> <call><name>Curl_convert_UTF8_to_tchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>domain</name><operator>.</operator><name>tchar_ptr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dup_domain</name><operator>.</operator><name>tchar_ptr</name></name> <operator>=</operator> <call><name>_tcsdup</name><argument_list>(<argument><expr><name><name>domain</name><operator>.</operator><name>tchar_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>dup_domain</name><operator>.</operator><name>tchar_ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name><name>domain</name><operator>.</operator><name>tchar_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>identity</name><operator>-&gt;</operator><name>Domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>identity</name><operator>-&gt;</operator><name>Domain</name></name> <operator>=</operator> <name><name>dup_domain</name><operator>.</operator><name>tbyte_ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>identity</name><operator>-&gt;</operator><name>DomainLength</name></name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><call><name>_tcslen</name><argument_list>(<argument><expr><name><name>dup_domain</name><operator>.</operator><name>tchar_ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dup_domain</name><operator>.</operator><name>tchar_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name><name>domain</name><operator>.</operator><name>tchar_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt> 


<while>while<condition>(<expr><operator>*</operator><name>chlg</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>chlg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chlg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>


<if_stmt><if>if<condition>(<expr><literal type="char">','</literal> <operator>==</operator> <operator>*</operator><name>chlg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chlg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>














<function><type><name>CURLcode</name></type> <name>Curl_auth_decode_digest_http_message</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chlg</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>digestdata</name></name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>chlglen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>chlg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>input_token</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>stale</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>chlg</name></expr></init></decl>;</decl_stmt>


<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>value</name><index>[<expr><name>DIGEST_MAX_VALUE_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>content</name><index>[<expr><name>DIGEST_MAX_CONTENT_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_auth_digest_get_pair</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"stale"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>strcasecompare</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>stale</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><literal type="char">','</literal> <operator>==</operator> <operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>stale</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_auth_digest_cleanup</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>CURLE_LOGIN_DENIED</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>input_token</name></name> <operator>=</operator> <operator>(</operator><name>BYTE</name> <operator>*</operator><operator>)</operator> <call><name>Curl_memdup</name><argument_list>(<argument><expr><name>chlg</name></expr></argument>, <argument><expr><name>chlglen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>digest</name><operator>-&gt;</operator><name>input_token</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>input_token_len</name></name> <operator>=</operator> <name>chlglen</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>





















<function><type><name>CURLcode</name></type> <name>Curl_auth_create_digest_http_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>passwdp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>request</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uripath</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>digestdata</name></name> <modifier>*</modifier></type><name>digest</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>token_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>resp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>output_token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>output_token_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PSecPkgInfo</name></type> <name>SecurityPackage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBuffer</name></type> <name><name>chlg_buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>chlg_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>


<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>QuerySecurityPackageInfo</name></name><argument_list>(<argument><expr><operator>(</operator><name>TCHAR</name> <operator>*</operator><operator>)</operator> <call><name>TEXT</name><argument_list>(<argument><expr><name>SP_NAME_DIGEST</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>SecurityPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>token_max</name> <operator>=</operator> <name><name>SecurityPackage</name><operator>-&gt;</operator><name>cbMaxToken</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name>SecurityPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>output_token</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>token_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>output_token</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><operator>(</operator><name>userp</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>digest</name><operator>-&gt;</operator><name>user</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>userp</name> <operator>&amp;&amp;</operator> <name><name>digest</name><operator>-&gt;</operator><name>user</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>passwdp</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>digest</name><operator>-&gt;</operator><name>passwd</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>passwdp</name> <operator>&amp;&amp;</operator> <name><name>digest</name><operator>-&gt;</operator><name>passwd</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>userp</name> <operator>&amp;&amp;</operator> <name><name>digest</name><operator>-&gt;</operator><name>user</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>userp</name></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>passwdp</name> <operator>&amp;&amp;</operator> <name><name>digest</name><operator>-&gt;</operator><name>passwd</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>passwdp</name></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>http_context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>http_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>http_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>http_context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>chlg_desc</name><operator>.</operator><name>ulVersion</name></name> <operator>=</operator> <name>SECBUFFER_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_desc</name><operator>.</operator><name>cBuffers</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_desc</name><operator>.</operator><name>pBuffers</name></name> <operator>=</operator> <name>chlg_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_TOKEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_PKG_PARAMS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>request</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_PKG_PARAMS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>uripath</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>uripath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_PKG_PARAMS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_PADDING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <name>output_token</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><name>token_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>MakeSignature</name></name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>http_context</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>chlg_desc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>SEC_E_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>output_token_len</name> <operator>=</operator> <name><name>chlg_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content> 
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"digest_sspi: MakeSignature failed, error 0x%08lx\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>http_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>http_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>digest</name><operator>-&gt;</operator><name>http_context</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CredHandle</name></type> <name>credentials</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SEC_WINNT_AUTH_IDENTITY</name></type> <name>identity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SEC_WINNT_AUTH_IDENTITY</name> <modifier>*</modifier></type><name>p_identity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBuffer</name></type> <name>resp_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>resp_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>attrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeStamp</name></type> <name>expiry</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>spn</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>userp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>userp</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>Curl_create_sspi_identity</name><argument_list>(<argument><expr><name>userp</name></expr></argument>, <argument><expr><name>passwdp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>identity</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>output_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>Curl_override_sspi_http_realm</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>digest</name><operator>-&gt;</operator><name>input_token</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>identity</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>output_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p_identity</name> <operator>=</operator> <operator>&amp;</operator><name>identity</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p_identity</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>userp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>userp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>digest</name><operator>-&gt;</operator><name>user</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>output_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>passwdp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>passwd</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>passwdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>digest</name><operator>-&gt;</operator><name>passwd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>output_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>AcquireCredentialsHandle</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><name>TCHAR</name> <operator>*</operator><operator>)</operator> <call><name>TEXT</name><argument_list>(<argument><expr><name>SP_NAME_DIGEST</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SECPKG_CRED_OUTBOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>p_identity</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>credentials</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expiry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_sspi_free_identity</name><argument_list>(<argument><expr><name>p_identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>output_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_LOGIN_DENIED</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>chlg_desc</name><operator>.</operator><name>ulVersion</name></name> <operator>=</operator> <name>SECBUFFER_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_desc</name><operator>.</operator><name>cBuffers</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_desc</name><operator>.</operator><name>pBuffers</name></name> <operator>=</operator> <name>chlg_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_TOKEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <name><name>digest</name><operator>-&gt;</operator><name>input_token</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>input_token_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_PKG_PARAMS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>request</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_PKG_PARAMS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chlg_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>resp_desc</name><operator>.</operator><name>ulVersion</name></name> <operator>=</operator> <name>SECBUFFER_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp_desc</name><operator>.</operator><name>cBuffers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp_desc</name><operator>.</operator><name>pBuffers</name></name> <operator>=</operator> <operator>&amp;</operator><name>resp_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp_buf</name><operator>.</operator><name>BufferType</name></name> <operator>=</operator> <name>SECBUFFER_TOKEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp_buf</name><operator>.</operator><name>pvBuffer</name></name> <operator>=</operator> <name>output_token</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp_buf</name><operator>.</operator><name>cbBuffer</name></name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><name>token_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>spn</name> <operator>=</operator> <call><name>Curl_convert_UTF8_to_tchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>uripath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>spn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeCredentialsHandle</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>credentials</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_sspi_free_identity</name><argument_list>(<argument><expr><name>p_identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>output_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>http_context</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CtxtHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>digest</name><operator>-&gt;</operator><name>http_context</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>InitializeSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>credentials</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>spn</name></expr></argument>,
<argument><expr><name>ISC_REQ_USE_HTTP_STYLE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>chlg_desc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>http_context</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>resp_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expiry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name>spn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>SEC_I_COMPLETE_NEEDED</name> <operator>||</operator>
<name>status</name> <operator>==</operator> <name>SEC_I_COMPLETE_AND_CONTINUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>CompleteAuthToken</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>credentials</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_E_OK</name> <operator>&amp;&amp;</operator> <name>status</name> <operator>!=</operator> <name>SEC_I_CONTINUE_NEEDED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeCredentialsHandle</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>credentials</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_sspi_free_identity</name><argument_list>(<argument><expr><name>p_identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>output_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>http_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>SEC_E_INSUFFICIENT_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_AUTH_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>output_token_len</name> <operator>=</operator> <name><name>resp_buf</name><operator>.</operator><name>cbBuffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeCredentialsHandle</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>credentials</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_sspi_free_identity</name><argument_list>(<argument><expr><name>p_identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>resp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>output_token_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>resp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>output_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>resp</name></expr></argument>, <argument><expr><name>output_token</name></expr></argument>, <argument><expr><name>output_token_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name><index>[<expr><name>output_token_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>outptr</name> <operator>=</operator> <name>resp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name>output_token_len</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>output_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>Curl_auth_digest_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>digestdata</name></name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>input_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>input_token_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>http_context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>http_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>http_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
