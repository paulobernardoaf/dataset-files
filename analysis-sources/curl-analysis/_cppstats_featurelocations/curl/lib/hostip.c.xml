<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\hostip.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN6_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in6.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETJMP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PROCESS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hostip.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rand.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"share.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_ntop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_pton.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"doh.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLRES_SYNCH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALARM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGSETJMP</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_ALARM_TIMEOUT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HOSTCACHE_LEN</name></cpp:macro> <cpp:value>(255 + 7)</cpp:value></cpp:define> 








































<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>freednsentry</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>freethis</name></decl></parameter>)</parameter_list>;</function_decl>




<function><type><name>int</name></type> <name>Curl_num_addresses</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Curl_addrinfo</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>Curl_printable_address</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ai</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sa4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>in_addr</name></name> <modifier>*</modifier></type><name>ipaddr4</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sa6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>ipaddr6</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch<condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<expr_stmt><expr><name>sa4</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ipaddr4</name> <operator>=</operator> <operator>&amp;</operator><name><name>sa4</name><operator>-&gt;</operator><name>sin_addr</name></name></expr>;</expr_stmt>
<return>return <expr><call><name>Curl_inet_ntop</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>ipaddr4</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<expr_stmt><expr><name>sa6</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ipaddr6</name> <operator>=</operator> <operator>&amp;</operator><name><name>sa6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr>;</expr_stmt>
<return>return <expr><call><name>Curl_inet_ntop</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>ipaddr6</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>create_hostcache_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>buflen</name> <operator>-</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>buflen</name> <operator>-</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while<condition>(<expr><name>len</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>TOLOWER</name><argument_list>(<argument><expr><operator>*</operator><name>name</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">":%u"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>hostcache_prune_data</name> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>cache_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>
}</block>;</struct>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>hostcache_timestamp_remove</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>datap</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>hc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hostcache_prune_data</name></name> <modifier>*</modifier></type><name>data</name> <init>=
<expr><operator>(</operator>struct <name>hostcache_prune_data</name> <operator>*</operator><operator>)</operator> <name>datap</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator>struct <name>Curl_dns_entry</name> <operator>*</operator><operator>)</operator> <name>hc</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>timestamp</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>now</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>cache_timeout</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>hostcache_prune</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_hash</name></name> <modifier>*</modifier></type><name>hostcache</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>cache_timeout</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hostcache_prune_data</name></name></type> <name>user</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>user</name><operator>.</operator><name>cache_timeout</name></name> <operator>=</operator> <name>cache_timeout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>user</name><operator>.</operator><name>now</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_hash_clean_with_criterium</name><argument_list>(<argument><expr><name>hostcache</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>user</name></expr></argument>,
<argument><expr><name>hostcache_timestamp_remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>Curl_hostcache_prune</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>dns_cache_timeout</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>dns</name><operator>.</operator><name>hostcache</name></name></expr>)</condition><block type="pseudo"><block_content>


<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>hostcache_prune</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dns</name><operator>.</operator><name>hostcache</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>dns_cache_timeout</name></name></expr></argument>,
<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGSETJMP</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><name>sigjmp_buf</name></type> <name>curl_jmpenv</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type>
<name>fetch_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>entry_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>entry_id</name><index>[<expr><name>MAX_HOSTCACHE_LEN</name></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>create_hostcache_id</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>entry_id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>entry_id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>entry_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>Curl_hash_pick</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dns</name><operator>.</operator><name>hostcache</name></name></expr></argument>, <argument><expr><name>entry_id</name></expr></argument>, <argument><expr><name>entry_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dns</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>wildcard_resolve</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>create_hostcache_id</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>entry_id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>entry_id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>entry_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>Curl_hash_pick</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dns</name><operator>.</operator><name>hostcache</name></name></expr></argument>, <argument><expr><name>entry_id</name></expr></argument>, <argument><expr><name>entry_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>dns</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>dns_cache_timeout</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>hostcache_prune_data</name></name></type> <name>user</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>user</name><operator>.</operator><name>now</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>user</name><operator>.</operator><name>cache_timeout</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>dns_cache_timeout</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>hostcache_timestamp_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user</name></expr></argument>, <argument><expr><name>dns</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Hostname in DNS cache was stale, zapped\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dns</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>Curl_hash_delete</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dns</name><operator>.</operator><name>hostcache</name></name></expr></argument>, <argument><expr><name>entry_id</name></expr></argument>, <argument><expr><name>entry_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>dns</name></expr>;</return>
</block_content>}</block></function>















<function><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type>
<name>Curl_fetch_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>fetch_addr</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>inuse</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>dns</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_SHUFFLE_DNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>UNITTEST</name> <name>CURLcode</name></type> <name>Curl_shuffle_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>












<function><type><name>UNITTEST</name> <name>CURLcode</name></type> <name>Curl_shuffle_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_addrs</name> <init>= <expr><call><name>Curl_num_addresses</name><argument_list>(<argument><expr><operator>*</operator><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>num_addrs</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodes</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Shuffling %i addresses"</literal></expr></argument>, <argument><expr><name>num_addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nodes</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>num_addrs</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nodes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>nodes</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>rnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>rnd_size</name> <init>= <expr><name>num_addrs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rnd</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>addr</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_addrs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ai_next</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>rnd</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>rnd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>rnd</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>Curl_rand</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>rnd</name></expr></argument>, <argument><expr><name>rnd_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>swap_tmp</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>num_addrs</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>swap_tmp</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name><name>rnd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><name><name>rnd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>swap_tmp</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_addrs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ai_next</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>num_addrs</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>ai_next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>addr</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<function><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type>
<name>Curl_cache_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>entry_id</name><index>[<expr><name>MAX_HOSTCACHE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>entry_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>dns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>dns2</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_SHUFFLE_DNS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>dns_shuffle_addresses</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_shuffle_addr</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Curl_dns_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dns</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>create_hostcache_id</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>entry_id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>entry_id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>entry_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>inuse</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dns</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<expr_stmt><expr><name>dns2</name> <operator>=</operator> <call><name>Curl_hash_add</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dns</name><operator>.</operator><name>hostcache</name></name></expr></argument>, <argument><expr><name>entry_id</name></expr></argument>, <argument><expr><name>entry_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>dns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dns2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dns</name> <operator>=</operator> <name>dns2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>inuse</name></name><operator>++</operator></expr>;</expr_stmt> 
<return>return <expr><name>dns</name></expr>;</return>
</block_content>}</block></function>






















<function><type><name><name>enum</name> <name>resolve_t</name></name></type> <name>Curl_resolv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>allowDOH</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>resolve_t</name></name></type> <name>rc</name> <init>= <expr><name>CURLRESOLV_ERROR</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><operator>*</operator><name>entry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>fetch_addr</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dns</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Hostname %s was found in DNS cache\n"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>inuse</name></name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>CURLRESOLV_RESOLVED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dns</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>respwait</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_RESOLVE_ON_IPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>in</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>resolver_start</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>st</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>resolver_start</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resolver</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>resolver_start_client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLRESOLV_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_RESOLVE_ON_IPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>Curl_ip2addr</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>addr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>in6</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in6</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>Curl_ip2addr</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in6</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>addr</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_ipvalid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLRESOLV_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>allowDOH</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>doh</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>Curl_doh</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>respwait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>



<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>Curl_getaddrinfo</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DEVICE</name></expr>]</index></name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DEVICE</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="string">"LocalHost"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>?</condition><then><expr><literal type="string">"localhost"</literal></expr></then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>hostname</name></expr></else></ternary></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>respwait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>addr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>respwait</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_resolv_check</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>CURLRESOLV_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>dns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>CURLRESOLV_RESOLVED</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>CURLRESOLV_PENDING</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>Curl_cache_addr</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_freeaddrinfo</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>CURLRESOLV_RESOLVED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>entry</name> <operator>=</operator> <name>dns</name></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ALARM_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><specifier>static</specifier>
<name>RETSIGTYPE</name></type> <name>alarmfunc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sig</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>siglongjmp</name><argument_list>(<argument><expr><name>curl_jmpenv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 























<function><type><name><name>enum</name> <name>resolve_t</name></name></type> <name>Curl_resolv_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>entry</name></decl></parameter>,
<parameter><decl><type><name>timediff_t</name></type> <name>timeoutms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ALARM_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGACTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>keep_sigact</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>keep_copysig</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sigact</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>keep_sigact</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<decl_stmt><decl><type><specifier>volatile</specifier> <name>long</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>int</name></type> <name>prev_alarm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<decl_stmt><decl><type><name><name>enum</name> <name>resolve_t</name></name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>entry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeoutms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLRESOLV_TIMEDOUT</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ALARM_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>no_signal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>timeoutms</name> <operator>&gt;</operator> <name>LONG_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><name>LONG_MAX</name></expr> </then><else>: <expr><operator>(</operator><name>long</name><operator>)</operator><name>timeoutms</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>timeout</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>Curl_resolv</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"remaining timeout of %ld too small to resolve via SIGALRM method"</literal></expr></argument>,
<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLRESOLV_TIMEDOUT</name></expr>;</return>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if<condition>(<expr><call><name>sigsetjmp</name><argument_list>(<argument><expr><name>curl_jmpenv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"name lookup timed out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>CURLRESOLV_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>clean_up</name>;</goto>
</block_content>}</block></if>
<else>else <block>{<block_content>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGACTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>keep_sigact</name> <operator>=</operator> <name>sigact</name></expr>;</expr_stmt>
<expr_stmt><expr><name>keep_copysig</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>sigact</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>alarmfunc</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SA_RESTART</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>sigact</name><operator>.</operator><name>sa_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SA_RESTART</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigact</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>keep_sigact</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>alarmfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<expr_stmt><expr><name>prev_alarm</name> <operator>=</operator> <call><name>alarm</name><argument_list>(<argument><expr><call><name>curlx_sltoui</name><argument_list>(<argument><expr><name>timeout</name><operator>/</operator><literal type="number">1000L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURLRES_ASYNCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>timeoutms</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"timeout on name lookup is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>timeoutms</name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_resolv</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ALARM_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<label><name>clean_up</name>:</label>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>prev_alarm</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGACTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>keep_copysig</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keep_sigact</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>keep_sigact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<if_stmt><if>if<condition>(<expr><name>prev_alarm</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>elapsed_secs</name> <init>= <expr><call><name>Curl_timediff</name><argument_list>(<argument><expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>created</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>alarm_set</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name>prev_alarm</name> <operator>-</operator> <name>elapsed_secs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>alarm_set</name> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>alarm_set</name> <operator>&gt;=</operator> <literal type="number">0x80000000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>prev_alarm</name> <operator>&lt;</operator> <literal type="number">0x80000000</literal><operator>)</operator><operator>)</operator></expr> )</condition> <block>{<block_content>




<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>CURLRESOLV_TIMEDOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Previous alarm fired off!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>alarm_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>Curl_resolv_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>dns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>freednsentry</name><argument_list>(<argument><expr><name>dns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>freednsentry</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>freethis</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><operator>(</operator>struct <name>Curl_dns_entry</name> <operator>*</operator><operator>)</operator> <name>freethis</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>dns</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dns</name><operator>-&gt;</operator><name>inuse</name></name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>inuse</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>inuse</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_freeaddrinfo</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>Curl_mk_dnscache</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_hash</name></name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>Curl_hash_init</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>Curl_hash_str</name></expr></argument>, <argument><expr><name>Curl_str_key_compare</name></expr></argument>,
<argument><expr><name>freednsentry</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>Curl_hostcache_clean</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>curl_hash</name></name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_hash_clean</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>CURLcode</name></type> <name>Curl_loadhostpairs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>hostp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>wildcard_resolve</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>hostp</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>resolve</name></name></expr>;</init> <condition><expr><name>hostp</name></expr>;</condition> <incr><expr><name>hostp</name> <operator>=</operator> <name><name>hostp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>entry_id</name><index>[<expr><name>MAX_HOSTCACHE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>hostp</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>hostp</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>entry_len</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name><name>hostp</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%255[^:]:%d"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Couldn't parse CURLOPT_RESOLVE removal entry '%s'!\n"</literal></expr></argument>,
<argument><expr><name><name>hostp</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>create_hostcache_id</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>entry_id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>entry_id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>entry_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>Curl_hash_delete</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dns</name><operator>.</operator><name>hostcache</name></name></expr></argument>, <argument><expr><name>entry_id</name></expr></argument>, <argument><expr><name>entry_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>dns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>entry_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>address</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>addresses</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>addr_begin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>addr_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>port_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tmp_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>host_end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>hostp</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>host_end</name> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>host_end</name> <operator>-</operator> <name><name>hostp</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>hostp</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>host_end</name> <operator>-</operator> <name><name>hostp</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hostname</name><index>[<expr><name>host_end</name> <operator>-</operator> <name><name>hostp</name><operator>-&gt;</operator><name>data</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>port_ptr</name> <operator>=</operator> <name>host_end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_port</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>port_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_ptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>tmp_port</name> <operator>&gt;</operator> <name>USHRT_MAX</name> <operator>||</operator> <name>end_ptr</name> <operator>==</operator> <name>port_ptr</name> <operator>||</operator> <operator>*</operator><name>end_ptr</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>tmp_port</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>addresses</name> <operator>=</operator> <name>end_ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while<condition>(<expr><operator>*</operator><name>end_ptr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>alen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>

<expr_stmt><expr><name>addr_begin</name> <operator>=</operator> <name>end_ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>addr_end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>addr_begin</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>addr_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>addr_end</name> <operator>=</operator> <name>addr_begin</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>addr_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>end_ptr</name> <operator>=</operator> <name>addr_end</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>*</operator><name>addr_begin</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>addr_end</name> <operator>==</operator> <name>addr_begin</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>addr_end</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>addr_begin</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>addr_end</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>alen</name> <operator>=</operator> <name>addr_end</name> <operator>-</operator> <name>addr_begin</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>alen</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>alen</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>addr_begin</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>address</name><index>[<expr><name>alen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Ignoring resolve address '%s', missing IPv6 support.\n"</literal></expr></argument>,
<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>Curl_str2addr</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ai</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Resolve address '%s' found illegal!\n"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>tail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <name><name>tail</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>head</name> <operator>=</operator> <name>tail</name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>head</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<label><name>err</name>:</label>
<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Couldn't parse CURLOPT_RESOLVE entry '%s'!\n"</literal></expr></argument>,
<argument><expr><name><name>hostp</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_freeaddrinfo</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>create_hostcache_id</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>entry_id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>entry_id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>entry_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>Curl_hash_pick</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dns</name><operator>.</operator><name>hostcache</name></name></expr></argument>, <argument><expr><name>entry_id</name></expr></argument>, <argument><expr><name>entry_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dns</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"RESOLVE %s:%d is - old addresses discarded!\n"</literal></expr></argument>,
<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>Curl_hash_delete</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dns</name><operator>.</operator><name>hostcache</name></name></expr></argument>, <argument><expr><name>entry_id</name></expr></argument>, <argument><expr><name>entry_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>Curl_cache_addr</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>dns</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>inuse</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dns</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_freeaddrinfo</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Added %s:%d:%s to DNS cache\n"</literal></expr></argument>,
<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>addresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>hostname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>hostname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"RESOLVE %s:%d is wildcard, enabling wildcard checks\n"</literal></expr></argument>,
<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>wildcard_resolve</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>resolve</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_resolv_check</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>dns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_DOH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURLRES_ASYNCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dns</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>doh</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Curl_doh_is_resolved</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dns</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>Curl_resolver_is_resolved</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dns</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_resolv_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLRES_ASYNCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>doh</name></name></expr>)</condition><block type="pseudo"><block_content>


<return>return <expr><name>GETSOCK_BLANK</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>Curl_resolver_getsock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>socks</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>socks</name></expr>;</expr_stmt>
<return>return <expr><name>GETSOCK_BLANK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><name>CURLcode</name></type> <name>Curl_once_resolved</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>protocol_done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>dns</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>dns_entry</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>dns</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>dns</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_setup_conn</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>protocol_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><call><name>Curl_disconnect</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
