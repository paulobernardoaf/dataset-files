<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\vtls\nss.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NSS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formdata.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nssg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nspr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nss.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sslerr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;secerr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;secmod.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sslproto.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;prtypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pk11pub.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;prio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;secitem.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;secport.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;certdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;base64.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;prerror.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;keyhi.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;private/pprio.h&gt;</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSSVERNUM</name></cpp:macro> <cpp:value>((NSS_VMAJOR&lt;&lt;16)|(NSS_VMINOR&lt;&lt;8)|NSS_VPATCH)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NSSVERNUM</name> <operator>&gt;=</operator> <literal type="number">0x030f00</literal></expr></cpp:if> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ocsp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x509asn1.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_DIR</name></cpp:macro> <cpp:value>"/etc/pki/nssdb"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOTSIZE</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<struct>struct <name>ssl_backend_data</name> <block>{
<decl_stmt><decl><type><name>PRFileDesc</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>client_nickname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist</name></name></type> <name>obj_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PK11GenericObject</name> <modifier>*</modifier></type><name>obj_clicert</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>PRLock</name> <modifier>*</modifier></type><name>nss_initlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRLock</name> <modifier>*</modifier></type><name>nss_crllock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRLock</name> <modifier>*</modifier></type><name>nss_findslot_lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRLock</name> <modifier>*</modifier></type><name>nss_trustload_lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>curl_llist</name></name></type> <name>nss_crl_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>NSSInitContext</name> <modifier>*</modifier></type><name>nss_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<struct>struct <name>ptr_list_wrap</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name></type> <name>node</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
}</block></struct></type> <name>cipher_s</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PK11_SETATTRS</name><parameter_list>(<parameter><type><name>_attr</name></type></parameter>, <parameter><type><name>_idx</name></type></parameter>, <parameter><type><name>_type</name></type></parameter>, <parameter><type><name>_val</name></type></parameter>, <parameter><type><name>_len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CK_ATTRIBUTE *ptr = (_attr) + ((_idx)++); ptr-&gt;type = (_type); ptr-&gt;pValue = (_val); ptr-&gt;ulValueLen = (_len); } while(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CERT_NewTempCertificate</name></cpp:macro> <cpp:value>__CERT_NewTempCertificate</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_OF_CIPHERS</name></cpp:macro> <cpp:value>sizeof(cipherlist)/sizeof(cipherlist[0])</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>cipher_s</name></type> <name><name>cipherlist</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"rc4"</literal></expr>, <expr><name>SSL_EN_RC4_128_WITH_MD5</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rc4-md5"</literal></expr>, <expr><name>SSL_EN_RC4_128_WITH_MD5</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rc4export"</literal></expr>, <expr><name>SSL_EN_RC4_128_EXPORT40_WITH_MD5</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rc2"</literal></expr>, <expr><name>SSL_EN_RC2_128_CBC_WITH_MD5</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rc2export"</literal></expr>, <expr><name>SSL_EN_RC2_128_CBC_EXPORT40_WITH_MD5</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"des"</literal></expr>, <expr><name>SSL_EN_DES_64_CBC_WITH_MD5</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"desede3"</literal></expr>, <expr><name>SSL_EN_DES_192_EDE3_CBC_WITH_MD5</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rsa_rc4_128_md5"</literal></expr>, <expr><name>SSL_RSA_WITH_RC4_128_MD5</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rsa_rc4_128_sha"</literal></expr>, <expr><name>SSL_RSA_WITH_RC4_128_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rsa_3des_sha"</literal></expr>, <expr><name>SSL_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rsa_des_sha"</literal></expr>, <expr><name>SSL_RSA_WITH_DES_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rsa_rc4_40_md5"</literal></expr>, <expr><name>SSL_RSA_EXPORT_WITH_RC4_40_MD5</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rsa_rc2_40_md5"</literal></expr>, <expr><name>SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rsa_null_md5"</literal></expr>, <expr><name>SSL_RSA_WITH_NULL_MD5</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rsa_null_sha"</literal></expr>, <expr><name>SSL_RSA_WITH_NULL_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fips_3des_sha"</literal></expr>, <expr><name>SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fips_des_sha"</literal></expr>, <expr><name>SSL_RSA_FIPS_WITH_DES_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fortezza"</literal></expr>, <expr><name>SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fortezza_rc4_128_sha"</literal></expr>, <expr><name>SSL_FORTEZZA_DMS_WITH_RC4_128_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fortezza_null"</literal></expr>, <expr><name>SSL_FORTEZZA_DMS_WITH_NULL_SHA</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rsa_des_56_sha"</literal></expr>, <expr><name>TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rsa_rc4_56_sha"</literal></expr>, <expr><name>TLS_RSA_EXPORT1024_WITH_RC4_56_SHA</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dhe_dss_aes_128_cbc_sha"</literal></expr>, <expr><name>TLS_DHE_DSS_WITH_AES_128_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dhe_dss_aes_256_cbc_sha"</literal></expr>, <expr><name>TLS_DHE_DSS_WITH_AES_256_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dhe_rsa_aes_128_cbc_sha"</literal></expr>, <expr><name>TLS_DHE_RSA_WITH_AES_128_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dhe_rsa_aes_256_cbc_sha"</literal></expr>, <expr><name>TLS_DHE_RSA_WITH_AES_256_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rsa_aes_128_sha"</literal></expr>, <expr><name>TLS_RSA_WITH_AES_128_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rsa_aes_256_sha"</literal></expr>, <expr><name>TLS_RSA_WITH_AES_256_CBC_SHA</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ecdh_ecdsa_null_sha"</literal></expr>, <expr><name>TLS_ECDH_ECDSA_WITH_NULL_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdh_ecdsa_rc4_128_sha"</literal></expr>, <expr><name>TLS_ECDH_ECDSA_WITH_RC4_128_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdh_ecdsa_3des_sha"</literal></expr>, <expr><name>TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdh_ecdsa_aes_128_sha"</literal></expr>, <expr><name>TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdh_ecdsa_aes_256_sha"</literal></expr>, <expr><name>TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_ecdsa_null_sha"</literal></expr>, <expr><name>TLS_ECDHE_ECDSA_WITH_NULL_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_ecdsa_rc4_128_sha"</literal></expr>, <expr><name>TLS_ECDHE_ECDSA_WITH_RC4_128_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_ecdsa_3des_sha"</literal></expr>, <expr><name>TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_ecdsa_aes_128_sha"</literal></expr>, <expr><name>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_ecdsa_aes_256_sha"</literal></expr>, <expr><name>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdh_rsa_null_sha"</literal></expr>, <expr><name>TLS_ECDH_RSA_WITH_NULL_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdh_rsa_128_sha"</literal></expr>, <expr><name>TLS_ECDH_RSA_WITH_RC4_128_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdh_rsa_3des_sha"</literal></expr>, <expr><name>TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdh_rsa_aes_128_sha"</literal></expr>, <expr><name>TLS_ECDH_RSA_WITH_AES_128_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdh_rsa_aes_256_sha"</literal></expr>, <expr><name>TLS_ECDH_RSA_WITH_AES_256_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_rsa_null"</literal></expr>, <expr><name>TLS_ECDHE_RSA_WITH_NULL_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_rsa_rc4_128_sha"</literal></expr>, <expr><name>TLS_ECDHE_RSA_WITH_RC4_128_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_rsa_3des_sha"</literal></expr>, <expr><name>TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_rsa_aes_128_sha"</literal></expr>, <expr><name>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_rsa_aes_256_sha"</literal></expr>, <expr><name>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdh_anon_null_sha"</literal></expr>, <expr><name>TLS_ECDH_anon_WITH_NULL_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdh_anon_rc4_128sha"</literal></expr>, <expr><name>TLS_ECDH_anon_WITH_RC4_128_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdh_anon_3des_sha"</literal></expr>, <expr><name>TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdh_anon_aes_128_sha"</literal></expr>, <expr><name>TLS_ECDH_anon_WITH_AES_128_CBC_SHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdh_anon_aes_256_sha"</literal></expr>, <expr><name>TLS_ECDH_anon_WITH_AES_256_CBC_SHA</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS_RSA_WITH_NULL_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><literal type="string">"rsa_null_sha_256"</literal></expr>, <expr><name>TLS_RSA_WITH_NULL_SHA256</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rsa_aes_128_cbc_sha_256"</literal></expr>, <expr><name>TLS_RSA_WITH_AES_128_CBC_SHA256</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"rsa_aes_256_cbc_sha_256"</literal></expr>, <expr><name>TLS_RSA_WITH_AES_256_CBC_SHA256</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dhe_rsa_aes_128_cbc_sha_256"</literal></expr>, <expr><name>TLS_DHE_RSA_WITH_AES_128_CBC_SHA256</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dhe_rsa_aes_256_cbc_sha_256"</literal></expr>, <expr><name>TLS_DHE_RSA_WITH_AES_256_CBC_SHA256</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_ecdsa_aes_128_cbc_sha_256"</literal></expr>, <expr><name>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_rsa_aes_128_cbc_sha_256"</literal></expr>, <expr><name>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS_RSA_WITH_AES_128_GCM_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><literal type="string">"rsa_aes_128_gcm_sha_256"</literal></expr>, <expr><name>TLS_RSA_WITH_AES_128_GCM_SHA256</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dhe_rsa_aes_128_gcm_sha_256"</literal></expr>, <expr><name>TLS_DHE_RSA_WITH_AES_128_GCM_SHA256</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dhe_dss_aes_128_gcm_sha_256"</literal></expr>, <expr><name>TLS_DHE_DSS_WITH_AES_128_GCM_SHA256</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_ecdsa_aes_128_gcm_sha_256"</literal></expr>, <expr><name>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdh_ecdsa_aes_128_gcm_sha_256"</literal></expr>, <expr><name>TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_rsa_aes_128_gcm_sha_256"</literal></expr>, <expr><name>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdh_rsa_aes_128_gcm_sha_256"</literal></expr>, <expr><name>TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><literal type="string">"rsa_aes_256_gcm_sha_384"</literal></expr>, <expr><name>TLS_RSA_WITH_AES_256_GCM_SHA384</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dhe_rsa_aes_256_gcm_sha_384"</literal></expr>, <expr><name>TLS_DHE_RSA_WITH_AES_256_GCM_SHA384</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dhe_dss_aes_256_gcm_sha_384"</literal></expr>, <expr><name>TLS_DHE_DSS_WITH_AES_256_GCM_SHA384</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_ecdsa_aes_256_sha_384"</literal></expr>, <expr><name>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_rsa_aes_256_sha_384"</literal></expr>, <expr><name>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_ecdsa_aes_256_gcm_sha_384"</literal></expr>, <expr><name>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_rsa_aes_256_gcm_sha_384"</literal></expr>, <expr><name>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><literal type="string">"ecdhe_rsa_chacha20_poly1305_sha_256"</literal></expr>,
<expr><name>TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ecdhe_ecdsa_chacha20_poly1305_sha_256"</literal></expr>,
<expr><name>TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dhe_rsa_chacha20_poly1305_sha_256"</literal></expr>,
<expr><name>TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS_AES_256_GCM_SHA384</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"aes_128_gcm_sha_256"</literal></expr>, <expr><name>TLS_AES_128_GCM_SHA256</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"aes_256_gcm_sha_384"</literal></expr>, <expr><name>TLS_AES_256_GCM_SHA384</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"chacha20_poly1305_sha_256"</literal></expr>, <expr><name>TLS_CHACHA20_POLY1305_SHA256</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pem_library</name> <init>= <expr><literal type="string">"nsspem.dll"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>trust_library</name> <init>= <expr><literal type="string">"nssckbi.dll"</literal></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pem_library</name> <init>= <expr><literal type="string">"libnsspem.dylib"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>trust_library</name> <init>= <expr><literal type="string">"libnssckbi.dylib"</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pem_library</name> <init>= <expr><literal type="string">"libnsspem.so"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>trust_library</name> <init>= <expr><literal type="string">"libnssckbi.so"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>SECMODModule</name> <modifier>*</modifier></type><name>pem_module</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>SECMODModule</name> <modifier>*</modifier></type><name>trust_module</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>PRDescIdentity</name></type> <name>nspr_io_identity</name> <init>= <expr><name>PR_INVALID_IO_LAYER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRIOMethods</name></type> <name>nspr_io_methods</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nss_error_to_name</name><parameter_list>(<parameter><decl><type><name>PRErrorCode</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>PR_ErrorToName</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>name</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="string">"unknown error"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nss_print_error_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>PRUint32</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>PR_ErrorToString</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>PR_LANGUAGE_I_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>nss_sslver_to_name</name><parameter_list>(<parameter><decl><type><name>PRUint16</name></type> <name>nssver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>nssver</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SSL_LIBRARY_VERSION_2</name></expr>:</case>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"SSLv2"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>SSL_LIBRARY_VERSION_3_0</name></expr>:</case>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"SSLv3"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>SSL_LIBRARY_VERSION_TLS_1_0</name></expr>:</case>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"TLSv1.0"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_LIBRARY_VERSION_TLS_1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SSL_LIBRARY_VERSION_TLS_1_1</name></expr>:</case>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"TLSv1.1"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_LIBRARY_VERSION_TLS_1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SSL_LIBRARY_VERSION_TLS_1_2</name></expr>:</case>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"TLSv1.2"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_LIBRARY_VERSION_TLS_1_3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SSL_LIBRARY_VERSION_TLS_1_3</name></expr>:</case>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"TLSv1.3"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<return>return <expr><call><name>curl_maprintf</name><argument_list>(<argument><expr><literal type="string">"0x%04x"</literal></expr></argument>, <argument><expr><name>nssver</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SECStatus</name></type> <name>set_ciphers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>PRFileDesc</name> <modifier>*</modifier></type> <name>model</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cipher_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRBool</name></type> <name><name>cipher_state</name><index>[<expr><name>NUM_OF_CIPHERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRBool</name></type> <name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cipher</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>PRUint16</name></type> <name>num_implemented_ciphers</name> <init>= <expr><call><name>SSL_GetNumImplementedCiphers</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>PRUint16</name> <modifier>*</modifier></type><name>implemented_ciphers</name> <init>= <expr><call><name>SSL_GetImplementedCiphers</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>implemented_ciphers</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SECFailure</name></expr>;</return></block_content></block></if></if_stmt>





<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_implemented_ciphers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>SSL_CipherPrefSet</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name><name>implemented_ciphers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_OF_CIPHERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cipher_state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>PR_FALSE</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>cipher</name> <operator>=</operator> <name>cipher_list</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>cipher_list</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cipher_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>cipher</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>cipher</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>cipher</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>cipher_list</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>cipher_list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cipher_list</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>PR_FALSE</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>NUM_OF_CIPHERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>, <argument><expr><name><name>cipherlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cipher_state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>PR_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>PR_TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>found</name> <operator>==</operator> <name>PR_FALSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unknown cipher in list: %s"</literal></expr></argument>, <argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SECFailure</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>cipher_list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cipher</name> <operator>=</operator> <name>cipher_list</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>NUM_OF_CIPHERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>cipher_state</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CipherPrefSet</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name><name>cipherlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"cipher-suite not supported by NSS: %s"</literal></expr></argument>, <argument><expr><name><name>cipherlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SECFailure</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>SECSuccess</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>bool</name></type> <name>any_cipher_enabled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>NUM_OF_CIPHERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>PRInt32</name></type> <name>policy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SSL_CipherPolicyGet</name><argument_list>(<argument><expr><name><name>cipherlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>policy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>is_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>struct_stat</name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>filename</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISFIFO</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISCHR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dup_nickname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>is_file</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"warning: certificate file name \"%s\" handled as nickname; "</literal>
<literal type="string">"please use \"./%s\" to force file name\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>PK11SlotInfo</name><modifier>*</modifier></type> <name>nss_find_slot_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slot_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PK11SlotInfo</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PR_Lock</name><argument_list>(<argument><expr><name>nss_findslot_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>PK11_FindSlotByName</name><argument_list>(<argument><expr><name>slot_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name>nss_findslot_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>slot</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>insert_wrapped_ptr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_llist</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ptr_list_wrap</name></name> <modifier>*</modifier></type><name>wrap</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wrap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>wrap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wrap</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_llist_insert_next</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>tail</name></name></expr></argument>, <argument><expr><name>wrap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wrap</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>nss_create_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>,
<parameter><decl><type><name>CK_OBJECT_CLASS</name></type> <name>obj_class</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cacert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PK11SlotInfo</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PK11GenericObject</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CK_BBOOL</name></type> <name>cktrue</name> <init>= <expr><name>CK_TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CK_BBOOL</name></type> <name>ckfalse</name> <init>= <expr><name>CK_FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CK_ATTRIBUTE</name></type> <name><name>attrs</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cacert</name><operator>)</operator></expr>
?</condition><then> <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>
</then><else>: <expr><name>CURLE_SSL_CERTPROBLEM</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slot_id</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cacert</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slot_name</name> <init>= <expr><call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"PEM Token #%d"</literal></expr></argument>, <argument><expr><name>slot_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>slot_name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>nss_find_slot_by_name</name><argument_list>(<argument><expr><name>slot_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>slot_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>slot</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PK11_SETATTRS</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>attr_cnt</name></expr></argument>, <argument><expr><name>CKA_CLASS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj_class</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>obj_class</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PK11_SETATTRS</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>attr_cnt</name></expr></argument>, <argument><expr><name>CKA_TOKEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cktrue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CK_BBOOL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PK11_SETATTRS</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>attr_cnt</name></expr></argument>, <argument><expr><name>CKA_LABEL</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>filename</name></expr></argument>,
<argument><expr><operator>(</operator><name>CK_ULONG</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>CKO_CERTIFICATE</name> <operator>==</operator> <name>obj_class</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CK_BBOOL</name> <modifier>*</modifier></type><name>pval</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cacert</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>&amp;</operator><name>cktrue</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>&amp;</operator><name>ckfalse</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PK11_SETATTRS</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>attr_cnt</name></expr></argument>, <argument><expr><name>CKA_TRUST</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>obj</name> <operator>=</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PK11_CREATEMANAGEDGENERICOBJECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>PK11_CreateManagedGenericObject</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<call><name>PK11_CreateGenericObject</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>attr_cnt</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PK11_FreeSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>insert_wrapped_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>obj_list</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PK11_DestroyGenericObject</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cacert</name> <operator>&amp;&amp;</operator> <name>CKO_CERTIFICATE</name> <operator>==</operator> <name>obj_class</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>obj_clicert</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>nss_destroy_object</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ptr_list_wrap</name></name> <modifier>*</modifier></type><name>wrap</name> <init>= <expr><operator>(</operator>struct <name>ptr_list_wrap</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PK11GenericObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>(</operator><name>PK11GenericObject</name> <operator>*</operator><operator>)</operator> <name><name>wrap</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>user</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PK11_DestroyGenericObject</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wrap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>nss_destroy_crl_item</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ptr_list_wrap</name></name> <modifier>*</modifier></type><name>wrap</name> <init>= <expr><operator>(</operator>struct <name>ptr_list_wrap</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECItem</name> <modifier>*</modifier></type><name>crl_der</name> <init>= <expr><operator>(</operator><name>SECItem</name> <operator>*</operator><operator>)</operator> <name><name>wrap</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>user</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SECITEM_FreeItem</name><argument_list>(<argument><expr><name>crl_der</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wrap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>nss_load_cert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>PRBool</name></type> <name>cacert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cacert</name><operator>)</operator></expr>
?</condition><then> <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>
</then><else>: <expr><name>CURLE_SSL_CERTPROBLEM</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><call><name>is_file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nss_create_object</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>CKO_CERTIFICATE</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>cacert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cacert</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CERTCertificate</name> <modifier>*</modifier></type><name>cert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nickname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>nickname</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"PEM Token #1:%s"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>nickname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cert</name> <operator>=</operator> <call><name>PK11_FindCertFromNickname</name><argument_list>(<argument><expr><name>nickname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>cert</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nickname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>nss_cache_crl</name><parameter_list>(<parameter><decl><type><name>SECItem</name> <modifier>*</modifier></type><name>crl_der</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CERTCertDBHandle</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CERTSignedCrl</name> <modifier>*</modifier></type><name>crl</name> <init>= <expr><call><name>SEC_FindCrlByDERCert</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>crl_der</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>crl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SEC_DestroyCrl</name><argument_list>(<argument><expr><name>crl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SECITEM_FreeItem</name><argument_list>(<argument><expr><name>crl_der</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>PR_Lock</name><argument_list>(<argument><expr><name>nss_crllock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>SECSuccess</name> <operator>!=</operator> <call><name>CERT_CacheCRL</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>crl_der</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SECITEM_FreeItem</name><argument_list>(<argument><expr><name>crl_der</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name>nss_crllock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CRL_BADFILE</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>insert_wrapped_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nss_crl_list</name></expr></argument>, <argument><expr><name>crl_der</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>SECSuccess</name> <operator>==</operator> <call><name>CERT_UncacheCRL</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>crl_der</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SECITEM_FreeItem</name><argument_list>(<argument><expr><name>crl_der</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name>nss_crllock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>SSL_ClearSessionCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name>nss_crllock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>nss_load_crl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>crlfilename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PRFileDesc</name> <modifier>*</modifier></type><name>infile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRFileInfo</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECItem</name></type> <name>filedata</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECItem</name> <modifier>*</modifier></type><name>crl_der</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>body</name></decl>;</decl_stmt>

<expr_stmt><expr><name>infile</name> <operator>=</operator> <call><name>PR_Open</name><argument_list>(<argument><expr><name>crlfilename</name></expr></argument>, <argument><expr><name>PR_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>infile</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_SSL_CRL_BADFILE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>PR_SUCCESS</name> <operator>!=</operator> <call><name>PR_GetOpenFileInfo</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SECITEM_AllocItem</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filedata</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>info</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <call><name>PR_Read</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><name><name>filedata</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>crl_der</name> <operator>=</operator> <call><name>SECITEM_AllocItem</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>crl_der</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>body</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>filedata</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>body</name><index>[<expr><operator>--</operator><name><name>filedata</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>body</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><literal type="string">"-----BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>body</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>trailer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>begin</name> <init>= <expr><call><name>PORT_Strchr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>begin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>PORT_Strchr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>begin</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>trailer</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>++</operator><name>begin</name></expr></argument>, <argument><expr><literal type="string">"-----END"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>trailer</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>trailer</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>ATOB_ConvertAsciiToItem</name><argument_list>(<argument><expr><name>crl_der</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SECITEM_FreeItem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filedata</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>crl_der</name> <operator>=</operator> <name>filedata</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>PR_Close</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>nss_cache_crl</name><argument_list>(<argument><expr><name>crl_der</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>PR_Close</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SECITEM_FreeItem</name><argument_list>(<argument><expr><name>crl_der</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SECITEM_FreeItem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filedata</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CRL_BADFILE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>nss_load_key</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key_file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PK11SlotInfo</name> <modifier>*</modifier></type><name>slot</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECStatus</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>ssl</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockindex</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nss_create_object</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>CKO_PRIVATE_KEY</name></expr></argument>, <argument><expr><name>key_file</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PR_SetError</name><argument_list>(<argument><expr><name>SEC_ERROR_BAD_KEY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>nss_find_slot_by_name</name><argument_list>(<argument><expr><literal type="string">"PEM Token #1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>slot</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>SECMOD_WaitForAnyTokenEvent</name><argument_list>(<argument><expr><name>pem_module</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PK11_FreeSlot</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>PK11_IsPresent</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PK11_FreeSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>PK11_Authenticate</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key_passwd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PK11_FreeSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>SECSuccess</name> <operator>==</operator> <name>status</name><operator>)</operator></expr> ?</condition><then> <expr><name>CURLE_OK</name></expr> </then><else>: <expr><name>CURLE_SSL_CERTPROBLEM</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>display_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>PRInt32</name></type> <name>err</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SEC_ERROR_BAD_PASSWORD</name></expr>:</case>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Unable to load client key: Incorrect password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>SEC_ERROR_UNKNOWN_CERT</name></expr>:</case>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Unable to load certificate %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>cert_stuff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cert_file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key_file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>cert_file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nss_load_cert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><name>cert_file</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>PRErrorCode</name></type> <name>err</name> <init>= <expr><call><name>PR_GetError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>display_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>cert_file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_name</name> <init>= <expr><call><name>nss_error_to_name</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unable to load client cert: %d (%s)"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>key_file</name> <operator>||</operator> <operator>(</operator><call><name>is_file</name><argument_list>(<argument><expr><name>cert_file</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>key_file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nss_load_key</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>key_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nss_load_key</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>cert_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>PRErrorCode</name></type> <name>err</name> <init>= <expr><call><name>PR_GetError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>display_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>key_file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_name</name> <init>= <expr><call><name>nss_error_to_name</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unable to load client key: %d (%s)"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>nss_get_password</name><parameter_list>(<parameter><decl><type><name>PK11SlotInfo</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>PRBool</name></type> <name>retry</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>slot</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>retry</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>PORT_Strdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>SECStatus</name></type> <name>nss_auth_cert_hook</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PRFileDesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>PRBool</name></type> <name>checksig</name></decl></parameter>,
<parameter><decl><type><name>PRBool</name></type> <name>isServer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator>struct <name>connectdata</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_ENABLE_OCSP_STAPLING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifystatus</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SECStatus</name></type> <name>cacheResult</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SECItemArray</name> <modifier>*</modifier></type><name>csa</name> <init>= <expr><call><name>SSL_PeerStapledOCSPResponses</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>csa</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid OCSP response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SECFailure</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>csa</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"No OCSP response received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SECFailure</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cacheResult</name> <operator>=</operator> <call><name>CERT_CacheOCSPResponseFromSideChannel</name><argument_list>(
<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>SSL_PeerCertificate</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>PR_Now</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>csa</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cacheResult</name> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid OCSP response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cacheResult</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"skipping SSL peer certificate verification\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SECSuccess</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>SSL_AuthCertificate</name><argument_list>(<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>checksig</name></expr></argument>, <argument><expr><name>isServer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>HandshakeCallback</name><parameter_list>(<parameter><decl><type><name>PRFileDesc</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator>struct <name>connectdata</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buflenmax</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLNextProtoState</name></type> <name>state</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_npn</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_alpn</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_GetNextProto</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>, <argument><expr><name>buflenmax</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SECSuccess</name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NSSVERNUM</name> <operator>&gt;=</operator> <literal type="number">0x031a00</literal></expr></cpp:if> 

<case>case <expr><name>SSL_NEXT_PROTO_EARLY_VALUE</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>SSL_NEXT_PROTO_NO_SUPPORT</name></expr>:</case>
<case>case <expr><name>SSL_NEXT_PROTO_NO_OVERLAP</name></expr>:</case>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"ALPN/NPN, server did not agree to a protocol\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_ENABLE_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SSL_NEXT_PROTO_SELECTED</name></expr>:</case>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"ALPN, server accepted to use %.*s\n"</literal></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>SSL_NEXT_PROTO_NEGOTIATED</name></expr>:</case>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"NPN, server accepted to use %.*s\n"</literal></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>buflen</name> <operator>==</operator> <name>NGHTTP2_PROTO_VERSION_ID_LEN</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NGHTTP2_PROTO_VERSION_ID_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_2</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if<condition>(<expr><name>buflen</name> <operator>==</operator> <name>ALPN_HTTP_1_1_LENGTH</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1_LENGTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_1_1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Curl_multiuse_state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>==</operator> <name>CURL_HTTP_VERSION_2</name></expr> ?</condition><then>
<expr><name>BUNDLE_MULTIPLEX</name></expr> </then><else>: <expr><name>BUNDLE_NO_MULTIUSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NSSVERNUM</name> <operator>&gt;=</operator> <literal type="number">0x030f04</literal></expr></cpp:if> 
<function><type><specifier>static</specifier> <name>SECStatus</name></type> <name>CanFalseStartCallback</name><parameter_list>(<parameter><decl><type><name>PRFileDesc</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_data</name></decl></parameter>,
<parameter><decl><type><name>PRBool</name> <modifier>*</modifier></type><name>canFalseStart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>client_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SSLChannelInfo</name></type> <name>channelInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLCipherSuiteInfo</name></type> <name>cipherInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECStatus</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRBool</name></type> <name>negotiatedExtension</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>canFalseStart</name> <operator>=</operator> <name>PR_FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_GetChannelInfo</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channelInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>channelInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SECFailure</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_GetCipherSuiteInfo</name><argument_list>(<argument><expr><name><name>channelInfo</name><operator>.</operator><name>cipherSuite</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cipherInfo</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cipherInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SECFailure</name></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if<condition>(<expr><name><name>channelInfo</name><operator>.</operator><name>protocolVersion</name></name> <operator>!=</operator> <name>SSL_LIBRARY_VERSION_TLS_1_2</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><name><name>cipherInfo</name><operator>.</operator><name>keaType</name></name> <operator>!=</operator> <name>ssl_kea_ecdh</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>




<if_stmt><if>if<condition>(<expr><name><name>cipherInfo</name><operator>.</operator><name>symCipher</name></name> <operator>!=</operator> <name>ssl_calg_aes_gcm</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>



<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>SSL_HandshakeNegotiatedExtension</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>ssl_app_layer_protocol_xtn</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>negotiatedExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>!=</operator> <name>SECSuccess</name> <operator>||</operator> <operator>!</operator><name>negotiatedExtension</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>SSL_HandshakeNegotiatedExtension</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>ssl_next_proto_nego_xtn</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>negotiatedExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>!=</operator> <name>SECSuccess</name> <operator>||</operator> <operator>!</operator><name>negotiatedExtension</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>canFalseStart</name> <operator>=</operator> <name>PR_TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Trying TLS False Start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<return>return <expr><name>SECSuccess</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>display_cert_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>CERTCertificate</name> <modifier>*</modifier></type><name>cert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subject</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>issuer</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>common_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRExplodedTime</name></type> <name>printableTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>timeString</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRTime</name></type> <name>notBefore</name></decl>, <decl><type ref="prev"/><name>notAfter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>subject</name> <operator>=</operator> <call><name>CERT_NameToAscii</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>-&gt;</operator><name>subject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>issuer</name> <operator>=</operator> <call><name>CERT_NameToAscii</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>-&gt;</operator><name>issuer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>common_name</name> <operator>=</operator> <call><name>CERT_GetCommonName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>-&gt;</operator><name>subject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\tsubject: %s\n"</literal></expr></argument>, <argument><expr><name>subject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CERT_GetCertTimes</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>notBefore</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>notAfter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PR_ExplodeTime</name><argument_list>(<argument><expr><name>notBefore</name></expr></argument>, <argument><expr><name>PR_GMTParameters</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>printableTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PR_FormatTime</name><argument_list>(<argument><expr><name>timeString</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="string">"%b %d %H:%M:%S %Y GMT"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>printableTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\tstart date: %s\n"</literal></expr></argument>, <argument><expr><name>timeString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PR_ExplodeTime</name><argument_list>(<argument><expr><name>notAfter</name></expr></argument>, <argument><expr><name>PR_GMTParameters</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>printableTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PR_FormatTime</name><argument_list>(<argument><expr><name>timeString</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="string">"%b %d %H:%M:%S %Y GMT"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>printableTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\texpire date: %s\n"</literal></expr></argument>, <argument><expr><name>timeString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\tcommon name: %s\n"</literal></expr></argument>, <argument><expr><name>common_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\tissuer: %s\n"</literal></expr></argument>, <argument><expr><name>issuer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PR_Free</name><argument_list>(<argument><expr><name>subject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PR_Free</name><argument_list>(<argument><expr><name>issuer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PR_Free</name><argument_list>(<argument><expr><name>common_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>display_conn_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>PRFileDesc</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLChannelInfo</name></type> <name>channel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLCipherSuiteInfo</name></type> <name>suite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CERTCertificate</name> <modifier>*</modifier></type><name>cert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CERTCertificate</name> <modifier>*</modifier></type><name>cert2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CERTCertificate</name> <modifier>*</modifier></type><name>cert3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRTime</name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_GetChannelInfo</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channel</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator>
<name>SECSuccess</name> <operator>&amp;&amp;</operator> <name><name>channel</name><operator>.</operator><name>length</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>
<name><name>channel</name><operator>.</operator><name>cipherSuite</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>SSL_GetCipherSuiteInfo</name><argument_list>(<argument><expr><name><name>channel</name><operator>.</operator><name>cipherSuite</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>suite</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>suite</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>SECSuccess</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SSL connection using %s\n"</literal></expr></argument>, <argument><expr><name><name>suite</name><operator>.</operator><name>cipherSuiteName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cert</name> <operator>=</operator> <call><name>SSL_PeerCertificate</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>cert</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Server certificate:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>display_cert_info</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>PR_Now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>cert</name><operator>-&gt;</operator><name>isRoot</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cert2</name> <operator>=</operator> <call><name>CERT_FindCertIssuer</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>certUsageSSLCA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>cert2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>cert2</name><operator>-&gt;</operator><name>isRoot</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>cert2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cert3</name> <operator>=</operator> <call><name>CERT_FindCertIssuer</name><argument_list>(<argument><expr><name>cert2</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>certUsageSSLCA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>cert2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cert2</name> <operator>=</operator> <name>cert3</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ssl_init_certinfo</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cert</name></expr>;</condition> <incr><expr><name>cert</name> <operator>=</operator> <name>cert2</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_extract_certinfo</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>cert</name><operator>-&gt;</operator><name>derCert</name><operator>.</operator><name>data</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>cert</name><operator>-&gt;</operator><name>derCert</name><operator>.</operator><name>data</name></name> <operator>+</operator>
<name><name>cert</name><operator>-&gt;</operator><name>derCert</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cert</name><operator>-&gt;</operator><name>isRoot</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cert2</name> <operator>=</operator> <call><name>CERT_FindCertIssuer</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>certUsageSSLCA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SECStatus</name></type> <name>BadCertHandler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PRFileDesc</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator>struct <name>connectdata</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRErrorCode</name></type> <name>err</name> <init>= <expr><call><name>PR_GetError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CERTCertificate</name> <modifier>*</modifier></type><name>cert</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>certverifyresult</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certverifyresult</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>SSL_ERROR_BAD_CERT_DOMAIN</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifyhost</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>SECSuccess</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>cert</name> <operator>=</operator> <call><name>SSL_PeerCertificate</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>cert</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Server certificate:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>display_cert_info</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>SECFailure</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>SECStatus</name></type> <name>check_issuer_cert</name><parameter_list>(<parameter><decl><type><name>PRFileDesc</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>issuer_nickname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CERTCertificate</name> <modifier>*</modifier></type><name>cert</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cert_issuer</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>issuer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECStatus</name></type> <name>res</name> <init>= <expr><name>SECSuccess</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>proto_win</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cert</name> <operator>=</operator> <call><name>SSL_PeerCertificate</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cert_issuer</name> <operator>=</operator> <call><name>CERT_FindCertIssuer</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><call><name>PR_Now</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>certUsageObjectSigner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>proto_win</name> <operator>=</operator> <call><name>SSL_RevealPinArg</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>issuer</name> <operator>=</operator> <call><name>PK11_FindCertFromNickname</name><argument_list>(<argument><expr><name>issuer_nickname</name></expr></argument>, <argument><expr><name>proto_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>!</operator><name>cert_issuer</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>issuer</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>SECFailure</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>SECITEM_CompareItem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert_issuer</name><operator>-&gt;</operator><name>derCert</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>issuer</name><operator>-&gt;</operator><name>derCert</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECEqual</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>SECFailure</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>issuer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>cert_issuer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>cmp_peer_pubkey</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pinnedpubkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_SSL_PINNEDPUBKEYNOTMATCH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CERTCertificate</name> <modifier>*</modifier></type><name>cert</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pinnedpubkey</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>cert</name> <operator>=</operator> <call><name>SSL_PeerCertificate</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>cert</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SECKEYPublicKey</name> <modifier>*</modifier></type><name>pubkey</name> <init>= <expr><call><name>CERT_ExtractPublicKey</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>pubkey</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SECItem</name> <modifier>*</modifier></type><name>cert_der</name> <init>= <expr><call><name>PK11_DEREncodePublicKey</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>cert_der</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pin_peer_pubkey</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pinnedpubkey</name></expr></argument>, <argument><expr><name><name>cert_der</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><name><name>cert_der</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SECITEM_FreeItem</name><argument_list>(<argument><expr><name>cert_der</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SECKEY_DestroyPublicKey</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<switch>switch<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLE_OK</name></expr>:</case>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"pinned public key verified successfully!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLE_SSL_PINNEDPUBKEYNOTMATCH</name></expr>:</case>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed to verify pinned public key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>SECStatus</name></type> <name>SelectClientCert</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PRFileDesc</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>CERTDistNamesStr</name></name> <modifier>*</modifier></type><name>caNames</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>CERTCertificateStr</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pRetCert</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>SECKEYPrivateKeyStr</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pRetKey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>(</operator>struct <name>ssl_connect_data</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nickname</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>client_nickname</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pem_slotname</name><index>[]</index></name> <init>= <expr><literal type="string">"PEM Token #1"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>obj_clicert</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SECItem</name></type> <name>cert_der</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>proto_win</name> <init>= <expr><call><name>SSL_RevealPinArg</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>CERTCertificateStr</name></name> <modifier>*</modifier></type><name>cert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SECKEYPrivateKeyStr</name></name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PK11SlotInfo</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>nss_find_slot_by_name</name><argument_list>(<argument><expr><name>pem_slotname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>slot</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NSS: PK11 slot not found: %s"</literal></expr></argument>, <argument><expr><name>pem_slotname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SECFailure</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>PK11_ReadRawAttribute</name><argument_list>(<argument><expr><name>PK11_TypeGeneric</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>obj_clicert</name></name></expr></argument>, <argument><expr><name>CKA_VALUE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cert_der</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NSS: CKA_VALUE not found in PK11 generic object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PK11_FreeSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SECFailure</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cert</name> <operator>=</operator> <call><name>PK11_FindCertFromDERCertItem</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cert_der</name></expr></argument>, <argument><expr><name>proto_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SECITEM_FreeItem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cert_der</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>cert</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NSS: client certificate from file not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PK11_FreeSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SECFailure</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>PK11_FindPrivateKeyFromCert</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PK11_FreeSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NSS: private key from file not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SECFailure</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NSS: client certificate from file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>display_cert_info</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pRetCert</name> <operator>=</operator> <name>cert</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pRetKey</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<return>return <expr><name>SECSuccess</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>SECSuccess</name> <operator>!=</operator> <call><name>NSS_GetClientAuthData</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>nickname</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>caNames</name></expr></argument>,
<argument><expr><name>pRetCert</name></expr></argument>, <argument><expr><name>pRetKey</name></expr></argument>)</argument_list></call>
<operator>||</operator> <name>NULL</name> <operator>==</operator> <operator>*</operator><name>pRetCert</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>nickname</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NSS: client certificate not found (nickname not "</literal>
<literal type="string">"specified)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NSS: client certificate not found: %s"</literal></expr></argument>, <argument><expr><name>nickname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>SECFailure</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>nickname</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>pRetCert</name><operator>)</operator><operator>-&gt;</operator><name>nickname</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>nickname</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nickname</name> <operator>=</operator> <literal type="string">"[unknown]"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>nickname</name></expr></argument>, <argument><expr><name>pem_slotname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pem_slotname</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NSS: refusing previously loaded certificate from file: %s"</literal></expr></argument>,
<argument><expr><name>nickname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SECFailure</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pRetKey</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NSS: private key not found for certificate: %s"</literal></expr></argument>, <argument><expr><name>nickname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SECFailure</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NSS: using client certificate: %s\n"</literal></expr></argument>, <argument><expr><name>nickname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>display_cert_info</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>*</operator><name>pRetCert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SECSuccess</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>nss_update_connecting_state</name><parameter_list>(<parameter><decl><type><name>ssl_connect_state</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>(</operator>struct <name>ssl_connect_data</name> <operator>*</operator><operator>)</operator><name>secret</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>PR_GetError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>PR_WOULD_BLOCK_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ssl_connect_2</name></expr>:</case>
<case>case <expr><name>ssl_connect_2_reading</name></expr>:</case>
<case>case <expr><name>ssl_connect_2_writing</name></expr>:</case>
<break>break;</break>
<default>default:</default>

<return>return;</return>
</block_content>}</block></switch>


<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>PRInt32</name></type> <name>nspr_io_recv</name><parameter_list>(<parameter><decl><type><name>PRFileDesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>PRInt32</name></type> <name>amount</name></decl></parameter>,
<parameter><decl><type><name>PRIntn</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>PRIntervalTime</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>PRRecvFN</name></type> <name>recv_fn</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>lower</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>recv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>PRInt32</name></type> <name>rv</name> <init>= <expr><call><name>recv_fn</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nss_update_connecting_state</name><argument_list>(<argument><expr><name>ssl_connect_2_reading</name></expr></argument>, <argument><expr><name><name>fd</name><operator>-&gt;</operator><name>secret</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>PRInt32</name></type> <name>nspr_io_send</name><parameter_list>(<parameter><decl><type><name>PRFileDesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>PRInt32</name></type> <name>amount</name></decl></parameter>,
<parameter><decl><type><name>PRIntn</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>PRIntervalTime</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>PRSendFN</name></type> <name>send_fn</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>lower</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>send</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>PRInt32</name></type> <name>rv</name> <init>= <expr><call><name>send_fn</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nss_update_connecting_state</name><argument_list>(<argument><expr><name>ssl_connect_2_writing</name></expr></argument>, <argument><expr><name><name>fd</name><operator>-&gt;</operator><name>secret</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>PRStatus</name></type> <name>nspr_io_close</name><parameter_list>(<parameter><decl><type><name>PRFileDesc</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>PRCloseFN</name></type> <name>close_fn</name> <init>= <expr><call><name>PR_GetDefaultIOMethods</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>close</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>secret</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><call><name>close_fn</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>nss_load_module</name><parameter_list>(<parameter><decl><type><name>SECMODModule</name> <modifier>*</modifier><modifier>*</modifier></type><name>pmod</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>library</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>config_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECMODModule</name> <modifier>*</modifier></type><name>module</name> <init>= <expr><operator>*</operator><name>pmod</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>module</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>config_string</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"library=%s name=%s"</literal></expr></argument>, <argument><expr><name>library</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>config_string</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>module</name> <operator>=</operator> <call><name>SECMOD_LoadUserModule</name><argument_list>(<argument><expr><name>config_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>config_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>module</name> <operator>&amp;&amp;</operator> <name><name>module</name><operator>-&gt;</operator><name>loaded</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pmod</name> <operator>=</operator> <name>module</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>module</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SECMOD_DestroyModule</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>nss_unload_module</name><parameter_list>(<parameter><decl><type><name>SECMODModule</name> <modifier>*</modifier><modifier>*</modifier></type><name>pmod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SECMODModule</name> <modifier>*</modifier></type><name>module</name> <init>= <expr><operator>*</operator><name>pmod</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>module</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SECMOD_UnloadUserModule</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SECMOD_DestroyModule</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pmod</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>nss_init_core</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cert_dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NSSInitParameters</name></type> <name>initparams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRErrorCode</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_name</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>nss_context</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>initparams</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>initparams</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>initparams</name><operator>.</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>initparams</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cert_dir</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>certpath</name> <init>= <expr><call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"sql:%s"</literal></expr></argument>, <argument><expr><name>cert_dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>certpath</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Initializing NSS with certpath: %s\n"</literal></expr></argument>, <argument><expr><name>certpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nss_context</name> <operator>=</operator> <call><name>NSS_InitContext</name><argument_list>(<argument><expr><name>certpath</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>initparams</name></expr></argument>,
<argument><expr><name>NSS_INIT_READONLY</name> <operator>|</operator> <name>NSS_INIT_PK11RELOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>certpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nss_context</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>PR_GetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err_name</name> <operator>=</operator> <call><name>nss_error_to_name</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unable to initialize NSS database: %d (%s)\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Initializing NSS with certpath: none\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nss_context</name> <operator>=</operator> <call><name>NSS_InitContext</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>initparams</name></expr></argument>, <argument><expr><name>NSS_INIT_READONLY</name>
<operator>|</operator> <name>NSS_INIT_NOCERTDB</name> <operator>|</operator> <name>NSS_INIT_NOMODDB</name> <operator>|</operator> <name>NSS_INIT_FORCEOPEN</name>
<operator>|</operator> <name>NSS_INIT_NOROOTINIT</name> <operator>|</operator> <name>NSS_INIT_OPTIMIZESPACE</name> <operator>|</operator> <name>NSS_INIT_PK11RELOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>nss_context</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>PR_GetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err_name</name> <operator>=</operator> <call><name>nss_error_to_name</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unable to initialize NSS: %d (%s)"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>nss_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cert_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>struct_stat</name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>initialized</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>Curl_llist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nss_crl_list</name></expr></argument>, <argument><expr><name>nss_destroy_crl_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>cert_dir</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"SSL_DIR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>cert_dir</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>stat</name><argument_list>(<argument><expr><name>cert_dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cert_dir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cert_dir</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>stat</name><argument_list>(<argument><expr><name>SSL_DIR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cert_dir</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>SSL_DIR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nspr_io_identity</name> <operator>==</operator> <name>PR_INVALID_IO_LAYER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nspr_io_identity</name> <operator>=</operator> <call><name>PR_GetUniqueIdentity</name><argument_list>(<argument><expr><literal type="string">"libcurl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>nspr_io_identity</name> <operator>==</operator> <name>PR_INVALID_IO_LAYER</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nspr_io_methods</name></expr></argument>, <argument><expr><call><name>PR_GetDefaultIOMethods</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nspr_io_methods</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>nspr_io_methods</name><operator>.</operator><name>recv</name></name> <operator>=</operator> <name>nspr_io_recv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nspr_io_methods</name><operator>.</operator><name>send</name></name> <operator>=</operator> <name>nspr_io_send</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nspr_io_methods</name><operator>.</operator><name>close</name></name> <operator>=</operator> <name>nspr_io_close</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nss_init_core</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cert_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>any_cipher_enabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>NSS_SetDomesticPolicy</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_nss_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>nss_initlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PR_Init</name><argument_list>(<argument><expr><name>PR_USER_THREAD</name></expr></argument>, <argument><expr><name>PR_PRIORITY_NORMAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nss_initlock</name> <operator>=</operator> <call><name>PR_NewLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nss_crllock</name> <operator>=</operator> <call><name>PR_NewLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nss_findslot_lock</name> <operator>=</operator> <call><name>PR_NewLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nss_trustload_lock</name> <operator>=</operator> <call><name>PR_NewLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>CURLcode</name></type> <name>Curl_nss_force_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nss_initlock</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unable to initialize NSS, curl_global_init() should have "</literal>
<literal type="string">"been called with CURL_GLOBAL_SSL or CURL_GLOBAL_ALL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PR_Lock</name><argument_list>(<argument><expr><name>nss_initlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nss_init</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name>nss_initlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_nss_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>



<expr_stmt><expr><call><name>PR_Lock</name><argument_list>(<argument><expr><name>nss_initlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>initialized</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>SSL_ClearSessionCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nss_unload_module</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pem_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nss_unload_module</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trust_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NSS_ShutdownContext</name><argument_list>(<argument><expr><name>nss_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nss_context</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>Curl_llist_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nss_crl_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name>nss_initlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PR_DestroyLock</name><argument_list>(<argument><expr><name>nss_initlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PR_DestroyLock</name><argument_list>(<argument><expr><name>nss_crllock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PR_DestroyLock</name><argument_list>(<argument><expr><name>nss_findslot_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PR_DestroyLock</name><argument_list>(<argument><expr><name>nss_trustload_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nss_initlock</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_nss_check_cxn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator>
<call><name>PR_Recv</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>PR_MSG_PEEK</name></expr></argument>,
<argument><expr><call><name>PR_SecondsToInterval</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nss_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>client_cert</name> <init>= <expr><operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>client_nickname</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>obj_clicert</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>client_nickname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>client_nickname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_llist_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>obj_list</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>obj_clicert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>client_cert</name></expr>)</condition><block type="pseudo"><block_content>




<expr_stmt><expr><call><name>SSL_InvalidateSession</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PR_Close</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_nss_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl_proxy</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name> <operator>||</operator> <name><name>connssl_proxy</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>fake_sclose</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><name><name>connssl_proxy</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>nss_close</name><argument_list>(<argument><expr><name>connssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nss_close</name><argument_list>(<argument><expr><name>connssl_proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_nss_error</name><parameter_list>(<parameter><decl><type><name>CURLcode</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>:</case>
<case>case <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>:</case>
<case>case <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>:</case>
<case>case <expr><name>CURLE_SSL_ISSUER_ERROR</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>

<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_cc_error</name><parameter_list>(<parameter><decl><type><name>PRInt32</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SSL_ERROR_BAD_CERT_ALERT</name></expr>:</case>
<case>case <expr><name>SSL_ERROR_EXPIRED_CERT_ALERT</name></expr>:</case>
<case>case <expr><name>SSL_ERROR_REVOKED_CERT_ALERT</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>

<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_recv</name></type> <name>nss_recv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_send</name></type> <name>nss_send</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>nss_load_ca_certificates</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cafile</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>capath</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CApath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>use_trust_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>cafile</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cafile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cafile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>capath</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>capath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>capath</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" CAfile: %s\n CApath: %s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>cafile</name></expr> ?</condition><then> <expr><name>cafile</name></expr> </then><else>: <expr><literal type="string">"none"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>capath</name></expr> ?</condition><then> <expr><name>capath</name></expr> </then><else>: <expr><literal type="string">"none"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>use_trust_module</name> <operator>=</operator> <operator>!</operator><name>cafile</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>capath</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PR_Lock</name><argument_list>(<argument><expr><name>nss_trustload_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>use_trust_module</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>trust_module</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nss_load_module</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trust_module</name></expr></argument>, <argument><expr><name>trust_library</name></expr></argument>, <argument><expr><literal type="string">"trust"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>result</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"failed to load"</literal></expr> </then><else>: <expr><literal type="string">"loaded"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>trust_library</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_FAILED_INIT</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name>use_trust_module</name> <operator>&amp;&amp;</operator> <name>trust_module</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unloading %s\n"</literal></expr></argument>, <argument><expr><name>trust_library</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nss_unload_module</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trust_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name>nss_trustload_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cafile</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nss_load_cert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><name>cafile</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>capath</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>struct_stat</name></type> <name>st</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>capath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PRDirEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>PR_OpenDir</name><argument_list>(<argument><expr><name>capath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>PR_ReadDir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>PR_SKIP_BOTH</name> <operator>|</operator> <name>PR_SKIP_HIDDEN</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullpath</name> <init>= <expr><call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>capath</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fullpath</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PR_CloseDir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>CURLE_OK</name> <operator>!=</operator> <call><name>nss_load_cert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><name>fullpath</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed to load '%s' from CURLOPT_CAPATH\n"</literal></expr></argument>, <argument><expr><name>fullpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fullpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>PR_CloseDir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"warning: CURLOPT_CAPATH not a directory (%s)\n"</literal></expr></argument>, <argument><expr><name>capath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>nss_sslver_from_curl</name><parameter_list>(<parameter><decl><type><name>PRUint16</name> <modifier>*</modifier></type><name>nssver</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>version</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_SSLVERSION_SSLv2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>nssver</name> <operator>=</operator> <name>SSL_LIBRARY_VERSION_2</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_SSLv3</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>nssver</name> <operator>=</operator> <name>SSL_LIBRARY_VERSION_3_0</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>nssver</name> <operator>=</operator> <name>SSL_LIBRARY_VERSION_TLS_1_0</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_LIBRARY_VERSION_TLS_1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>nssver</name> <operator>=</operator> <name>SSL_LIBRARY_VERSION_TLS_1_1</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_LIBRARY_VERSION_TLS_1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>nssver</name> <operator>=</operator> <name>SSL_LIBRARY_VERSION_TLS_1_2</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_LIBRARY_VERSION_TLS_1_3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>nssver</name> <operator>=</operator> <name>SSL_LIBRARY_VERSION_TLS_1_3</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>nss_init_sslver</name><parameter_list>(<parameter><decl><type><name>SSLVersionRange</name> <modifier>*</modifier></type><name>sslver</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>min</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>max</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version_max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLVersionRange</name></type> <name>vrange</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>min</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_SSLVERSION_TLSv1</name></expr>:</case>
<case>case <expr><name>CURL_SSLVERSION_DEFAULT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>SSL_VersionRangeGetDefault</name><argument_list>(<argument><expr><name>ssl_variant_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vrange</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>sslver</name><operator>-&gt;</operator><name>min</name></name> <operator>&lt;</operator> <name><name>vrange</name><operator>.</operator><name>min</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sslver</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name><name>vrange</name><operator>.</operator><name>min</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nss_sslver_from_curl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sslver</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unsupported min version passed via CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>

<switch>switch<condition>(<expr><name>max</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_SSLVERSION_MAX_NONE</name></expr>:</case>
<case>case <expr><name>CURL_SSLVERSION_MAX_DEFAULT</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nss_sslver_from_curl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sslver</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><name>max</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unsupported max version passed via CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>nss_fail_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>CURLcode</name></type> <name>curlerr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PRErrorCode</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>is_nss_error</name><argument_list>(<argument><expr><name>curlerr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>PR_GetError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>is_cc_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curlerr</name> <operator>=</operator> <name>CURLE_SSL_CERTPROBLEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NSS error %d (%s)\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>nss_error_to_name</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>nss_print_error_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>Curl_llist_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>obj_list</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>curlerr</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>nss_set_blocking</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>blocking</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRSocketOptionData</name></type> <name>sock_opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sock_opt</name><operator>.</operator><name>option</name></name> <operator>=</operator> <name>PR_SockOpt_Nonblocking</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock_opt</name><operator>.</operator><name>value</name><operator>.</operator><name>non_blocking</name></name> <operator>=</operator> <operator>!</operator><name>blocking</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>PR_SetSocketOption</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sock_opt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>nss_fail_connect</name><argument_list>(<argument><expr><name>connssl</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLE_SSL_CONNECT_ERROR</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>nss_setup_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PRFileDesc</name> <modifier>*</modifier></type><name>model</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRFileDesc</name> <modifier>*</modifier></type><name>nspr_io</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRFileDesc</name> <modifier>*</modifier></type><name>nspr_io_stub</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRBool</name></type> <name>ssl_no_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRBool</name></type> <name>ssl_cbc_random_iv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>second_layer</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLVersionRange</name></type> <name>sslver_supported</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SSLVersionRange</name></type> <name>sslver</name> <init>= <expr><block>{
<expr><name>SSL_LIBRARY_VERSION_TLS_1_0</name></expr>, 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_LIBRARY_VERSION_TLS_1_3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>SSL_LIBRARY_VERSION_TLS_1_3</name> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>SSL_LIBRARY_VERSION_TLS_1_2</name></expr></cpp:elif>
<name>SSL_LIBRARY_VERSION_TLS_1_2</name>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>SSL_LIBRARY_VERSION_TLS_1_1</name></expr></cpp:elif>
<name>SSL_LIBRARY_VERSION_TLS_1_1</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>SSL_LIBRARY_VERSION_TLS_1_0</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_llist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>obj_list</name></name></expr></argument>, <argument><expr><name>nss_destroy_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PR_Lock</name><argument_list>(<argument><expr><name>nss_initlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nss_init</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name>nss_initlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PK11_SetPasswordFunc</name><argument_list>(<argument><expr><name>nss_get_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nss_load_module</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pem_module</name></expr></argument>, <argument><expr><name>pem_library</name></expr></argument>, <argument><expr><literal type="string">"PEM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name>nss_initlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_FAILED_INIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"WARNING: failed to load NSS PEM library %s. Using "</literal>
<literal type="string">"OpenSSL PEM certificates will not work.\n"</literal></expr></argument>, <argument><expr><name>pem_library</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CONNECT_ERROR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>model</name> <operator>=</operator> <call><name>PR_NewTCPSocket</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>model</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>model</name> <operator>=</operator> <call><name>SSL_ImportFD</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_OptionSet</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name>SSL_SECURITY</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>SSL_OptionSet</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name>SSL_HANDSHAKE_AS_SERVER</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>SSL_OptionSet</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name>SSL_HANDSHAKE_AS_CLIENT</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ssl_no_cache</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name><name>primary</name><operator>.</operator><name>sessionid</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>PR_FALSE</name></expr> </then><else>: <expr><name>PR_TRUE</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>SSL_OptionSet</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name>SSL_NO_CACHE</name></expr></argument>, <argument><expr><name>ssl_no_cache</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>nss_init_sslver</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sslver</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>SSL_VersionRangeGetSupported</name><argument_list>(<argument><expr><name>ssl_variant_stream</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sslver_supported</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>sslver_supported</name><operator>.</operator><name>max</name></name> <operator>&lt;</operator> <name><name>sslver</name><operator>.</operator><name>max</name></name> <operator>&amp;&amp;</operator> <name><name>sslver_supported</name><operator>.</operator><name>max</name></name> <operator>&gt;=</operator> <name><name>sslver</name><operator>.</operator><name>min</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sslver_req_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sslver_supp_str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sslver_req_str</name> <operator>=</operator> <call><name>nss_sslver_to_name</name><argument_list>(<argument><expr><name><name>sslver</name><operator>.</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sslver_supp_str</name> <operator>=</operator> <call><name>nss_sslver_to_name</name><argument_list>(<argument><expr><name><name>sslver_supported</name><operator>.</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>sslver_req_str</name> <operator>&amp;&amp;</operator> <name>sslver_supp_str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Falling back from %s to max supported SSL version (%s)\n"</literal></expr></argument>,
<argument><expr><name>sslver_req_str</name></expr></argument>, <argument><expr><name>sslver_supp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sslver_req_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sslver_supp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sslver</name><operator>.</operator><name>max</name></name> <operator>=</operator> <name><name>sslver_supported</name><operator>.</operator><name>max</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>SSL_VersionRangeSet</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sslver</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ssl_cbc_random_iv</name> <operator>=</operator> <operator>!</operator><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>enable_beast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_CBC_RANDOM_IV</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if<condition>(<expr><call><name>SSL_OptionSet</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name>SSL_CBC_RANDOM_IV</name></expr></argument>, <argument><expr><name>ssl_cbc_random_iv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"warning: failed to set SSL_CBC_RANDOM_IV = %d\n"</literal></expr></argument>,
<argument><expr><name>ssl_cbc_random_iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><name>ssl_cbc_random_iv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"warning: support for SSL_CBC_RANDOM_IV not compiled in\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>cipher_list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>set_ciphers</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>model</name></expr></argument>, <argument><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>cipher_list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CIPHER</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifyhost</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"warning: ignoring value of ssl.verifyhost\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><call><name>SSL_AuthCertificateHook</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name>nss_auth_cert_hook</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>certverifyresult</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certverifyresult</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_BadCertHook</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name>BadCertHandler</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_HandshakeCallback</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name>HandshakeCallback</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>CURLcode</name></type> <name>rv</name> <init>= <expr><call><name>nss_load_ca_certificates</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rv</name> <operator>==</operator> <name>CURLE_SSL_CACERT_BADFILE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"warning: CA certificates failed to load\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>rv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>CRLfile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>CURLcode</name></type> <name>rv</name> <init>= <expr><call><name>nss_load_crl</name><argument_list>(<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>CRLfile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>rv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" CRLfile: %s\n"</literal></expr></argument>, <argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>CRLfile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nickname</name> <init>= <expr><call><name>dup_nickname</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>nickname</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>obj_clicert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>rv</name> <init>= <expr><call><name>cert_stuff</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>client_nickname</name></name> <operator>=</operator> <name>nickname</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>client_nickname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_GetClientAuthDataHook</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name>SelectClientCert</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>connssl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CERTPROBLEM</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>use</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>ssl_connection_complete</name> <operator>==</operator> <name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nspr_io</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>second_layer</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>nspr_io</name> <operator>=</operator> <call><name>PR_ImportTCPSocket</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nspr_io</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>nspr_io_stub</name> <operator>=</operator> <call><name>PR_CreateIOLayerStub</name><argument_list>(<argument><expr><name>nspr_io_identity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nspr_io_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nspr_io_stub</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>second_layer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PR_Close</name><argument_list>(<argument><expr><name>nspr_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>nspr_io_stub</name><operator>-&gt;</operator><name>secret</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>connssl</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><call><name>PR_PushIOLayer</name><argument_list>(<argument><expr><name>nspr_io</name></expr></argument>, <argument><expr><name>PR_TOP_IO_LAYER</name></expr></argument>, <argument><expr><name>nspr_io_stub</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>second_layer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PR_Close</name><argument_list>(<argument><expr><name>nspr_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>PR_Close</name><argument_list>(<argument><expr><name>nspr_io_stub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <call><name>SSL_ImportFD</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name>nspr_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>second_layer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PR_Close</name><argument_list>(<argument><expr><name>nspr_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PR_Close</name><argument_list>(<argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>model</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key_passwd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SSL_SetPKCS11PinArg</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key_passwd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_ENABLE_OCSP_STAPLING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifystatus</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>SSL_OptionSet</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>SSL_ENABLE_OCSP_STAPLING</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_ENABLE_NPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>SSL_OptionSet</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>SSL_ENABLE_NPN</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_npn</name></name></expr>
?</condition><then> <expr><name>PR_TRUE</name></expr> </then><else>: <expr><name>PR_FALSE</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_ENABLE_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>SSL_OptionSet</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>SSL_ENABLE_ALPN</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_alpn</name></name></expr>
?</condition><then> <expr><name>PR_TRUE</name></expr> </then><else>: <expr><name>PR_FALSE</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NSSVERNUM</name> <operator>&gt;=</operator> <literal type="number">0x030f04</literal></expr></cpp:if> 
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>falsestart</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>SSL_OptionSet</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>SSL_ENABLE_FALSE_START</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SetCanFalseStartCallback</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>CanFalseStartCallback</name></expr></argument>,
<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_ENABLE_NPN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SSL_ENABLE_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_npn</name></name> <operator>||</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_alpn</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>protocols</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>&gt;=</operator> <name>CURL_HTTP_VERSION_2</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>protocols</name><index>[<expr><name>cur</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>NGHTTP2_PROTO_VERSION_ID_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>protocols</name><index>[<expr><name>cur</name></expr>]</index></name></expr></argument>, <argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>,
<argument><expr><name>NGHTTP2_PROTO_VERSION_ID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name>NGHTTP2_PROTO_VERSION_ID_LEN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>protocols</name><index>[<expr><name>cur</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ALPN_HTTP_1_1_LENGTH</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>protocols</name><index>[<expr><name>cur</name></expr>]</index></name></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name>ALPN_HTTP_1_1_LENGTH</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SetNextProtoNego</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>protocols</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if<condition>(<expr><call><name>SSL_ResetHandshake</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>SSL_SetURL</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:
<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>SSL_SetSockPeerID</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then>
<expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>: <expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if<condition>(<expr><name>model</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>PR_Close</name><argument_list>(<argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>nss_fail_connect</name><argument_list>(<argument><expr><name>connssl</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>nss_do_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRUint32</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>certverifyresult</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then>
<expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>certverifyresult</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certverifyresult</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pinnedpubkey</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then>
<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_PROXY</name></expr>]</index></name></expr> </then><else>:
<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_ORIG</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>timediff_t</name></type> <name>time_left</name> <init>= <expr><call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>time_left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"timed out before SSL handshake"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OPERATION_TIMEDOUT</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>PR_MillisecondsToInterval</name><argument_list>(<argument><expr><operator>(</operator><name>PRUint32</name><operator>)</operator> <name>time_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>SSL_ForceHandshakeWithTimeout</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>PR_GetError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>PR_WOULD_BLOCK_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_AGAIN</name></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>*</operator><name>certverifyresult</name> <operator>==</operator> <name>SSL_ERROR_BAD_CERT_DOMAIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>*</operator><name>certverifyresult</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>display_conn_info</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>issuercert</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SECStatus</name></type> <name>ret</name> <init>= <expr><name>SECFailure</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nickname</name> <init>= <expr><call><name>dup_nickname</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>issuercert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>nickname</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>check_issuer_cert</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>nickname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nickname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>SECFailure</name> <operator>==</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL certificate issuer check failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_ISSUER_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL certificate issuer check ok\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cmp_peer_pubkey</name><argument_list>(<argument><expr><name>connssl</name></expr></argument>, <argument><expr><name>pinnedpubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<label><name>error</name>:</label>
<return>return <expr><call><name>nss_fail_connect</name><argument_list>(<argument><expr><name>connssl</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>nss_connect_common</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>blocking</name> <init>= <expr><operator>(</operator><name>done</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ssl_connection_complete</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>blocking</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nss_setup_connect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nss_set_blocking</name><argument_list>(<argument><expr><name>connssl</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>blocking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nss_do_connect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLE_OK</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>CURLE_AGAIN</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>blocking</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<default>default:</default>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>blocking</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nss_set_blocking</name><argument_list>(<argument><expr><name>connssl</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ssl_connection_complete</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>nss_recv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>nss_send</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_1</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_nss_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>nss_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_nss_connect_nonblocking</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>nss_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>nss_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>, 
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, 
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, 
<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>curlcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>



<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>PR_Send</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PR_INTERVAL_NO_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PRInt32</name></type> <name>err</name> <init>= <expr><call><name>PR_GetError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>PR_WOULD_BLOCK_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_name</name> <init>= <expr><call><name>nss_error_to_name</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SSL write: error %d (%s)\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>nss_print_error_message</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>is_cc_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call><operator>)</operator></expr>
?</condition><then> <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>
</then><else>: <expr><name>CURLE_SEND_ERROR</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>nss_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>, 
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 
<parameter><decl><type><name>size_t</name></type> <name>buffersize</name></decl></parameter>, 
<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>curlcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>



<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>PR_Recv</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>buffersize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>PR_INTERVAL_NO_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PRInt32</name></type> <name>err</name> <init>= <expr><call><name>PR_GetError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>PR_WOULD_BLOCK_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_name</name> <init>= <expr><call><name>nss_error_to_name</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SSL read: errno %d (%s)\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>nss_print_error_message</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>is_cc_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call><operator>)</operator></expr>
?</condition><then> <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>
</then><else>: <expr><name>CURLE_RECV_ERROR</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>nread</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>Curl_nss_version</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"NSS/%s"</literal></expr></argument>, <argument><expr><name>NSS_VERSION</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_nss_seed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>!</operator><operator>!</operator><call><name>Curl_nss_force_init</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_nss_random</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>entropy</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Curl_nss_seed</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>SECSuccess</name> <operator>!=</operator> <call><name>PK11_GenerateRandom</name><argument_list>(<argument><expr><name>entropy</name></expr></argument>, <argument><expr><call><name>curlx_uztosi</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_nss_md5sum</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, 
<parameter><decl><type><name>size_t</name></type> <name>tmplen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>md5sum</name></decl></parameter>, 
<parameter><decl><type><name>size_t</name></type> <name>md5len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PK11Context</name> <modifier>*</modifier></type><name>MD5pw</name> <init>= <expr><call><name>PK11_CreateDigestContext</name><argument_list>(<argument><expr><name>SEC_OID_MD5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>MD5out</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PK11_DigestOp</name><argument_list>(<argument><expr><name>MD5pw</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><name>tmplen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PK11_DigestFinal</name><argument_list>(<argument><expr><name>MD5pw</name></expr></argument>, <argument><expr><name>md5sum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MD5out</name></expr></argument>, <argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><name>md5len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PK11_DestroyContext</name><argument_list>(<argument><expr><name>MD5pw</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_nss_sha256sum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, 
<parameter><decl><type><name>size_t</name></type> <name>tmplen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha256sum</name></decl></parameter>, 
<parameter><decl><type><name>size_t</name></type> <name>sha256len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PK11Context</name> <modifier>*</modifier></type><name>SHA256pw</name> <init>= <expr><call><name>PK11_CreateDigestContext</name><argument_list>(<argument><expr><name>SEC_OID_SHA256</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>SHA256out</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PK11_DigestOp</name><argument_list>(<argument><expr><name>SHA256pw</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><name>tmplen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PK11_DigestFinal</name><argument_list>(<argument><expr><name>SHA256pw</name></expr></argument>, <argument><expr><name>sha256sum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SHA256out</name></expr></argument>, <argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><name>sha256len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PK11_DestroyContext</name><argument_list>(<argument><expr><name>SHA256pw</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Curl_nss_cert_status_request</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_ENABLE_OCSP_STAPLING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>TRUE</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>FALSE</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Curl_nss_false_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NSSVERNUM</name> <operator>&gt;=</operator> <literal type="number">0x030f04</literal></expr></cpp:if> 
<return>return <expr><name>TRUE</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>FALSE</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Curl_nss_get_internals</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>,
<parameter><decl><type><name>CURLINFO</name> <name>info</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>info</name></expr>;</expr_stmt>
<return>return <expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_ssl</name></name></type> <name>Curl_ssl_nss</name> <init>= <expr><block>{
<expr><block>{ <expr><name>CURLSSLBACKEND_NSS</name></expr>, <expr><literal type="string">"nss"</literal></expr> }</block></expr>, 

<expr><name>SSLSUPP_CA_PATH</name> <operator>|</operator>
<name>SSLSUPP_CERTINFO</name> <operator>|</operator>
<name>SSLSUPP_PINNEDPUBKEY</name> <operator>|</operator>
<name>SSLSUPP_HTTPS_PROXY</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ssl_backend_data</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><name>Curl_nss_init</name></expr>, 
<expr><name>Curl_nss_cleanup</name></expr>, 
<expr><name>Curl_nss_version</name></expr>, 
<expr><name>Curl_nss_check_cxn</name></expr>, 

<expr><name>Curl_none_shutdown</name></expr>, 
<expr><name>Curl_none_data_pending</name></expr>, 
<expr><name>Curl_nss_random</name></expr>, 
<expr><name>Curl_nss_cert_status_request</name></expr>, 
<expr><name>Curl_nss_connect</name></expr>, 
<expr><name>Curl_nss_connect_nonblocking</name></expr>, 
<expr><name>Curl_nss_get_internals</name></expr>, 
<expr><name>Curl_nss_close</name></expr>, 
<expr><name>Curl_none_close_all</name></expr>, 

<expr><name>Curl_none_session_free</name></expr>, 
<expr><name>Curl_none_set_engine</name></expr>, 
<expr><name>Curl_none_set_engine_default</name></expr>, 
<expr><name>Curl_none_engines_list</name></expr>, 
<expr><name>Curl_nss_false_start</name></expr>, 
<expr><name>Curl_nss_md5sum</name></expr>, 
<expr><name>Curl_nss_sha256sum</name></expr> 
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
