<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\vtls\schannel.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEADER_CURL_SCHANNEL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_CURL_SCHANNEL_H</name></cpp:macro></cpp:define>






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SCHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;schnlsp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;schannel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_sspi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BORINGSSL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_IS_BORINGSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X509_NAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X509_CERT_PAIR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X509_EXTENSIONS</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>Curl_ssl</name></name></type> <name>Curl_ssl_schannel</name></decl>;</decl_stmt>

<function_decl><type><name>CURLcode</name></type> <name>Curl_verify_certificate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXPOSE_SCHANNEL_INTERNAL_STRUCTS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;_mingw.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_MANUAL_VERIFY_API</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wincrypt.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CERT_CHAIN_REVOCATION_CHECK_CHAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_MANUAL_VERIFY_API</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>curl_schannel_cred</name> <block>{
<decl_stmt><decl><type><name>CredHandle</name></type> <name>cred_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeStamp</name></type> <name>time_stamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>refcount</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>curl_schannel_ctxt</name> <block>{
<decl_stmt><decl><type><name>CtxtHandle</name></type> <name>ctxt_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeStamp</name></type> <name>time_stamp</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ssl_backend_data</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>curl_schannel_cred</name></name> <modifier>*</modifier></type><name>cred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_schannel_ctxt</name></name> <modifier>*</modifier></type><name>ctxt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecPkgContext_StreamSizes</name></type> <name>stream_sizes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>encdata_length</name></decl>, <decl><type ref="prev"/><name>decdata_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>encdata_offset</name></decl>, <decl><type ref="prev"/><name>decdata_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>encdata_buffer</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>decdata_buffer</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>encdata_is_incomplete</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>req_flags</name></decl>, <decl><type ref="prev"/><name>ret_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>recv_unrecoverable_err</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>recv_sspi_close_notify</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>recv_connection_closed</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>use_alpn</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_MANUAL_VERIFY_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>use_manual_cred_validation</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
