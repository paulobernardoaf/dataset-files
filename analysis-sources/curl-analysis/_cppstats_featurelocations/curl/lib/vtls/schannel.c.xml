<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\vtls\schannel.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SCHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPOSE_SCHANNEL_INTERNAL_STRUCTS</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Can't compile SCHANNEL support without SSPI."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"schannel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_pton.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_multibyte.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x509asn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"system_win32.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1800</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_USING_V110_SDK71_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_ALPN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNISP_NAME_A</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNISP_NAME_A</name></cpp:macro> <cpp:value>"Microsoft Unified Security Protocol Provider"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNISP_NAME_W</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNISP_NAME_W</name></cpp:macro> <cpp:value>L"Microsoft Unified Security Protocol Provider"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNISP_NAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNISP_NAME</name></cpp:macro> <cpp:value>UNISP_NAME_W</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNISP_NAME</name></cpp:macro> <cpp:value>UNISP_NAME_A</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CryptStringToBinary</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CRYPT_STRING_HEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_CLIENT_CERT_PATH</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_CLIENT_CERT_PATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_CERT_STORE_PROV_SYSTEM</name></cpp:macro> <cpp:value>CERT_STORE_PROV_SYSTEM_W</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_CERT_STORE_PROV_SYSTEM</name></cpp:macro> <cpp:value>CERT_STORE_PROV_SYSTEM_A</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SP_PROT_SSL2_CLIENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP_PROT_SSL2_CLIENT</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SP_PROT_SSL3_CLIENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP_PROT_SSL3_CLIENT</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SP_PROT_TLS1_CLIENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP_PROT_TLS1_CLIENT</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SP_PROT_TLS1_0_CLIENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP_PROT_TLS1_0_CLIENT</name></cpp:macro> <cpp:value>SP_PROT_TLS1_CLIENT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SP_PROT_TLS1_1_CLIENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP_PROT_TLS1_1_CLIENT</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SP_PROT_TLS1_2_CLIENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP_PROT_TLS1_2_CLIENT</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SECBUFFER_ALERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECBUFFER_ALERT</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_SCHANNEL_BUFFER_INIT_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_SCHANNEL_BUFFER_FREE_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CERT_THUMBPRINT_STR_LEN</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CERT_THUMBPRINT_DATA_LEN</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CALG_SHA_256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALG_SHA_256</name></cpp:macro> <cpp:value>0x0000800c</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKEND</name></cpp:macro> <cpp:value>connssl-&gt;backend</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_recv</name></type> <name>schannel_recv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_send</name></type> <name>schannel_send</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pkp_pin_peer_pubkey</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pinnedpubkey</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InitSecBuffer</name><parameter_list>(<parameter><decl><type><name>SecBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>BufType</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>BufDataPtr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>BufByteSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>cbBuffer</name></name> <operator>=</operator> <name>BufByteSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>BufferType</name></name> <operator>=</operator> <name>BufType</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>pvBuffer</name></name> <operator>=</operator> <name>BufDataPtr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InitSecBufferDesc</name><parameter_list>(<parameter><decl><type><name>SecBufferDesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>SecBuffer</name> <modifier>*</modifier></type><name>BufArr</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>NumArrElem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>ulVersion</name></name> <operator>=</operator> <name>SECBUFFER_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>pBuffers</name></name> <operator>=</operator> <name>BufArr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>cBuffers</name></name> <operator>=</operator> <name>NumArrElem</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>
<name>set_ssl_version_min_max</name><parameter_list>(<parameter><decl><type><name>SCHANNEL_CRED</name> <modifier>*</modifier></type><name>schannel_cred</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ssl_version</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ssl_version_max</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version_max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><name>ssl_version</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>ssl_version_max</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_SSLVERSION_MAX_NONE</name></expr>:</case>
<case>case <expr><name>CURL_SSLVERSION_MAX_DEFAULT</name></expr>:</case>
<expr_stmt><expr><name>ssl_version_max</name> <operator>=</operator> <name>CURL_SSLVERSION_MAX_TLSv1_2</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>ssl_version_max</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch<condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>
<expr_stmt><expr><name><name>schannel_cred</name><operator>-&gt;</operator><name>grbitEnabledProtocols</name></name> <operator>|=</operator> <name>SP_PROT_TLS1_0_CLIENT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>
<expr_stmt><expr><name><name>schannel_cred</name><operator>-&gt;</operator><name>grbitEnabledProtocols</name></name> <operator>|=</operator> <name>SP_PROT_TLS1_1_CLIENT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>
<expr_stmt><expr><name><name>schannel_cred</name><operator>-&gt;</operator><name>grbitEnabledProtocols</name></name> <operator>|=</operator> <name>SP_PROT_TLS1_2_CLIENT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: TLS 1.3 is not yet supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONGEST_ALG_ID</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIPHEROPTION</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(strcmp(#X, tmp) == 0) return X</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_alg_id_by_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><name>LONGEST_ALG_ID</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nameEnd</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><name>nameEnd</name></expr> ?</condition><then> <expr><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>nameEnd</name> <operator>-</operator> <name>name</name><operator>)</operator></expr></argument>, <argument><expr><name>LONGEST_ALG_ID</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: \
<expr><call><name>min</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LONGEST_ALG_ID</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_MD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_MD4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_MD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_SHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_MAC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_RSA_SIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_DSS_SIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_NO_SIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_NO_SIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_RSA_KEYX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_DES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_3DES_112</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_3DES_112</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_3DES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_DESX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_RC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_RC4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_SEAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_DH_SF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_DH_SF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_DH_EPHEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_AGREEDKEY_ANY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_AGREEDKEY_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_HUGHES_MD5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_HUGHES_MD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_SKIPJACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_TEK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_TEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_CYLINK_MEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_SSL3_SHAMD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_SSL3_MASTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_SSL3_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_SCHANNEL_MASTER_HASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_SCHANNEL_MASTER_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_SCHANNEL_MAC_KEY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_SCHANNEL_MAC_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_SCHANNEL_ENC_KEY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_SCHANNEL_ENC_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_PCT1_MASTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_PCT1_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_SSL2_MASTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_SSL2_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_TLS1_MASTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_TLS1_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_RC5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_RC5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_HMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_HMAC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__W32API_MAJOR_VERSION</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__W32API_MINOR_VERSION</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64_VERSION_MAJOR</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>__W32API_MAJOR_VERSION</name> <operator>&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>__W32API_MAJOR_VERSION</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>__W32API_MINOR_VERSION</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr></cpp:if>






<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_TLS1PRF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_HASH_REPLACE_OWF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_HASH_REPLACE_OWF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_AES_128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_AES_128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_AES_192</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_AES_192</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_AES_256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_AES_256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_AES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_AES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_SHA_256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_SHA_256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_SHA_384</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_SHA_384</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_SHA_512</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_SHA_512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_ECDH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_ECDH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_ECMQV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_ECMQV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_ECDSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_ECDSA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CALG_ECDH_EPHEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CIPHEROPTION</name><argument_list>(<argument><expr><name>CALG_ECDH_EPHEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>
<name>set_ssl_ciphers</name><parameter_list>(<parameter><decl><type><name>SCHANNEL_CRED</name> <modifier>*</modifier></type><name>schannel_cred</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ciphers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>startCur</name> <init>= <expr><name>ciphers</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>algCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ALG_ID</name></type> <name><name>algIds</name><index>[<expr><literal type="number">45</literal></expr>]</index></name></decl>;</decl_stmt> 
<while>while<condition>(<expr><name>startCur</name> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <operator>*</operator><name>startCur</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>algCount</name> <operator>&lt;</operator> <literal type="number">45</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>alg</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>startCur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>alg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>alg</name> <operator>=</operator> <call><name>get_alg_id_by_name</name><argument_list>(<argument><expr><name>startCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>alg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>algIds</name><index>[<expr><name>algCount</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>alg</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>CURLE_SSL_CIPHER</name></expr>;</return></block_content></block></else></if_stmt>
<expr_stmt><expr><name>startCur</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>startCur</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>startCur</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>startCur</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>schannel_cred</name><operator>-&gt;</operator><name>palgSupportedAlgs</name></name> <operator>=</operator> <name>algIds</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>schannel_cred</name><operator>-&gt;</operator><name>cSupportedAlgs</name></name> <operator>=</operator> <name>algCount</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_CLIENT_CERT_PATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>CURLcode</name></type>
<name>get_cert_location</name><parameter_list>(<parameter><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>store_name</name></decl></parameter>, <parameter><decl><type><name>TCHAR</name> <modifier>*</modifier><modifier>*</modifier></type><name>store_path</name></decl></parameter>,
<parameter><decl><type><name>TCHAR</name> <modifier>*</modifier><modifier>*</modifier></type><name>thumbprint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>sep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>store_path_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>store_name_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <call><name>_tcschr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>sep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>store_name_len</name> <operator>=</operator> <name>sep</name> <operator>-</operator> <name>path</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>_tcsnccmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"CurrentUser"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store_name_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>store_name</name> <operator>=</operator> <name>CERT_SYSTEM_STORE_CURRENT_USER</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>_tcsnccmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"LocalMachine"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store_name_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>store_name</name> <operator>=</operator> <name>CERT_SYSTEM_STORE_LOCAL_MACHINE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>_tcsnccmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"CurrentService"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store_name_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>store_name</name> <operator>=</operator> <name>CERT_SYSTEM_STORE_CURRENT_SERVICE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>_tcsnccmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Services"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store_name_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>store_name</name> <operator>=</operator> <name>CERT_SYSTEM_STORE_SERVICES</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>_tcsnccmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Users"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store_name_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>store_name</name> <operator>=</operator> <name>CERT_SYSTEM_STORE_USERS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>_tcsnccmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"CurrentUserGroupPolicy"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>store_name_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>store_name</name> <operator>=</operator> <name>CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>_tcsnccmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"LocalMachineGroupPolicy"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>store_name_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>store_name</name> <operator>=</operator> <name>CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>_tcsnccmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"LocalMachineEnterprise"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>store_name_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>store_name</name> <operator>=</operator> <name>CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>store_path_start</name> <operator>=</operator> <name>sep</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <call><name>_tcschr</name><argument_list>(<argument><expr><name>store_path_start</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>sep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>sep</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>store_path</name> <operator>=</operator> <call><name>_tcsdup</name><argument_list>(<argument><expr><name>store_path_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sep</name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>store_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>thumbprint</name> <operator>=</operator> <name>sep</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>_tcslen</name><argument_list>(<argument><expr><operator>*</operator><name>thumbprint</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CERT_THUMBPRINT_STR_LEN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>
<name>schannel_connect_step1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>written</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBuffer</name></type> <name>outbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>outbuf_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBuffer</name></type> <name>inbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>inbuf_desc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>alpn_buffer</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>SCHANNEL_CRED</name></type> <name>schannel_cred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PCCERT_CONTEXT</name></type> <name><name>client_certs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>sspi_status</name> <init>= <expr><name>SEC_E_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_schannel_cred</name></name> <modifier>*</modifier></type><name>old_cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>addr6</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>host_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:
<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: SSL/TLS connection with %s port %hu (step 1/3)\n"</literal></expr></argument>,
<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_verify_windows_version</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>PLATFORM_WINNT</name></expr></argument>,
<argument><expr><name>VERSION_LESS_THAN_EQUAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: Windows version is old and may not be able to "</literal>
<literal type="string">"connect to some servers due to lack of SNI, algorithms, etc.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>use_alpn</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_alpn</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><call><name>GetModuleHandleA</name><argument_list>(<argument><expr><literal type="string">"ntdll"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"wine_get_version"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>Curl_verify_windows_version</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>PLATFORM_WINNT</name></expr></argument>,
<argument><expr><name>VERSION_GREATER_THAN_EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>use_alpn</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_MANUAL_VERIFY_API</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>use_manual_cred_validation</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"compiler too old to support requisite manual cert verify for Win CE"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_MANUAL_VERIFY_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>Curl_verify_windows_version</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>PLATFORM_WINNT</name></expr></argument>,
<argument><expr><name>VERSION_GREATER_THAN_EQUAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>use_manual_cred_validation</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: this version of Windows is too old to support "</literal>
<literal type="string">"certificate verification via CA bundle file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>use_manual_cred_validation</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: CA cert support not built in"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name><name>primary</name><operator>.</operator><name>sessionid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_ssl_sessionid_lock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_ssl_getsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>old_cred</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name></name> <operator>=</operator> <name>old_cred</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: re-using existing credential handle\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: incremented credential handle refcount = %d\n"</literal></expr></argument>,
<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name><operator>-&gt;</operator><name>refcount</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>schannel_cred</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>schannel_cred</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>schannel_cred</name><operator>.</operator><name>dwVersion</name></name> <operator>=</operator> <name>SCHANNEL_CRED_VERSION</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name><operator>.</operator><name>verifypeer</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_MANUAL_VERIFY_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>use_manual_cred_validation</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>schannel_cred</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <name>SCH_CRED_MANUAL_CRED_VALIDATION</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>schannel_cred</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <name>SCH_CRED_AUTO_CRED_VALIDATION</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>no_revoke</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>schannel_cred</name><operator>.</operator><name>dwFlags</name></name> <operator>|=</operator> <name>SCH_CRED_IGNORE_NO_REVOCATION_CHECK</name> <operator>|</operator>
<name>SCH_CRED_IGNORE_REVOCATION_OFFLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: disabled server certificate revocation "</literal>
<literal type="string">"checks\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>revoke_best_effort</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>schannel_cred</name><operator>.</operator><name>dwFlags</name></name> <operator>|=</operator> <name>SCH_CRED_IGNORE_NO_REVOCATION_CHECK</name> <operator>|</operator>
<name>SCH_CRED_IGNORE_REVOCATION_OFFLINE</name> <operator>|</operator> <name>SCH_CRED_REVOCATION_CHECK_CHAIN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: ignore revocation offline errors"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>schannel_cred</name><operator>.</operator><name>dwFlags</name></name> <operator>|=</operator> <name>SCH_CRED_REVOCATION_CHECK_CHAIN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: checking server certificate revocation\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>schannel_cred</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <name>SCH_CRED_MANUAL_CRED_VALIDATION</name> <operator>|</operator>
<name>SCH_CRED_IGNORE_NO_REVOCATION_CHECK</name> <operator>|</operator>
<name>SCH_CRED_IGNORE_REVOCATION_OFFLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: disabled server cert revocation checks\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name><operator>.</operator><name>verifyhost</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>schannel_cred</name><operator>.</operator><name>dwFlags</name></name> <operator>|=</operator> <name>SCH_CRED_NO_SERVERNAME_CHECK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: verifyhost setting prevents Schannel from "</literal>
<literal type="string">"comparing the supplied target name with the subject "</literal>
<literal type="string">"names in server certificates.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name><operator>.</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_SSLVERSION_DEFAULT</name></expr>:</case>
<case>case <expr><name>CURL_SSLVERSION_TLSv1</name></expr>:</case>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_ssl_version_min_max</name><argument_list>(<argument><expr><operator>&amp;</operator><name>schannel_cred</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>CURL_SSLVERSION_SSLv3</name></expr>:</case>
<expr_stmt><expr><name><name>schannel_cred</name><operator>.</operator><name>grbitEnabledProtocols</name></name> <operator>=</operator> <name>SP_PROT_SSL3_CLIENT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_SSLVERSION_SSLv2</name></expr>:</case>
<expr_stmt><expr><name><name>schannel_cred</name><operator>.</operator><name>grbitEnabledProtocols</name></name> <operator>=</operator> <name>SP_PROT_SSL2_CLIENT</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized parameter passed via CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>cipher_list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_ssl_ciphers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>schannel_cred</name></expr></argument>, <argument><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>cipher_list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>CURLE_OK</name> <operator>!=</operator> <name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unable to set ciphers to passed via SSL_CONN_CONFIG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_CLIENT_CERT_PATH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>cert</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>cert_store_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>cert_store_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>cert_thumbprint_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CRYPT_HASH_BLOB</name></type> <name>cert_thumbprint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name><name>cert_thumbprint_data</name><index>[<expr><name>CERT_THUMBPRINT_DATA_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCERTSTORE</name></type> <name>cert_store</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>cert_path</name> <init>= <expr><call><name>Curl_convert_UTF8_to_tchar</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>cert</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cert_path</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>get_cert_location</name><argument_list>(<argument><expr><name>cert_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cert_store_name</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cert_store_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cert_thumbprint_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: Failed to get certificate location for %s"</literal></expr></argument>,
<argument><expr><name>cert_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name>cert_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cert_store</name> <operator>=</operator>
<call><name>CertOpenStore</name><argument_list>(<argument><expr><name>CURL_CERT_STORE_PROV_SYSTEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>HCRYPTPROV</name><operator>)</operator><name>NULL</name></expr></argument>,
<argument><expr><name>CERT_STORE_OPEN_EXISTING_FLAG</name> <operator>|</operator> <name>cert_store_name</name></expr></argument>,
<argument><expr><name>cert_store_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cert_store</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: Failed to open cert store %x %s, "</literal>
<literal type="string">"last error is %x"</literal></expr></argument>,
<argument><expr><name>cert_store_name</name></expr></argument>, <argument><expr><name>cert_store_path</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cert_store_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name>cert_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cert_store_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cert_thumbprint</name><operator>.</operator><name>pbData</name></name> <operator>=</operator> <name>cert_thumbprint_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cert_thumbprint</name><operator>.</operator><name>cbData</name></name> <operator>=</operator> <name>CERT_THUMBPRINT_DATA_LEN</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CryptStringToBinary</name><argument_list>(<argument><expr><name>cert_thumbprint_str</name></expr></argument>, <argument><expr><name>CERT_THUMBPRINT_STR_LEN</name></expr></argument>,
<argument><expr><name>CRYPT_STRING_HEX</name></expr></argument>,
<argument><expr><name>cert_thumbprint_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cert_thumbprint</name><operator>.</operator><name>cbData</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name>cert_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>client_certs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CertFindCertificateInStore</name><argument_list>(
<argument><expr><name>cert_store</name></expr></argument>, <argument><expr><name>X509_ASN_ENCODING</name> <operator>|</operator> <name>PKCS_7_ASN_ENCODING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>CERT_FIND_HASH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cert_thumbprint</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name>cert_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>client_certs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>schannel_cred</name><operator>.</operator><name>cCreds</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>schannel_cred</name><operator>.</operator><name>paCred</name></name> <operator>=</operator> <name>client_certs</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<return>return <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CertCloseStore</name><argument_list>(<argument><expr><name>cert_store</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>cert</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: client cert support not built in"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name></name> <operator>=</operator> <operator>(</operator>struct <name>curl_schannel_cred</name> <operator>*</operator><operator>)</operator>
<call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>curl_schannel_cred</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: unable to allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>client_certs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CertFreeCertificateContext</name><argument_list>(<argument><expr><name><name>client_certs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>sspi_status</name> <operator>=</operator>
<call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>AcquireCredentialsHandle</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>TCHAR</name> <operator>*</operator><operator>)</operator><name>UNISP_NAME</name></expr></argument>,
<argument><expr><name>SECPKG_CRED_OUTBOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>schannel_cred</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name><operator>-&gt;</operator><name>cred_handle</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name><operator>-&gt;</operator><name>time_stamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>client_certs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CertFreeCertificateContext</name><argument_list>(<argument><expr><name><name>client_certs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sspi_status</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: AcquireCredentialsHandle failed: %s"</literal></expr></argument>,
<argument><expr><call><name>Curl_sspi_strerror</name><argument_list>(<argument><expr><name>sspi_status</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>sspi_status</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SEC_E_INSUFFICIENT_MEMORY</name></expr>:</case>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
<case>case <expr><name>SEC_E_NO_CREDENTIALS</name></expr>:</case>
<case>case <expr><name>SEC_E_SECPKG_NOT_FOUND</name></expr>:</case>
<case>case <expr><name>SEC_E_NOT_OWNER</name></expr>:</case>
<case>case <expr><name>SEC_E_UNKNOWN_CREDENTIALS</name></expr>:</case>
<case>case <expr><name>SEC_E_INTERNAL_ERROR</name></expr>:</case>
<default>default:</default>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr6</name></expr></argument>)</argument_list></call></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: using IP address, SNI is not supported by OS.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>use_alpn</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>list_start_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>extension_len</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name><modifier>*</modifier></type> <name>list_len</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>extension_len</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>alpn_buffer</name><index>[<expr><name>cur</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>+=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>alpn_buffer</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>=</operator>
<name>SecApplicationProtocolNegotiationExt_ALPN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>+=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><name>list_len</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>alpn_buffer</name><index>[<expr><name>cur</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>+=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>list_start_index</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>&gt;=</operator> <name>CURL_HTTP_VERSION_2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>alpn_buffer</name><index>[<expr><name>cur</name></expr>]</index></name></expr></argument>, <argument><expr><name>NGHTTP2_PROTO_ALPN</name></expr></argument>, <argument><expr><name>NGHTTP2_PROTO_ALPN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name>NGHTTP2_PROTO_ALPN_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: ALPN, offering %s\n"</literal></expr></argument>, <argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>alpn_buffer</name><index>[<expr><name>cur</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ALPN_HTTP_1_1_LENGTH</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>alpn_buffer</name><index>[<expr><name>cur</name></expr>]</index></name></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name>ALPN_HTTP_1_1_LENGTH</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: ALPN, offering %s\n"</literal></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>list_len</name> <operator>=</operator> <call><name>curlx_uitous</name><argument_list>(<argument><expr><name>cur</name> <operator>-</operator> <name>list_start_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>extension_len</name> <operator>=</operator> <operator>*</operator><name>list_len</name> <operator>+</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>+</operator> sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inbuf</name></expr></argument>, <argument><expr><name>SECBUFFER_APPLICATION_PROTOCOLS</name></expr></argument>, <argument><expr><name>alpn_buffer</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitSecBufferDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inbuf_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inbuf</name></expr></argument>, <argument><expr><name>SECBUFFER_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitSecBufferDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inbuf_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inbuf</name></expr></argument>, <argument><expr><name>SECBUFFER_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitSecBufferDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inbuf_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>, <argument><expr><name>SECBUFFER_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitSecBufferDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>req_flags</name></name> <operator>=</operator> <name>ISC_REQ_SEQUENCE_DETECT</name> <operator>|</operator> <name>ISC_REQ_REPLAY_DETECT</name> <operator>|</operator>
<name>ISC_REQ_CONFIDENTIALITY</name> <operator>|</operator> <name>ISC_REQ_ALLOCATE_MEMORY</name> <operator>|</operator>
<name>ISC_REQ_STREAM</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name></name> <operator>=</operator> <operator>(</operator>struct <name>curl_schannel_ctxt</name> <operator>*</operator><operator>)</operator>
<call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>curl_schannel_ctxt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: unable to allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>host_name</name> <operator>=</operator> <call><name>Curl_convert_UTF8_to_tchar</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>host_name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>








<expr_stmt><expr><name>sspi_status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>InitializeSecurityContext</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name><operator>-&gt;</operator><name>cred_handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>host_name</name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>req_flags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>use_alpn</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>inbuf_desc</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>outbuf_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ret_flags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>time_stamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name>host_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sspi_status</name> <operator>!=</operator> <name>SEC_I_CONTINUE_NEEDED</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>sspi_status</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SEC_E_INSUFFICIENT_MEMORY</name></expr>:</case>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: initial InitializeSecurityContext failed: %s"</literal></expr></argument>,
<argument><expr><call><name>Curl_sspi_strerror</name><argument_list>(<argument><expr><name>sspi_status</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
<case>case <expr><name>SEC_E_WRONG_PRINCIPAL</name></expr>:</case>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: SNI or certificate check failed: %s"</literal></expr></argument>,
<argument><expr><call><name>Curl_sspi_strerror</name><argument_list>(<argument><expr><name>sspi_status</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>











<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: initial InitializeSecurityContext failed: %s"</literal></expr></argument>,
<argument><expr><call><name>Curl_sspi_strerror</name><argument_list>(<argument><expr><name>sspi_status</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: sending initial handshake data: "</literal>
<literal type="string">"sending %lu bytes...\n"</literal></expr></argument>, <argument><expr><name><name>outbuf</name><operator>.</operator><name>cbBuffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>outbuf</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>,
<argument><expr><name><name>outbuf</name><operator>.</operator><name>cbBuffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>outbuf</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>result</name> <operator>!=</operator> <name>CURLE_OK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>outbuf</name><operator>.</operator><name>cbBuffer</name></name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>written</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: failed to send initial handshake data: "</literal>
<literal type="string">"sent %zd of %lu bytes"</literal></expr></argument>, <argument><expr><name>written</name></expr></argument>, <argument><expr><name><name>outbuf</name><operator>.</operator><name>cbBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: sent initial handshake data: "</literal>
<literal type="string">"sent %zd bytes\n"</literal></expr></argument>, <argument><expr><name>written</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>recv_unrecoverable_err</name></name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>recv_sspi_close_notify</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>recv_connection_closed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_is_incomplete</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>
<name>schannel_connect_step2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>written</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>reallocated_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBuffer</name></type> <name><name>outbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>outbuf_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBuffer</name></type> <name><name>inbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>inbuf_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>sspi_status</name> <init>= <expr><name>SEC_E_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>doread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:
<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pubkey_ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>doread</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>!=</operator> <name>ssl_connect_2_writing</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: SSL/TLS connection with %s port %hu (step 2/3)\n"</literal></expr></argument>,
<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name></name> <operator>||</operator> <operator>!</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_length</name></name> <operator>=</operator> <name>CURL_SCHANNEL_BUFFER_INIT_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: unable to allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_is_incomplete</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_length</name></name> <operator>=</operator> <name>CURL_SCHANNEL_BUFFER_INIT_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: unable to allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_length</name></name> <operator>-</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name> <operator>&lt;</operator>
<name>CURL_SCHANNEL_BUFFER_FREE_SIZE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>reallocated_length</name> <init>= <expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name> <operator>+</operator>
<name>CURL_SCHANNEL_BUFFER_FREE_SIZE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>reallocated_buffer</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_buffer</name></name></expr></argument>,
<argument><expr><name>reallocated_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>reallocated_buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: unable to re-allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_buffer</name></name> <operator>=</operator> <name>reallocated_buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_length</name></name> <operator>=</operator> <name>reallocated_length</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>host_name</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>doread</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_read_plain</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_buffer</name></name> <operator>+</operator>
<name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_length</name></name> <operator>-</operator>
<name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_AGAIN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>!=</operator> <name>ssl_connect_2_writing</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2_reading</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: failed to receive handshake, "</literal>
<literal type="string">"need more data\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>(</operator><name>result</name> <operator>!=</operator> <name>CURLE_OK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>nread</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: failed to receive handshake, "</literal>
<literal type="string">"SSL/TLS connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_is_incomplete</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: encrypted data got %zd\n"</literal></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: encrypted data buffer: offset %zu length %zu\n"</literal></expr></argument>,
<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_TOKEN</name></expr></argument>, <argument><expr><call><name>malloc</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>curlx_uztoul</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitSecBufferDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inbuf_desc</name></expr></argument>, <argument><expr><name>inbuf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_TOKEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_ALERT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitSecBufferDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf_desc</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>inbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: unable to allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>inbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_buffer</name></name></expr></argument>,
<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>host_name</name> <operator>=</operator> <call><name>Curl_convert_UTF8_to_tchar</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>host_name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>sspi_status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>InitializeSecurityContext</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name><operator>-&gt;</operator><name>cred_handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>,
<argument><expr><name>host_name</name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>req_flags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>inbuf_desc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>outbuf_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ret_flags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>time_stamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name>host_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>inbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>sspi_status</name> <operator>==</operator> <name>SEC_E_INCOMPLETE_MESSAGE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_is_incomplete</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2_reading</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: received incomplete message, need more data\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if<condition>(<expr><name>sspi_status</name> <operator>==</operator> <name>SEC_I_INCOMPLETE_CREDENTIALS</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>req_flags</name></name> <operator>&amp;</operator> <name>ISC_REQ_USE_SUPPLIED_CREDS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>req_flags</name></name> <operator>|=</operator> <name>ISC_REQ_USE_SUPPLIED_CREDS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2_writing</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: a client certificate has been requested\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>sspi_status</name> <operator>==</operator> <name>SEC_I_CONTINUE_NEEDED</name> <operator>||</operator> <name>sspi_status</name> <operator>==</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>==</operator> <name>SECBUFFER_TOKEN</name> <operator>&amp;&amp;</operator> <name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: sending next handshake data: "</literal>
<literal type="string">"sending %lu bytes...\n"</literal></expr></argument>, <argument><expr><name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>, <argument><expr><name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>result</name> <operator>!=</operator> <name>CURLE_OK</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>written</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: failed to send next handshake data: "</literal>
<literal type="string">"sent %zd of %lu bytes"</literal></expr></argument>, <argument><expr><name>written</name></expr></argument>, <argument><expr><name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>sspi_status</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SEC_E_INSUFFICIENT_MEMORY</name></expr>:</case>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: next InitializeSecurityContext failed: %s"</literal></expr></argument>,
<argument><expr><call><name>Curl_sspi_strerror</name><argument_list>(<argument><expr><name>sspi_status</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
<case>case <expr><name>SEC_E_WRONG_PRINCIPAL</name></expr>:</case>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: SNI or certificate check failed: %s"</literal></expr></argument>,
<argument><expr><call><name>Curl_sspi_strerror</name><argument_list>(<argument><expr><name>sspi_status</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>











<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: next InitializeSecurityContext failed: %s"</literal></expr></argument>,
<argument><expr><call><name>Curl_sspi_strerror</name><argument_list>(<argument><expr><name>sspi_status</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>==</operator> <name>SECBUFFER_EXTRA</name> <operator>&amp;&amp;</operator> <name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: encrypted data length: %lu\n"</literal></expr></argument>,
<argument><expr><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>












<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name> <operator>&gt;</operator> <name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_buffer</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_buffer</name></name> <operator>+</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name><operator>)</operator> <operator>-</operator>
<name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>, <argument><expr><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name> <operator>=</operator> <name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>sspi_status</name> <operator>==</operator> <name>SEC_I_CONTINUE_NEEDED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>doread</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></for>


<if_stmt><if>if<condition>(<expr><name>sspi_status</name> <operator>==</operator> <name>SEC_I_CONTINUE_NEEDED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2_reading</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>sspi_status</name> <operator>==</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_3</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: SSL/TLS handshake complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pubkey_ptr</name> <operator>=</operator> <ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then>
<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_PROXY</name></expr>]</index></name></expr> </then><else>:
<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_ORIG</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>pubkey_ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pkp_pin_peer_pubkey</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>pubkey_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: public key does not match pinned public key!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_MANUAL_VERIFY_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name><operator>.</operator><name>verifypeer</name></name> <operator>&amp;&amp;</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>use_manual_cred_validation</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>Curl_verify_certificate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>valid_cert_encoding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CERT_CONTEXT</name> <modifier>*</modifier></type><name>cert_context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>cert_context</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>cert_context</name><operator>-&gt;</operator><name>dwCertEncodingType</name></name> <operator>&amp;</operator> <name>X509_ASN_ENCODING</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cert_context</name><operator>-&gt;</operator><name>pbCertEncoded</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cert_context</name><operator>-&gt;</operator><name>cbCertEncoded</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>bool</name></type>(<modifier>*</modifier><name>Read_crt_func</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CERT_CONTEXT</name> <modifier>*</modifier></type><name>ccert_context</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>traverse_cert_store</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CERT_CONTEXT</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>Read_crt_func</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>CERT_CONTEXT</name> <modifier>*</modifier></type><name>current_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>should_continue</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>should_continue</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>current_context</name> <operator>=</operator> <call><name>CertEnumCertificatesInStore</name><argument_list>(
<argument><expr><name><name>context</name><operator>-&gt;</operator><name>hCertStore</name></name></expr></argument>,
<argument><expr><name>current_context</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>should_continue</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>current_context</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><name>current_context</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CertFreeCertificateContext</name><argument_list>(<argument><expr><name>current_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>cert_counter_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CERT_CONTEXT</name> <modifier>*</modifier></type><name>ccert_context</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>certs_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>valid_cert_encoding</name><argument_list>(<argument><expr><name>ccert_context</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>certs_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>Adder_args</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>certs_count</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>add_cert_to_certinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CERT_CONTEXT</name> <modifier>*</modifier></type><name>ccert_context</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>raw_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Adder_args</name></name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator>struct <name>Adder_args</name><operator>*</operator><operator>)</operator><name>raw_arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>valid_cert_encoding</name><argument_list>(<argument><expr><name>ccert_context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>beg</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>ccert_context</name><operator>-&gt;</operator><name>pbCertEncoded</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>beg</name> <operator>+</operator> <name><name>ccert_context</name><operator>-&gt;</operator><name>cbCertEncoded</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>insert_index</name> <init>= <expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>certs_count</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>args</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>Curl_extract_certinfo</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>insert_index</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>args</name><operator>-&gt;</operator><name>result</name></name> <operator>==</operator> <name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>
<name>schannel_connect_step3</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>sspi_status</name> <init>= <expr><name>SEC_E_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CERT_CONTEXT</name> <modifier>*</modifier></type><name>ccert_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:
<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>SecPkgContext_ApplicationProtocol</name></type> <name>alpn_result</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>ssl_connect_3</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: SSL/TLS connection with %s port %hu (step 3/3)\n"</literal></expr></argument>,
<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>ret_flags</name></name> <operator>!=</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>req_flags</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ret_flags</name></name> <operator>&amp;</operator> <name>ISC_RET_SEQUENCE_DETECT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: failed to setup sequence detection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ret_flags</name></name> <operator>&amp;</operator> <name>ISC_RET_REPLAY_DETECT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: failed to setup replay detection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ret_flags</name></name> <operator>&amp;</operator> <name>ISC_RET_CONFIDENTIALITY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: failed to setup confidentiality"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ret_flags</name></name> <operator>&amp;</operator> <name>ISC_RET_ALLOCATED_MEMORY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: failed to setup memory allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ret_flags</name></name> <operator>&amp;</operator> <name>ISC_RET_STREAM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: failed to setup stream orientation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>use_alpn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sspi_status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>QueryContextAttributes</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>,
<argument><expr><name>SECPKG_ATTR_APPLICATION_PROTOCOL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alpn_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sspi_status</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: failed to retrieve ALPN result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>alpn_result</name><operator>.</operator><name>ProtoNegoStatus</name></name> <operator>==</operator>
<name>SecApplicationProtocolNegotiationStatus_Success</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: ALPN, server accepted to use %.*s\n"</literal></expr></argument>,
<argument><expr><name><name>alpn_result</name><operator>.</operator><name>ProtocolIdSize</name></name></expr></argument>, <argument><expr><name><name>alpn_result</name><operator>.</operator><name>ProtocolId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>alpn_result</name><operator>.</operator><name>ProtocolIdSize</name></name> <operator>==</operator> <name>NGHTTP2_PROTO_VERSION_ID_LEN</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>, <argument><expr><name><name>alpn_result</name><operator>.</operator><name>ProtocolId</name></name></expr></argument>,
<argument><expr><name>NGHTTP2_PROTO_VERSION_ID_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_2</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if<condition>(<expr><name><name>alpn_result</name><operator>.</operator><name>ProtocolIdSize</name></name> <operator>==</operator> <name>ALPN_HTTP_1_1_LENGTH</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>, <argument><expr><name><name>alpn_result</name><operator>.</operator><name>ProtocolId</name></name></expr></argument>,
<argument><expr><name>ALPN_HTTP_1_1_LENGTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_1_1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, server did not agree to a protocol\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>Curl_multiuse_state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>==</operator> <name>CURL_HTTP_VERSION_2</name></expr> ?</condition><then>
<expr><name>BUNDLE_MULTIPLEX</name></expr> </then><else>: <expr><name>BUNDLE_NO_MULTIUSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name><name>primary</name><operator>.</operator><name>sessionid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>incache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_schannel_cred</name></name> <modifier>*</modifier></type><name>old_cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_lock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>incache</name> <operator>=</operator> <operator>!</operator><operator>(</operator><call><name>Curl_ssl_getsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>old_cred</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>sockindex</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>incache</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>old_cred</name> <operator>!=</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: old credential handle is stale, removing\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_ssl_delsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>old_cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>incache</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>incache</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ssl_addsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>curl_schannel_cred</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: failed to store credential handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: stored credential handle in session cache\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>certs_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sspi_status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>QueryContextAttributes</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>,
<argument><expr><name>SECPKG_ATTR_REMOTE_CERT_CONTEXT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ccert_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>sspi_status</name> <operator>!=</operator> <name>SEC_E_OK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccert_context</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: failed to retrieve remote cert context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>traverse_cert_store</name><argument_list>(<argument><expr><name>ccert_context</name></expr></argument>, <argument><expr><name>cert_counter_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>certs_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ssl_init_certinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certs_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Adder_args</name></name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>certs_count</name></name> <operator>=</operator> <name>certs_count</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>traverse_cert_store</name><argument_list>(<argument><expr><name>ccert_context</name></expr></argument>, <argument><expr><name>add_cert_to_certinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>args</name><operator>.</operator><name>result</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CertFreeCertificateContext</name><argument_list>(<argument><expr><name>ccert_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_done</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>
<name>schannel_connect_common</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>nonblocking</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>timeout_ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>what</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>ssl_connection_complete</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connect_1</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL/TLS connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>schannel_connect_step1</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><name>ssl_connect_2</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>
<name>ssl_connect_2_reading</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>
<name>ssl_connect_2_writing</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL/TLS connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_2_reading</name>
<operator>||</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_2_writing</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>writefd</name> <init>= <expr><ternary><condition><expr><name>ssl_connect_2_writing</name> <operator>==</operator>
<name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr> ?</condition><then> <expr><name>sockfd</name></expr> </then><else>: <expr><name>CURL_SOCKET_BAD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>readfd</name> <init>= <expr><ternary><condition><expr><name>ssl_connect_2_reading</name> <operator>==</operator>
<name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr> ?</condition><then> <expr><name>sockfd</name></expr> </then><else>: <expr><name>CURL_SOCKET_BAD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>what</name> <operator>=</operator> <call><name>Curl_socket_check</name><argument_list>(<argument><expr><name>readfd</name></expr></argument>, <argument><expr><name>CURL_SOCKET_BAD</name></expr></argument>, <argument><expr><name>writefd</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>nonblocking</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>time_t</name><operator>)</operator><name>timeout_ms</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>what</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"select/poll on SSL/TLS socket, errno: %d"</literal></expr></argument>, <argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>what</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>nonblocking</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL/TLS connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>








<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>schannel_connect_step2</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>(</operator><name>nonblocking</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ssl_connect_2</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>
<name>ssl_connect_2_reading</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>
<name>ssl_connect_2_writing</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while> 

<if_stmt><if>if<condition>(<expr><name>ssl_connect_3</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>schannel_connect_step3</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connect_done</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ssl_connection_complete</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>schannel_recv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>schannel_send</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SECPKG_ATTR_ENDPOINT_BINDINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>





<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sslContext</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_1</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>schannel_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>written</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>data_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBuffer</name></type> <name><name>outbuf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>outbuf_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>sspi_status</name> <init>= <expr><name>SEC_E_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>stream_sizes</name><operator>.</operator><name>cbMaximumMessage</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sspi_status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>QueryContextAttributes</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>,
<argument><expr><name>SECPKG_ATTR_STREAM_SIZES</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>stream_sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>sspi_status</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>stream_sizes</name><operator>.</operator><name>cbMaximumMessage</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>stream_sizes</name><operator>.</operator><name>cbMaximumMessage</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>data_len</name> <operator>=</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>stream_sizes</name><operator>.</operator><name>cbHeader</name></name> <operator>+</operator> <name>len</name> <operator>+</operator>
<name><name>BACKEND</name><operator>-&gt;</operator><name>stream_sizes</name><operator>.</operator><name>cbTrailer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_STREAM_HEADER</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>stream_sizes</name><operator>.</operator><name>cbHeader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_DATA</name></expr></argument>,
<argument><expr><name>data</name> <operator>+</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>stream_sizes</name><operator>.</operator><name>cbHeader</name></name></expr></argument>, <argument><expr><call><name>curlx_uztoul</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_STREAM_TRAILER</name></expr></argument>,
<argument><expr><name>data</name> <operator>+</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>stream_sizes</name><operator>.</operator><name>cbHeader</name></name> <operator>+</operator> <name>len</name></expr></argument>,
<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>stream_sizes</name><operator>.</operator><name>cbTrailer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitSecBufferDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf_desc</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>outbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>sspi_status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>EncryptMessage</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>outbuf_desc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>sspi_status</name> <operator>==</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>written</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>outbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>+</operator> <name><name>outbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>+</operator> <name><name>outbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>;</expr_stmt>


















<while>while<condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>written</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>this_write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>timeleft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>what</name></decl>;</decl_stmt>

<expr_stmt><expr><name>this_write</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>timeleft</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>timeleft</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"schannel: timed out sending data "</literal>
<literal type="string">"(bytes sent: %zd)"</literal></expr></argument>, <argument><expr><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_OPERATION_TIMEDOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>written</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>what</name> <operator>=</operator> <call><name>SOCKET_WRITABLE</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><name>timeleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>what</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"select/poll on SSL socket, errno: %d"</literal></expr></argument>, <argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>written</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>what</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"schannel: timed out sending data "</literal>
<literal type="string">"(bytes sent: %zd)"</literal></expr></argument>, <argument><expr><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_OPERATION_TIMEDOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>written</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>written</name></expr></argument>,
<argument><expr><name>len</name> <operator>-</operator> <name>written</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>this_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_AGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><name>written</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>this_write</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>sspi_status</name> <operator>==</operator> <name>SEC_E_INSUFFICIENT_MEMORY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>written</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>written</name> <operator>=</operator> <name><name>outbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>written</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>schannel_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>reallocated_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>reallocated_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBuffer</name></type> <name><name>inbuf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>inbuf_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>sspi_status</name> <init>= <expr><name>SEC_E_OK</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>min_encdata_length</name> <init>= <expr><name>len</name> <operator>+</operator> <name>CURL_SCHANNEL_BUFFER_FREE_SIZE</name></expr></init></decl>;</decl_stmt>











<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: client wants to read %zu bytes\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;=</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: enough decrypted data is already available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>recv_unrecoverable_err</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>recv_unrecoverable_err</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: an unrecoverable error occurred in a prior call\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>recv_sspi_close_notify</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: server indicated shutdown in a prior call\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>




<empty_stmt>;</empty_stmt> 
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>recv_connection_closed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_length</name></name> <operator>-</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <name>CURL_SCHANNEL_BUFFER_FREE_SIZE</name> <operator>||</operator>
<name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_length</name></name> <operator>&lt;</operator> <name>min_encdata_length</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reallocated_length</name> <operator>=</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name> <operator>+</operator>
<name>CURL_SCHANNEL_BUFFER_FREE_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>reallocated_length</name> <operator>&lt;</operator> <name>min_encdata_length</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reallocated_length</name> <operator>=</operator> <name>min_encdata_length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>reallocated_buffer</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_buffer</name></name></expr></argument>,
<argument><expr><name>reallocated_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>reallocated_buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: unable to re-allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_buffer</name></name> <operator>=</operator> <name>reallocated_buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_length</name></name> <operator>=</operator> <name>reallocated_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_length</name></name> <operator>-</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: encdata_buffer resized %zu\n"</literal></expr></argument>,
<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: encrypted data buffer: offset %zu length %zu\n"</literal></expr></argument>,
<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>Curl_read_plain</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_buffer</name></name> <operator>+</operator>
<name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nread</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>err</name> <operator>==</operator> <name>CURLE_AGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: Curl_read_plain returned CURLE_AGAIN\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>*</operator><name>err</name> <operator>==</operator> <name>CURLE_RECV_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: Curl_read_plain returned CURLE_RECV_ERROR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: Curl_read_plain returned error %d\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>recv_connection_closed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: server closed the connection\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>nread</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_is_incomplete</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: encrypted data got %zd\n"</literal></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: encrypted data buffer: offset %zu length %zu\n"</literal></expr></argument>,
<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sspi_status</name> <operator>==</operator> <name>SEC_E_OK</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name>len</name> <operator>||</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_offset</name></name> <operator>&lt;</operator> <name>len</name> <operator>||</operator>
<name><name>BACKEND</name><operator>-&gt;</operator><name>recv_connection_closed</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_DATA</name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_buffer</name></name></expr></argument>,
<argument><expr><call><name>curlx_uztoul</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitSecBufferDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inbuf_desc</name></expr></argument>, <argument><expr><name>inbuf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>sspi_status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DecryptMessage</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>inbuf_desc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><name>sspi_status</name> <operator>==</operator> <name>SEC_E_OK</name> <operator>||</operator> <name>sspi_status</name> <operator>==</operator> <name>SEC_I_RENEGOTIATE</name> <operator>||</operator>
<name>sspi_status</name> <operator>==</operator> <name>SEC_I_CONTEXT_EXPIRED</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>==</operator> <name>SECBUFFER_DATA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: decrypted data length: %lu\n"</literal></expr></argument>,
<argument><expr><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>size</name> <operator>=</operator> <ternary><condition><expr><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>&gt;</operator> <name>CURL_SCHANNEL_BUFFER_FREE_SIZE</name></expr> ?</condition><then>
<expr><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr> </then><else>: <expr><name>CURL_SCHANNEL_BUFFER_FREE_SIZE</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_length</name></name> <operator>-</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_offset</name></name> <operator>&lt;</operator> <name>size</name> <operator>||</operator>
<name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_length</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>reallocated_length</name> <operator>=</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_offset</name></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>reallocated_length</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reallocated_length</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>reallocated_buffer</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_buffer</name></name></expr></argument>,
<argument><expr><name>reallocated_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>reallocated_buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: unable to re-allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_buffer</name></name> <operator>=</operator> <name>reallocated_buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_length</name></name> <operator>=</operator> <name>reallocated_length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_buffer</name></name> <operator>+</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_offset</name></name></expr></argument>,
<argument><expr><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_offset</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: decrypted data added: %zu\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: decrypted cached: offset %zu length %zu\n"</literal></expr></argument>,
<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_offset</name></name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>inbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>==</operator> <name>SECBUFFER_EXTRA</name> <operator>&amp;&amp;</operator> <name><name>inbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: encrypted data length: %lu\n"</literal></expr></argument>,
<argument><expr><name><name>inbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name> <operator>&gt;</operator> <name><name>inbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_buffer</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_buffer</name></name> <operator>+</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name><operator>)</operator> <operator>-</operator>
<name><name>inbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>, <argument><expr><name><name>inbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name> <operator>=</operator> <name><name>inbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: encrypted cached: offset %zu length %zu\n"</literal></expr></argument>,
<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><name>sspi_status</name> <operator>==</operator> <name>SEC_I_RENEGOTIATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: remote party requests renegotiation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>err</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>err</name> <operator>!=</operator> <name>CURLE_AGAIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: can't renogotiate, an error is pending\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: can't renogotiate, "</literal>
<literal type="string">"encrypted data available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: renegotiating SSL/TLS connection\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ssl_connection_negotiating</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2_writing</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>schannel_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: renegotiation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sspi_status</name> <operator>=</operator> <name>SEC_E_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: SSL/TLS connection renegotiated\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>sspi_status</name> <operator>==</operator> <name>SEC_I_CONTEXT_EXPIRED</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>recv_sspi_close_notify</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>recv_connection_closed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>recv_connection_closed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: server closed the connection\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>sspi_status</name> <operator>==</operator> <name>SEC_E_INCOMPLETE_MESSAGE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_is_incomplete</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: failed to decrypt data, need more data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: failed to read data from server: %s\n"</literal></expr></argument>,
<argument><expr><call><name>Curl_sspi_strerror</name><argument_list>(<argument><expr><name>sspi_status</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: encrypted data buffer: offset %zu length %zu\n"</literal></expr></argument>,
<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: decrypted data buffer: offset %zu length %zu\n"</literal></expr></argument>,
<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_offset</name></name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: schannel_recv cleanup\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_offset</name></name> <operator>&amp;&amp;</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>recv_connection_closed</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>recv_sspi_close_notify</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>isWin2k</name> <init>= <expr><call><name>Curl_verify_windows_version</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PLATFORM_WINNT</name></expr></argument>,
<argument><expr><name>VERSION_EQUAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>isWin2k</name> <operator>&amp;&amp;</operator> <name>sspi_status</name> <operator>==</operator> <name>SEC_E_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>recv_sspi_close_notify</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: server closed abruptly (missing close_notify)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>*</operator><name>err</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>err</name> <operator>!=</operator> <name>CURLE_AGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>recv_unrecoverable_err</name></name> <operator>=</operator> <operator>*</operator><name>err</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <ternary><condition><expr><name>len</name> <operator>&lt;</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_offset</name></name></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_offset</name></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_buffer</name></name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_buffer</name></name> <operator>+</operator> <name>size</name></expr></argument>,
<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_offset</name></name> <operator>-</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_offset</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: decrypted data returned %zu\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: decrypted data buffer: offset %zu length %zu\n"</literal></expr></argument>,
<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_offset</name></name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>err</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>recv_connection_closed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if<condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>*</operator><name>err</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_schannel_connect_nonblocking</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>schannel_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_schannel_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>schannel_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Curl_schannel_data_pending</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>use</name></name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>(</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_is_incomplete</name></name><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_schannel_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>use</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_ssl_shutdown</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_schannel_session_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_schannel_cred</name></name> <modifier>*</modifier></type><name>cred</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cred</name><operator>-&gt;</operator><name>refcount</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>cred</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeCredentialsHandle</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cred</name><operator>-&gt;</operator><name>cred_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_schannel_shutdown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:
<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: shutting down SSL/TLS connection with %s port %hu\n"</literal></expr></argument>,
<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name></name> <operator>&amp;&amp;</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>BuffDesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBuffer</name></type> <name>Buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>sspi_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBuffer</name></type> <name>outbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>outbuf_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>host_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwshut</name> <init>= <expr><name>SCHANNEL_SHUTDOWN</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Buffer</name></expr></argument>, <argument><expr><name>SECBUFFER_TOKEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwshut</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dwshut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitSecBufferDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>BuffDesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sspi_status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>ApplyControlToken</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>BuffDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sspi_status</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: ApplyControlToken failure: %s"</literal></expr></argument>,
<argument><expr><call><name>Curl_sspi_strerror</name><argument_list>(<argument><expr><name>sspi_status</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>host_name</name> <operator>=</operator> <call><name>Curl_convert_UTF8_to_tchar</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>host_name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>InitSecBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>, <argument><expr><name>SECBUFFER_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitSecBufferDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sspi_status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>InitializeSecurityContext</name></name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name><operator>-&gt;</operator><name>cred_handle</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>,
<argument><expr><name>host_name</name></expr></argument>,
<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>req_flags</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>outbuf_desc</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ret_flags</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>time_stamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name>host_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>sspi_status</name> <operator>==</operator> <name>SEC_E_OK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>sspi_status</name> <operator>==</operator> <name>SEC_I_CONTEXT_EXPIRED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>written</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>outbuf</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>,
<argument><expr><name><name>outbuf</name><operator>.</operator><name>cbBuffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>outbuf</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>result</name> <operator>!=</operator> <name>CURLE_OK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>outbuf</name><operator>.</operator><name>cbBuffer</name></name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>written</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: failed to send close msg: %s"</literal>
<literal type="string">" (bytes written: %zd)\n"</literal></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: clear security context handle\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>Curl_ssl_sessionid_lock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_schannel_session_free</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>cred</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>encdata_is_incomplete</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>decdata_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_schannel_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>Curl_sspi_global_init</name><argument_list>()</argument_list></call> <operator>==</operator> <name>CURLE_OK</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_schannel_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Curl_sspi_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>Curl_schannel_version</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"Schannel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_schannel_random</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier><name>data</name></type> <name>UNUSED_PARAM</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>entropy</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HCRYPTPROV</name></type> <name>hCryptProv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CryptAcquireContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hCryptProv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PROV_RSA_FULL</name></expr></argument>,
<argument><expr><name>CRYPT_VERIFYCONTEXT</name> <operator>|</operator> <name>CRYPT_SILENT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CryptGenRandom</name><argument_list>(<argument><expr><name>hCryptProv</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>length</name></expr></argument>, <argument><expr><name>entropy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CryptReleaseContext</name><argument_list>(<argument><expr><name>hCryptProv</name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CryptReleaseContext</name><argument_list>(<argument><expr><name>hCryptProv</name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pkp_pin_peer_pubkey</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pinnedpubkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CERT_CONTEXT</name> <modifier>*</modifier></type><name>pCertContextServer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_SSL_PINNEDPUBKEYNOTMATCH</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pinnedpubkey</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>sspi_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>x509_der</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>x509_der_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_X509certificate</name></type> <name>x509_parsed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_asn1Element</name> <modifier>*</modifier></type><name>pubkey</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sspi_status</name> <operator>=</operator>
<call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>QueryContextAttributes</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>,
<argument><expr><name>SECPKG_ATTR_REMOTE_CERT_CONTEXT</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>pCertContextServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>sspi_status</name> <operator>!=</operator> <name>SEC_E_OK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>pCertContextServer</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: Failed to read remote certificate context: %s"</literal></expr></argument>,
<argument><expr><call><name>Curl_sspi_strerror</name><argument_list>(<argument><expr><name>sspi_status</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break> 
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>pCertContextServer</name><operator>-&gt;</operator><name>dwCertEncodingType</name></name> <operator>&amp;</operator> <name>X509_ASN_ENCODING</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pCertContextServer</name><operator>-&gt;</operator><name>cbCertEncoded</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x509_der</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pCertContextServer</name><operator>-&gt;</operator><name>pbCertEncoded</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x509_der_len</name> <operator>=</operator> <name><name>pCertContextServer</name><operator>-&gt;</operator><name>cbCertEncoded</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x509_parsed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509_parsed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>Curl_parseX509</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x509_parsed</name></expr></argument>, <argument><expr><name>x509_der</name></expr></argument>, <argument><expr><name>x509_der</name> <operator>+</operator> <name>x509_der_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pubkey</name> <operator>=</operator> <operator>&amp;</operator><name><name>x509_parsed</name><operator>.</operator><name>subjectPublicKeyInfo</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>pubkey</name><operator>-&gt;</operator><name>header</name></name> <operator>||</operator> <name><name>pubkey</name><operator>-&gt;</operator><name>end</name></name> <operator>&lt;=</operator> <name><name>pubkey</name><operator>-&gt;</operator><name>header</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: failed retrieving public key from server certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pin_peer_pubkey</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><name>pinnedpubkey</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pubkey</name><operator>-&gt;</operator><name>header</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>pubkey</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>pubkey</name><operator>-&gt;</operator><name>header</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: public key does not match pinned public key!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>pCertContextServer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CertFreeCertificateContext</name><argument_list>(<argument><expr><name>pCertContextServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_schannel_checksum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>inputlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>checksum</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>checksumlen</name></decl></parameter>,
<parameter><decl><type><name>DWORD</name></type> <name>provType</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>algId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HCRYPTPROV</name></type> <name>hProv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCRYPTHASH</name></type> <name>hHash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>cbHashSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwHashSizeLen</name> <init>= <expr><operator>(</operator><name>DWORD</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>cbHashSize</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwChecksumLen</name> <init>= <expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>checksumlen</name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>checksum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>checksumlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CryptAcquireContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hProv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>provType</name></expr></argument>,
<argument><expr><name>CRYPT_VERIFYCONTEXT</name> <operator>|</operator> <name>CRYPT_SILENT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<do>do <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CryptCreateHash</name><argument_list>(<argument><expr><name>hProv</name></expr></argument>, <argument><expr><name>algId</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hHash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CryptHashData</name><argument_list>(<argument><expr><name>hHash</name></expr></argument>, <argument><expr><operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator><name>input</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>inputlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CryptGetHashParam</name><argument_list>(<argument><expr><name>hHash</name></expr></argument>, <argument><expr><name>HP_HASHSIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>BYTE</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cbHashSize</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dwHashSizeLen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 


<if_stmt><if>if<condition>(<expr><name>checksumlen</name> <operator>&lt;</operator> <name>cbHashSize</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><call><name>CryptGetHashParam</name><argument_list>(<argument><expr><name>hHash</name></expr></argument>, <argument><expr><name>HP_HASHVAL</name></expr></argument>, <argument><expr><name>checksum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwChecksumLen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 
</block_content>}</block> while<condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>hHash</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CryptDestroyHash</name><argument_list>(<argument><expr><name>hHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>hProv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CryptReleaseContext</name><argument_list>(<argument><expr><name>hProv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_schannel_md5sum</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>inputlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>md5sum</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>md5len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Curl_schannel_checksum</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputlen</name></expr></argument>, <argument><expr><name>md5sum</name></expr></argument>, <argument><expr><name>md5len</name></expr></argument>,
<argument><expr><name>PROV_RSA_FULL</name></expr></argument>, <argument><expr><name>CALG_MD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_schannel_sha256sum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>inputlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha256sum</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>sha256len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Curl_schannel_checksum</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputlen</name></expr></argument>, <argument><expr><name>sha256sum</name></expr></argument>, <argument><expr><name>sha256len</name></expr></argument>,
<argument><expr><name>PROV_RSA_AES</name></expr></argument>, <argument><expr><name>CALG_SHA_256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Curl_schannel_get_internals</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>,
<parameter><decl><type><name>CURLINFO</name> <name>info</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>info</name></expr>;</expr_stmt>
<return>return <expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_ssl</name></name></type> <name>Curl_ssl_schannel</name> <init>= <expr><block>{
<expr><block>{ <expr><name>CURLSSLBACKEND_SCHANNEL</name></expr>, <expr><literal type="string">"schannel"</literal></expr> }</block></expr>, 

<expr><name>SSLSUPP_CERTINFO</name> <operator>|</operator>
<name>SSLSUPP_PINNEDPUBKEY</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ssl_backend_data</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><name>Curl_schannel_init</name></expr>, 
<expr><name>Curl_schannel_cleanup</name></expr>, 
<expr><name>Curl_schannel_version</name></expr>, 
<expr><name>Curl_none_check_cxn</name></expr>, 
<expr><name>Curl_schannel_shutdown</name></expr>, 
<expr><name>Curl_schannel_data_pending</name></expr>, 
<expr><name>Curl_schannel_random</name></expr>, 
<expr><name>Curl_none_cert_status_request</name></expr>, 
<expr><name>Curl_schannel_connect</name></expr>, 
<expr><name>Curl_schannel_connect_nonblocking</name></expr>, 
<expr><name>Curl_schannel_get_internals</name></expr>, 
<expr><name>Curl_schannel_close</name></expr>, 
<expr><name>Curl_none_close_all</name></expr>, 
<expr><name>Curl_schannel_session_free</name></expr>, 
<expr><name>Curl_none_set_engine</name></expr>, 
<expr><name>Curl_none_set_engine_default</name></expr>, 
<expr><name>Curl_none_engines_list</name></expr>, 
<expr><name>Curl_none_false_start</name></expr>, 
<expr><name>Curl_schannel_md5sum</name></expr>, 
<expr><name>Curl_schannel_sha256sum</name></expr> 
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
