<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\vtls\wolfssl.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WOLFSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WOLFSSL_OPTIONS_IGNORE_SYS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wolfssl/version.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wolfssl/options.h&gt;</cpp:file></cpp:include>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WOLFSSL_USEALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_ALPN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WOLFSSL_ALLOW_SSLV3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LIBWOLFSSL_VERSION_HEX</name> <operator>&lt;</operator> <literal type="number">0x03006006</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WOLFSSLV3_CLIENT_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WOLFSSL_ALLOW_SSLV3</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_pton.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parsedate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x509asn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wolfssl/openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wolfssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wolfssl/error-ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wolfssl.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>KEEP_PEER_CERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WOLFSSL_GET_PEER_CERTIFICATE</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_EXTRA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_CERTS</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEEP_PEER_CERT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>ssl_backend_data</name> <block>{
<decl_stmt><decl><type><name>SSL_CTX</name><modifier>*</modifier></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSL</name><modifier>*</modifier></type> <name>handle</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_recv</name></type> <name>wolfssl_recv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_send</name></type> <name>wolfssl_send</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_file_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>type</name> <operator>||</operator> <operator>!</operator><name><name>type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SSL_FILETYPE_PEM</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"PEM"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SSL_FILETYPE_PEM</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"DER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SSL_FILETYPE_ASN1</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>CURLcode</name></type>
<name>wolfssl_connect_step1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ciphers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name><modifier>*</modifier></type> <name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSL_METHOD</name><modifier>*</modifier></type> <name>req_method</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SNI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>sni</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>use_sni</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sni = (x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>use_sni</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ssl_connection_complete</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version_max</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CURL_SSLVERSION_MAX_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfSSL does not support to set maximum SSL/TLS version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<switch>switch<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_SSLVERSION_DEFAULT</name></expr>:</case>
<case>case <expr><name>CURL_SSLVERSION_TLSv1</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBWOLFSSL_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x03003000</literal></expr></cpp:if> 

<expr_stmt><expr><name>req_method</name> <operator>=</operator> <call><name>SSLv23_client_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfSSL &lt;3.3.0 cannot be configured to use TLS 1.0-1.2, "</literal>
<literal type="string">"TLS 1.0 is used exclusively\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>req_method</name> <operator>=</operator> <call><name>TLSv1_client_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>use_sni</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WOLFSSL_ALLOW_TLSV10</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>req_method</name> <operator>=</operator> <call><name>TLSv1_client_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>use_sni</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfSSL does not support TLS 1.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>
<expr_stmt><expr><name>req_method</name> <operator>=</operator> <call><name>TLSv1_1_client_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>use_sni</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>
<expr_stmt><expr><name>req_method</name> <operator>=</operator> <call><name>TLSv1_2_client_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>use_sni</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WOLFSSL_TLS13</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>req_method</name> <operator>=</operator> <call><name>wolfTLSv1_3_client_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>use_sni</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfSSL: TLS 1.3 is not yet supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CURL_SSLVERSION_SSLv3</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WOLFSSL_ALLOW_SSLV3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>req_method</name> <operator>=</operator> <call><name>SSLv3_client_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>use_sni</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfSSL does not support SSLv3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>CURL_SSLVERSION_SSLv2</name></expr>:</case>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfSSL does not support SSLv2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized parameter passed via CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>req_method</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: couldn't create a method!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>SSL_CTX_new</name><argument_list>(<argument><expr><name>req_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: couldn't create a context!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_SSLVERSION_DEFAULT</name></expr>:</case>
<case>case <expr><name>CURL_SSLVERSION_TLSv1</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBWOLFSSL_VERSION_HEX</name> <operator>&gt;</operator> <literal type="number">0x03004006</literal></expr></cpp:if> 






<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>wolfSSL_CTX_SetMinVersion</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>WOLFSSL_TLSV1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>wolfSSL_CTX_SetMinVersion</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>WOLFSSL_TLSV1_1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>wolfSSL_CTX_SetMinVersion</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>WOLFSSL_TLSV1_2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WOLFSSL_TLS13</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>wolfSSL_CTX_SetMinVersion</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>WOLFSSL_TLSV1_3</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: couldn't set the minimum protocol version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>ciphers</name> <operator>=</operator> <call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>cipher_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ciphers</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CTX_set_cipher_list</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>ciphers</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed setting cipher list: %s"</literal></expr></argument>, <argument><expr><name>ciphers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CIPHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Cipher selection: %s\n"</literal></expr></argument>, <argument><expr><name>ciphers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_FILESYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>SSL_CTX_load_verify_locations</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>,
<argument><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CApath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error setting certificate verify locations:\n"</literal>
<literal type="string">" CAfile: %s\n CApath: %s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr>?</condition><then>
<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="string">"none"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CApath</name></expr></argument>)</argument_list></call></expr>?</condition><then>
<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CApath</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"none"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>


<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error setting certificate verify locations,"</literal>
<literal type="string">" continuing anyway:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"successfully set certificate verify locations:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">" CAfile: %s\n"</literal>
<literal type="string">" CApath: %s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr></then><else>:
<expr><literal type="string">"none"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CApath</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CApath</name></expr></argument>)</argument_list></call></expr></then><else>:
<expr><literal type="string">"none"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>file_type</name> <init>= <expr><call><name>do_file_type</name><argument_list>(<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CTX_use_certificate_file</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>file_type</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unable to use client certificate (no key or wrong pass"</literal>
<literal type="string">" phrase?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>file_type</name> <operator>=</operator> <call><name>do_file_type</name><argument_list>(<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>SSL_CTX_use_PrivateKey_file</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>file_type</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unable to set private key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 





<expr_stmt><expr><call><name>SSL_CTX_set_verify</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><name>SSL_VERIFY_PEER</name></expr></then><else>:
<expr><name>SSL_VERIFY_NONE</name></expr></else></ternary></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SNI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>sni</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr4</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>addr6</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:
<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hostname_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>hostname_len</name> <operator>&lt;</operator> <name>USHRT_MAX</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr4</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr6</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>(</operator><call><name>wolfSSL_CTX_UseSNI</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>WOLFSSL_SNI_HOST_NAME</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>hostname_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"WARNING: failed to configure server name indication (SNI) "</literal>
<literal type="string">"TLS extension\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>fsslctx</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call>(<modifier>*</modifier><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>fsslctx</name></name>)<argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>fsslctxp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error signaled by ssl ctx callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_FILESYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: Certificates can't be loaded because wolfSSL was built"</literal>
<literal type="string">" with \"no filesystem\". Either disable peer verification"</literal>
<literal type="string">" (insecure) or if you are building an application with libcurl you"</literal>
<literal type="string">" can load certificates via CURLOPT_SSL_CTX_FUNCTION."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <call><name>SSL_new</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: couldn't create a context (handle)!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_alpn</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>protocols</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>protocols</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>&gt;=</operator> <name>CURL_HTTP_VERSION_2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>protocols</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>protocols</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name> <literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, offering %s\n"</literal></expr></argument>, <argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>protocols</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>protocols</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, offering %s\n"</literal></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>wolfSSL_UseALPN</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>protocols</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>protocols</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>WOLFSSL_ALPN_CONTINUE_ON_MISMATCH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SSL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: failed setting ALPN protocols"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name><name>primary</name><operator>.</operator><name>sessionid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ssl_sessionid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_lock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_ssl_getsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssl_sessionid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_set_session</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>ssl_sessionid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>error_buffer</name><index>[<expr><name>WOLFSSL_MAX_ERROR_SZ</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: SSL_set_session failed: %s"</literal></expr></argument>,
<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL re-using session ID\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_set_fd</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>sockfd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: SSL_set_fd failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type>
<name>wolfssl_connect_step2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name><modifier>*</modifier></type> <name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:
<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dispname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then>
<expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>dispname</name></name></expr> </then><else>: <expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>dispname</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pinnedpubkey</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then>
<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_PROXY</name></expr>]</index></name></expr> </then><else>:
<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_ORIG</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>wolfssl_recv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>wolfssl_send</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifyhost</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wolfSSL_check_domain_name</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>SSL_FAILURE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSL_connect</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>error_buffer</name><index>[<expr><name>WOLFSSL_MAX_ERROR_SZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>detail</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>SSL_ERROR_WANT_READ</name> <operator>==</operator> <name>detail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2_reading</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>SSL_ERROR_WANT_WRITE</name> <operator>==</operator> <name>detail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2_writing</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if>



<if type="elseif">else if<condition>(<expr><name>DOMAIN_NAME_MISMATCH</name> <operator>==</operator> <name>detail</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\tsubject alt name(s) or common name do not match \"%s\"\n"</literal></expr></argument>,
<argument><expr><name>dispname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>






<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifyhost</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"\tsubject alt name(s) or common name do not match \"%s\"\n"</literal></expr></argument>,
<argument><expr><name>dispname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"\tsubject alt name(s) and/or common name do not match \"%s\"\n"</literal></expr></argument>,
<argument><expr><name>dispname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBWOLFSSL_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02007000</literal></expr></cpp:if> 
<if type="elseif">else if<condition>(<expr><name>ASN_NO_SIGNER_E</name> <operator>==</operator> <name>detail</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\tCA signer not available for verification\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>


<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"CA signer not available for verification, "</literal>
<literal type="string">"continuing anyway\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL_connect failed with error %d: %s"</literal></expr></argument>, <argument><expr><name>detail</name></expr></argument>,
<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><name>detail</name></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pinnedpubkey</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEEP_PEER_CERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>x509_der</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x509_der_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_X509certificate</name></type> <name>x509_parsed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_asn1Element</name> <modifier>*</modifier></type><name>pubkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x509</name> <operator>=</operator> <call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>x509</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: failed retrieving server certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_PINNEDPUBKEYNOTMATCH</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x509_der</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>wolfSSL_X509_get_der</name><argument_list>(<argument><expr><name>x509</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x509_der_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>x509_der</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: failed retrieving ASN.1 server certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_PINNEDPUBKEYNOTMATCH</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x509_parsed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509_parsed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>Curl_parseX509</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x509_parsed</name></expr></argument>, <argument><expr><name>x509_der</name></expr></argument>, <argument><expr><name>x509_der</name> <operator>+</operator> <name>x509_der_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_SSL_PINNEDPUBKEYNOTMATCH</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pubkey</name> <operator>=</operator> <operator>&amp;</operator><name><name>x509_parsed</name><operator>.</operator><name>subjectPublicKeyInfo</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>pubkey</name><operator>-&gt;</operator><name>header</name></name> <operator>||</operator> <name><name>pubkey</name><operator>-&gt;</operator><name>end</name></name> <operator>&lt;=</operator> <name><name>pubkey</name><operator>-&gt;</operator><name>header</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: failed retrieving public key from server certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_PINNEDPUBKEYNOTMATCH</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pin_peer_pubkey</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><name>pinnedpubkey</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pubkey</name><operator>-&gt;</operator><name>header</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>pubkey</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>pubkey</name><operator>-&gt;</operator><name>header</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: public key does not match pinned public key!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Library lacks pinning support built-in"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_alpn</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>protocol</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>protocol_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSL_ALPN_GetProtocol</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>protocol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>protocol_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, server accepted to use %.*s\n"</literal></expr></argument>, <argument><expr><name>protocol_len</name></expr></argument>,
<argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>protocol_len</name> <operator>==</operator> <name>ALPN_HTTP_1_1_LENGTH</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1_LENGTH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_1_1</name></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>&gt;=</operator> <name>CURL_HTTP_VERSION_2</name> <operator>&amp;&amp;</operator>
<name>protocol_len</name> <operator>==</operator> <name>NGHTTP2_PROTO_VERSION_ID_LEN</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>,
<argument><expr><name>NGHTTP2_PROTO_VERSION_ID_LEN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_2</name></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, unrecognized protocol %.*s\n"</literal></expr></argument>, <argument><expr><name>protocol_len</name></expr></argument>,
<argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>Curl_multiuse_state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>==</operator> <name>CURL_HTTP_VERSION_2</name></expr> ?</condition><then>
<expr><name>BUNDLE_MULTIPLEX</name></expr> </then><else>: <expr><name>BUNDLE_NO_MULTIUSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSL_ALPN_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, server did not agree to a protocol\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, failure getting protocol, error %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_3</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LIBWOLFSSL_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x03009010</literal><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection using %s / %s\n"</literal></expr></argument>,
<argument><expr><call><name>wolfSSL_get_version</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>wolfSSL_get_cipher_name</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type>
<name>wolfssl_connect_step3</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>ssl_connect_3</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name><name>primary</name><operator>.</operator><name>sessionid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>incache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSL_SESSION</name> <modifier>*</modifier></type><name>our_ssl_sessionid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>old_ssl_sessionid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>our_ssl_sessionid</name> <operator>=</operator> <call><name>SSL_get_session</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_lock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>incache</name> <operator>=</operator> <operator>!</operator><operator>(</operator><call><name>Curl_ssl_getsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_ssl_sessionid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>sockindex</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>incache</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>old_ssl_sessionid</name> <operator>!=</operator> <name>our_ssl_sessionid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"old SSL session ID is stale, removing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_ssl_delsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>old_ssl_sessionid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>incache</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>incache</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ssl_addsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>our_ssl_sessionid</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed to store ssl session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_done</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>wolfssl_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>curlcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>error_buffer</name><index>[<expr><name>WOLFSSL_MAX_ERROR_SZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>memlen</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>INT_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT_MAX</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>SSL_write</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SSL_ERROR_WANT_READ</name></expr>:</case>
<case>case <expr><name>SSL_ERROR_WANT_WRITE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SSL write: %s, errno %d"</literal></expr></argument>,
<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_wolfssl_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSL_shutdown</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>wolfssl_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffersize</name></decl></parameter>,
<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>curlcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>error_buffer</name><index>[<expr><name>WOLFSSL_MAX_ERROR_SZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffsize</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>buffersize</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>INT_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT_MAX</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name>buffersize</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nread</name> <init>= <expr><call><name>SSL_read</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SSL_ERROR_ZERO_RETURN</name></expr>:</case> 
<break>break;</break>
<case>case <expr><name>SSL_ERROR_WANT_READ</name></expr>:</case>
<case>case <expr><name>SSL_ERROR_WANT_WRITE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SSL read: %s, errno %d"</literal></expr></argument>,
<argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>nread</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_wolfssl_session_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ptr</name></expr>;</expr_stmt>

</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>Curl_wolfssl_version</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBWOLFSSL_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x03006000</literal></expr></cpp:if>
<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"wolfSSL/%s"</literal></expr></argument>, <argument><expr><call><name>wolfSSL_lib_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WOLFSSL_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"wolfSSL/%s"</literal></expr></argument>, <argument><expr><name>WOLFSSL_VERSION</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_wolfssl_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>wolfSSL_Init</name><argument_list>()</argument_list></call> <operator>==</operator> <name>SSL_SUCCESS</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_wolfssl_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>wolfSSL_Cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>Curl_wolfssl_data_pending</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name><modifier>*</modifier></type> <name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>connindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>connindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>SSL_pending</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_wolfssl_shutdown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type>
<name>wolfssl_connect_common</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>nonblocking</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>timeout_ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>what</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>ssl_connection_complete</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connect_1</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wolfssl_connect_step1</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><name>ssl_connect_2</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>
<name>ssl_connect_2_reading</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>
<name>ssl_connect_2_writing</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_2_reading</name>
<operator>||</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_2_writing</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>writefd</name> <init>= <expr><ternary><condition><expr><name>ssl_connect_2_writing</name> <operator>==</operator>
<name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>?</condition><then><expr><name>sockfd</name></expr></then><else>:<expr><name>CURL_SOCKET_BAD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>readfd</name> <init>= <expr><ternary><condition><expr><name>ssl_connect_2_reading</name> <operator>==</operator>
<name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>?</condition><then><expr><name>sockfd</name></expr></then><else>:<expr><name>CURL_SOCKET_BAD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>what</name> <operator>=</operator> <call><name>Curl_socket_check</name><argument_list>(<argument><expr><name>readfd</name></expr></argument>, <argument><expr><name>CURL_SOCKET_BAD</name></expr></argument>, <argument><expr><name>writefd</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>nonblocking</name></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><name>timeout_ms</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>what</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"select/poll on SSL socket, errno: %d"</literal></expr></argument>, <argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>what</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>nonblocking</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>








<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wolfssl_connect_step2</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>(</operator><name>nonblocking</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ssl_connect_2</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>
<name>ssl_connect_2_reading</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>
<name>ssl_connect_2_writing</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while> 

<if_stmt><if>if<condition>(<expr><name>ssl_connect_3</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wolfssl_connect_step3</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connect_done</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ssl_connection_complete</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>wolfssl_recv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>wolfssl_send</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_1</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_wolfssl_connect_nonblocking</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>wolfssl_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_wolfssl_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wolfssl_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_wolfssl_random</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>entropy</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WC_RNG</name></type> <name>rng</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>wc_InitRng</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rng</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&gt;</operator> <name>UINT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>wc_RNG_GenerateBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rng</name></expr></argument>, <argument><expr><name>entropy</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>length</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>wc_FreeRng</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rng</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_wolfssl_sha256sum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, 
<parameter><decl><type><name>size_t</name></type> <name>tmplen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha256sum</name></decl></parameter> ,
<parameter><decl><type><name>size_t</name></type> <name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wc_Sha256</name></type> <name>SHA256pw</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>unused</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wc_InitSha256</name><argument_list>(<argument><expr><operator>&amp;</operator><name>SHA256pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wc_Sha256Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>SHA256pw</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>word32</name><operator>)</operator><name>tmplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wc_Sha256Final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>SHA256pw</name></expr></argument>, <argument><expr><name>sha256sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Curl_wolfssl_get_internals</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>,
<parameter><decl><type><name>CURLINFO</name> <name>info</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>info</name></expr>;</expr_stmt>
<return>return <expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_ssl</name></name></type> <name>Curl_ssl_wolfssl</name> <init>= <expr><block>{
<expr><block>{ <expr><name>CURLSSLBACKEND_WOLFSSL</name></expr>, <expr><literal type="string">"WolfSSL"</literal></expr> }</block></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KEEP_PEER_CERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>SSLSUPP_PINNEDPUBKEY</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>SSLSUPP_SSL_CTX</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ssl_backend_data</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><name>Curl_wolfssl_init</name></expr>, 
<expr><name>Curl_wolfssl_cleanup</name></expr>, 
<expr><name>Curl_wolfssl_version</name></expr>, 
<expr><name>Curl_none_check_cxn</name></expr>, 
<expr><name>Curl_wolfssl_shutdown</name></expr>, 
<expr><name>Curl_wolfssl_data_pending</name></expr>, 
<expr><name>Curl_wolfssl_random</name></expr>, 
<expr><name>Curl_none_cert_status_request</name></expr>, 
<expr><name>Curl_wolfssl_connect</name></expr>, 
<expr><name>Curl_wolfssl_connect_nonblocking</name></expr>, 
<expr><name>Curl_wolfssl_get_internals</name></expr>, 
<expr><name>Curl_wolfssl_close</name></expr>, 
<expr><name>Curl_none_close_all</name></expr>, 
<expr><name>Curl_wolfssl_session_free</name></expr>, 
<expr><name>Curl_none_set_engine</name></expr>, 
<expr><name>Curl_none_set_engine_default</name></expr>, 
<expr><name>Curl_none_engines_list</name></expr>, 
<expr><name>Curl_none_false_start</name></expr>, 
<expr><name>Curl_none_md5sum</name></expr>, 
<expr><name>Curl_wolfssl_sha256sum</name></expr> 
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
