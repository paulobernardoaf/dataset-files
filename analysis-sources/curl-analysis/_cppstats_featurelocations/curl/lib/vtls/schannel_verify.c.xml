<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\vtls\schannel_verify.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SCHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Can't compile SCHANNEL support without SSPI."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPOSE_SCHANNEL_INTERNAL_STRUCTS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"schannel.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_MANUAL_VERIFY_API</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_multibyte.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hostcheck.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"system_win32.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKEND</name></cpp:macro> <cpp:value>connssl-&gt;backend</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CAFILE_SIZE</name></cpp:macro> <cpp:value>1048576</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEGIN_CERT</name></cpp:macro> <cpp:value>"-----BEGIN CERTIFICATE-----"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_CERT</name></cpp:macro> <cpp:value>"\n-----END CERTIFICATE-----"</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>cbSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCERTSTORE</name></type> <name>hRestrictedRoot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCERTSTORE</name></type> <name>hRestrictedTrust</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCERTSTORE</name></type> <name>hRestrictedOther</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>cAdditionalStore</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCERTSTORE</name> <modifier>*</modifier></type><name>rghAdditionalStore</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwUrlRetrievalTimeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>MaximumCachedCertificates</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>CycleDetectionModulus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCERTSTORE</name></type> <name>hExclusiveRoot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCERTSTORE</name></type> <name>hExclusiveTrustedPeople</name></decl>;</decl_stmt>
}</block></struct></type> <name>CERT_CHAIN_ENGINE_CONFIG_WIN7</name><operator>,</operator> *<name>PCERT_CHAIN_ENGINE_CONFIG_WIN7</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_cr_or_lf</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>add_certs_to_store</name><parameter_list>(<parameter><decl><type><name>HCERTSTORE</name></type> <name>trust_store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ca_file</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>ca_file_handle</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>file_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ca_file_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>current_ca_file_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>ca_file_tstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ca_file_bufsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>total_bytes_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>more_certs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_certs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>END_CERT_LEN</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ca_file_tstr</name> <operator>=</operator> <call><name>Curl_convert_UTF8_to_tchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ca_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ca_file_tstr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: invalid path name for CA file '%s': %s"</literal></expr></argument>,
<argument><expr><name>ca_file</name></expr></argument>,
<argument><expr><call><name>Curl_winapi_strerror</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CACERT_BADFILE</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>ca_file_handle</name> <operator>=</operator> <call><name>CreateFile</name><argument_list>(<argument><expr><name>ca_file_tstr</name></expr></argument>,
<argument><expr><name>GENERIC_READ</name></expr></argument>,
<argument><expr><name>FILE_SHARE_READ</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OPEN_EXISTING</name></expr></argument>,
<argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ca_file_handle</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: failed to open CA file '%s': %s"</literal></expr></argument>,
<argument><expr><name>ca_file</name></expr></argument>,
<argument><expr><call><name>Curl_winapi_strerror</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CACERT_BADFILE</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>GetFileSizeEx</name><argument_list>(<argument><expr><name>ca_file_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: failed to determine size of CA file '%s': %s"</literal></expr></argument>,
<argument><expr><name>ca_file</name></expr></argument>,
<argument><expr><call><name>Curl_winapi_strerror</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CACERT_BADFILE</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>file_size</name><operator>.</operator><name>QuadPart</name></name> <operator>&gt;</operator> <name>MAX_CAFILE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: CA file exceeds max size of %u bytes"</literal></expr></argument>,
<argument><expr><name>MAX_CAFILE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CACERT_BADFILE</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ca_file_bufsize</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>file_size</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ca_file_buffer</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>ca_file_bufsize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ca_file_buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>total_bytes_read</name> <operator>&lt;</operator> <name>ca_file_bufsize</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>bytes_to_read</name> <init>= <expr><operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><name>ca_file_bufsize</name> <operator>-</operator> <name>total_bytes_read</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>bytes_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ReadFile</name><argument_list>(<argument><expr><name>ca_file_handle</name></expr></argument>, <argument><expr><name>ca_file_buffer</name> <operator>+</operator> <name>total_bytes_read</name></expr></argument>,
<argument><expr><name>bytes_to_read</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_read</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: failed to read from CA file '%s': %s"</literal></expr></argument>,
<argument><expr><name>ca_file</name></expr></argument>,
<argument><expr><call><name>Curl_winapi_strerror</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CACERT_BADFILE</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>bytes_read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ca_file_bufsize</name> <operator>=</operator> <name>total_bytes_read</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>total_bytes_read</name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name><name>ca_file_buffer</name><index>[<expr><name>ca_file_bufsize</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>END_CERT_LEN</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>END_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>more_certs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>current_ca_file_ptr</name> <operator>=</operator> <name>ca_file_buffer</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>more_certs</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>current_ca_file_ptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>begin_cert_ptr</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>current_ca_file_ptr</name></expr></argument>, <argument><expr><name>BEGIN_CERT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>begin_cert_ptr</name> <operator>||</operator> <operator>!</operator><call><name>is_cr_or_lf</name><argument_list>(<argument><expr><name><name>begin_cert_ptr</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>BEGIN_CERT</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>more_certs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end_cert_ptr</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>begin_cert_ptr</name></expr></argument>, <argument><expr><name>END_CERT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>end_cert_ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: CA file '%s' is not correctly formatted"</literal></expr></argument>,
<argument><expr><name>ca_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CACERT_BADFILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>more_certs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>CERT_BLOB</name></type> <name>cert_blob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CERT_CONTEXT</name> <modifier>*</modifier></type><name>cert_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>add_cert_result</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>actual_content_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>cert_size</name> <init>= <expr><operator>(</operator><name>DWORD</name><operator>)</operator>
<operator>(</operator><operator>(</operator><name>end_cert_ptr</name> <operator>+</operator> <name>END_CERT_LEN</name><operator>)</operator> <operator>-</operator> <name>begin_cert_ptr</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cert_blob</name><operator>.</operator><name>pbData</name></name> <operator>=</operator> <operator>(</operator><name>BYTE</name> <operator>*</operator><operator>)</operator><name>begin_cert_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cert_blob</name><operator>.</operator><name>cbData</name></name> <operator>=</operator> <name>cert_size</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CryptQueryObject</name><argument_list>(<argument><expr><name>CERT_QUERY_OBJECT_BLOB</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cert_blob</name></expr></argument>,
<argument><expr><name>CERT_QUERY_CONTENT_FLAG_CERT</name></expr></argument>,
<argument><expr><name>CERT_QUERY_FORMAT_FLAG_ALL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>actual_content_type</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cert_context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: failed to extract certificate from CA file "</literal>
<literal type="string">"'%s': %s"</literal></expr></argument>,
<argument><expr><name>ca_file</name></expr></argument>,
<argument><expr><call><name>Curl_winapi_strerror</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CACERT_BADFILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>more_certs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>current_ca_file_ptr</name> <operator>=</operator> <name>begin_cert_ptr</name> <operator>+</operator> <name>cert_size</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>CERT_QUERY_CONTENT_CERT</name> <operator>!=</operator> <name>actual_content_type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: unexpected content type '%d' when extracting "</literal>
<literal type="string">"certificate from CA file '%s'"</literal></expr></argument>,
<argument><expr><name>actual_content_type</name></expr></argument>, <argument><expr><name>ca_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CACERT_BADFILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>more_certs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>add_cert_result</name> <operator>=</operator>
<call><name>CertAddCertificateContextToStore</name><argument_list>(<argument><expr><name>trust_store</name></expr></argument>,
<argument><expr><name>cert_context</name></expr></argument>,
<argument><expr><name>CERT_STORE_ADD_ALWAYS</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CertFreeCertificateContext</name><argument_list>(<argument><expr><name>cert_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>add_cert_result</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: failed to add certificate from CA file '%s' "</literal>
<literal type="string">"to certificate store: %s"</literal></expr></argument>,
<argument><expr><name>ca_file</name></expr></argument>,
<argument><expr><call><name>Curl_winapi_strerror</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CACERT_BADFILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>more_certs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>num_certs</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>num_certs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: did not add any certificates from CA file '%s'\n"</literal></expr></argument>,
<argument><expr><name>ca_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: added %d certificate(s) from CA file '%s'\n"</literal></expr></argument>,
<argument><expr><name>num_certs</name></expr></argument>, <argument><expr><name>ca_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>cleanup</name>:</label>
<if_stmt><if>if<condition>(<expr><name>ca_file_handle</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>ca_file_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>ca_file_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name>ca_file_tstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>DWORD</name></type> <name>cert_get_name_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>CERT_CONTEXT</name> <modifier>*</modifier></type><name>cert_context</name></decl></parameter>,
<parameter><decl><type><name>LPTSTR</name></type> <name>host_names</name></decl></parameter>,
<parameter><decl><type><name>DWORD</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>actual_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>compute_content</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CERT_INFO</name> <modifier>*</modifier></type><name>cert_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CERT_EXTENSION</name> <modifier>*</modifier></type><name>extension</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CRYPT_DECODE_PARA</name></type> <name>decode_para</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CERT_ALT_NAME_INFO</name> <modifier>*</modifier></type><name>alt_name_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>alt_name_info_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>ret_val</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPTSTR</name></type> <name>current_pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>i</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><call><name>Curl_verify_windows_version</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>PLATFORM_WINNT</name></expr></argument>,
<argument><expr><name>VERSION_GREATER_THAN_EQUAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CERT_NAME_SEARCH_ALL_NAMES_FLAG</name></expr></argument>)</argument_list></call></expr></cpp:if>


<decl_stmt><decl><type><name>DWORD</name></type> <name>name_flags</name> <init>=
<expr><name>CERT_NAME_DISABLE_IE4_UTF8_FLAG</name> <operator>|</operator> <name>CERT_NAME_SEARCH_ALL_NAMES_FLAG</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>actual_length</name> <operator>=</operator> <call><name>CertGetNameString</name><argument_list>(<argument><expr><name>cert_context</name></expr></argument>,
<argument><expr><name>CERT_NAME_DNS_TYPE</name></expr></argument>,
<argument><expr><name>name_flags</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>host_names</name></expr></argument>,
<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>actual_length</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>compute_content</name> <operator>=</operator> <name>host_names</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>length</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>actual_length</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>compute_content</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>host_names</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cert_context</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: Null certificate context."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>actual_length</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cert_info</name> <operator>=</operator> <name><name>cert_context</name><operator>-&gt;</operator><name>pCertInfo</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cert_info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: Null certificate info."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>actual_length</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>extension</name> <operator>=</operator> <call><name>CertFindExtension</name><argument_list>(<argument><expr><name>szOID_SUBJECT_ALT_NAME2</name></expr></argument>,
<argument><expr><name><name>cert_info</name><operator>-&gt;</operator><name>cExtension</name></name></expr></argument>,
<argument><expr><name><name>cert_info</name><operator>-&gt;</operator><name>rgExtension</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>extension</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: CertFindExtension() returned no extension."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>actual_length</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>decode_para</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CRYPT_DECODE_PARA</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>ret_val</name> <operator>=</operator>
<call><name>CryptDecodeObjectEx</name><argument_list>(<argument><expr><name>X509_ASN_ENCODING</name> <operator>|</operator> <name>PKCS_7_ASN_ENCODING</name></expr></argument>,
<argument><expr><name>szOID_SUBJECT_ALT_NAME2</name></expr></argument>,
<argument><expr><name><name>extension</name><operator>-&gt;</operator><name>Value</name><operator>.</operator><name>pbData</name></name></expr></argument>,
<argument><expr><name><name>extension</name><operator>-&gt;</operator><name>Value</name><operator>.</operator><name>cbData</name></name></expr></argument>,
<argument><expr><name>CRYPT_DECODE_ALLOC_FLAG</name> <operator>|</operator> <name>CRYPT_DECODE_NOCOPY_FLAG</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>decode_para</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>alt_name_info</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>alt_name_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret_val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: CryptDecodeObjectEx() returned no alternate name "</literal>
<literal type="string">"information."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>actual_length</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_pos</name> <operator>=</operator> <name>host_names</name></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>alt_name_info</name><operator>-&gt;</operator><name>cAltEntry</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>CERT_ALT_NAME_ENTRY</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>alt_name_info</name><operator>-&gt;</operator><name>rgAltEntry</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>dns_w</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>current_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>dwAltNameChoice</name></name> <operator>!=</operator> <name>CERT_ALT_NAME_DNS_NAME</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>pwszDNSName</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: Empty DNS name."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>current_length</name> <operator>=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>pwszDNSName</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>compute_content</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>actual_length</name> <operator>+=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name>current_length</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>actual_length</name> <operator>+</operator> <name>current_length</name><operator>)</operator> <operator>&gt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: Not enough memory to list all host names."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dns_w</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>pwszDNSName</name></name></expr>;</expr_stmt>


<while>while<condition>(<expr><operator>*</operator><name>dns_w</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>current_pos</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>*</operator><name>dns_w</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>current_pos</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>actual_length</name> <operator>+=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name>current_length</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>compute_content</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>current_pos</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>actual_length</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>verify_host</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>CERT_CONTEXT</name> <modifier>*</modifier></type><name>pCertContextServer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>conn_hostname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>cert_hostname_buff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cert_hostname_buff_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>actual_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>cert_get_name_string</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pCertContextServer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: CertGetNameString() returned no "</literal>
<literal type="string">"certificate name information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>cert_hostname_buff</name> <operator>=</operator> <operator>(</operator><name>LPTSTR</name><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cert_hostname_buff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>actual_len</name> <operator>=</operator> <call><name>cert_get_name_string</name><argument_list>(
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pCertContextServer</name></expr></argument>, <argument><expr><operator>(</operator><name>LPTSTR</name><operator>)</operator><name>cert_hostname_buff</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>actual_len</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: CertGetNameString() returned certificate "</literal>
<literal type="string">"name information of unexpected size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>cert_hostname_buff_index</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator>
<name><name>cert_hostname_buff</name><index>[<expr><name>cert_hostname_buff_index</name></expr>]</index></name> <operator>!=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>result</name> <operator>==</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cert_hostname</name></decl>;</decl_stmt>





<expr_stmt><expr><name>cert_hostname</name> <operator>=</operator> <call><name>Curl_convert_tchar_to_UTF8</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>cert_hostname_buff</name><index>[<expr><name>cert_hostname_buff_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cert_hostname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>match_result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>match_result</name> <operator>=</operator> <call><name>Curl_cert_hostcheck</name><argument_list>(<argument><expr><name>cert_hostname</name></expr></argument>, <argument><expr><name>conn_hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>match_result</name> <operator>==</operator> <name>CURL_HOST_MATCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: connection hostname (%s) validated "</literal>
<literal type="string">"against certificate name (%s)\n"</literal></expr></argument>,
<argument><expr><name>conn_hostname</name></expr></argument>, <argument><expr><name>cert_hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>cert_hostname_len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: connection hostname (%s) did not match "</literal>
<literal type="string">"against certificate name (%s)\n"</literal></expr></argument>,
<argument><expr><name>conn_hostname</name></expr></argument>, <argument><expr><name>cert_hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cert_hostname_len</name> <operator>=</operator> <call><name>_tcslen</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>cert_hostname_buff</name><index>[<expr><name>cert_hostname_buff_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>cert_hostname_buff_index</name> <operator>+=</operator> <name>cert_hostname_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name>cert_hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: CertGetNameString() failed to match "</literal>
<literal type="string">"connection hostname (%s) against server certificate names"</literal></expr></argument>,
<argument><expr><name>conn_hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: server certificate name verification failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name>cert_hostname_buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_verify_certificate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>sspi_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CERT_CONTEXT</name> <modifier>*</modifier></type><name>pCertContextServer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CERT_CHAIN_CONTEXT</name> <modifier>*</modifier></type><name>pChainContext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCERTCHAINENGINE</name></type> <name>cert_chain_engine</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCERTSTORE</name></type> <name>trust_store</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>conn_hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then>
<expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:
<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sspi_status</name> <operator>=</operator>
<call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>QueryContextAttributes</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>,
<argument><expr><name>SECPKG_ATTR_REMOTE_CERT_CONTEXT</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>pCertContextServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>sspi_status</name> <operator>!=</operator> <name>SEC_E_OK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>pCertContextServer</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: Failed to read remote certificate context: %s"</literal></expr></argument>,
<argument><expr><call><name>Curl_sspi_strerror</name><argument_list>(<argument><expr><name>sspi_status</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OK</name> <operator>&amp;&amp;</operator> <call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>BACKEND</name><operator>-&gt;</operator><name>use_manual_cred_validation</name></name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if<condition>(<expr><call><name>Curl_verify_windows_version</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>PLATFORM_WINNT</name></expr></argument>, <argument><expr><name>VERSION_LESS_THAN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: this version of Windows is too old to support "</literal>
<literal type="string">"certificate verification via CA bundle file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CACERT_BADFILE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>trust_store</name> <operator>=</operator> <call><name>CertOpenStore</name><argument_list>(<argument><expr><name>CERT_STORE_PROV_MEMORY</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>HCRYPTPROV</name><operator>)</operator><name>NULL</name></expr></argument>,
<argument><expr><name>CERT_STORE_CREATE_NEW_FLAG</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>trust_store</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: failed to create certificate store: %s"</literal></expr></argument>,
<argument><expr><call><name>Curl_winapi_strerror</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CACERT_BADFILE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>add_certs_to_store</name><argument_list>(<argument><expr><name>trust_store</name></expr></argument>, <argument><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CERT_CHAIN_ENGINE_CONFIG_WIN7</name></type> <name>engine_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>create_engine_result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>engine_config</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>engine_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>engine_config</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>engine_config</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>engine_config</name><operator>.</operator><name>hExclusiveRoot</name></name> <operator>=</operator> <name>trust_store</name></expr>;</expr_stmt>






<expr_stmt><expr><name>create_engine_result</name> <operator>=</operator>
<call><name>CertCreateCertificateChainEngine</name><argument_list>(
<argument><expr><operator>(</operator><name>CERT_CHAIN_ENGINE_CONFIG</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>engine_config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cert_chain_engine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>create_engine_result</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><literal type="string">"schannel: failed to create certificate chain engine: %s"</literal></expr></argument>,
<argument><expr><call><name>Curl_winapi_strerror</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CACERT_BADFILE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CERT_CHAIN_PARA</name></type> <name>ChainPara</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ChainPara</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ChainPara</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ChainPara</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ChainPara</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CertGetCertificateChain</name><argument_list>(<argument><expr><name>cert_chain_engine</name></expr></argument>,
<argument><expr><name>pCertContextServer</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>pCertContextServer</name><operator>-&gt;</operator><name>hCertStore</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ChainPara</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>no_revoke</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:
<expr><name>CERT_CHAIN_REVOCATION_CHECK_CHAIN</name></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>pChainContext</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: CertGetCertificateChain failed: %s"</literal></expr></argument>,
<argument><expr><call><name>Curl_winapi_strerror</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pChainContext</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CERT_SIMPLE_CHAIN</name> <modifier>*</modifier></type><name>pSimpleChain</name> <init>= <expr><name><name>pChainContext</name><operator>-&gt;</operator><name>rgpChain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwTrustErrorMask</name> <init>= <expr><operator>~</operator><operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><name>CERT_TRUST_IS_NOT_TIME_NESTED</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>dwTrustErrorMask</name> <operator>&amp;=</operator> <name><name>pSimpleChain</name><operator>-&gt;</operator><name>TrustStatus</name><operator>.</operator><name>dwErrorStatus</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>revoke_best_effort</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>dwTrustErrorMask</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><name>CERT_TRUST_REVOCATION_STATUS_UNKNOWN</name> <operator>|</operator>
<name>CERT_TRUST_IS_OFFLINE_REVOCATION</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>dwTrustErrorMask</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>dwTrustErrorMask</name> <operator>&amp;</operator> <name>CERT_TRUST_IS_REVOKED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: CertGetCertificateChain trust error"</literal>
<literal type="string">" CERT_TRUST_IS_REVOKED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>dwTrustErrorMask</name> <operator>&amp;</operator> <name>CERT_TRUST_IS_PARTIAL_CHAIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: CertGetCertificateChain trust error"</literal>
<literal type="string">" CERT_TRUST_IS_PARTIAL_CHAIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>dwTrustErrorMask</name> <operator>&amp;</operator> <name>CERT_TRUST_IS_UNTRUSTED_ROOT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: CertGetCertificateChain trust error"</literal>
<literal type="string">" CERT_TRUST_IS_UNTRUSTED_ROOT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>dwTrustErrorMask</name> <operator>&amp;</operator> <name>CERT_TRUST_IS_NOT_TIME_VALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: CertGetCertificateChain trust error"</literal>
<literal type="string">" CERT_TRUST_IS_NOT_TIME_VALID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>dwTrustErrorMask</name> <operator>&amp;</operator> <name>CERT_TRUST_REVOCATION_STATUS_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: CertGetCertificateChain trust error"</literal>
<literal type="string">" CERT_TRUST_REVOCATION_STATUS_UNKNOWN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"schannel: CertGetCertificateChain error mask: 0x%08x"</literal></expr></argument>,
<argument><expr><name>dwTrustErrorMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifyhost</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>verify_host</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>pCertContextServer</name></expr></argument>, <argument><expr><name>conn_hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>cert_chain_engine</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CertFreeCertificateChainEngine</name><argument_list>(<argument><expr><name>cert_chain_engine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>trust_store</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CertCloseStore</name><argument_list>(<argument><expr><name>trust_store</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pChainContext</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CertFreeCertificateChain</name><argument_list>(<argument><expr><name>pChainContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pCertContextServer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CertFreeCertificateContext</name><argument_list>(<argument><expr><name>pCertContextServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
