<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\vtls\gskit.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GSKIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gskssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qsoasync.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_SOCKETPAIR</name></cpp:undef> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"socketpair.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GSK_SSL_EXTN_SERVERNAME_REQUEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GSK_SSL_EXTN_SERVERNAME_REQUEST</name></cpp:macro> <cpp:value>230</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GSK_TLSV10_CIPHER_SPECS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GSK_TLSV10_CIPHER_SPECS</name></cpp:macro> <cpp:value>236</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GSK_TLSV11_CIPHER_SPECS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GSK_TLSV11_CIPHER_SPECS</name></cpp:macro> <cpp:value>237</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GSK_TLSV12_CIPHER_SPECS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GSK_TLSV12_CIPHER_SPECS</name></cpp:macro> <cpp:value>238</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GSK_PROTOCOL_TLSV11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GSK_PROTOCOL_TLSV11</name></cpp:macro> <cpp:value>437</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GSK_PROTOCOL_TLSV12</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GSK_PROTOCOL_TLSV12</name></cpp:macro> <cpp:value>438</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GSK_FALSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GSK_FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GSK_TRUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GSK_TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gskit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x509asn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOS_READ</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOS_WRITE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_GSKPROTO_SSLV2</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_GSKPROTO_SSLV2_MASK</name></cpp:macro> <cpp:value>(1 &lt;&lt; CURL_GSKPROTO_SSLV2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_GSKPROTO_SSLV3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_GSKPROTO_SSLV3_MASK</name></cpp:macro> <cpp:value>(1 &lt;&lt; CURL_GSKPROTO_SSLV3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_GSKPROTO_TLSV10</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_GSKPROTO_TLSV10_MASK</name></cpp:macro> <cpp:value>(1 &lt;&lt; CURL_GSKPROTO_TLSV10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_GSKPROTO_TLSV11</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_GSKPROTO_TLSV11_MASK</name></cpp:macro> <cpp:value>(1 &lt;&lt; CURL_GSKPROTO_TLSV11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_GSKPROTO_TLSV12</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_GSKPROTO_TLSV12_MASK</name></cpp:macro> <cpp:value>(1 &lt;&lt; CURL_GSKPROTO_TLSV12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_GSKPROTO_LAST</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<struct>struct <name>ssl_backend_data</name> <block>{
<decl_stmt><decl><type><name>gsk_handle</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iocport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>localfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>remotefd</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKEND</name></cpp:macro> <cpp:value>connssl-&gt;backend</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gsktoken</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>versions</name></decl>;</decl_stmt> 
}</block></struct></type> <name>gskit_cipher</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>gskit_cipher</name></type> <name><name>ciphertable</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"null-md5"</literal></expr>, <expr><literal type="string">"01"</literal></expr>,
<expr><name>CURL_GSKPROTO_SSLV3_MASK</name> <operator>|</operator> <name>CURL_GSKPROTO_TLSV10_MASK</name> <operator>|</operator>
<name>CURL_GSKPROTO_TLSV11_MASK</name> <operator>|</operator> <name>CURL_GSKPROTO_TLSV12_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"null-sha"</literal></expr>, <expr><literal type="string">"02"</literal></expr>,
<expr><name>CURL_GSKPROTO_SSLV3_MASK</name> <operator>|</operator> <name>CURL_GSKPROTO_TLSV10_MASK</name> <operator>|</operator>
<name>CURL_GSKPROTO_TLSV11_MASK</name> <operator>|</operator> <name>CURL_GSKPROTO_TLSV12_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"exp-rc4-md5"</literal></expr>, <expr><literal type="string">"03"</literal></expr>,
<expr><name>CURL_GSKPROTO_SSLV3_MASK</name> <operator>|</operator> <name>CURL_GSKPROTO_TLSV10_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rc4-md5"</literal></expr>, <expr><literal type="string">"04"</literal></expr>,
<expr><name>CURL_GSKPROTO_SSLV3_MASK</name> <operator>|</operator> <name>CURL_GSKPROTO_TLSV10_MASK</name> <operator>|</operator>
<name>CURL_GSKPROTO_TLSV11_MASK</name> <operator>|</operator> <name>CURL_GSKPROTO_TLSV12_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rc4-sha"</literal></expr>, <expr><literal type="string">"05"</literal></expr>,
<expr><name>CURL_GSKPROTO_SSLV3_MASK</name> <operator>|</operator> <name>CURL_GSKPROTO_TLSV10_MASK</name> <operator>|</operator>
<name>CURL_GSKPROTO_TLSV11_MASK</name> <operator>|</operator> <name>CURL_GSKPROTO_TLSV12_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"exp-rc2-cbc-md5"</literal></expr>, <expr><literal type="string">"06"</literal></expr>,
<expr><name>CURL_GSKPROTO_SSLV3_MASK</name> <operator>|</operator> <name>CURL_GSKPROTO_TLSV10_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"exp-des-cbc-sha"</literal></expr>, <expr><literal type="string">"09"</literal></expr>,
<expr><name>CURL_GSKPROTO_SSLV3_MASK</name> <operator>|</operator> <name>CURL_GSKPROTO_TLSV10_MASK</name> <operator>|</operator>
<name>CURL_GSKPROTO_TLSV11_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"des-cbc3-sha"</literal></expr>, <expr><literal type="string">"0A"</literal></expr>,
<expr><name>CURL_GSKPROTO_SSLV3_MASK</name> <operator>|</operator> <name>CURL_GSKPROTO_TLSV10_MASK</name> <operator>|</operator>
<name>CURL_GSKPROTO_TLSV11_MASK</name> <operator>|</operator> <name>CURL_GSKPROTO_TLSV12_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aes128-sha"</literal></expr>, <expr><literal type="string">"2F"</literal></expr>,
<expr><name>CURL_GSKPROTO_TLSV10_MASK</name> <operator>|</operator> <name>CURL_GSKPROTO_TLSV11_MASK</name> <operator>|</operator>
<name>CURL_GSKPROTO_TLSV12_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aes256-sha"</literal></expr>, <expr><literal type="string">"35"</literal></expr>,
<expr><name>CURL_GSKPROTO_TLSV10_MASK</name> <operator>|</operator> <name>CURL_GSKPROTO_TLSV11_MASK</name> <operator>|</operator>
<name>CURL_GSKPROTO_TLSV12_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"null-sha256"</literal></expr>, <expr><literal type="string">"3B"</literal></expr>, <expr><name>CURL_GSKPROTO_TLSV12_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aes128-sha256"</literal></expr>, <expr><literal type="string">"3C"</literal></expr>, <expr><name>CURL_GSKPROTO_TLSV12_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aes256-sha256"</literal></expr>, <expr><literal type="string">"3D"</literal></expr>, <expr><name>CURL_GSKPROTO_TLSV12_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aes128-gcm-sha256"</literal></expr>,
<expr><literal type="string">"9C"</literal></expr>, <expr><name>CURL_GSKPROTO_TLSV12_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aes256-gcm-sha384"</literal></expr>,
<expr><literal type="string">"9D"</literal></expr>, <expr><name>CURL_GSKPROTO_TLSV12_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rc4-md5"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><name>CURL_GSKPROTO_SSLV2_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"exp-rc4-md5"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><name>CURL_GSKPROTO_SSLV2_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rc2-md5"</literal></expr>, <expr><literal type="string">"3"</literal></expr>, <expr><name>CURL_GSKPROTO_SSLV2_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"exp-rc2-md5"</literal></expr>, <expr><literal type="string">"4"</literal></expr>, <expr><name>CURL_GSKPROTO_SSLV2_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"des-cbc-md5"</literal></expr>, <expr><literal type="string">"6"</literal></expr>, <expr><name>CURL_GSKPROTO_SSLV2_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"des-cbc3-md5"</literal></expr>, <expr><literal type="string">"7"</literal></expr>, <expr><name>CURL_GSKPROTO_SSLV2_MASK</name></expr> }</block></expr>,
<expr><block>{ <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>, <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_separator</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<case>case <expr><literal type="char">':'</literal></expr>:</case>
<case>case <expr><literal type="char">','</literal></expr>:</case>
<case>case <expr><literal type="char">';'</literal></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>gskit_status</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>defcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GSK_OK</name></expr>:</case>
<case>case <expr><name>GSK_OS400_ASYNCHRONOUS_SOC_INIT</name></expr>:</case>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
<case>case <expr><name>GSK_KEYRING_OPEN_ERROR</name></expr>:</case>
<case>case <expr><name>GSK_OS400_ERROR_NO_ACCESS</name></expr>:</case>
<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return>
<case>case <expr><name>GSK_INSUFFICIENT_STORAGE</name></expr>:</case>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
<case>case <expr><name>GSK_ERROR_BAD_V2_CIPHER</name></expr>:</case>
<case>case <expr><name>GSK_ERROR_BAD_V3_CIPHER</name></expr>:</case>
<case>case <expr><name>GSK_ERROR_NO_CIPHERS</name></expr>:</case>
<return>return <expr><name>CURLE_SSL_CIPHER</name></expr>;</return>
<case>case <expr><name>GSK_OS400_ERROR_NOT_TRUSTED_ROOT</name></expr>:</case>
<case>case <expr><name>GSK_ERROR_CERT_VALIDATION</name></expr>:</case>
<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>
<case>case <expr><name>GSK_OS400_ERROR_TIMED_OUT</name></expr>:</case>
<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>
<case>case <expr><name>GSK_WOULD_BLOCK</name></expr>:</case>
<return>return <expr><name>CURLE_AGAIN</name></expr>;</return>
<case>case <expr><name>GSK_OS400_ERROR_NOT_REGISTERED</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>GSK_ERROR_IO</name></expr>:</case>
<switch>switch<condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ENOMEM</name></expr>:</case>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s I/O error: %s"</literal></expr></argument>, <argument><expr><name>procname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>procname</name></expr></argument>, <argument><expr><call><name>gsk_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>defcode</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>set_enum</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gsk_handle</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>GSK_ENUM_ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GSK_ENUM_VALUE</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>unsupported_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>gsk_attribute_set_enum</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GSK_OK</name></expr>:</case>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
<case>case <expr><name>GSK_ERROR_IO</name></expr>:</case>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gsk_attribute_set_enum() I/O error: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GSK_ATTRIBUTE_INVALID_ID</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>unsupported_ok</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>;</return></block_content></block></if></if_stmt>
<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gsk_attribute_set_enum(): %s"</literal></expr></argument>, <argument><expr><call><name>gsk_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>set_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>gsk_handle</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>GSK_BUF_ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>unsupported_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>gsk_attribute_set_buffer</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GSK_OK</name></expr>:</case>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
<case>case <expr><name>GSK_ERROR_IO</name></expr>:</case>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gsk_attribute_set_buffer() I/O error: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GSK_ATTRIBUTE_INVALID_ID</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>unsupported_ok</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>;</return></block_content></block></if></if_stmt>
<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gsk_attribute_set_buffer(): %s"</literal></expr></argument>, <argument><expr><call><name>gsk_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>set_numeric</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>gsk_handle</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>GSK_NUM_ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>gsk_attribute_set_numeric_value</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GSK_OK</name></expr>:</case>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
<case>case <expr><name>GSK_ERROR_IO</name></expr>:</case>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gsk_attribute_set_numeric_value() I/O error: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gsk_attribute_set_numeric_value(): %s"</literal></expr></argument>, <argument><expr><call><name>gsk_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>set_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>gsk_handle</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>GSK_CALLBACK_ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>gsk_attribute_set_callback</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GSK_OK</name></expr>:</case>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
<case>case <expr><name>GSK_ERROR_IO</name></expr>:</case>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gsk_attribute_set_callback() I/O error: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gsk_attribute_set_callback(): %s"</literal></expr></argument>, <argument><expr><call><name>gsk_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>set_ciphers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>gsk_handle</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>protoflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cipherlist</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>cipher_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>gskit_cipher</name> <modifier>*</modifier></type><name>ctp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>unsupported</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
}</block> <decl><name><name>ciphers</name><index>[<expr><name>CURL_GSKPROTO_LAST</name></expr>]</index></name></decl>;</struct>



<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cipherlist</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<while>while<condition>(<expr><call><name>is_separator</name><argument_list>(<argument><expr><operator>*</operator><name>cipherlist</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>cipherlist</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>cipherlist</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cipherlist</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ciphers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ciphers</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CURL_GSKPROTO_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ciphers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ciphers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><name>i</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ciphers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ciphers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <name><name>ciphers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>ciphers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>unsupported</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>
<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<for>for<control>(<init><expr><name>clp</name> <operator>=</operator> <name>cipherlist</name></expr>;</init> <condition><expr><operator>*</operator><name>cipherlist</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_separator</name><argument_list>(<argument><expr><operator>*</operator><name>cipherlist</name></expr></argument>)</argument_list></call></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>cipherlist</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>cipherlist</name> <operator>-</operator> <name>clp</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>l</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>ctp</name> <operator>=</operator> <name>ciphertable</name></expr>;</init> <condition><expr><name><name>ctp</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>ctp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name><name>ctp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>clp</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctp</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ctp</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unknown cipher %.*s"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>clp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CIPHER</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>unsupported</name> <operator>|=</operator> <operator>!</operator><operator>(</operator><name><name>ctp</name><operator>-&gt;</operator><name>versions</name></name> <operator>&amp;</operator> <operator>(</operator><name>CURL_GSKPROTO_SSLV2_MASK</name> <operator>|</operator>
<name>CURL_GSKPROTO_SSLV3_MASK</name> <operator>|</operator> <name>CURL_GSKPROTO_TLSV10_MASK</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CURL_GSKPROTO_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ctp</name><operator>-&gt;</operator><name>versions</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ciphers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>ctp</name><operator>-&gt;</operator><name>gsktoken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ciphers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctp</name><operator>-&gt;</operator><name>gsktoken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>


<while>while<condition>(<expr><call><name>is_separator</name><argument_list>(<argument><expr><operator>*</operator><name>cipherlist</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cipherlist</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></for>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CURL_GSKPROTO_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>protoflags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>ciphers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>protoflags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ciphers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if<condition>(<expr><operator>*</operator><name>protoflags</name> <operator>&amp;</operator> <name>CURL_GSKPROTO_TLSV11_MASK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_buffer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>GSK_TLSV11_CIPHER_SPECS</name></expr></argument>,
<argument><expr><name><name>ciphers</name><index>[<expr><name>CURL_GSKPROTO_TLSV11</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>unsupported</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"TLSv1.1-only ciphers are not yet supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CIPHER</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>protoflags</name> <operator>&amp;</operator> <name>CURL_GSKPROTO_TLSV12_MASK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_buffer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>GSK_TLSV12_CIPHER_SPECS</name></expr></argument>,
<argument><expr><name><name>ciphers</name><index>[<expr><name>CURL_GSKPROTO_TLSV12</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>unsupported</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"TLSv1.2-only ciphers are not yet supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CIPHER</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>protoflags</name> <operator>&amp;</operator> <name>CURL_GSKPROTO_TLSV10_MASK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_buffer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>GSK_TLSV10_CIPHER_SPECS</name></expr></argument>,
<argument><expr><name><name>ciphers</name><index>[<expr><name>CURL_GSKPROTO_TLSV10</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ciphers</name><index>[<expr><name>CURL_GSKPROTO_SSLV3</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr></argument>,
<argument><expr><name><name>ciphers</name><index>[<expr><name>CURL_GSKPROTO_TLSV10</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>protoflags</name> <operator>&amp;</operator> <name>CURL_GSKPROTO_SSLV3_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_buffer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>GSK_V3_CIPHER_SPECS</name></expr></argument>,
<argument><expr><name><name>ciphers</name><index>[<expr><name>CURL_GSKPROTO_SSLV3</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>protoflags</name> <operator>&amp;</operator> <name>CURL_GSKPROTO_SSLV2_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_buffer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>GSK_V2_CIPHER_SPECS</name></expr></argument>,
<argument><expr><name><name>ciphers</name><index>[<expr><name>CURL_GSKPROTO_SSLV2</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CURL_GSKPROTO_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ciphers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_gskit_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_gskit_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>init_environment</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>gsk_handle</name> <modifier>*</modifier></type><name>envir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>appid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gsk_handle</name></type> <name>h</name></decl>;</decl_stmt>



<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gsk_environment_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GSK_OK</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>GSK_INSUFFICIENT_STORAGE</name></expr>:</case>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gsk_environment_open(): %s"</literal></expr></argument>, <argument><expr><call><name>gsk_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_enum</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>GSK_SESSION_TYPE</name></expr></argument>, <argument><expr><name>GSK_CLIENT_SESSION</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>appid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_buffer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>GSK_OS400_APPLICATION_ID</name></expr></argument>, <argument><expr><name>appid</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_buffer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>GSK_KEYRING_FILE</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>label</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_buffer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>GSK_KEYRING_LABEL</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>password</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_buffer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>GSK_KEYRING_PW</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gskit_status</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>gsk_environment_init</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"gsk_environment_init()"</literal></expr></argument>, <argument><expr><name>CURLE_SSL_CERTPROBLEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>envir</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gsk_environment_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>cancel_async_handshake</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Qso_OverlappedIO_t</name></type> <name>cstat</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>QsoCancelOperation</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>QsoWaitForIOCompletion</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>iocport</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cstat</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>timeval</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>close_async_handshake</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>QsoDestroyIOCompletionPort</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>iocport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>iocport</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pipe_ssloverssl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>directions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connproxyssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>fds_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>fds_write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>CURL_MAX_WRITE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>connssl</name><operator>-&gt;</operator><name>use</name></name> <operator>||</operator> <operator>!</operator><name><name>connproxyssl</name><operator>-&gt;</operator><name>use</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fds_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fds_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>directions</name> <operator>&amp;</operator> <name>SOS_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>remotefd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>remotefd</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>directions</name> <operator>&amp;</operator> <name>SOS_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>remotefd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>BACKEND</name><operator>-&gt;</operator><name>remotefd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&lt;</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>Curl_select</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds_read</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds_write</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>remotefd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds_write</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>gsk_secure_soc_read</name><argument_list>(<argument><expr><name><name>connproxyssl</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GSK_OK</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>remotefd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>GSK_OS400_ERROR_TIMED_OUT</name></expr>:</case>
<case>case <expr><name>GSK_WOULD_BLOCK</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>remotefd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds_read</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds_write</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>remotefd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>gsk_secure_soc_write</name><argument_list>(<argument><expr><name><name>connproxyssl</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <name>GSK_OK</name> <operator>||</operator> <name>n</name> <operator>!=</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return> 
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>close_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gskit_status</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>gsk_secure_soc_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"gsk_secure_soc_close()"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><call><name>pipe_ssloverssl</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>SOS_WRITE</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <operator>(</operator><name>gsk_handle</name><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>localfd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>localfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>localfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>remotefd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>remotefd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>remotefd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>iocport</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close_async_handshake</name><argument_list>(<argument><expr><name>connssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>gskit_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>curlcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>cc</name> <init>= <expr><name>CURLE_SEND_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>written</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>pipe_ssloverssl</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>SOS_WRITE</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>gskit_status</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><call><name>gsk_secure_soc_write</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>mem</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"gsk_secure_soc_write()"</literal></expr></argument>, <argument><expr><name>CURLE_SEND_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>cc</name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call><name>pipe_ssloverssl</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>SOS_WRITE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>cc</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>written</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ssize_t</name><operator>)</operator> <name>written</name></expr>;</return> 
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>gskit_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffersize</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>curlcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>cc</name> <init>= <expr><name>CURLE_RECV_ERROR</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>pipe_ssloverssl</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>SOS_READ</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>buffsize</name> <init>= <expr><ternary><condition><expr><name>buffersize</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>INT_MAX</name></expr>?</condition><then> <expr><name>INT_MAX</name></expr></then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator> <name>buffersize</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>gskit_status</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>gsk_secure_soc_read</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"gsk_secure_soc_read()"</literal></expr></argument>, <argument><expr><name>CURLE_RECV_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch<condition>(<expr><name>cc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLE_OK</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>:</case>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>
<default>default:</default>
<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nread</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>ssize_t</name><operator>)</operator> <name>nread</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>
<name>set_ssl_version_min_max</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>protoflags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ssl_version</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ssl_version_max</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version_max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><name>ssl_version</name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>ssl_version_max</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_SSLVERSION_MAX_NONE</name></expr>:</case>
<case>case <expr><name>CURL_SSLVERSION_MAX_DEFAULT</name></expr>:</case>
<expr_stmt><expr><name>ssl_version_max</name> <operator>=</operator> <name>CURL_SSLVERSION_TLSv1_2</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>ssl_version_max</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<switch>switch<condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>protoflags</name> <operator>|=</operator> <name>CURL_GSKPROTO_TLSV10_MASK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>protoflags</name> <operator>|=</operator> <name>CURL_GSKPROTO_TLSV11_MASK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>protoflags</name> <operator>|=</operator> <name>CURL_GSKPROTO_TLSV11_MASK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"GSKit: TLS 1.3 is not yet supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>gskit_connect_step1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gsk_handle</name></type> <name>envir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>keyringfile</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>keyringpwd</name> <init>= <expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key_passwd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>keyringlabel</name> <init>= <expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>int</name></type> <name>ssl_version</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>verifypeer</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr>?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr></then><else>:
<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sni</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>protoflags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Qso_OverlappedIO_t</name></type> <name>commarea</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>sockpair</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>sobufsize</name> <init>= <expr><name>CURL_MAX_WRITE_SIZE</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <operator>(</operator><name>gsk_handle</name><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>iocport</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>localfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>remotefd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>














<expr_stmt><expr><name>envir</name> <operator>=</operator> <operator>(</operator><name>gsk_handle</name><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>keyringlabel</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>keyringlabel</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>keyringpwd</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>keyringfile</name></expr></argument>, <argument><expr><name>CURL_CA_BUNDLE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_environment</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>envir</name></expr></argument>, <argument><expr><name>keyringlabel</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>envir</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>init_environment</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>envir</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>,
<argument><expr><name>keyringfile</name></expr></argument>, <argument><expr><name>keyringlabel</name></expr></argument>, <argument><expr><name>keyringpwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gskit_status</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>gsk_secure_soc_open</name><argument_list>(<argument><expr><name>envir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"gsk_secure_soc_open()"</literal></expr></argument>, <argument><expr><name>CURLE_SSL_CONNECT_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gsk_environment_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>use</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>Curl_socketpair</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sockpair</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>localfd</name></name> <operator>=</operator> <name><name>sockpair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>remotefd</name></name> <operator>=</operator> <name><name>sockpair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>localfd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVBUF</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sobufsize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sobufsize</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>remotefd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVBUF</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sobufsize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sobufsize</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>localfd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDBUF</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sobufsize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sobufsize</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>remotefd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDBUF</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sobufsize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sobufsize</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curlx_nonblock</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>localfd</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curlx_nonblock</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>remotefd</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>sni</name> <operator>=</operator> <name>hostname</name></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>ssl_version</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_SSLVERSION_SSLv2</name></expr>:</case>
<expr_stmt><expr><name>protoflags</name> <operator>=</operator> <name>CURL_GSKPROTO_SSLV2_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sni</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_SSLVERSION_SSLv3</name></expr>:</case>
<expr_stmt><expr><name>protoflags</name> <operator>=</operator> <name>CURL_GSKPROTO_SSLV3_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sni</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_SSLVERSION_DEFAULT</name></expr>:</case>
<case>case <expr><name>CURL_SSLVERSION_TLSv1</name></expr>:</case>
<expr_stmt><expr><name>protoflags</name> <operator>=</operator> <name>CURL_GSKPROTO_TLSV10_MASK</name> <operator>|</operator>
<name>CURL_GSKPROTO_TLSV11_MASK</name> <operator>|</operator> <name>CURL_GSKPROTO_TLSV12_MASK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_ssl_version_min_max</name><argument_list>(<argument><expr><operator>&amp;</operator><name>protoflags</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized parameter passed via CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></switch>


<if_stmt><if>if<condition>(<expr><name>sni</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_buffer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>GSK_SSL_EXTN_SERVERNAME_REQUEST</name></expr></argument>, <argument><expr><name>sni</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>long</name></type> <name>timeout</name> <init>= <expr><call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OPERATION_TIMEDOUT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_numeric</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GSK_HANDSHAKE_TIMEOUT</name></expr></argument>,
<argument><expr><operator>(</operator><name>timeout</name> <operator>+</operator> <literal type="number">999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_numeric</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GSK_OS400_READ_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_numeric</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GSK_FD</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>localfd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>?</condition><then>
<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>localfd</name></name></expr></then><else>: <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_ciphers</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>protoflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>protoflags</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"No SSL protocol/cipher combination enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CIPHER</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_enum</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GSK_PROTOCOL_SSLV2</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>protoflags</name> <operator>&amp;</operator> <name>CURL_GSKPROTO_SSLV2_MASK</name><operator>)</operator></expr>?</condition><then>
<expr><name>GSK_PROTOCOL_SSLV2_ON</name></expr></then><else>: <expr><name>GSK_PROTOCOL_SSLV2_OFF</name></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_enum</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GSK_PROTOCOL_SSLV3</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>protoflags</name> <operator>&amp;</operator> <name>CURL_GSKPROTO_SSLV3_MASK</name><operator>)</operator></expr>?</condition><then>
<expr><name>GSK_PROTOCOL_SSLV3_ON</name></expr></then><else>: <expr><name>GSK_PROTOCOL_SSLV3_OFF</name></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_enum</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GSK_PROTOCOL_TLSV1</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>protoflags</name> <operator>&amp;</operator> <name>CURL_GSKPROTO_TLSV10_MASK</name><operator>)</operator></expr>?</condition><then>
<expr><name>GSK_PROTOCOL_TLSV1_ON</name></expr></then><else>: <expr><name>GSK_PROTOCOL_TLSV1_OFF</name></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_enum</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GSK_PROTOCOL_TLSV11</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>protoflags</name> <operator>&amp;</operator> <name>CURL_GSKPROTO_TLSV11_MASK</name><operator>)</operator></expr>?</condition><then>
<expr><name>GSK_TRUE</name></expr></then><else>: <expr><name>GSK_FALSE</name></expr></else></ternary></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>protoflags</name> <operator>==</operator> <name>CURL_GSKPROTO_TLSV11_MASK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"TLS 1.1 not yet supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CIPHER</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_enum</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GSK_PROTOCOL_TLSV12</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>protoflags</name> <operator>&amp;</operator> <name>CURL_GSKPROTO_TLSV12_MASK</name><operator>)</operator></expr>?</condition><then>
<expr><name>GSK_TRUE</name></expr></then><else>: <expr><name>GSK_FALSE</name></expr></else></ternary></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>protoflags</name> <operator>==</operator> <name>CURL_GSKPROTO_TLSV12_MASK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"TLS 1.2 not yet supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CIPHER</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_enum</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>GSK_SERVER_AUTH_TYPE</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>verifypeer</name></expr>?</condition><then> <expr><name>GSK_SERVER_AUTH_FULL</name></expr></then><else>:
<expr><name>GSK_SERVER_AUTH_PASSTHRU</name></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commarea</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>commarea</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>iocport</name></name> <operator>=</operator> <call><name>QsoCreateIOCompletionPort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>BACKEND</name><operator>-&gt;</operator><name>iocport</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gskit_status</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><call><name>gsk_secure_soc_startInit</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>iocport</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>commarea</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"gsk_secure_soc_startInit()"</literal></expr></argument>,
<argument><expr><name>CURLE_SSL_CONNECT_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close_async_handshake</name><argument_list>(<argument><expr><name>connssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOBUFS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gskit_status</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>GSK_ERROR_IO</name></expr></argument>,
<argument><expr><literal type="string">"QsoCreateIOCompletionPort()"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>use</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CONNECT_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gskit_status</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>gsk_secure_soc_init</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"gsk_secure_soc_init()"</literal></expr></argument>, <argument><expr><name>CURLE_SSL_CONNECT_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_3</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>close_one</name><argument_list>(<argument><expr><name>connssl</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>gskit_connect_step2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>nonblocking</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Qso_OverlappedIO_t</name></type> <name>cstat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>stmv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>



<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>timeout_ms</name> <init>= <expr><ternary><condition><expr><name>nonblocking</name></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>stmv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>timeout_ms</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stmv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>timeout_ms</name> <operator>-</operator> <name><name>stmv</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><call><name>QsoWaitForIOCompletion</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>iocport</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cstat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>nonblocking</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>!=</operator> <name>ETIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"QsoWaitForIOCompletion() I/O error: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cancel_async_handshake</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_async_handshake</name><argument_list>(<argument><expr><name>connssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="number">0</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name>nonblocking</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cancel_async_handshake</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_async_handshake</name><argument_list>(<argument><expr><name>connssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></for>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gskit_status</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>cstat</name><operator>.</operator><name>returnValue</name></name></expr></argument>, <argument><expr><literal type="string">"SSL handshake"</literal></expr></argument>,
<argument><expr><name>CURLE_SSL_CONNECT_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>close_async_handshake</name><argument_list>(<argument><expr><name>connssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>gskit_connect_step3</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>gsk_cert_data_elem</name> <modifier>*</modifier></type><name>cdev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cdec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>gsk_cert_data_elem</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cert</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>certend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><call><name>gskit_status</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>gsk_attribute_get_cert_info</name><argument_list>(<argument><expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,
<argument><expr><name>GSK_PARTNER_CERT_INFO</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cdev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cdec</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"gsk_attribute_get_cert_info()"</literal></expr></argument>, <argument><expr><name>CURLE_SSL_CONNECT_ERROR</name></expr></argument>)</argument_list></call> <operator>==</operator>
<name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Server certificate:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>cdev</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>++</operator> <operator>&lt;</operator> <name>cdec</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<switch>switch<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cert_data_id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CERT_BODY_DER</name></expr>:</case>
<expr_stmt><expr><name>cert</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>cert_data_p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>certend</name> <operator>=</operator> <name>cert</name> <operator>+</operator> <name><name>cdev</name><operator>-&gt;</operator><name>cert_data_l</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CERT_DN_PRINTABLE</name></expr>:</case>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t subject: %.*s\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cert_data_l</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cert_data_p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CERT_ISSUER_DN_PRINTABLE</name></expr>:</case>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t issuer: %.*s\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cert_data_l</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cert_data_p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CERT_VALID_FROM</name></expr>:</case>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t start date: %.*s\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cert_data_l</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cert_data_p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CERT_VALID_TO</name></expr>:</case>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t expire date: %.*s\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cert_data_l</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cert_data_p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch></block_content></block></for>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_verifyhost</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>certend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ssl_init_certinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>cert</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_extract_certinfo</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>certend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ptr</name> <operator>=</operator> <ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_PROXY</name></expr>]</index></name></expr> </then><else>:
<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_ORIG</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>ptr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>curl_X509certificate</name></type> <name>x509</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_asn1Element</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_parseX509</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x509</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>certend</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_SSL_PINNEDPUBKEYNOTMATCH</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>x509</name><operator>.</operator><name>subjectPublicKeyInfo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pin_peer_pubkey</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: public key does not match pinned public key!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_done</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>gskit_connect_common</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>nonblocking</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>timeout_ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name><name>connssl</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ssl_connection_complete</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>done</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OPERATION_TIMEDOUT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gskit_connect_step1</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call><name>pipe_ssloverssl</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>SOS_READ</name> <operator>|</operator> <name>SOS_WRITE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CONNECT_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OPERATION_TIMEDOUT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gskit_connect_step2</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>nonblocking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call><name>pipe_ssloverssl</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>SOS_READ</name> <operator>|</operator> <name>SOS_WRITE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CONNECT_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gskit_connect_step3</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close_one</name><argument_list>(<argument><expr><name>connssl</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_done</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ssl_connection_complete</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>gskit_recv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>gskit_send</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_gskit_connect_nonblocking</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gskit_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>done</name> <operator>||</operator> <name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>connecting_state</name> <operator>=</operator> <name>ssl_connect_1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_gskit_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>done</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>connecting_state</name> <operator>=</operator> <name>ssl_connect_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gskit_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_gskit_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>close_one</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_one</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_gskit_shutdown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>what</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_ccc</name></name> <operator>!=</operator> <name>CURLFTPSSL_CCC_ACTIVE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>close_one</name><argument_list>(<argument><expr><name>connssl</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>what</name> <operator>=</operator> <call><name>SOCKET_READABLE</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>,
<argument><expr><name>SSL_SHUTDOWN_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>what</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"select/poll on SSL socket, errno: %d"</literal></expr></argument>, <argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>what</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL shutdown timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"read: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>what</name> <operator>=</operator> <call><name>SOCKET_READABLE</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>Curl_gskit_version</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"GSKit"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_gskit_check_cxn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>cxn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>cxn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errlen</name></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>errlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name><name>cxn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errlen</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name>errlen</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <name>err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Curl_gskit_get_internals</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>,
<parameter><decl><type><name>CURLINFO</name> <name>info</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>info</name></expr>;</expr_stmt>
<return>return <expr><name><name>BACKEND</name><operator>-&gt;</operator><name>handle</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_ssl</name></name></type> <name>Curl_ssl_gskit</name> <init>= <expr><block>{
<expr><block>{ <expr><name>CURLSSLBACKEND_GSKIT</name></expr>, <expr><literal type="string">"gskit"</literal></expr> }</block></expr>, 

<expr><name>SSLSUPP_CERTINFO</name> <operator>|</operator>
<name>SSLSUPP_PINNEDPUBKEY</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ssl_backend_data</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><name>Curl_gskit_init</name></expr>, 
<expr><name>Curl_gskit_cleanup</name></expr>, 
<expr><name>Curl_gskit_version</name></expr>, 
<expr><name>Curl_gskit_check_cxn</name></expr>, 
<expr><name>Curl_gskit_shutdown</name></expr>, 
<expr><name>Curl_none_data_pending</name></expr>, 
<expr><name>Curl_none_random</name></expr>, 
<expr><name>Curl_none_cert_status_request</name></expr>, 
<expr><name>Curl_gskit_connect</name></expr>, 
<expr><name>Curl_gskit_connect_nonblocking</name></expr>, 
<expr><name>Curl_gskit_get_internals</name></expr>, 
<expr><name>Curl_gskit_close</name></expr>, 
<expr><name>Curl_none_close_all</name></expr>, 

<expr><name>Curl_none_session_free</name></expr>, 
<expr><name>Curl_none_set_engine</name></expr>, 
<expr><name>Curl_none_set_engine_default</name></expr>, 
<expr><name>Curl_none_engines_list</name></expr>, 
<expr><name>Curl_none_false_start</name></expr>, 
<expr><name>Curl_none_md5sum</name></expr>, 
<expr><name>NULL</name></expr> 
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
