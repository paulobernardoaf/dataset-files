<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\runtime\tools\ccfilter.c">












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CCFILTER_C__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINELENGTH</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>


<decl_stmt><decl><type><name>char</name></type> <name><name>Line</name><index>[<expr><name>LINELENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>Line2</name><index>[<expr><name>LINELENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>FileName</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>BasePath</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>CWD</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>Row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>Col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>Severity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>Reason</name><index>[<expr><name>LINELENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_UNKNOWN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_GCC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_AIX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_ATT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_IRIX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_SOLARIS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_HPUX</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>COMPILER_Names</name><index>[]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{

<expr><block>{ <expr><literal type="string">"N/A"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GCC"</literal></expr>, <expr><literal type="string">"GCC compiler"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AIX"</literal></expr>, <expr><literal type="string">"AIX's C compiler"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ATT"</literal></expr>, <expr><literal type="string">"AT&amp;T/NCR's High Performance C Compiler"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"IRIX"</literal></expr>, <expr><literal type="string">"IRIX's MIPS/MIPSpro C compiler"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SOLARIS"</literal></expr>, <expr><literal type="string">"SOLARIS's SparcWorks C compiler"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"HPUX"</literal></expr>, <expr><literal type="string">"HPUX's C compiler"</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_QTY</name></cpp:macro> <cpp:value>(sizeof(COMPILER_Names)/sizeof(COMPILER_Names[0]))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GCC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_DEFAULT</name></cpp:macro> <cpp:value>COMPILER_GCC</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_DEFAULT</name></cpp:macro> <cpp:value>COMPILER_AIX</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ATT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_DEFAULT</name></cpp:macro> <cpp:value>COMPILER_ATT</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_IRIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_DEFAULT</name></cpp:macro> <cpp:value>COMPILER_IRIX</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_SOLARIS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_DEFAULT</name></cpp:macro> <cpp:value>COMPILER_SOLARIS</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_HPUX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_DEFAULT</name></cpp:macro> <cpp:value>COMPILER_HPUX</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILER_DEFAULT</name></cpp:macro> <cpp:value>COMPILER_UNKNOWN</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>USAGE</name><index>[]</index></name> <init>=
<expr><literal type="string">"ccfilter v2.1 (c)1994-1997 by Pablo Ariel Kohan\n"</literal>
<literal type="string">"Filter Out compiler's output, and converts it to fit VIM\n\n"</literal>
<literal type="string">"Usage:\n"</literal>
<literal type="string">" ccfilter [&lt;options&gt;]\n"</literal>
<literal type="string">"Where: &lt;options&gt; is one or more of:\n"</literal>
<literal type="string">" -c Decrement column by one\n"</literal>
<literal type="string">" -r Decrement row by one\n"</literal>
<literal type="string">" -e Echo stdin to stderr\n"</literal>
<literal type="string">" -v Verbose (Outputs also invalid lines)\n"</literal>
<literal type="string">" -o &lt;COMPILER&gt; Treat input as &lt;COMPILER&gt;'s output\n"</literal>
<literal type="string">" Note: COMPILER may be preceded by an _\n"</literal>
<literal type="string">" -h This usage.\n"</literal></expr></init></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>ShowUsage</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>szError</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>USAGE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Current default &lt;COMPILER&gt;: %s\n"</literal></expr></argument>,
<argument><expr><name><name>COMPILER_Names</name><index>[<expr><name>COMPILER_DEFAULT</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Acceptable parameters for &lt;COMPILER&gt; are:\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COMPILER_QTY</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %-15.15s %s\n"</literal></expr></argument>,
<argument><expr><name><name>COMPILER_Names</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>COMPILER_Names</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>szError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>echogets</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>echo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>retval</name><init>=<expr><call><name>fgets</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>LINELENGTH</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>echo</name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>retval</name><operator>!=</operator><name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prefetch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dec_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dec_row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>echo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>verbose</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>CWDlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>COMPILER</name> <init>= <expr><name>COMPILER_DEFAULT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getcwd</name><argument_list>( <argument><expr><name>CWD</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CWD</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CWDlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>CWD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ShowUsage</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>( <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name>dec_col</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>dec_row</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<expr_stmt><expr><name>echo</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name>verbose</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;=</operator> <name>argc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ShowUsage</name><argument_list>(<argument><expr><literal type="string">"Error: Missing parameter for -o\n"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>COMPILER</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>COMPILER_QTY</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>COMPILER_Names</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator> <operator>(</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>COMPILER_Names</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>COMPILER</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>COMPILER</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ShowUsage</name><argument_list>(<argument><expr><literal type="string">"Error: Invalid COMPILER specified\n"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<return>return <expr><call><name>ShowUsage</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><call><name>ShowUsage</name><argument_list>(<argument><expr><literal type="string">"Error: Invalid option\n"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>COMPILER</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ShowUsage</name><argument_list>(<argument><expr><literal type="string">"Error: COMPILER must be specified in this system\n"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stay</name> <operator>=</operator> <operator>(</operator> <call><name>echogets</name><argument_list>(<argument><expr><name>Line</name></expr></argument>, <argument><expr><name>echo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>prefetch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><name>stay</name></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>FileName</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Severity</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Reason</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>COMPILER</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>COMPILER_GCC</name></expr>:</case>
<expr_stmt><expr><name>Severity</name> <operator>=</operator> <literal type="char">'e'</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GOTO_FROM_WHERE_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sscanf</name><argument_list>( <argument><expr><name>Line</name></expr></argument>, <argument><expr><literal type="string">"In file included from %[^:]:%lu:"</literal></expr></argument>,
<argument><expr><name>FileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Row</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>rv</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator><call><name>echogets</name><argument_list>(<argument><expr><name>Reason</name></expr></argument>, <argument><expr><name>echo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>sscanf</name><argument_list>( <argument><expr><name>Line</name></expr></argument>, <argument><expr><literal type="string">"%[^:]:%lu: warning: %[^\n]"</literal></expr></argument>,
<argument><expr><name>FileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Row</name></expr></argument>, <argument><expr><name>Reason</name></expr></argument> )</argument_list></call><operator>)</operator><operator>==</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Severity</name> <operator>=</operator> <literal type="char">'w'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sscanf</name><argument_list>( <argument><expr><name>Line</name></expr></argument>, <argument><expr><literal type="string">"%[^:]:%lu: %[^\n]"</literal></expr></argument>,
<argument><expr><name>FileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Row</name></expr></argument>, <argument><expr><name>Reason</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator> <name>rv</name> <operator>==</operator> <literal type="number">3</literal> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>Col</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>dec_col</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COMPILER_AIX</name></expr>:</case>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sscanf</name><argument_list>( <argument><expr><name>Line</name></expr></argument>, <argument><expr><literal type="string">"\"%[^\"]\", line %lu.%lu: %*s (%c) %[^\n]"</literal></expr></argument>,
<argument><expr><name>FileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Severity</name></expr></argument>, <argument><expr><name>Reason</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator> <name>rv</name> <operator>==</operator> <literal type="number">5</literal> <operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COMPILER_HPUX</name></expr>:</case>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sscanf</name><argument_list>( <argument><expr><name>Line</name></expr></argument>, <argument><expr><literal type="string">"cc: \"%[^\"]\", line %lu: %c%*[^:]: %[^\n]"</literal></expr></argument>,
<argument><expr><name>FileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Severity</name></expr></argument>, <argument><expr><name>Reason</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator> <name>rv</name> <operator>==</operator> <literal type="number">4</literal> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Col</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>dec_col</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COMPILER_SOLARIS</name></expr>:</case>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sscanf</name><argument_list>( <argument><expr><name>Line</name></expr></argument>, <argument><expr><literal type="string">"\"%[^\"]\", line %lu: warning: %[^\n]"</literal></expr></argument>,
<argument><expr><name>FileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Row</name></expr></argument>, <argument><expr><name>Reason</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Severity</name> <operator>=</operator> <literal type="char">'w'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator> <name>rv</name> <operator>==</operator> <literal type="number">3</literal> <operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>rv</name> <operator>!=</operator> <literal type="number">3</literal></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sscanf</name><argument_list>( <argument><expr><name>Line</name></expr></argument>, <argument><expr><literal type="string">"\"%[^\"]\", line %lu: %[^\n]"</literal></expr></argument>,
<argument><expr><name>FileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Row</name></expr></argument>, <argument><expr><name>Reason</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Severity</name> <operator>=</operator> <literal type="char">'e'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator> <name>rv</name> <operator>==</operator> <literal type="number">3</literal> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>Col</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>dec_col</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COMPILER_ATT</name></expr>:</case>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sscanf</name><argument_list>( <argument><expr><name>Line</name></expr></argument>, <argument><expr><literal type="string">"%c \"%[^\"]\",L%lu/C%lu%*[^:]:%[^\n]"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>Severity</name></expr></argument>, <argument><expr><name>FileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Col</name></expr></argument>, <argument><expr><name>Reason</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator> <name>rv</name> <operator>==</operator> <literal type="number">5</literal> <operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sscanf</name><argument_list>( <argument><expr><name>Line</name></expr></argument>, <argument><expr><literal type="string">"%c \"%[^\"]\",L%lu/C%lu: %[^\n]"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>Severity</name></expr></argument>, <argument><expr><name>FileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Col</name></expr></argument>, <argument><expr><name>Reason</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator> <name>rv</name> <operator>==</operator> <literal type="number">5</literal> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sscanf</name><argument_list>( <argument><expr><name>Line</name></expr></argument>, <argument><expr><literal type="string">"%c \"%[^\"]\",L%lu: %[^\n]"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>Severity</name></expr></argument>, <argument><expr><name>FileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Row</name></expr></argument>, <argument><expr><name>Reason</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator> <name>rv</name> <operator>==</operator> <literal type="number">4</literal> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Col</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>dec_col</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stay</name> <operator>=</operator> <operator>(</operator><call><name>echogets</name><argument_list>(<argument><expr><name>Line2</name></expr></argument>, <argument><expr><name>echo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>( <expr><name>stay</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>Line2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal><operator>)</operator></expr> )</condition>
<block>{<block_content> <for>for <control>(<init><expr><name>p</name><operator>=</operator><operator>&amp;</operator><name><name>Line2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</init> <condition><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>Reason</name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>Reason</name></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Line2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>stay</name> <operator>=</operator> <operator>(</operator><call><name>echogets</name><argument_list>(<argument><expr><name>Line2</name></expr></argument>, <argument><expr><name>echo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>prefetch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>( <argument><expr><name>Line</name></expr></argument>, <argument><expr><name>Line2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COMPILER_IRIX</name></expr>:</case>
<expr_stmt><expr><name>Col</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prefetch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>Line</name></expr></argument>, <argument><expr><literal type="string">"cfe: "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>Line</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Severity</name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>Line</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sscanf</name><argument_list>( <argument><expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%[^:]: %lu: %[^\n]"</literal></expr></argument>,
<argument><expr><name>FileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Row</name></expr></argument>, <argument><expr><name>Reason</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sscanf</name><argument_list>( <argument><expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%[^,], line %lu: %[^\n]"</literal></expr></argument>,
<argument><expr><name>FileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Row</name></expr></argument>, <argument><expr><name>Reason</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator> <name>rv</name> <operator>==</operator> <literal type="number">3</literal> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition>
<block>{<block_content> <expr_stmt><expr><name>prefetch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>stay</name> <operator>=</operator> <operator>(</operator><call><name>echogets</name><argument_list>(<argument><expr><name>Line</name></expr></argument>, <argument><expr><name>echo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stay</name> <operator>=</operator> <operator>(</operator><call><name>echogets</name><argument_list>(<argument><expr><name>Line2</name></expr></argument>, <argument><expr><name>echo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>Line2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator> <operator>(</operator><name><name>Line2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>Line2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator> <operator>)</operator></expr> )</condition>
<block>{<block_content> <expr_stmt><expr><name>Col</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>Line2</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prefetch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content> <expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>Line</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>Line</name></expr></argument>, <argument><expr><name>Line2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>dec_col</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>Col</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dec_row</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>Row</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>Line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>Line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>Line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>sscanf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"make[%*d]: Entering directory `%[^']"</literal></expr></argument>,
<argument><expr><name>BasePath</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"[%u]?%s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>ok</name></expr></argument>, <argument><expr><name>Line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><expr><name>p</name><operator>=</operator><name>Reason</name></expr>;</init> <condition><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>( <expr><name><name>BasePath</name><index>[<expr><name>CWDlen</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%s:%lu:%lu:%c:%s\n"</literal></expr></argument>, <argument><expr><name>FileName</name></expr></argument>, <argument><expr><name>Row</name></expr></argument>, <argument><expr><name>Col</name></expr></argument>, <argument><expr><name>Severity</name></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%s/%s:%lu:%lu:%c:%s\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BasePath</name><index>[<expr><name>CWDlen</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FileName</name></expr></argument>, <argument><expr><name>Row</name></expr></argument>, <argument><expr><name>Col</name></expr></argument>, <argument><expr><name>Severity</name></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prefetch</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stay</name> <operator>=</operator> <operator>(</operator> <call><name>echogets</name><argument_list>(<argument><expr><name>Line</name></expr></argument>, <argument><expr><name>echo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
