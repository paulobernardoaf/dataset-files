<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\runtime\tools\xcmdsrv_client.c">


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/poll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Intrinsic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xatom.h&gt;</cpp:file></cpp:include>


<function_decl><type><name>char</name> <modifier>*</modifier></type> <name>sendToVim</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>asKeys</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>code</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>sendToVim</name><argument_list>(<argument><expr><call><name>XOpenDisplay</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'e'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error code returned: %d\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage: %s {k|e} &lt;server&gt; &lt;command&gt;"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PROP_WORDS</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>





<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>x_error_check</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>XErrorEvent</name> <modifier>*</modifier></type><name>error_event</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AppendPropCarefully</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name></decl></parameter>,
<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><name>Atom</name></type> <name>property</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Window</name></type> <name>LookupName</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>delete</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>loose</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SendInit</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>SendEventProc</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>eventPtr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>expect</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>code</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>IsSerialName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <name>Atom</name></type> <name>registryProperty</name> <init>= <expr><name>None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Atom</name></type> <name>commProperty</name> <init>= <expr><name>None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Window</name></type> <name>commWindow</name> <init>= <expr><name>None</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>got_x_error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>










<function><type><name>char</name> <modifier>*</modifier></type>
<name>sendToVim</name><parameter_list>(
<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, 
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, 
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>asKeys</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>code</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>Window</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name> <modifier>*</modifier></type><name>plist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XErrorHandler</name></type> <name>old_handler</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATIC_SPACE</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>property</name></decl>, <decl><type ref="prev"/><name><name>staticSpace</name><index>[<expr><name>STATIC_SPACE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>serial</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>XEvent</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XPropertyEvent</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>XPropertyEvent</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>event</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>loosename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>commProperty</name> <operator>==</operator> <name>None</name> <operator>&amp;&amp;</operator> <name>dpy</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>SendInit</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>










<expr_stmt><expr><name>old_handler</name> <operator>=</operator> <call><name>XSetErrorHandler</name><argument_list>(<argument><expr><name>x_error_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>TRUE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>got_x_error</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>LookupName</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>loosename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>!=</operator> <name>None</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>plist</name> <operator>=</operator> <call><name>XListProperties</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSync</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>plist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>plist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>got_x_error</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>LookupName</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><ternary><condition><expr><name>loosename</name></expr> ?</condition><then> <expr><name>loosename</name></expr> </then><else>: <expr><name>name</name></expr></else></ternary></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <name>None</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"no registered server named %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>loosename</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>loosename</name></expr>;</expr_stmt></block_content></block></if></if_stmt>






<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;=</operator> <name>STATIC_SPACE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>property</name> <operator>=</operator> <name>staticSpace</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>property</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>serial</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><literal type="string">"%c%c%c-n %s%c-s %s"</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>asKeys</name></expr> ?</condition><then> <expr><literal type="char">'k'</literal></expr> </then><else>: <expr><literal type="char">'c'</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>loosename</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>loosename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>asKeys</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>property</name> <operator>+</operator> <name>length</name></expr></argument>, <argument><expr><literal type="string">"%c-r %x %d"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint</name><operator>)</operator> <name>commWindow</name></expr></argument>, <argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>property</name> <operator>+</operator> <name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>AppendPropCarefully</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>commProperty</name></expr></argument>, <argument><expr><name>property</name></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name>STATIC_SPACE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to send command to the destination program\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>asKeys</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEND_MSEC_POLL</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><call><name>time</name><argument_list>(<argument><expr><operator>(</operator><name>time_t</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>start</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">60</literal></expr>)</condition>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>fds</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fds</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>ConnectionNumber</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fds</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>poll</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SEND_MSEC_POLL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>fd_set</name></type> <name>fds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name>SEND_MSEC_POLL</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><call><name>ConnectionNumber</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>select</name><argument_list>(<argument><expr><call><name>ConnectionNumber</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while <condition>(<expr><call><name>XEventsQueued</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>QueuedAfterReading</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XNextEvent</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>PropertyNotify</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>window</name></name> <operator>==</operator> <name>commWindow</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>SendEventProc</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>serial</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>SendInit</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XErrorHandler</name></type> <name>old_handler</name></decl>;</decl_stmt>





<expr_stmt><expr><name>old_handler</name> <operator>=</operator> <call><name>XSetErrorHandler</name><argument_list>(<argument><expr><name>x_error_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_x_error</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>commProperty</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><literal type="string">"Comm"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>registryProperty</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><literal type="string">"VimRegistry"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>commWindow</name> <operator>==</operator> <name>None</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>commWindow</name> <operator>=</operator>
<call><name>XCreateSimpleWindow</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><call><name>XDefaultRootWindow</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>WhitePixel</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><call><name>DefaultScreen</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>WhitePixel</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><call><name>DefaultScreen</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSelectInput</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>commWindow</name></expr></argument>, <argument><expr><name>PropertyChangeMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XSync</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>XSetErrorHandler</name><argument_list>(<argument><expr><name>old_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>got_x_error</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>Window</name></type>
<name>LookupName</name><parameter_list>(
<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, 
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>delete</name></decl></parameter>, 
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>loose</name></decl></parameter>)</parameter_list> 

<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>regProp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>actualFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>numItems</name></decl>, <decl><type ref="prev"/><name>bytesAfter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>actualType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>returnValue</name></decl>;</decl_stmt>





<expr_stmt><expr><name>regProp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>XGetWindowProperty</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><call><name>RootWindow</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>registryProperty</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>MAX_PROP_WORDS</name></expr></argument>, <argument><expr><name>False</name></expr></argument>, <argument><expr><name>XA_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualType</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>actualFormat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numItems</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytesAfter</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>regProp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>actualType</name> <operator>==</operator> <name>None</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>!=</operator> <name>Success</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>actualFormat</name> <operator>!=</operator> <literal type="number">8</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>actualType</name> <operator>!=</operator> <name>XA_STRING</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>regProp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>regProp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>XDeleteProperty</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><call><name>RootWindow</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>registryProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>returnValue</name> <operator>=</operator> <name>None</name></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>regProp</name></expr>;</init> <condition><expr><operator>(</operator><name>p</name> <operator>-</operator> <name>regProp</name><operator>)</operator> <operator>&lt;</operator> <name>numItems</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="string">"%x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>returnValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>loose</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>returnValue</name> <operator>==</operator> <name>None</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsSerialName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>regProp</name></expr>;</init> <condition><expr><operator>(</operator><name>p</name> <operator>-</operator> <name>regProp</name><operator>)</operator> <operator>&lt;</operator> <name>numItems</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IsSerialName</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="string">"%x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>returnValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>loose</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name>delete</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>returnValue</name> <operator>!=</operator> <name>None</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>numItems</name> <operator>-</operator> <operator>(</operator><name>p</name><operator>-</operator><name>regProp</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><call><name>RootWindow</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>registryProperty</name></expr></argument>, <argument><expr><name>XA_STRING</name></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>PropModeReplace</name></expr></argument>, <argument><expr><name>regProp</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>numItems</name> <operator>-</operator> <operator>(</operator><name>p</name><operator>-</operator><name>entry</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSync</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>regProp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>returnValue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>SendEventProc</name><parameter_list>(
<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>,
<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>eventPtr</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>expected</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>code</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>propInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>actualFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retCode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>numItems</name></decl>, <decl><type ref="prev"/><name>bytesAfter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>actualType</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>eventPtr</name><operator>-&gt;</operator><name>xproperty</name><operator>.</operator><name>atom</name></name> <operator>!=</operator> <name>commProperty</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>eventPtr</name><operator>-&gt;</operator><name>xproperty</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>PropertyNewValue</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>propInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>XGetWindowProperty</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>commWindow</name></expr></argument>, <argument><expr><name>commProperty</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>MAX_PROP_WORDS</name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>XA_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualType</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>actualFormat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numItems</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytesAfter</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>propInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>!=</operator> <name>Success</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>actualType</name> <operator>!=</operator> <name>XA_STRING</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>actualFormat</name> <operator>!=</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>propInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>propInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>







<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>propInfo</name></expr>;</init> <condition><expr><operator>(</operator><name>p</name> <operator>-</operator> <name>propInfo</name><operator>)</operator> <operator>&lt;</operator> <name>numItems</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>







<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'r'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>serial</name></decl>, <decl><type ref="prev"/><name>gotSerial</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>







<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gotSerial</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>retCode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>(</operator><name>p</name><operator>-</operator><name>propInfo</name><operator>)</operator> <operator>&lt;</operator> <name>numItems</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>serial</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gotSerial</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>retCode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>retCode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gotSerial</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>code</name> <operator>=</operator> <name>retCode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>serial</name> <operator>==</operator> <name>expected</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>






<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>propInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>int</name></type>
<name>AppendPropCarefully</name><parameter_list>(
<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, 
<parameter><decl><type><name>Window</name></type> <name>window</name></decl></parameter>, 

<parameter><decl><type><name>Atom</name></type> <name>property</name></decl></parameter>, 
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>XErrorHandler</name></type> <name>old_handler</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old_handler</name> <operator>=</operator> <call><name>XSetErrorHandler</name><argument_list>(<argument><expr><name>x_error_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_x_error</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XChangeProperty</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>property</name></expr></argument>, <argument><expr><name>XA_STRING</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><name>PropModeAppend</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSync</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>XSetErrorHandler</name><argument_list>(<argument><expr><name>old_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>got_x_error</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>x_error_check</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>XErrorEvent</name> <modifier>*</modifier></type><name>error_event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>got_x_error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>IsSerialName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
