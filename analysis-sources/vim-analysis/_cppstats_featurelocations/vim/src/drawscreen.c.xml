<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\drawscreen.c">
































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>win_update</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>redraw_custom_statusline</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>did_update_one_window</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>int</name></type>
<name>update_screen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>type_arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>did_intro</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>did_one</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_undraw</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gui_cursor_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gui_cursor_row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>no_update</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>screen_valid</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>VALID_NO_UPDATE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>no_update</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>


<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>invoke_listeners</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>need_diff_redraw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>diff_redraw</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>must_redraw</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <name>must_redraw</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>must_redraw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <name>NOT_VALID</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>term_do_update_window</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>redrawing</name><argument_list>()</argument_list></call> <operator>||</operator> <name>updating_screen</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;</operator> <name>INVERTED_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>updating_screen</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>may_update_popup_mask</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>++</operator><name>display_tick</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>no_update</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>no_win_do_lines_ins</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>msg_scrolled</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_scrolled</name> <operator>&gt;</operator> <name>Rows</name> <operator>-</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>CLEAR</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>!=</operator> <name>CLEAR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>check_for_delay</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>screen_ins_lines</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>msg_scrolled</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>CLEAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>&lt;</operator> <name>msg_scrolled</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&gt;</operator> <name>msg_scrolled</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>&lt;</operator> <name>REDRAW_TOP</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_upd_rows</name></name> <operator>=</operator> <name>msg_scrolled</name> <operator>-</operator> <call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <name>REDRAW_TOP</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name>
<operator>&lt;=</operator> <name>msg_scrolled</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_update</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>msg_scrolled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>compute_cmdrow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>need_highlight_changed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>highlight_changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLEAR</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>screenclear</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>clear_cmdline</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>check_for_delay</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>&lt;</operator> <name>NOT_VALID</name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_nrwidth</name></name> <operator>!=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_rnu</name></name><operator>)</operator></expr>
?</condition><then> <expr><call><name>number_width</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>INVERTED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_curswant</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>&lt;</operator> <name>type</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>type</name> <operator>==</operator> <name>VALID</name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_valid</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_old_topfill</name></name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botfill</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_old_botfill</name></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>INVERTED</name>
<operator>&amp;&amp;</operator> <name>VIsual_active</name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_old_visual_mode</name></name> <operator>==</operator> <name>VIsual_mode</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <name>VALID_VIRTCOL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_old_curswant</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name><operator>)</operator>
<operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>redraw_tabline</name> <operator>||</operator> <name>type</name> <operator>&gt;=</operator> <name>NOT_VALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_tabline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_set</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wwp</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>wwp</name> <operator>=</operator> <name>firstwin</name></expr>;</init> <condition><expr><name>wwp</name> <operator>!=</operator> <name>wp</name></expr>;</condition> <incr><expr><name>wwp</name> <operator>=</operator> <name><name>wwp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>wwp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>wwp</name> <operator>==</operator> <name>wp</name> <operator>&amp;&amp;</operator> <call><name>syntax_present</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syn_stack_apply_changes</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>did_update_one_window</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>screen_search_hl</name><operator>.</operator><name>rm</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>cursor_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_one</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>did_one</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <name>wp</name> <operator>==</operator> <name>curwin</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>gui_cursor_col</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>cursor_col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gui_cursor_row</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>cursor_row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_undraw_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_undraw</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>win_update</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>cursor_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_redr_status</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>end_search_hl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>pum_may_redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_set</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>update_popups</name><argument_list>(<argument><expr><name>win_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>after_updating_screen</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>clear_cmdline</name> <operator>||</operator> <name>redraw_cmdline</name> <operator>||</operator> <name>redraw_mode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>no_update</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>no_win_do_lines_ins</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_intro</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>maybe_intro_message</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>did_intro</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>did_undraw</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gui_mch_is_blink_off</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_disable_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>mch_enable_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>gui_cursor_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>gui_cursor_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>=</operator> <call><name>mb_fix_col</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_may_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>screen_cur_col</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>screen_cur_row</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>gui_update_scrollbars</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>win_redr_status</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>ignore_pum</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fillchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>this_ru_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>busy</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>busy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>busy</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>redrawing</name><argument_list>()</argument_list></call>


<operator>||</operator> <operator>(</operator><operator>!</operator><name>ignore_pum</name> <operator>&amp;&amp;</operator> <call><name>pum_visible</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p_stl</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_stl</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>redraw_custom_statusline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <call><name>fillchar_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_trans_bufname</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NameBuff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bt_help</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_pvw</name></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>||</operator> <call><name>bufIsChanged</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ro</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>len</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bt_help</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"[Help]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_pvw</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"[Preview]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>bufIsChanged</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>bt_terminal</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"[+]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ro</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"[RO]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>this_ru_col</name> <operator>=</operator> <name>ru_col</name> <operator>-</operator> <operator>(</operator><name>Columns</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>this_ru_col</name> <operator>&lt;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>this_ru_col</name> <operator>=</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>this_ru_col</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;"</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>clen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>mb_string2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>clen</name> <operator>&gt;=</operator> <name>this_ru_col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition>
<incr><expr><name>i</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>clen</name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_ptr2cells</name>)<argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>clen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>this_ru_col</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name> <operator>-</operator> <operator>(</operator><name>this_ru_col</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>this_ru_col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screen_puts</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>,
<argument><expr><name>this_ru_col</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><name>fillchar</name></expr></argument>, <argument><expr><name>fillchar</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_keymap_str</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;%s&gt;"</literal></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>this_ru_col</name> <operator>-</operator> <name>len</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>screen_puts</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>this_ru_col</name> <operator>-</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call>
<operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name><operator>)</operator></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>win_redr_ruler</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ignore_pum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>redrawing</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>stl_connected</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <call><name>fillchar_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <call><name>fillchar_vsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>screen_putchar</name><argument_list>(<argument><expr><name>fillchar</name></expr></argument>, <argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr></argument>, <argument><expr><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>busy</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>redraw_custom_statusline</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>entered</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_did_emsg</name> <init>= <expr><name>did_emsg</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>entered</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>entered</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_redr_custom</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>did_emsg</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"statusline"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>OPT_FREE</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_stl</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><name>OPT_LOCAL</name></expr> </then><else>: <expr><name>OPT_GLOBAL</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>SID_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>did_emsg</name> <operator>|=</operator> <name>saved_did_emsg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>entered</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>void</name></type>
<name>showruler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>always</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>always</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>redrawing</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pum_visible</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p_stl</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_stl</name></name> <operator>!=</operator> <name>NUL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_custom_statusline</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>win_redr_ruler</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>always</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>need_maketitle</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><name>p_icon</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>stl_syntax</name> <operator>&amp;</operator> <name>STL_IN_ICON</name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>p_title</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>stl_syntax</name> <operator>&amp;</operator> <name>STL_IN_TITLE</name><operator>)</operator><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>redraw_tabline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_tabline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>win_redr_ruler</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>always</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ignore_pum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RULER_BUF_LEN</name></cpp:macro> <cpp:value>70</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buffer</name><index>[<expr><name>RULER_BUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fillchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>empty_line</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>virtcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>this_ru_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_ru</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>lastwin</name> <operator>&amp;&amp;</operator> <name><name>lastwin</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>edit_submode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ignore_pum</name> <operator>&amp;&amp;</operator> <call><name>pum_visible</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_ruf</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>called_emsg_before</name> <init>= <expr><name>called_emsg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>win_redr_custom</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>called_emsg</name> <operator>&gt;</operator> <name>called_emsg_before</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"rulerformat"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><name>SID_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>*</operator><call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>empty_line</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>validate_virtcol_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>redraw_cmdline</name>
<operator>||</operator> <name>always</name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_ru_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_ru_cursor</name><operator>.</operator><name>col</name></name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_ru_virtcol</name></name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_ru_cursor</name><operator>.</operator><name>coladd</name></name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_ru_topline</name></name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_ru_line_count</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_ru_topfill</name></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>||</operator> <name>empty_line</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_ru_empty</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>cursor_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <call><name>fillchar_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>virtcol</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>&amp;&amp;</operator> <name>lcs_tab1</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>virtcol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><name>RULER_BUF_LEN</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">0L</literal></expr>
</then><else>: <expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>col_print</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>RULER_BUF_LEN</name> <operator>-</operator> <name>len</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>empty_line</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>virtcol</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_rel_pos</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>RULER_BUF_LEN</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <name>i</name> <operator>+</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>++</operator><name>o</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>this_ru_col</name> <operator>=</operator> <name>ru_col</name> <operator>-</operator> <operator>(</operator><name>Columns</name> <operator>-</operator> <name>width</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>this_ru_col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>this_ru_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>this_ru_col</name> <operator>&lt;</operator> <operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>this_ru_col</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>this_ru_col</name> <operator>+</operator> <name>o</name> <operator>&lt;</operator> <name>width</name></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><name>this_ru_col</name> <operator>+</operator> <name><name>o</name> <argument_list type="generic">&lt; <argument><expr><name>width</name> <operator>&amp;&amp;</operator> <name>RULER_BUF_LEN</name></expr></argument> &gt;</argument_list></name> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>fillchar</name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fillchar</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>o</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>get_rel_pos</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>RULER_BUF_LEN</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2cells</name>)<argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>this_ru_col</name> <operator>+</operator> <name>o</name> <operator>&gt;</operator> <name>width</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>this_ru_col</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>width</name> <operator>-</operator> <name>this_ru_col</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>screen_puts</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>this_ru_col</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>redraw_cmdline</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>this_ru_col</name> <operator>+</operator> <name>off</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>off</name> <operator>+</operator> <name>width</name><operator>)</operator></expr></argument>,
<argument><expr><name>fillchar</name></expr></argument>, <argument><expr><name>fillchar</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_ru_cursor</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_ru_virtcol</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_ru_empty</name></name> <operator>=</operator> <name>empty_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_ru_topline</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_ru_line_count</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_ru_topfill</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>void</name></type>
<name>after_updating_screen</name><parameter_list>(<parameter><decl><type><name>int</name> <name>may_resize_shell</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>updating_screen</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>may_resize_shell</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_may_resize_shell</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>term_check_channel_closed_recently</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DROP_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>handle_any_postponed_drop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>update_curbuf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>text_to_screenline</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>current_ScreenLine</name> <operator>-</operator> <name>ScreenLines</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cells</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>u8c</name></decl>, <decl><type ref="prev"/><name><name>u8cc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>prev_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>prev_c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>off</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>text</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>cells</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2cells</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c_len</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>+</operator> <name>cells</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>-</operator> <operator>(</operator><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><name>col</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>u8c</name> <operator>=</operator> <call><name>utfc_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>u8cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>prev_c</name> <operator>=</operator> <name>u8c</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_arshape</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_tbidi</name> <operator>&amp;&amp;</operator> <call><name>ARABIC_CHAR</name><argument_list>(<argument><expr><name>u8c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pc</name></decl>, <decl><type ref="prev"/><name>pc1</name></decl>, <decl><type ref="prev"/><name>nc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pcc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>firstbyte</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <name>prev_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pc1</name> <operator>=</operator> <name>prev_c1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>c_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_c1</name> <operator>=</operator> <name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>utfc_ptr2char</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>c_len</name></expr></argument>, <argument><expr><name>pcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <name>prev_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pc1</name> <operator>=</operator> <name><name>pcc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>prev_c</name> <operator>=</operator> <name>u8c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>u8c</name> <operator>=</operator> <call><name>arabic_shape</name><argument_list>(<argument><expr><name>u8c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>firstbyte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>pc1</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>firstbyte</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>prev_c</name> <operator>=</operator> <name>u8c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>u8c</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Screen_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>u8cc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u8cc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cells</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x8e</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScreenLines2</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cells</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>cells</name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>cells</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>c_len</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>col</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>current_ScreenLine</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>current_ScreenLine</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>col</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>redraw_win_toolbar</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>item_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>item_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>current_ScreenLine</name> <operator>-</operator> <name>ScreenLines</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fill_attr</name> <init>= <expr><call><name>syn_name2attr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ToolbarLine"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>button_attr</name> <init>= <expr><call><name>syn_name2attr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ToolbarButton"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winbar_items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>menu</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winbar</name><operator>-&gt;</operator><name>children</name></name></expr>;</init> <condition><expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>item_count</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winbar_items</name></name> <operator>=</operator> <call><name>ALLOC_CLEAR_MULT</name><argument_list>(<argument><expr><name>winbar_item_T</name></expr></argument>, <argument><expr><name>item_count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>menu</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winbar</name><operator>-&gt;</operator><name>children</name></name></expr>;</init>
<condition><expr><name>menu</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</condition> <incr><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>space_to_screenline</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>fill_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>col</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>space_to_screenline</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>fill_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>col</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winbar_items</name><index>[<expr><name>item_idx</name></expr>]</index></name><operator>.</operator><name>wb_startcol</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>space_to_screenline</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>button_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>col</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next_col</name> <operator>=</operator> <call><name>text_to_screenline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name>next_col</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name> <operator>+</operator> <name>col</name></expr>]</index></name> <operator>=</operator> <name>button_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winbar_items</name><index>[<expr><name>item_idx</name></expr>]</index></name><operator>.</operator><name>wb_endcol</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winbar_items</name><index>[<expr><name>item_idx</name></expr>]</index></name><operator>.</operator><name>wb_menu</name> <operator>=</operator> <name>menu</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>item_idx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>space_to_screenline</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>button_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></for>
<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>space_to_screenline</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>fill_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winbar_items</name><index>[<expr><name>item_idx</name></expr>]</index></name><operator>.</operator><name>wb_menu</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>screen_line</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_text_attr</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>ScreenLines</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>ScreenLinesUC</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u8char_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>fold_line</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>fold_count</name></decl></parameter>,
<parameter><decl><type><name>foldinfo_T</name> <modifier>*</modifier></type><name>foldinfo</name></decl></parameter>,
<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>FOLD_TEXT_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>top</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnume</name> <init>= <expr><name>lnum</name> <operator>+</operator> <name>fold_count</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fdc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>txtcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>current_ScreenLine</name> <operator>-</operator> <name>ScreenLines</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ri</name></decl>;</decl_stmt>








<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wp</name> <operator>==</operator> <name>curwin</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>cmdwin_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name>fdc</name> <operator>=</operator> <call><name>compute_foldcolumn</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fdc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fill_foldcolumn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>copy_text_attr</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>fdc</name> <operator>-</operator> <name>col</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fdc</name></expr></argument>,
<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_FC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fdc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>col</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>copy_text_attr</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fdc</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_FC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>fdc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_MEMSET</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (wp-&gt;w_p_rl) for (ri = 0; ri &lt; l; ++ri) ScreenAttrs[off + (wp-&gt;w_width - (p) - (l)) + ri] = v; else for (ri = 0; ri &lt; l; ++ri) ScreenAttrs[off + (p) + ri] = v; } while (0)</cpp:value></cpp:define>








<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_MEMSET</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { for (ri = 0; ri &lt; l; ++ri) ScreenAttrs[off + (p) + ri] = v; } while (0)</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><call><name>RL_MEMSET</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_FL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>signcolumn_on</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_text_attr</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>len</name> <operator>-</operator> <name>col</name></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_FL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>copy_text_attr</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_FL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>number_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><literal type="string">"%*ld "</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>w</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>w</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>lnum</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>labs</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>get_cursor_rel_lnum</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>num</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%-*ld "</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_text_attr</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>len</name> <operator>-</operator> <name>col</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_FL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>copy_text_attr</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_FL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>get_foldtext</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>lnume</name></expr></argument>, <argument><expr><name>foldinfo</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>txtcol</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt> 




<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>text_to_screenline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <name>txtcol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>-</operator> <operator>(</operator><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><name>txtcol</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fill_fold</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name> <operator>+</operator> <name>col</name></expr>]</index></name> <operator>=</operator> <name>fill_fold</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ScreenLinesC</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>off</name> <operator>+</operator> <name>col</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <name>col</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name> <operator>+</operator> <name>col</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <name>col</name></expr>]</index></name> <operator>=</operator> <name>fill_fold</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>col</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <name>col</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fill_fold</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>!=</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LTOREQ_POS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>VIsual</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <operator>&amp;</operator><name>VIsual</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>&amp;</operator><name>VIsual</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <name><name>top</name><operator>-&gt;</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name>lnume</name> <operator>&lt;=</operator> <name><name>bot</name><operator>-&gt;</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>VIsual_mode</name> <operator>!=</operator> <literal type="char">'v'</literal>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>lnum</name> <operator>&gt;</operator> <name><name>top</name><operator>-&gt;</operator><name>lnum</name></name>
<operator>||</operator> <operator>(</operator><name>lnum</name> <operator>==</operator> <name><name>top</name><operator>-&gt;</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name><name>top</name><operator>-&gt;</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>lnume</name> <operator>&lt;</operator> <name><name>bot</name><operator>-&gt;</operator><name>lnum</name></name>
<operator>||</operator> <operator>(</operator><name>lnume</name> <operator>==</operator> <name><name>bot</name><operator>-&gt;</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>bot</name><operator>-&gt;</operator><name>col</name></name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal><operator>)</operator><operator>)</operator>
<operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnume</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_fcol</name></name> <operator>+</operator> <name>txtcol</name> <operator>&lt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lcol</name></name> <operator>!=</operator> <name>MAXCOL</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lcol</name></name> <operator>+</operator> <name>txtcol</name>
<operator>&lt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lcol</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>txtcol</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>RL_MEMSET</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_fcol</name></name> <operator>+</operator> <name>txtcol</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_V</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_fcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>RL_MEMSET</name><argument_list>(<argument><expr><name>txtcol</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_V</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>txtcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_txtcol</name> <init>= <expr><name>txtcol</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>j</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>txtcol</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>txtcol</name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>txtcol</name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>txtcol</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>txtcol</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name> <operator>+</operator> <name>txtcol</name></expr>]</index></name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(
<argument><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name> <operator>+</operator> <name>txtcol</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>txtcol</name> <operator>=</operator> <name>old_txtcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cuc</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>txtcol</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>txtcol</name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>txtcol</name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>txtcol</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>txtcol</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name> <operator>+</operator> <name>txtcol</name></expr>]</index></name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(
<argument><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name> <operator>+</operator> <name>txtcol</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_CUC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>screen_line</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name>lnume</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_height</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_folded</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <operator>(</operator><name>VALID_CHEIGHT</name><operator>|</operator><name>VALID_CROW</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




























<function><type><specifier>static</specifier> <name>void</name></type>
<name>win_update</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mid_start</name> <init>= <expr><literal type="number">999</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mid_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bot_start</name> <init>= <expr><literal type="number">999</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scrolled_down</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>top_to_mod</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>srow</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>eof</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>didline</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>linenr_T</name></type> <name>old_botline</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>old_wrow</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_wcol</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_wcol</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>long</name></type> <name>fold_count</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DID_NONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DID_LINE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DID_FOLD</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<decl_stmt><decl><type><name>int</name></type> <name>did_update</name> <init>= <expr><name>DID_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>syntax_last_parsed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>mod_top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>mod_bot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>save_got_int</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYN_TIME_LIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>proftime_T</name></type> <name>syntax_tm</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_update_one_window</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>did_update_one_window</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>start_search_hl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <call><name>clip_isautosel_star</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_update_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>clip_plus</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <call><name>clip_isautosel_plus</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_update_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NOT_VALID</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <call><name>WINBAR_HEIGHT</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>draw_vsep_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>term_do_update_window</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>term_update_window</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>winbar_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_win_toolbar</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>init_search_hl</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_search_hl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name><operator>)</operator></expr> ?</condition><then> <expr><call><name>number_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_nrwidth</name></name> <operator>!=</operator> <name>i</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_nrwidth</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_mod_set</name></name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_xlines</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redraw_top</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name>mod_top</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redraw_top</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_bot</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_bot</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redraw_bot</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_bot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_mod_set</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mod_top</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>mod_top</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_top</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mod_top</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_top</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>syntax_present</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mod_top</name> <operator>-=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_syn_sync_linebreaks</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mod_top</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_top</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mod_bot</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>mod_bot</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_bot</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_bot</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_bot</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><name><name>screen_search_hl</name><operator>.</operator><name>rm</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>re_multiline</name><argument_list>(<argument><expr><name><name>screen_search_hl</name><operator>.</operator><name>rm</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>top_to_mod</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>match</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>re_multiline</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>match</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>top_to_mod</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mod_top</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnumt</name></decl>, <decl><type ref="prev"/><name>lnumb</name></decl>;</decl_stmt>











<expr_stmt><expr><name>lnumt</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lnumb</name> <operator>=</operator> <name>MAXLNUM</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_valid</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lastlnum</name> <operator>&lt;</operator> <name>mod_top</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lnumt</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lastlnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lnumb</name> <operator>==</operator> <name>MAXLNUM</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>&gt;=</operator> <name>mod_bot</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>lnumb</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>compute_foldcolumn</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>lnumb</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>mod_top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mod_top</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mod_top</name> <operator>&gt;</operator> <name>lnumt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_top</name> <operator>=</operator> <name>lnumt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>--</operator><name>mod_bot</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>mod_bot</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mod_bot</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>mod_bot</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mod_bot</name> <operator>&lt;</operator> <name>lnumb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_bot</name> <operator>=</operator> <name>lnumb</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<if_stmt><if>if <condition>(<expr><name>mod_top</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mod_top</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mod_bot</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_top</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>syntax_present</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>top_end</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>mod_top</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_xlines</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_bot</name> <operator>=</operator> <name>MAXLNUM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_bot</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>REDRAW_TOP</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_upd_rows</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>top_end</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>top_end</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>VALID</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>screen_cleared</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>screen_cleared</name> <operator>=</operator> <name>MAYBE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <name>VALID</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>SOME_VALID</name>
<operator>||</operator> <name>type</name> <operator>==</operator> <name>INVERTED</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>INVERTED_ALL</name><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_botfill</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_old_botfill</name></name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mod_top</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <name>mod_top</name></expr>)</condition>
<block>{<block_content>


</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_valid</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_topfill</name></name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator></expr>)</condition>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>ln</name></decl>;</decl_stmt>



<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name></expr>;</condition> <incr><expr><operator>++</operator><name>ln</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ln</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>plines_m_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name></expr></argument>)</argument_list></call>
<operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_topfill</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> 
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_for_delay</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>win_ins_lines</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>wp</name> <operator>==</operator> <name>firstwin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>top_end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scrolled_down</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>+=</operator> <name>j</name><operator>)</operator> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>;</init> <condition><expr><name>idx</name> <operator>-</operator> <name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>idx</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name> <operator>-</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<while>while <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name><operator>--</operator></expr>]</index></name><operator>.</operator><name>wl_valid</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mid_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mid_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mid_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>





<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_valid</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>row</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>mid_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>row</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_topfill</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>row</name> <operator>+=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>row</name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>check_for_delay</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>win_del_lines</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>wp</name> <operator>==</operator> <name>firstwin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
<operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bot_start</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>row</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mid_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>row</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>bot_start</name> <operator>&lt;</operator> <literal type="number">999</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>bot_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bot_start</name> <operator>+</operator> <name>row</name>
<operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>wl_size</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bot_start</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>++</operator><name>j</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_diff</name></name> <operator>&amp;&amp;</operator> <name>bot_start</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_size</name> <operator>=</operator>
<call><name>plines_win_nofill</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call>
<operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name>mid_start</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mid_end</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ONE_WINDOW</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>screen_cleared</name> <operator>!=</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>screenclear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>redraw_tabline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_tabline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>screen_cleared</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>mid_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mid_end</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>SOME_VALID</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>mid_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mid_end</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>NOT_VALID</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>VIsual_active</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>VIsual_mode</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_mode</name></name>
<operator>||</operator> <name>type</name> <operator>==</operator> <name>INVERTED_ALL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>&lt;</operator> <name>from</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>&gt;</operator> <name>to</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name> <operator>&lt;</operator> <name>from</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name> <operator>&gt;</operator> <name>to</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>from</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>VIsual</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name>
<operator>||</operator> <name><name>VIsual</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_col</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name> <operator>&lt;</operator> <name>from</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name> <operator>&gt;</operator> <name>to</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>VIsual</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name>from</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>VIsual</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name>to</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>fromc</name></decl>, <decl><type ref="prev"/><name>toc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>save_ve_flags</name> <init>= <expr><name>ve_flags</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ve_flags</name> <operator>=</operator> <name>VE_ALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>getvcols</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>VIsual</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fromc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>toc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ve_flags</name> <operator>=</operator> <name>save_ve_flags</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>++</operator><name>toc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>toc</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fromc</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_fcol</name></name>
<operator>||</operator> <name>toc</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lcol</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&lt;</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_fcol</name></name> <operator>=</operator> <name>fromc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lcol</name></name> <operator>=</operator> <name>toc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <name>VALID_BOTLINE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>mid_start</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>srow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scrolled_down</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mid_start</name> <operator>=</operator> <name>top_end</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mid_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<while>while <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <name>from</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mid_start</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>scrolled_down</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>srow</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>++</operator><name>lnum</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>srow</name> <operator>+=</operator> <name>mid_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mid_end</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>
<for>for <control>( <init>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_valid</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>&gt;=</operator> <name>to</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>mid_end</name> <operator>=</operator> <name>srow</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>srow</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_mode</name></name> <operator>=</operator> <name>VIsual_mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_col</name></name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_curswant</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>save_got_int</name> <operator>=</operator> <name>got_int</name></expr>;</expr_stmt>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYN_TIME_LIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>profile_setlimit</name><argument_list>(<argument><expr><name>p_rdt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>syntax_tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>syn_set_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>syntax_tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>win_foldinfo</name><operator>.</operator><name>fi_level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>winbar_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_win_toolbar</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>srow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt> 
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>didline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>eof</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>srow</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <name>top_end</name>
<operator>||</operator> <operator>(</operator><name>row</name> <operator>&gt;=</operator> <name>mid_start</name> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name>mid_end</name><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>top_to_mod</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>||</operator> <name>idx</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name>
<operator>||</operator> <operator>(</operator><name>row</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_size</name> <operator>&gt;</operator> <name>bot_start</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>mod_top</name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>lnum</name> <operator>==</operator> <name>mod_top</name>
<operator>||</operator> <operator>(</operator><name>lnum</name> <operator>&gt;=</operator> <name>mod_top</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>lnum</name> <operator>&lt;</operator> <name>mod_bot</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>did_update</name> <operator>==</operator> <name>DID_FOLD</name>
<operator>||</operator> <operator>(</operator><name>did_update</name> <operator>==</operator> <name>DID_LINE</name>
<operator>&amp;&amp;</operator> <call><name>syntax_present</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><call><name>foldmethodIsSyntax</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<call><name>syntax_check_changed</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>


<operator>||</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_xlines</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_cul</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>||</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_last_cursorline</name></name><operator>)</operator><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name>mod_top</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>top_to_mod</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name>mod_top</name>
<operator>&amp;&amp;</operator> <name>mod_bot</name> <operator>!=</operator> <name>MAXLNUM</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>dollar_vcol</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mod_bot</name> <operator>==</operator> <name>mod_top</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xtra_rows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>l</name></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>idx</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_valid</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>==</operator> <name>mod_bot</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>old_rows</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_valid</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lastlnum</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>mod_bot</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>old_rows</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt></block_content></block></while>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>bot_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name>j</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>lnum</name></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>mod_bot</name></expr>;</condition> <incr><expr><operator>++</operator><name>l</name></expr></incr>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>new_rows</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><name>l</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_rows</name> <operator>+=</operator> <call><name>plines_win_nofill</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call>
<operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>new_rows</name> <operator>+=</operator> <call><name>plines_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_rows</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>row</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>new_rows</name> <operator>=</operator> <literal type="number">9999</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>xtra_rows</name> <operator>=</operator> <name>new_rows</name> <operator>-</operator> <name>old_rows</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xtra_rows</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>row</name> <operator>-</operator> <name>xtra_rows</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_bot</name> <operator>=</operator> <name>MAXLNUM</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>check_for_delay</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>win_del_lines</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>,
<argument><expr><operator>-</operator><name>xtra_rows</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_bot</name> <operator>=</operator> <name>MAXLNUM</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bot_start</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <name>xtra_rows</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>xtra_rows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>row</name> <operator>+</operator> <name>xtra_rows</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_bot</name> <operator>=</operator> <name>MAXLNUM</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>check_for_delay</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>win_ins_lines</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <name>old_rows</name></expr></argument>,
<argument><expr><name>xtra_rows</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_bot</name> <operator>=</operator> <name>MAXLNUM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>top_end</name> <operator>&gt;</operator> <name>row</name> <operator>+</operator> <name>old_rows</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>top_end</name> <operator>+=</operator> <name>xtra_rows</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>mod_bot</name> <operator>!=</operator> <name>MAXLNUM</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>j</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>row</name> <operator>+</operator> <name>new_rows</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>wl_size</name>
<operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>bot_start</name> <operator>&gt;</operator> <name>x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bot_start</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>;</init> <condition><expr><name>i</name> <operator>-</operator> <name>j</name> <operator>&gt;=</operator> <name>idx</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>




<while>while <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>idx</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name><operator>--</operator></expr>]</index></name><operator>.</operator><name>wl_valid</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><name>fold_count</name> <operator>=</operator> <call><name>foldedCount</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_foldinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fold_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fold_line</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>fold_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_foldinfo</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>fold_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_folded</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_lastlnum</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <name>fold_count</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>did_update</name> <operator>=</operator> <name>DID_FOLD</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_valid</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>==</operator> <name>lnum</name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>dy_flags</name> <operator>&amp;</operator> <operator>(</operator><name>DY_LASTLINE</name> <operator>|</operator> <name>DY_TRUNCATE</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name>srow</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_size</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>


<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>prepare_search_hl</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_search_hl</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>syntax_last_parsed</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>syntax_last_parsed</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>lnum</name>
<operator>&amp;&amp;</operator> <call><name>syntax_present</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syntax_end_parsing</name><argument_list>(<argument><expr><name>syntax_last_parsed</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>win_line</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>srow</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr></argument>,
<argument><expr><name>mod_top</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_folded</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_lastlnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>did_update</name> <operator>=</operator> <name>DID_LINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>syntax_last_parsed</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_valid</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>||</operator> <name>row</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>&gt;=</operator> <name>Rows</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dollar_vcol</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_size</name> <operator>=</operator> <call><name>plines_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dollar_vcol</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_size</name> <operator>=</operator> <name>row</name> <operator>-</operator> <name>srow</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>lnum</name> <operator>+=</operator> <name>fold_count</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>++</operator><name>lnum</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><name>fold_count</name> <operator>=</operator> <call><name>foldedCount</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_foldinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fold_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fold_line</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>fold_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_foldinfo</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_line</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>srow</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>row</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wl_lastlnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>++</operator><name>lnum</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>did_update</name> <operator>=</operator> <name>DID_NONE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>eof</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VTP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>use_vtp</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name><name>LineOffset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>Columns</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>LineOffset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>screen_Columns</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>screen_draw_rectangle</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Columns</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>screen_draw_rectangle</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>screen_char</name><argument_list>(<argument><expr><name><name>LineOffset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>syntax_last_parsed</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>syntax_present</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syntax_end_parsing</name><argument_list>(<argument><expr><name>syntax_last_parsed</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_empty_rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_filler_rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eof</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>didline</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>diff_check_fill</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>srow</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_filler_rows</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>srow</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if <condition>(<expr><name>dy_flags</name> <operator>&amp;</operator> <name>DY_TRUNCATE</name></expr>)</condition> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>scr_row</name> <init>= <expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>screen_puts_len</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"@@"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>scr_row</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>,
<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><name>scr_row</name></expr></argument>, <argument><expr><name>scr_row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="char">'@'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_empty_rows</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>srow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>dy_flags</name> <operator>&amp;</operator> <name>DY_LASTLINE</name></expr>)</condition> 
<block>{<block_content>

<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="char">'@'</literal></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_empty_rows</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>srow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>win_draw_end</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>srow</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr></argument>, <argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>draw_vsep_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>eof</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_botfill</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>char2cells</name><argument_list>(<argument><expr><name>fill_diff</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>fill_diff</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>+</operator> <name>j</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>row</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>win_draw_end</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>j</name></expr></argument>, <argument><expr><name>HLF_DED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>dollar_vcol</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_draw_end</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr></argument>, <argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_draw_end</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="char">'~'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr></argument>, <argument><expr><name>HLF_EOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYN_TIME_LIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>syn_set_timeout</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_topfill</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_botfill</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botfill</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>dollar_vcol</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>










<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_BOTLINE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>!=</operator> <name>old_botline</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>recursive</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wwp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>old_topline</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_wcol</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_wcol</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VALID_TOPLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>old_wcol</name> <operator>!=</operator> <name>new_wcol</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <operator>(</operator><name>VALID_WCOL</name><operator>|</operator><name>VALID_WROW</name><operator>)</operator><operator>)</operator>
<operator>!=</operator> <operator>(</operator><name>VALID_WCOL</name><operator>|</operator><name>VALID_WROW</name><operator>)</operator></expr>)</condition>
<block>{<block_content>








<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>==</operator> <name>old_wcol</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>==</operator> <name>old_wrow</name>
<operator>&amp;&amp;</operator> <name>old_topline</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name>new_wcol</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redrawWinline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_mod_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_mod_set</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_mod_xlines</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_mod_xlines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_update</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_mod_set</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_mod_xlines</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wwp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wwp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>&gt;</operator> <name>must_redraw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name><name>wwp</name><operator>-&gt;</operator><name>w_redr_type</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>save_got_int</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_prepare</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cursor_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>updating_screen</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_undraw_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>start_search_hl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>may_update_popup_mask</name><argument_list>(<argument><expr><name>must_redraw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_finish</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>redraw_cmdline</name> <operator>||</operator> <name>redraw_mode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>end_search_hl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>after_updating_screen</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>out_flush_cursor</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_update_scrollbars</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>update_debug_sign</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>doit</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>win_foldinfo</name><operator>.</operator><name>fi_level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>redraw_buf_line_later</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>doit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>doit</name> <operator>||</operator> <name>updating_screen</name>
<operator>||</operator> <name>State</name> <operator>==</operator> <name>ASKMORE</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>HITRETURN</name>
<operator>||</operator> <name>msg_scrolled</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>gui</name><operator>.</operator><name>starting</name></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>||</operator> <name>starting</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>update_prepare</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_update</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_redr_status</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>update_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>void</name></type>
<name>updateWindow</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>updating_screen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>update_prepare</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <call><name>clip_isautosel_star</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_update_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>clip_plus</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <call><name>clip_isautosel_plus</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_update_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>win_update</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>redraw_tabline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_tabline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>p_ru</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>*</operator><name>p_stl</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_stl</name></name> <operator>!=</operator> <name>NUL</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_redr_status</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>update_popups</name><argument_list>(<argument><expr><name>win_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>update_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>int</name></type>
<name>redraw_asap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><name>screen_Columns</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>schar_T</name> <modifier>*</modifier></type><name>screenline</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>sattr_T</name> <modifier>*</modifier></type><name>screenattr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u8char_T</name> <modifier>*</modifier></type><name>screenlineUC</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>u8char_T</name> <modifier>*</modifier></type><name><name>screenlineC</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>schar_T</name> <modifier>*</modifier></type><name>screenline2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_scrolled</name> <operator>||</operator> <operator>(</operator><name>State</name> <operator>!=</operator> <name>NORMAL</name> <operator>&amp;&amp;</operator> <name>State</name> <operator>!=</operator> <name>NORMAL_BUSY</name><operator>)</operator> <operator>||</operator> <name>exiting</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>rows</name> <operator>=</operator> <name>screen_Rows</name> <operator>-</operator> <name>cmdline_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>screenline</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>schar_T</name></expr></argument>, <argument><expr><name>rows</name> <operator>*</operator> <name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>screenattr</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>sattr_T</name></expr></argument>, <argument><expr><name>rows</name> <operator>*</operator> <name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>screenline</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>screenattr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>screenlineUC</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>u8char_T</name></expr></argument>, <argument><expr><name>rows</name> <operator>*</operator> <name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>screenlineUC</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>p_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>screenlineC</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>u8char_T</name></expr></argument>, <argument><expr><name>rows</name> <operator>*</operator> <name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>screenlineC</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>screenline2</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>schar_T</name></expr></argument>, <argument><expr><name>rows</name> <operator>*</operator> <name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>screenline2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>r</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>screenline</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>cols</name></expr></argument>,
<argument><expr><name>ScreenLines</name> <operator>+</operator> <name><name>LineOffset</name><index>[<expr><name>cmdline_row</name> <operator>+</operator> <name>r</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>cols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>screenattr</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>cols</name></expr></argument>,
<argument><expr><name>ScreenAttrs</name> <operator>+</operator> <name><name>LineOffset</name><index>[<expr><name>cmdline_row</name> <operator>+</operator> <name>r</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>cols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sattr_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>screenlineUC</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>cols</name></expr></argument>,
<argument><expr><name>ScreenLinesUC</name> <operator>+</operator> <name><name>LineOffset</name><index>[<expr><name>cmdline_row</name> <operator>+</operator> <name>r</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>cols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u8char_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>p_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>screenlineC</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>cols</name></expr></argument>,
<argument><expr><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>LineOffset</name><index>[<expr><name>cmdline_row</name> <operator>+</operator> <name>r</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>cols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u8char_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>screenline2</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>cols</name></expr></argument>,
<argument><expr><name>ScreenLines2</name> <operator>+</operator> <name><name>LineOffset</name><index>[<expr><name>cmdline_row</name> <operator>+</operator> <name>r</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>cols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>must_redraw</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>current_ScreenLine</name> <operator>-</operator> <name>ScreenLines</name><operator>)</operator></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>r</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>current_ScreenLine</name></expr></argument>,
<argument><expr><name>screenline</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>cols</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>cols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>ScreenAttrs</name> <operator>+</operator> <name>off</name></expr></argument>,
<argument><expr><name>screenattr</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>cols</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>cols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sattr_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>ScreenLinesUC</name> <operator>+</operator> <name>off</name></expr></argument>,
<argument><expr><name>screenlineUC</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>cols</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>cols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u8char_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>p_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>off</name></expr></argument>,
<argument><expr><name><name>screenlineC</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>cols</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>cols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u8char_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>ScreenLines2</name> <operator>+</operator> <name>off</name></expr></argument>,
<argument><expr><name>screenline2</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>cols</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>cols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>screen_line</name><argument_list>(<argument><expr><name>cmdline_row</name> <operator>+</operator> <name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>screenline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>screenattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>screenlineUC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>p_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>screenlineC</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>screenline2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>maybe_intro_message</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><name>void</name></type>
<name>redraw_after_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>call_update_screen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>redrawing_for_callback</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>==</operator> <name>HITRETURN</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>ASKMORE</name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cmdline_row</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>msg_scrolled</name> <operator>==</operator> <literal type="number">0</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>wild_menu_showing</name> <operator>==</operator> <literal type="number">0</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>&amp;&amp;</operator> <name>call_update_screen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>redrawcmdline_ex</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>NORMAL</name> <operator>|</operator> <name>INSERT</name> <operator>|</operator> <name>TERMINAL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>VALID_NO_UPDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cursor_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gui_mch_is_blink_off</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><call><name>out_flush_cursor</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>--</operator><name>redrawing_for_callback</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>redraw_later</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>redraw_win_later</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exiting</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>&lt;</operator> <name>type</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>NOT_VALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>must_redraw</name> <operator>&lt;</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>redraw_later_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_screen_attr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>redraw_all_later</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>must_redraw</name> <operator>&lt;</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>redraw_curbuf_later</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>redraw_buf_later</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>redraw_buf_later</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>redraw_buf_line_later</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redrawWinline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>redraw_buf_and_status_later</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>wild_menu_showing</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>


<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>status_redraw_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>status_redraw_curbuf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>curbuf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>redraw_statuslines</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_redr_status</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>redraw_tabline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_tabline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>win_redraw_last_status</name><parameter_list>(<parameter><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_LEAF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr>)</condition>
<block>{<block_content>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>frp-&gt;fr_child</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>win_redraw_last_status</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>win_redraw_last_status</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function><type><name>void</name></type>
<name>redrawWinline</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_top</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redraw_top</name></name> <operator>&gt;</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_top</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_bot</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redraw_bot</name></name> <operator>&lt;</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_bot</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
