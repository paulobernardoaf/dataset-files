<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\vim9script.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim9.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>e_needs_vim9</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E1042: import/export can only be used in vim9script"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>in_vim9script</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><name><name>current_sctx</name><operator>.</operator><name>sc_version</name></name> <operator>==</operator> <name>SCRIPT_VERSION_VIM9</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_vim9script</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getline_equal</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>getline</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cookie</name></name></expr></argument>, <argument><expr><name>getsourceline</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1038: vim9script can only be used in a script"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>sn_had_command</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1039: vim9script must be the first command in a script"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>current_sctx</name><operator>.</operator><name>sc_version</name></name> <operator>=</operator> <name>SCRIPT_VERSION_VIM9</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>sn_version</name></name> <operator>=</operator> <name>SCRIPT_VERSION_VIM9</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>sn_had_command</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_VIM</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>sn_save_cpo</name></name> <operator>=</operator> <name>p_cpo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>CPO_VIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>ex_export</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier><name>eap</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>current_sctx</name><operator>.</operator><name>sc_version</name></name> <operator>!=</operator> <name>SCRIPT_VERSION_VIM9</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_needs_vim9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>find_ex_command</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>lookup_scriptvar</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>CMD_let</name></expr>:</case>
<case>case <expr><name>CMD_const</name></expr>:</case>
<case>case <expr><name>CMD_def</name></expr>:</case>

<expr_stmt><expr><name>is_export</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_cmdline</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>getline</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cookie</name></name></expr></argument>,
<argument><expr><name>DOCMD_VERBOSE</name> <operator>+</operator> <name>DOCMD_NOWAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>is_export</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1044: export with invalid argument"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_export</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1043: Invalid command after :export"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>imported_T</name> <modifier>*</modifier></type>
<name>new_imported</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>imported_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>free_imports</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>si</name><operator>-&gt;</operator><name>sn_imports</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>imported_T</name> <modifier>*</modifier></type><name>imp</name> <init>= <expr><operator>(</operator><operator>(</operator><name>imported_T</name> <operator>*</operator><operator>)</operator><name><name>si</name><operator>-&gt;</operator><name>sn_imports</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>imp</name><operator>-&gt;</operator><name>imp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_imports</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_var_vals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>sn_type_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><name>void</name></type>
<name>ex_import</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>current_sctx</name><operator>.</operator><name>sc_version</name></name> <operator>!=</operator> <name>SCRIPT_VERSION_VIM9</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_needs_vim9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd_end</name> <init>= <expr><call><name>handle_import</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd_end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>cmd_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>find_exported</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>sid</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>argp</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>name_len</name></decl></parameter>,
<parameter><decl><type><name>ufunc_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>ufunc</name></decl></parameter>,
<parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><operator>*</operator><name>argp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>*</operator><name>argp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svar_T</name> <modifier>*</modifier></type><name>sv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><call><name>eval_isnamec</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>arg</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>name_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg</name> <operator>-</operator> <name>name</name><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>*</operator><name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>get_script_item_idx</name><argument_list>(<argument><expr><name>sid</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>sv</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>svar_T</name> <operator>*</operator><operator>)</operator><name><name>script</name><operator>-&gt;</operator><name>sn_var_vals</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sv</name><operator>-&gt;</operator><name>sv_export</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1049: Item not exported in script: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name><name>sv</name><operator>-&gt;</operator><name>sv_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ufunc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buffer</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>funcname</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>funcname</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>funcname</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>funcname</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>funcname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>funcname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>funcname</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_SNR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>funcname</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"%ld_%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>sid</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ufunc</name> <operator>=</operator> <call><name>find_func</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>funcname</name> <operator>!=</operator> <name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ufunc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1048: Item not found in script: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>argp</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>handle_import</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_start</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>import_sid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>arg_start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>as_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>as_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>arg</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>eval_isnamec1</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><call><name>eval_isnamec</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>arg</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><literal type="string">"as"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>as_ptr</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>eval_isnamec1</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><call><name>eval_isnamec</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>arg</name></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
<expr_stmt><expr><name>as_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg</name> <operator>-</operator> <name>as_ptr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>check_defined</name><argument_list>(<argument><expr><name>as_ptr</name></expr></argument>, <argument><expr><name>as_len</name></expr></argument>, <argument><expr><name>cctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>arg_start</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1045: Missing \"as\" after *"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><literal type="string">"from"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1070: Missing \"from\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>from_ptr</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_lit_string_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_string_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>FAIL</name> <operator>||</operator> <name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1071: Invalid string after \"from\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cmd_end</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>scriptitem_T</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><call><name>gettail</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>sn_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from_name</name></decl>;</decl_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>sn_name</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>from_name</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>from_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>from_name</name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>sn_name</name></name></expr></argument>, <argument><expr><name>tail</name> <operator>-</operator> <name><name>si</name><operator>-&gt;</operator><name>sn_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>from_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>from_name</name></expr></argument>, <argument><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>simplify_filename</name><argument_list>(<argument><expr><name>from_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>do_source</name><argument_list>(<argument><expr><name>from_name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>DOSO_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>from_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>mch_isFullName</name><argument_list>(<argument><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>do_source</name><argument_list>(<argument><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>DOSO_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">7</literal> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from_name</name></decl>;</decl_stmt>


<expr_stmt><expr><name>from_name</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>from_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>from_name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"import/%s"</literal></expr></argument>, <argument><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>source_in_path</name><argument_list>(<argument><expr><name>p_rtp</name></expr></argument>, <argument><expr><name>from_name</name></expr></argument>, <argument><expr><name>DIP_NOAFTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>from_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>FAIL</name> <operator>||</operator> <name>sid</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1053: Could not import \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg_start</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>imported_T</name> <modifier>*</modifier></type><name>imported</name> <init>= <expr><call><name>new_imported</name><argument_list>(<argument><expr><ternary><condition><expr><name>gap</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>gap</name></expr>
</then><else>: <expr><operator>&amp;</operator><call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name>import_sid</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>sn_imports</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>imported</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>imported</name><operator>-&gt;</operator><name>imp_name</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>as_ptr</name></expr></argument>, <argument><expr><name>as_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imported</name><operator>-&gt;</operator><name>imp_sid</name></name> <operator>=</operator> <name>sid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imported</name><operator>-&gt;</operator><name>imp_all</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>arg_start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>imported_T</name> <modifier>*</modifier></type><name>imported</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>ufunc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>type_T</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>find_exported</name><argument_list>(<argument><expr><name>sid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ufunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ufunc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_defined</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>cctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>imported</name> <operator>=</operator> <call><name>new_imported</name><argument_list>(<argument><expr><ternary><condition><expr><name>gap</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>gap</name></expr>
</then><else>: <expr><operator>&amp;</operator><call><name>SCRIPT_ITEM</name><argument_list>(<argument><expr><name>import_sid</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>sn_imports</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>imported</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>imported</name><operator>-&gt;</operator><name>imp_name</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imported</name><operator>-&gt;</operator><name>imp_sid</name></name> <operator>=</operator> <name>sid</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>imported</name><operator>-&gt;</operator><name>imp_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>imported</name><operator>-&gt;</operator><name>imp_var_vals_idx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>imported</name><operator>-&gt;</operator><name>imp_funcname</name></name> <operator>=</operator> <name><name>ufunc</name><operator>-&gt;</operator><name>uf_name</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg_start</name> <operator>!=</operator> <literal type="char">'{'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1046: Missing comma in import"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>!=</operator> <name>from_ptr</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1047: syntax error in import"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>cmd_end</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
