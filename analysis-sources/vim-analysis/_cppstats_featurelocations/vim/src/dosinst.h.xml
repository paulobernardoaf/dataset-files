<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\dosinst.h">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX_LINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlobj.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX_LINT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>searchpath</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX_LINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX_LINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vim_mkdir</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mkdir((char *)(x), y)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vim_mkdir</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_mkdir((char *)(x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sleep</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Sleep((n) * 1000)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFSIZE</name></cpp:macro> <cpp:value>(MAX_PATH*2)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAIL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>KEY_WOW64_64KEY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_WOW64_64KEY</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>KEY_WOW64_32KEY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_WOW64_32KEY</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIM_STARTMENU</name></cpp:macro> <cpp:value>"Programs\\Vim " VIM_VERSION_SHORT</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>interactive</name></decl>;</decl_stmt> 




<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>alloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>mytoupper</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="char">'A'</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>myexit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interactive</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Press Enter to continue\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>LPFN_ISWOW64PROCESS</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>PBOOL</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>



<function><type><specifier>static</specifier> <name>BOOL</name></type>
<name>is_64bit_os</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>TRUE</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>BOOL</name></type> <name>bIsWow64</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPFN_ISWOW64PROCESS</name></type> <name>pIsWow64Process</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pIsWow64Process</name> <operator>=</operator> <operator>(</operator><name>LPFN_ISWOW64PROCESS</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(
<argument><expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><literal type="string">"kernel32"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"IsWow64Process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pIsWow64Process</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pIsWow64Process</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>bIsWow64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>bIsWow64</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>searchpath</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>widename</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>location</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>BUFSIZE</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPCTSTR</name><operator>)</operator><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>LPWSTR</name><operator>)</operator><name>widename</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FindExecutableW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>widename</name></expr></argument>, <argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><literal type="string">""</literal></expr></argument>,
<argument><expr><operator>(</operator><name>LPWSTR</name><operator>)</operator><name>location</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><name>HINSTANCE</name><operator>)</operator><literal type="number">32</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPWSTR</name><operator>)</operator><name>location</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>LPSTR</name><operator>)</operator><name>widename</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>BUFSIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>widename</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>searchpath_save</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>searchpath</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CSIDL_COMMON_PROGRAMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSIDL_COMMON_PROGRAMS</name></cpp:macro> <cpp:value>0x0017</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CSIDL_COMMON_DESKTOPDIRECTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSIDL_COMMON_DESKTOPDIRECTORY</name></cpp:macro> <cpp:value>0x0019</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>int</name></type>
<name>get_shell_folder_path</name><parameter_list>(
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>shell_folder_path</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shell_folder_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><name>LPITEMIDLIST</name></type> <name>pidl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>LPMALLOC</name></type> <name>pMalloc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>csidl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alt_csidl</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>desktop_csidl</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>programs_csidl</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pcsidl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>shell_folder_name</name></expr></argument>, <argument><expr><literal type="string">"desktop"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pcsidl</name> <operator>=</operator> <operator>&amp;</operator><name>desktop_csidl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>csidl</name> <operator>=</operator> <name>CSIDL_COMMON_DESKTOPDIRECTORY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>alt_csidl</name> <operator>=</operator> <name>CSIDL_DESKTOP</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>shell_folder_name</name></expr></argument>, <argument><expr><literal type="string">"Programs"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pcsidl</name> <operator>=</operator> <operator>&amp;</operator><name>programs_csidl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>csidl</name> <operator>=</operator> <name>CSIDL_COMMON_PROGRAMS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>alt_csidl</name> <operator>=</operator> <name>CSIDL_PROGRAMS</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nERROR (internal) unrecognised shell_folder_name: \"%s\"\n\n"</literal></expr></argument>,
<argument><expr><name>shell_folder_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pcsidl</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>csidl</name> <operator>=</operator> <operator>*</operator><name>pcsidl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>alt_csidl</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>retry</name>:</label>

<if_stmt><if>if <condition>(<expr><name>NOERROR</name> <operator>!=</operator> <call><name>SHGetMalloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pMalloc</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nERROR getting interface for shell_folder_name: \"%s\"\n\n"</literal></expr></argument>,
<argument><expr><name>shell_folder_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>NOERROR</name> <operator>!=</operator> <call><name>SHGetSpecialFolderLocation</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>csidl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pidl</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>alt_csidl</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>NOERROR</name> <operator>!=</operator> <call><name>SHGetSpecialFolderLocation</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>alt_csidl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pidl</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nERROR getting ITEMIDLIST for shell_folder_name: \"%s\"\n\n"</literal></expr></argument>,
<argument><expr><name>shell_folder_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>csidl</name> <operator>=</operator> <name>alt_csidl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>alt_csidl</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>SHGetPathFromIDList</name><argument_list>(<argument><expr><name>pidl</name></expr></argument>, <argument><expr><name>shell_folder_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>pMalloc</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Free</name></name><argument_list>(<argument><expr><name>pMalloc</name></expr></argument>, <argument><expr><name>pidl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pMalloc</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>pMalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>alt_csidl</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>csidl</name> <operator>=</operator> <name>alt_csidl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>alt_csidl</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nERROR translating ITEMIDLIST for shell_folder_name: \"%s\"\n\n"</literal></expr></argument>,
<argument><expr><name>shell_folder_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>alt_csidl</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>shell_folder_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"\\vim write test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>csidl</name> <operator>=</operator> <name>alt_csidl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>alt_csidl</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pcsidl</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pcsidl</name> <operator>=</operator> <name>csidl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>shell_folder_name</name></expr></argument>, <argument><expr><literal type="string">"Programs\\"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>shell_folder_path</name></expr></argument>, <argument><expr><name>shell_folder_name</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TARGET_COUNT</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<struct>struct
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>batname</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lnkname</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>exename</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>exenamearg</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>exearg</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oldbat</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oldexe</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>batpath</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt> 

}</block> <decl><name><name>targets</name><index>[<expr><name>TARGET_COUNT</name></expr>]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="string">"all"</literal></expr>, <expr><literal type="string">"batch files"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vim"</literal></expr>, <expr><literal type="string">"vim.bat"</literal></expr>, <expr><literal type="string">"Vim.lnk"</literal></expr>,
<expr><literal type="string">"vim.exe"</literal></expr>, <expr><literal type="string">"vim.exe"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"gvim"</literal></expr>, <expr><literal type="string">"gvim.bat"</literal></expr>, <expr><literal type="string">"gVim.lnk"</literal></expr>,
<expr><literal type="string">"gvim.exe"</literal></expr>, <expr><literal type="string">"gvim.exe"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"evim"</literal></expr>, <expr><literal type="string">"evim.bat"</literal></expr>, <expr><literal type="string">"gVim Easy.lnk"</literal></expr>,
<expr><literal type="string">"evim.exe"</literal></expr>, <expr><literal type="string">"gvim.exe"</literal></expr>, <expr><literal type="string">"-y"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"view"</literal></expr>, <expr><literal type="string">"view.bat"</literal></expr>, <expr><literal type="string">"Vim Read-only.lnk"</literal></expr>,
<expr><literal type="string">"view.exe"</literal></expr>, <expr><literal type="string">"vim.exe"</literal></expr>, <expr><literal type="string">"-R"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"gview"</literal></expr>, <expr><literal type="string">"gview.bat"</literal></expr>, <expr><literal type="string">"gVim Read-only.lnk"</literal></expr>,
<expr><literal type="string">"gview.exe"</literal></expr>, <expr><literal type="string">"gvim.exe"</literal></expr>, <expr><literal type="string">"-R"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vimdiff"</literal></expr>, <expr><literal type="string">"vimdiff.bat"</literal></expr>, <expr><literal type="string">"Vim Diff.lnk"</literal></expr>,
<expr><literal type="string">"vimdiff.exe"</literal></expr>,<expr><literal type="string">"vim.exe"</literal></expr>, <expr><literal type="string">"-d"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"gvimdiff"</literal></expr>,<expr><literal type="string">"gvimdiff.bat"</literal></expr>, <expr><literal type="string">"gVim Diff.lnk"</literal></expr>,
<expr><literal type="string">"gvimdiff.exe"</literal></expr>,<expr><literal type="string">"gvim.exe"</literal></expr>, <expr><literal type="string">"-d"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vimtutor"</literal></expr>,<expr><literal type="string">"vimtutor.bat"</literal></expr>, <expr><literal type="string">"Vim tutor.lnk"</literal></expr>,
<expr><literal type="string">"vimtutor.bat"</literal></expr>, <expr><literal type="string">"vimtutor.bat"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIMBAT_UNINSTKEY</name></cpp:macro> <cpp:value>"rem #uninstall key: " VIM_VERSION_NODOT " #"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICON_COUNT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<expr_stmt><expr><call><name>char</name> <argument_list>*<argument><expr><operator>(</operator><name><name>icon_names</name><index>[<expr><name>ICON_COUNT</name></expr>]</index></name><operator>)</operator> <operator>=</operator>
<block>{<expr><literal type="string">"gVim "</literal> <name>VIM_VERSION_SHORT</name></expr>,
<expr><literal type="string">"gVim Easy "</literal> <name>VIM_VERSION_SHORT</name></expr>,
<expr><literal type="string">"gVim Read only "</literal> <name>VIM_VERSION_SHORT</name></expr>}</block></expr></argument>;
<argument><expr><name>char</name> <operator>*</operator><operator>(</operator><name><name>icon_link_names</name><index>[<expr><name>ICON_COUNT</name></expr>]</index></name><operator>)</operator> <operator>=</operator>
<block>{<expr><literal type="string">"gVim "</literal> <name>VIM_VERSION_SHORT</name> <literal type="string">".lnk"</literal></expr>,
<expr><literal type="string">"gVim Easy "</literal> <name>VIM_VERSION_SHORT</name> <literal type="string">".lnk"</literal></expr>,
<expr><literal type="string">"gVim Read only "</literal> <name>VIM_VERSION_SHORT</name> <literal type="string">".lnk"</literal></expr>}</block></expr></argument>;


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOSINST</name></expr></argument>)</argument_list></call></expr></cpp:if>



<argument><expr><specifier>static</specifier> <name>void</name>
<macro><name>run_command</name><argument_list>(<argument>char *cmd</argument>)</argument_list></macro>
<block>{
<expr><name>char</name> <operator>*</operator><name>cmd_path</name></expr>;
<expr><name>char</name> <name><name>cmd_buf</name><index>[<expr><name>BUFSIZE</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">35</literal></expr>]</index></name></expr>;
<expr><name>char</name> <operator>*</operator><name>p</name></expr>;



<expr><name>cmd_path</name> <operator>=</operator> <call><name>searchpath_save</name><argument_list>(<argument><expr><literal type="string">"cmd.exe"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>cmd_path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>





<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cmd_path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cmd_buf</name></expr></argument>, <argument><expr><literal type="string">"%s /c start \"vimcmd\" /wait %s"</literal></expr></argument>, <argument><expr><name>cmd_path</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
else
<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cmd_buf</name></expr></argument>, <argument><expr><literal type="string">"start /w %s"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
system(cmd_buf</block></block></if></if_stmt>)</block></expr></argument>;</argument_list></call></expr></expr_stmt>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




void
<macro><name>add_pathsep</name><argument_list>(<argument>char *name</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>




<function><type><name>int</name></type>
<name>change_drive</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>drive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><literal type="string">"-:"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>drive</name> <operator>+</operator> <literal type="char">'A'</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><call><name>SetCurrentDirectory</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>mch_chdir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>change_drive</name><argument_list>(<argument><expr><call><name>mytoupper</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>path</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>path</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>chdir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>my_fullpath</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>DWORD</name></type> <name>len_read</name> <init>= <expr><call><name>GetModuleFileName</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>len_read</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len_read</name> <operator>&lt;</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name>len</name><operator>)</operator></expr> ?</condition><then> <expr><name>buf</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>remove_tail</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>


<decl_stmt><decl><type><name>char</name></type> <name><name>installdir</name><index>[<expr><name>MAX_PATH</name><operator>-</operator><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>runtimeidx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sysdrive</name></decl>;</decl_stmt> 





<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_inits</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>my_fullpath</name><argument_list>(<argument><expr><name>installdir</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>installdir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: Cannot get name of executable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>myexit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>remove_tail</name><argument_list>(<argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mch_chdir</name><argument_list>(<argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>sysdrive</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"SYSTEMDRIVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sysdrive</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>sysdrive</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sysdrive</name> <operator>=</operator> <literal type="string">"C:\\"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
