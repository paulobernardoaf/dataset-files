<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\if_python.c">


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_THREADS</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_FCNTL_H</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_DEBUG</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRFTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_STRFTIME</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_STRING_H</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PUTENV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_PUTENV</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDARG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_STDARG_H</name></cpp:undef> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_C_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_C_SOURCE</name></cpp:undef> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_XOPEN_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_XOPEN_SOURCE</name></cpp:undef> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_SSIZE_T_CLEAN</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Python.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>PY_VERSION_HEX</name> <operator>&lt;</operator> <literal type="number">0x02050000</literal></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PY_SSIZE_T_CLEAN</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>main</name></cpp:undef> 
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_FCNTL_H</name></cpp:undef> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBytes_FromString</name></cpp:macro> <cpp:value>PyString_FromString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBytes_Check</name></cpp:macro> <cpp:value>PyString_Check</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBytes_AsStringAndSize</name></cpp:macro> <cpp:value>PyString_AsStringAndSize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBytes_FromStringAndSize</name></cpp:macro> <cpp:value>PyString_FromStringAndSize</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject</name></cpp:macro> <cpp:value>Py_ssize_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyThreadState</name></cpp:macro> <cpp:value>Py_ssize_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTypeObject</name></cpp:macro> <cpp:value>Py_ssize_t</cpp:value></cpp:define>
<struct>struct <name>PyMethodDef</name> <block>{ <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>a</name></decl>;</decl_stmt> }</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySequenceMethods</name></cpp:macro> <cpp:value>Py_ssize_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02070000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_USE_CAPSULE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02050000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyInt</name></cpp:macro> <cpp:value>Py_ssize_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyInquiry</name></cpp:macro> <cpp:value>lenfunc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyIntArgFunc</name></cpp:macro> <cpp:value>ssizeargfunc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyIntIntArgFunc</name></cpp:macro> <cpp:value>ssizessizeargfunc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyIntObjArgProc</name></cpp:macro> <cpp:value>ssizeobjargproc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyIntIntObjArgProc</name></cpp:macro> <cpp:value>ssizessizeobjargproc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_ssize_t_fmt</name></cpp:macro> <cpp:value>"n"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyInt</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lenfunc</name></cpp:macro> <cpp:value>inquiry</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyInquiry</name></cpp:macro> <cpp:value>inquiry</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyIntArgFunc</name></cpp:macro> <cpp:value>intargfunc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyIntIntArgFunc</name></cpp:macro> <cpp:value>intintargfunc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyIntObjArgProc</name></cpp:macro> <cpp:value>intobjargproc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyIntIntObjArgProc</name></cpp:macro> <cpp:value>intintobjargproc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_ssize_t_fmt</name></cpp:macro> <cpp:value>"i"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_bytes_fmt</name></cpp:macro> <cpp:value>"s"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>single_input</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>file_input</name></cpp:macro> <cpp:value>257</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eval_input</name></cpp:macro> <cpp:value>258</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x020300F0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_CAN_RECURSE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HINSTANCE</name></cpp:macro> <cpp:value>long_u</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FARPROC</name></cpp:macro> <cpp:value>void*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HINSTANCE</name></cpp:macro> <cpp:value>void*</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_NO_RTLD_GLOBAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PY3_NO_RTLD_GLOBAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>load_dll</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlopen((n), RTLD_LAZY)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>load_dll</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dlopen((n), RTLD_LAZY|RTLD_GLOBAL)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>close_dll</name></cpp:macro> <cpp:value>dlclose</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>symbol_from_dll</name></cpp:macro> <cpp:value>dlsym</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>load_dll</name></cpp:macro> <cpp:value>vimLoadLib</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>close_dll</name></cpp:macro> <cpp:value>FreeLibrary</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>symbol_from_dll</name></cpp:macro> <cpp:value>GetProcAddress</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PyRun_SimpleString</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PyRun_String</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PyArg_Parse</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PyArg_ParseTuple</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Py_BuildValue</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Py_InitModule4</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Py_InitModule4_64</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PyObject_CallMethod</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PyObject_CallFunction</name></cpp:undef>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyArg_Parse</name></cpp:macro> <cpp:value>dll_PyArg_Parse</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyArg_ParseTuple</name></cpp:macro> <cpp:value>dll_PyArg_ParseTuple</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMem_Free</name></cpp:macro> <cpp:value>dll_PyMem_Free</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMem_Malloc</name></cpp:macro> <cpp:value>dll_PyMem_Malloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDict_SetItemString</name></cpp:macro> <cpp:value>dll_PyDict_SetItemString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_BadArgument</name></cpp:macro> <cpp:value>dll_PyErr_BadArgument</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_NewException</name></cpp:macro> <cpp:value>dll_PyErr_NewException</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_Clear</name></cpp:macro> <cpp:value>dll_PyErr_Clear</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_Format</name></cpp:macro> <cpp:value>dll_PyErr_Format</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_PrintEx</name></cpp:macro> <cpp:value>dll_PyErr_PrintEx</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_NoMemory</name></cpp:macro> <cpp:value>dll_PyErr_NoMemory</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_Occurred</name></cpp:macro> <cpp:value>dll_PyErr_Occurred</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_SetNone</name></cpp:macro> <cpp:value>dll_PyErr_SetNone</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_SetString</name></cpp:macro> <cpp:value>dll_PyErr_SetString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_SetObject</name></cpp:macro> <cpp:value>dll_PyErr_SetObject</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyErr_ExceptionMatches</name></cpp:macro> <cpp:value>dll_PyErr_ExceptionMatches</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyEval_InitThreads</name></cpp:macro> <cpp:value>dll_PyEval_InitThreads</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyEval_RestoreThread</name></cpp:macro> <cpp:value>dll_PyEval_RestoreThread</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyEval_SaveThread</name></cpp:macro> <cpp:value>dll_PyEval_SaveThread</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyGILState_Ensure</name></cpp:macro> <cpp:value>dll_PyGILState_Ensure</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyGILState_Release</name></cpp:macro> <cpp:value>dll_PyGILState_Release</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyInt_AsLong</name></cpp:macro> <cpp:value>dll_PyInt_AsLong</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyInt_FromLong</name></cpp:macro> <cpp:value>dll_PyInt_FromLong</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyLong_AsLong</name></cpp:macro> <cpp:value>dll_PyLong_AsLong</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyLong_FromLong</name></cpp:macro> <cpp:value>dll_PyLong_FromLong</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyBool_Type</name></cpp:macro> <cpp:value>(*dll_PyBool_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyInt_Type</name></cpp:macro> <cpp:value>(*dll_PyInt_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyLong_Type</name></cpp:macro> <cpp:value>(*dll_PyLong_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyList_GetItem</name></cpp:macro> <cpp:value>dll_PyList_GetItem</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyList_Append</name></cpp:macro> <cpp:value>dll_PyList_Append</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyList_Insert</name></cpp:macro> <cpp:value>dll_PyList_Insert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyList_New</name></cpp:macro> <cpp:value>dll_PyList_New</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyList_SetItem</name></cpp:macro> <cpp:value>dll_PyList_SetItem</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyList_Size</name></cpp:macro> <cpp:value>dll_PyList_Size</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyList_Type</name></cpp:macro> <cpp:value>(*dll_PyList_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySequence_Check</name></cpp:macro> <cpp:value>dll_PySequence_Check</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySequence_Size</name></cpp:macro> <cpp:value>dll_PySequence_Size</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySequence_GetItem</name></cpp:macro> <cpp:value>dll_PySequence_GetItem</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySequence_Fast</name></cpp:macro> <cpp:value>dll_PySequence_Fast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTuple_Size</name></cpp:macro> <cpp:value>dll_PyTuple_Size</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTuple_GetItem</name></cpp:macro> <cpp:value>dll_PyTuple_GetItem</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyTuple_Type</name></cpp:macro> <cpp:value>(*dll_PyTuple_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySlice_GetIndicesEx</name></cpp:macro> <cpp:value>dll_PySlice_GetIndicesEx</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyImport_ImportModule</name></cpp:macro> <cpp:value>dll_PyImport_ImportModule</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDict_New</name></cpp:macro> <cpp:value>dll_PyDict_New</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDict_GetItemString</name></cpp:macro> <cpp:value>dll_PyDict_GetItemString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDict_Next</name></cpp:macro> <cpp:value>dll_PyDict_Next</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyDict_Type</name></cpp:macro> <cpp:value>(*dll_PyDict_Type)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PyMapping_Keys</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_NO_MAPPING_KEYS</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMapping_Keys</name></cpp:macro> <cpp:value>dll_PyMapping_Keys</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_GetItem</name></cpp:macro> <cpp:value>dll_PyObject_GetItem</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_CallMethod</name></cpp:macro> <cpp:value>dll_PyObject_CallMethod</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyMapping_Check</name></cpp:macro> <cpp:value>dll_PyMapping_Check</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyIter_Next</name></cpp:macro> <cpp:value>dll_PyIter_Next</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyModule_GetDict</name></cpp:macro> <cpp:value>dll_PyModule_GetDict</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyModule_AddObject</name></cpp:macro> <cpp:value>dll_PyModule_AddObject</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyRun_SimpleString</name></cpp:macro> <cpp:value>dll_PyRun_SimpleString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyRun_String</name></cpp:macro> <cpp:value>dll_PyRun_String</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_GetAttrString</name></cpp:macro> <cpp:value>dll_PyObject_GetAttrString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_HasAttrString</name></cpp:macro> <cpp:value>dll_PyObject_HasAttrString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_SetAttrString</name></cpp:macro> <cpp:value>dll_PyObject_SetAttrString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_CallFunctionObjArgs</name></cpp:macro> <cpp:value>dll_PyObject_CallFunctionObjArgs</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_CallFunction</name></cpp:macro> <cpp:value>dll_PyObject_CallFunction</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_Call</name></cpp:macro> <cpp:value>dll_PyObject_Call</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_Repr</name></cpp:macro> <cpp:value>dll_PyObject_Repr</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyString_AsString</name></cpp:macro> <cpp:value>dll_PyString_AsString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyString_AsStringAndSize</name></cpp:macro> <cpp:value>dll_PyString_AsStringAndSize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyString_FromString</name></cpp:macro> <cpp:value>dll_PyString_FromString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyString_FromFormat</name></cpp:macro> <cpp:value>dll_PyString_FromFormat</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyString_FromStringAndSize</name></cpp:macro> <cpp:value>dll_PyString_FromStringAndSize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyString_Size</name></cpp:macro> <cpp:value>dll_PyString_Size</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyString_Type</name></cpp:macro> <cpp:value>(*dll_PyString_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_Type</name></cpp:macro> <cpp:value>(*dll_PyUnicode_Type)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PyUnicode_AsEncodedString</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyUnicode_AsEncodedString</name></cpp:macro> <cpp:value>py_PyUnicode_AsEncodedString</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFloat_AsDouble</name></cpp:macro> <cpp:value>dll_PyFloat_AsDouble</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFloat_FromDouble</name></cpp:macro> <cpp:value>dll_PyFloat_FromDouble</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFloat_Type</name></cpp:macro> <cpp:value>(*dll_PyFloat_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyNumber_Check</name></cpp:macro> <cpp:value>dll_PyNumber_Check</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyNumber_Long</name></cpp:macro> <cpp:value>dll_PyNumber_Long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyImport_AddModule</name></cpp:macro> <cpp:value>(*dll_PyImport_AddModule)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySys_SetObject</name></cpp:macro> <cpp:value>dll_PySys_SetObject</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySys_GetObject</name></cpp:macro> <cpp:value>dll_PySys_GetObject</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySys_SetArgv</name></cpp:macro> <cpp:value>dll_PySys_SetArgv</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyType_Type</name></cpp:macro> <cpp:value>(*dll_PyType_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyFile_Type</name></cpp:macro> <cpp:value>(*dll_PyFile_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PySlice_Type</name></cpp:macro> <cpp:value>(*dll_PySlice_Type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyType_Ready</name></cpp:macro> <cpp:value>(*dll_PyType_Ready)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyType_GenericAlloc</name></cpp:macro> <cpp:value>dll_PyType_GenericAlloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_BuildValue</name></cpp:macro> <cpp:value>dll_Py_BuildValue</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_FindMethod</name></cpp:macro> <cpp:value>dll_Py_FindMethod</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_InitModule4</name></cpp:macro> <cpp:value>dll_Py_InitModule4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_SetPythonHome</name></cpp:macro> <cpp:value>dll_Py_SetPythonHome</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_Initialize</name></cpp:macro> <cpp:value>dll_Py_Initialize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_Finalize</name></cpp:macro> <cpp:value>dll_Py_Finalize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_IsInitialized</name></cpp:macro> <cpp:value>dll_Py_IsInitialized</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyObject_New</name></cpp:macro> <cpp:value>dll__PyObject_New</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyObject_GC_New</name></cpp:macro> <cpp:value>dll__PyObject_GC_New</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PyObject_GC_Del</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_underscore_GC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyObject_GC_Del</name></cpp:macro> <cpp:value>dll__PyObject_GC_Del</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyObject_GC_UnTrack</name></cpp:macro> <cpp:value>dll__PyObject_GC_UnTrack</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_GC_Del</name></cpp:macro> <cpp:value>dll_PyObject_GC_Del</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_GC_UnTrack</name></cpp:macro> <cpp:value>dll_PyObject_GC_UnTrack</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02070000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyObject_NextNotImplemented</name></cpp:macro> <cpp:value>(*dll__PyObject_NextNotImplemented)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_NoneStruct</name></cpp:macro> <cpp:value>(*dll__Py_NoneStruct)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_ZeroStruct</name></cpp:macro> <cpp:value>(*dll__Py_ZeroStruct)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_TrueStruct</name></cpp:macro> <cpp:value>(*dll__Py_TrueStruct)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_Init</name></cpp:macro> <cpp:value>dll__PyObject_Init</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_GetIter</name></cpp:macro> <cpp:value>dll_PyObject_GetIter</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_IsTrue</name></cpp:macro> <cpp:value>dll_PyObject_IsTrue</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02020000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyType_IsSubtype</name></cpp:macro> <cpp:value>dll_PyType_IsSubtype</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_NegativeRefcount</name></cpp:macro> <cpp:value>dll__Py_NegativeRefcount</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_RefTotal</name></cpp:macro> <cpp:value>(*dll__Py_RefTotal)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_Py_Dealloc</name></cpp:macro> <cpp:value>dll__Py_Dealloc</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02030000</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG_NO_PYMALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyObject_DebugMalloc</name></cpp:macro> <cpp:value>dll__PyObject_DebugMalloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PyObject_DebugFree</name></cpp:macro> <cpp:value>dll__PyObject_DebugFree</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_Malloc</name></cpp:macro> <cpp:value>dll_PyObject_Malloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyObject_Free</name></cpp:macro> <cpp:value>dll_PyObject_Free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_USE_CAPSULE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCapsule_New</name></cpp:macro> <cpp:value>dll_PyCapsule_New</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCapsule_GetPointer</name></cpp:macro> <cpp:value>dll_PyCapsule_GetPointer</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCObject_FromVoidPtr</name></cpp:macro> <cpp:value>dll_PyCObject_FromVoidPtr</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyCObject_AsVoidPtr</name></cpp:macro> <cpp:value>dll_PyCObject_AsVoidPtr</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02070000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_NoSiteFlag</name></cpp:macro> <cpp:value>(*dll_Py_NoSiteFlag)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function_decl><type><specifier>static</specifier> <name>int</name></type>(<modifier>*</modifier><name>dll_PyArg_Parse</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>(<modifier>*</modifier><name>dll_PyArg_ParseTuple</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>(<modifier>*</modifier><name>dll_PyMem_Free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>dll_PyMem_Malloc</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>(<modifier>*</modifier><name>dll_PyDict_SetItemString</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>(<modifier>*</modifier><name>dll_PyErr_BadArgument</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyErr_NewException</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>(<modifier>*</modifier><name>dll_PyErr_Clear</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyErr_Format</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>(<modifier>*</modifier><name>dll_PyErr_PrintEx</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyErr_NoMemory</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyErr_Occurred</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>(<modifier>*</modifier><name>dll_PyErr_SetNone</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>(<modifier>*</modifier><name>dll_PyErr_SetString</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>(<modifier>*</modifier><name>dll_PyErr_SetObject</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>(<modifier>*</modifier><name>dll_PyErr_ExceptionMatches</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>(<modifier>*</modifier><name>dll_PyEval_InitThreads</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>(<modifier>*</modifier><name>dll_PyEval_RestoreThread</name>)<parameter_list>(<parameter><decl><type><name>PyThreadState</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyThreadState</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyEval_SaveThread</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>PyGILState_STATE</name></type> (<modifier>*</modifier><name>dll_PyGILState_Ensure</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>dll_PyGILState_Release</name>)<parameter_list>(<parameter><decl><type><name>PyGILState_STATE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>long</name></type>(<modifier>*</modifier><name>dll_PyInt_AsLong</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyInt_FromLong</name>)<parameter_list>(<parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>long</name></type>(<modifier>*</modifier><name>dll_PyLong_AsLong</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyLong_FromLong</name>)<parameter_list>(<parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name><modifier>*</modifier></type> <name>dll_PyBool_Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name><modifier>*</modifier></type> <name>dll_PyInt_Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name><modifier>*</modifier></type> <name>dll_PyLong_Type</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyList_GetItem</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyInt</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>(<modifier>*</modifier><name>dll_PyList_Append</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>(<modifier>*</modifier><name>dll_PyList_Insert</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyInt</name></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyList_New</name>)<parameter_list>(<parameter><decl><type><name>PyInt</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>(<modifier>*</modifier><name>dll_PyList_SetItem</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyInt</name></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyInt</name></type>(<modifier>*</modifier><name>dll_PyList_Size</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name><modifier>*</modifier></type> <name>dll_PyList_Type</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>dll_PySequence_Check</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyInt</name></type>(<modifier>*</modifier><name>dll_PySequence_Size</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PySequence_GetItem</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyInt</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PySequence_Fast</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyInt</name></type>(<modifier>*</modifier><name>dll_PyTuple_Size</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyTuple_GetItem</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyInt</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name><modifier>*</modifier></type> <name>dll_PyTuple_Type</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>dll_PySlice_GetIndicesEx</name>)<parameter_list>(<parameter><decl><type><name>PySliceObject</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>length</name></decl></parameter>,
<parameter><decl><type><name>PyInt</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>PyInt</name> <modifier>*</modifier></type><name>stop</name></decl></parameter>, <parameter><decl><type><name>PyInt</name> <modifier>*</modifier></type><name>step</name></decl></parameter>,
<parameter><decl><type><name>PyInt</name> <modifier>*</modifier></type><name>slicelen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyImport_ImportModule</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyDict_New</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyDict_GetItemString</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>dll_PyDict_Next</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyInt</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name><modifier>*</modifier></type> <name>dll_PyDict_Type</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PY_NO_MAPPING_KEYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> (<modifier>*</modifier><name>dll_PyMapping_Keys</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> (<modifier>*</modifier><name>dll_PyObject_GetItem</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> (<modifier>*</modifier><name>dll_PyObject_CallMethod</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>dll_PyMapping_Check</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> (<modifier>*</modifier><name>dll_PyIter_Next</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyModule_GetDict</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>(<modifier>*</modifier><name>dll_PyModule_AddObject</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>(<modifier>*</modifier><name>dll_PyRun_SimpleString</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyRun_String</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> (<modifier>*</modifier><name>dll_PyObject_GetAttrString</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>dll_PyObject_HasAttrString</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>dll_PyObject_SetAttrString</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> (<modifier>*</modifier><name>dll_PyObject_CallFunctionObjArgs</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> (<modifier>*</modifier><name>dll_PyObject_CallFunction</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> (<modifier>*</modifier><name>dll_PyObject_Call</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> (<modifier>*</modifier><name>dll_PyObject_Repr</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyString_AsString</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>(<modifier>*</modifier><name>dll_PyString_AsStringAndSize</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyInt</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyString_FromString</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyString_FromFormat</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyString_FromStringAndSize</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyInt</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyInt</name></type>(<modifier>*</modifier><name>dll_PyString_Size</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name><modifier>*</modifier></type> <name>dll_PyString_Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name><modifier>*</modifier></type> <name>dll_PyUnicode_Type</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>py_PyUnicode_AsEncodedString</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type>(<modifier>*</modifier><name>dll_PyFloat_AsDouble</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyFloat_FromDouble</name>)<parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name><modifier>*</modifier></type> <name>dll_PyFloat_Type</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type>(<modifier>*</modifier><name>dll_PyNumber_Check</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyNumber_Long</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>(<modifier>*</modifier><name>dll_PySys_SetObject</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PySys_GetObject</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>(<modifier>*</modifier><name>dll_PySys_SetArgv</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name><modifier>*</modifier></type> <name>dll_PyType_Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name><modifier>*</modifier></type> <name>dll_PyFile_Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name><modifier>*</modifier></type> <name>dll_PySlice_Type</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>dll_PyType_Ready</name>)<parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> (<modifier>*</modifier><name>dll_PyType_GenericAlloc</name>)<parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>nitems</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_Py_BuildValue</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_Py_FindMethod</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>PyMethodDef</name></name>[]</type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_Py_InitModule4</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>PyMethodDef</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll_PyImport_AddModule</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>(<modifier>*</modifier><name>dll_Py_SetPythonHome</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>home</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>(<modifier>*</modifier><name>dll_Py_Initialize</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>(<modifier>*</modifier><name>dll_Py_Finalize</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>(<modifier>*</modifier><name>dll_Py_IsInitialized</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll__PyObject_New</name>)<parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll__PyObject_GC_New</name>)<parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_underscore_GC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type>(<modifier>*</modifier><name>dll__PyObject_GC_Del</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>(<modifier>*</modifier><name>dll__PyObject_GC_UnTrack</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>static</specifier> <name>void</name></type>(<modifier>*</modifier><name>dll_PyObject_GC_Del</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>(<modifier>*</modifier><name>dll_PyObject_GC_UnTrack</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type>(<modifier>*</modifier><name>dll__PyObject_Init</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> (<modifier>*</modifier><name>dll_PyObject_GetIter</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>dll_PyObject_IsTrue</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02070000</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>iternextfunc</name></type> <name>dll__PyObject_NextNotImplemented</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> <name>dll__Py_NoneStruct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> <name>_Py_ZeroStruct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> <name>dll__Py_TrueStruct</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02020000</literal></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>dll_PyType_IsSubtype</name>)<parameter_list>(<parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>dll__Py_NegativeRefcount</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyInt</name><modifier>*</modifier></type> <name>dll__Py_RefTotal</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>dll__Py_Dealloc</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02030000</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG_NO_PYMALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>dll__PyObject_DebugFree</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>dll__PyObject_DebugMalloc</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>dll_PyObject_Malloc</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>dll_PyObject_Free</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_USE_CAPSULE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> (<modifier>*</modifier><name>dll_PyCapsule_New</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyCapsule_Destructor</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>dll_PyCapsule_GetPointer</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> (<modifier>*</modifier><name>dll_PyCObject_FromVoidPtr</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cobj</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destr</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>dll_PyCObject_AsVoidPtr</name>)<parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02070000</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name><modifier>*</modifier></type> <name>dll_Py_NoSiteFlag</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>HINSTANCE</name></type> <name>hinstPython</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 


<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>imp_PyExc_AttributeError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>imp_PyExc_IndexError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>imp_PyExc_KeyError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>imp_PyExc_KeyboardInterrupt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>imp_PyExc_TypeError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>imp_PyExc_ValueError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>imp_PyExc_SystemExit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>imp_PyExc_RuntimeError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>imp_PyExc_ImportError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>imp_PyExc_OverflowError</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyExc_AttributeError</name></cpp:macro> <cpp:value>imp_PyExc_AttributeError</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyExc_IndexError</name></cpp:macro> <cpp:value>imp_PyExc_IndexError</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyExc_KeyError</name></cpp:macro> <cpp:value>imp_PyExc_KeyError</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyExc_KeyboardInterrupt</name></cpp:macro> <cpp:value>imp_PyExc_KeyboardInterrupt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyExc_TypeError</name></cpp:macro> <cpp:value>imp_PyExc_TypeError</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyExc_ValueError</name></cpp:macro> <cpp:value>imp_PyExc_ValueError</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyExc_SystemExit</name></cpp:macro> <cpp:value>imp_PyExc_SystemExit</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyExc_RuntimeError</name></cpp:macro> <cpp:value>imp_PyExc_RuntimeError</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyExc_ImportError</name></cpp:macro> <cpp:value>imp_PyExc_ImportError</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PyExc_OverflowError</name></cpp:macro> <cpp:value>imp_PyExc_OverflowError</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYTHON_PROC</name></cpp:macro> <cpp:value>FARPROC</cpp:value></cpp:define>
<struct><specifier>static</specifier> struct
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PYTHON_PROC</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
}</block> <decl><name><name>python_funcname_table</name><index>[]</index></name> <init>=
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PY_SSIZE_T_CLEAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"PyArg_Parse"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyArg_Parse</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyArg_ParseTuple"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyArg_ParseTuple</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"Py_BuildValue"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_Py_BuildValue</name></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"_PyArg_Parse_SizeT"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyArg_Parse</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"_PyArg_ParseTuple_SizeT"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyArg_ParseTuple</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"_Py_BuildValue_SizeT"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_Py_BuildValue</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><literal type="string">"PyMem_Free"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyMem_Free</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyMem_Malloc"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyMem_Malloc</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyDict_SetItemString"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyDict_SetItemString</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyErr_BadArgument"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyErr_BadArgument</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyErr_NewException"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyErr_NewException</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyErr_Clear"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyErr_Clear</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyErr_Format"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyErr_Format</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyErr_PrintEx"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyErr_PrintEx</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyErr_NoMemory"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyErr_NoMemory</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyErr_Occurred"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyErr_Occurred</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyErr_SetNone"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyErr_SetNone</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyErr_SetString"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyErr_SetString</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyErr_SetObject"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyErr_SetObject</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyErr_ExceptionMatches"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyErr_ExceptionMatches</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyEval_InitThreads"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyEval_InitThreads</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyEval_RestoreThread"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyEval_RestoreThread</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyEval_SaveThread"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyEval_SaveThread</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"PyGILState_Ensure"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyGILState_Ensure</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyGILState_Release"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyGILState_Release</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><literal type="string">"PyInt_AsLong"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyInt_AsLong</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyInt_FromLong"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyInt_FromLong</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyLong_AsLong"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyLong_AsLong</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyLong_FromLong"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyLong_FromLong</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyBool_Type"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyBool_Type</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyInt_Type"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyInt_Type</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyLong_Type"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyLong_Type</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyList_GetItem"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyList_GetItem</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyList_Append"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyList_Append</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyList_Insert"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyList_Insert</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyList_New"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyList_New</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyList_SetItem"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyList_SetItem</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyList_Size"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyList_Size</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyList_Type"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyList_Type</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PySequence_Size"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PySequence_Size</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PySequence_Check"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PySequence_Check</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PySequence_GetItem"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PySequence_GetItem</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PySequence_Fast"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PySequence_Fast</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyTuple_GetItem"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyTuple_GetItem</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyTuple_Size"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyTuple_Size</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyTuple_Type"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyTuple_Type</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PySlice_GetIndicesEx"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PySlice_GetIndicesEx</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyImport_ImportModule"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyImport_ImportModule</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyDict_GetItemString"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyDict_GetItemString</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyDict_Next"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyDict_Next</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyDict_New"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyDict_New</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyDict_Type"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyDict_Type</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PY_NO_MAPPING_KEYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"PyMapping_Keys"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyMapping_Keys</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><literal type="string">"PyObject_GetItem"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyObject_GetItem</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyObject_CallMethod"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyObject_CallMethod</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyMapping_Check"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyMapping_Check</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyIter_Next"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyIter_Next</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyModule_GetDict"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyModule_GetDict</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyModule_AddObject"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyModule_AddObject</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyRun_SimpleString"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyRun_SimpleString</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyRun_String"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyRun_String</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyObject_GetAttrString"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyObject_GetAttrString</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyObject_HasAttrString"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyObject_HasAttrString</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyObject_SetAttrString"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyObject_SetAttrString</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyObject_CallFunctionObjArgs"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyObject_CallFunctionObjArgs</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyObject_CallFunction"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyObject_CallFunction</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyObject_Call"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyObject_Call</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyObject_Repr"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyObject_Repr</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyString_AsString"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyString_AsString</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyString_AsStringAndSize"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyString_AsStringAndSize</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyString_FromString"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyString_FromString</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyString_FromFormat"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyString_FromFormat</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyString_FromStringAndSize"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyString_FromStringAndSize</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyString_Size"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyString_Size</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyString_Type"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyString_Type</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyUnicode_Type"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyUnicode_Type</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyFloat_Type"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyFloat_Type</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyFloat_AsDouble"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyFloat_AsDouble</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyFloat_FromDouble"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyFloat_FromDouble</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyImport_AddModule"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyImport_AddModule</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyNumber_Check"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyNumber_Check</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyNumber_Long"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyNumber_Long</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PySys_SetObject"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PySys_SetObject</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PySys_GetObject"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PySys_GetObject</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PySys_SetArgv"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PySys_SetArgv</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyType_Type"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyType_Type</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyFile_Type"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyFile_Type</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PySlice_Type"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PySlice_Type</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyType_Ready"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyType_Ready</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyType_GenericAlloc"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyType_GenericAlloc</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"Py_FindMethod"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_Py_FindMethod</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"Py_SetPythonHome"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_Py_SetPythonHome</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"Py_Initialize"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_Py_Initialize</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"Py_Finalize"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_Py_Finalize</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"Py_IsInitialized"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_Py_IsInitialized</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"_PyObject_New"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll__PyObject_New</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"_PyObject_GC_New"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll__PyObject_GC_New</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_underscore_GC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"_PyObject_GC_Del"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll__PyObject_GC_Del</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"_PyObject_GC_UnTrack"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll__PyObject_GC_UnTrack</name></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"PyObject_GC_Del"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyObject_GC_Del</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyObject_GC_UnTrack"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyObject_GC_UnTrack</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><literal type="string">"PyObject_Init"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll__PyObject_Init</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyObject_GetIter"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyObject_GetIter</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyObject_IsTrue"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyObject_IsTrue</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02070000</literal></expr></cpp:if>
<expr><block>{<expr><literal type="string">"_PyObject_NextNotImplemented"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll__PyObject_NextNotImplemented</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><literal type="string">"_Py_NoneStruct"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll__Py_NoneStruct</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"_Py_ZeroStruct"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll__Py_ZeroStruct</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"_Py_TrueStruct"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll__Py_TrueStruct</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02020000</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"_Py_NegativeRefcount"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll__Py_NegativeRefcount</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"_Py_RefTotal"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll__Py_RefTotal</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"_Py_Dealloc"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll__Py_Dealloc</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><literal type="string">"PyType_IsSubtype"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyType_IsSubtype</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02030000</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG_NO_PYMALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"_PyObject_DebugFree"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll__PyObject_DebugFree</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"_PyObject_DebugMalloc"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll__PyObject_DebugMalloc</name></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"PyObject_Malloc"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyObject_Malloc</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyObject_Free"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyObject_Free</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02050000</literal> <operator>&amp;&amp;</operator> <name>SIZEOF_SIZE_T</name> <operator>!=</operator> <name>VIM_SIZEOF_INT</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"Py_InitModule4TraceRefs_64"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_Py_InitModule4</name></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"Py_InitModule4_64"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_Py_InitModule4</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Py_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"Py_InitModule4TraceRefs"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_Py_InitModule4</name></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"Py_InitModule4"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_Py_InitModule4</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_USE_CAPSULE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"PyCapsule_New"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyCapsule_New</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyCapsule_GetPointer"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyCapsule_GetPointer</name></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"PyCObject_FromVoidPtr"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyCObject_FromVoidPtr</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PyCObject_AsVoidPtr"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_PyCObject_AsVoidPtr</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02070000</literal></expr></cpp:if>
<expr><block>{<expr><literal type="string">"Py_NoSiteFlag"</literal></expr>, <expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dll_Py_NoSiteFlag</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>python_runtime_link_init</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>libname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PYTHON_PROC</name> <modifier>*</modifier></type><name>ucs_as_encoded_string</name> <init>=
<expr><operator>(</operator><name>PYTHON_PROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>py_PyUnicode_AsEncodedString</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>PY_NO_RTLD_GLOBAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PY3_NO_RTLD_GLOBAL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><call><name>python3_loaded</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E836: This Vim cannot execute :python after using :py3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>hinstPython</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hinstPython</name> <operator>=</operator> <call><name>load_dll</name><argument_list>(<argument><expr><name>libname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hinstPython</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_loadlib</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>libname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>python_funcname_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name><name>python_funcname_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <call><name>symbol_from_dll</name><argument_list>(<argument><expr><name>hinstPython</name></expr></argument>,
<argument><expr><name><name>python_funcname_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>close_dll</name><argument_list>(<argument><expr><name>hinstPython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hinstPython</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_loadfunc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>python_funcname_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<expr_stmt><expr><operator>*</operator><name>ucs_as_encoded_string</name> <operator>=</operator> <call><name>symbol_from_dll</name><argument_list>(<argument><expr><name>hinstPython</name></expr></argument>,
<argument><expr><literal type="string">"PyUnicodeUCS2_AsEncodedString"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ucs_as_encoded_string</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ucs_as_encoded_string</name> <operator>=</operator> <call><name>symbol_from_dll</name><argument_list>(<argument><expr><name>hinstPython</name></expr></argument>,
<argument><expr><literal type="string">"PyUnicodeUCS4_AsEncodedString"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ucs_as_encoded_string</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>close_dll</name><argument_list>(<argument><expr><name>hinstPython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hinstPython</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_loadfunc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"PyUnicode_UCSX_*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>python_enabled</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>python_runtime_link_init</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_pydll</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_exceptions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>exmod</name> <init>= <expr><call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><literal type="string">"exceptions"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>exdict</name> <init>= <expr><call><name>PyModule_GetDict</name><argument_list>(<argument><expr><name>exmod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>imp_PyExc_AttributeError</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>exdict</name></expr></argument>, <argument><expr><literal type="string">"AttributeError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imp_PyExc_IndexError</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>exdict</name></expr></argument>, <argument><expr><literal type="string">"IndexError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imp_PyExc_KeyError</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>exdict</name></expr></argument>, <argument><expr><literal type="string">"KeyError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imp_PyExc_KeyboardInterrupt</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>exdict</name></expr></argument>, <argument><expr><literal type="string">"KeyboardInterrupt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imp_PyExc_TypeError</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>exdict</name></expr></argument>, <argument><expr><literal type="string">"TypeError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imp_PyExc_ValueError</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>exdict</name></expr></argument>, <argument><expr><literal type="string">"ValueError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imp_PyExc_SystemExit</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>exdict</name></expr></argument>, <argument><expr><literal type="string">"SystemExit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imp_PyExc_RuntimeError</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>exdict</name></expr></argument>, <argument><expr><literal type="string">"RuntimeError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imp_PyExc_ImportError</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>exdict</name></expr></argument>, <argument><expr><literal type="string">"ImportError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>imp_PyExc_OverflowError</name> <operator>=</operator> <call><name>PyDict_GetItemString</name><argument_list>(<argument><expr><name>exdict</name></expr></argument>, <argument><expr><literal type="string">"OverflowError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>imp_PyExc_AttributeError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>imp_PyExc_IndexError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>imp_PyExc_KeyError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>imp_PyExc_KeyboardInterrupt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>imp_PyExc_TypeError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>imp_PyExc_ValueError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>imp_PyExc_SystemExit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>imp_PyExc_RuntimeError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>imp_PyExc_ImportError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XINCREF</name><argument_list>(<argument><expr><name>imp_PyExc_OverflowError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>exmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialised</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PYINITIALISED</name></cpp:macro> <cpp:value>initialised</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>python_end_called</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESTRUCTOR_FINISH</name><parameter_list>(<parameter><type><name>self</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>self-&gt;ob_type-&gt;tp_free((PyObject*)self);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN_PYTHON_REF</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>win-&gt;w_python_ref</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_PYTHON_REF</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>buf-&gt;b_python_ref</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB_PYTHON_REF</name><parameter_list>(<parameter><type><name>tab</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tab-&gt;tp_python_ref</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>OutputGetattr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>BufferGetattr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>WindowGetattr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>TabPageGetattr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>RangeGetattr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>DictionaryGetattr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>ListGetattr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>FunctionGetattr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Py_VISIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_VISIT</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>visit(obj, arg)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Py_CLEAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_CLEAR</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ Py_XDECREF(obj); obj = NULL; }</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>X_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>py_memsave</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r</name> <operator>=</operator> <call><name>PyMem_Malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PY_STRSAVE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char_u *) py_memsave(s, STRLEN(s) + 1))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>PySliceObject</name></type> <name>PySliceObject_T</name>;</typedef>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"if_py_both.h"</cpp:file></cpp:include>





<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>PythonMod_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PYTHON_API_VERSION</name> <operator>&lt;</operator> <literal type="number">1007</literal></expr></cpp:if> 
<typedef>typedef <type><name>PyObject</name></type> <name>PyThreadState</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyThreadState</name> <modifier>*</modifier></type><name>saved_python_thread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>Python_SaveThread</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>saved_python_thread</name> <operator>=</operator> <call><name>PyEval_SaveThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>Python_RestoreThread</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PyEval_RestoreThread</name><argument_list>(<argument><expr><name>saved_python_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_python_thread</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>python_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recurse</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>recurse</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>python_end_called</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>recurse</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>hinstPython</name> <operator>&amp;&amp;</operator> <call><name>Py_IsInitialized</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyGILState_Ensure</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>Python_RestoreThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>Py_Finalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>Py_IsInitialized</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyGILState_Ensure</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>Python_RestoreThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>Py_Finalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>--</operator><name>recurse</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>python_loaded</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>hinstPython</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>py_home_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>Python_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialised</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02070000</literal></expr></cpp:if>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>site</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>python_enabled</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E263: Sorry, this command is disabled, the Python library could not be loaded."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_pyhome</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>py_home_buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_pyhome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>py_home_buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Py_SetPythonHome</name><argument_list>(<argument><expr><name>py_home_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PYTHON_HOME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"PYTHONHOME"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Py_SetPythonHome</name><argument_list>(<argument><expr><name>PYTHON_HOME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>init_structs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02070000</literal></expr></cpp:if>


<expr_stmt><expr><name>Py_NoSiteFlag</name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>Py_Initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_VERSION_HEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PY_VERSION_HEX</name> <operator>&gt;=</operator> <literal type="number">0x02070000</literal></expr></cpp:if>

<expr_stmt><expr><name>site</name> <operator>=</operator> <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><literal type="string">"site"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>site</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E887: Sorry, this command is disabled, the Python's site module could not be loaded."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>site</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><call><name>PyEval_InitThreads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>get_exceptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>PythonIO_Init_io</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PythonMod_Init</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>globals</name> <operator>=</operator> <call><name>PyModule_GetDict</name><argument_list>(<argument><expr><call><name>PyImport_AddModule</name><argument_list>(<argument><expr><literal type="string">"__main__"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>PyRun_SimpleString</name><argument_list>(<argument><expr><literal type="string">"import sys; sys.path = filter(lambda x: x != '/must&gt;not&amp;exist', sys.path)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>saved_python_thread</name> <operator>=</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<call><name>PyEval_SaveThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>initialised</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>




<expr_stmt><expr><call><name>PythonIO_Flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>DoPyCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>rangeinitializer</name></type> <name>init_range</name></decl></parameter>, <parameter><decl><type><name>runner</name></type> <name>run</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>X_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>saved_locale</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PyGILState_STATE</name></type> <name>pygilstate</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>recursive</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E659: Cannot invoke Python recursively"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>recursive</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>python_end_called</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Python_Init</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_range</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Python_Release_Vim</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>X_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>saved_locale</name> <operator>=</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>saved_locale</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>saved_locale</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>saved_locale</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>saved_locale</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>PY_STRSAVE</name><argument_list>(<argument><expr><name>saved_locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>pygilstate</name> <operator>=</operator> <call><name>PyGILState_Ensure</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>Python_RestoreThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>run</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>cmd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <argument><expr><operator>&amp;</operator><name>pygilstate</name></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>PyGILState_Release</name><argument_list>(<argument><expr><name>pygilstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>Python_SaveThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>X_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>saved_locale</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>, <argument><expr><name>saved_locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PyMem_Free</name><argument_list>(<argument><expr><name>saved_locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>Python_Lock_Vim</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>PythonIO_Flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>theend</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PY_CAN_RECURSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>--</operator><name>recursive</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_python</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>script</name></decl>;</decl_stmt>

<expr_stmt><expr><name>script</name> <operator>=</operator> <call><name>script_get</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_pyx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_pyx</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DoPyCommand</name><argument_list>(<argument><expr><ternary><condition><expr><name>script</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr> </then><else>: <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>script</name></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>rangeinitializer</name><operator>)</operator> <name>init_range_cmd</name></expr></argument>,
<argument><expr><operator>(</operator><name>runner</name><operator>)</operator> <name>run_cmd</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>




<function><type><name>void</name></type>
<name>ex_pyfile</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buffer</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_pyx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_pyx</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>









<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"execfile('"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>*</operator><name>file</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>buffer</name> <operator>+</operator> <operator>(</operator><name>BUFFER_SIZE</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>file</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>file</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>file</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>file</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">')'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DoPyCommand</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,
<argument><expr><operator>(</operator><name>rangeinitializer</name><operator>)</operator> <name>init_range_cmd</name></expr></argument>,
<argument><expr><operator>(</operator><name>runner</name><operator>)</operator> <name>run_cmd</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ex_pydo</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_pyx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_pyx</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DoPyCommand</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>rangeinitializer</name><operator>)</operator> <name>init_range_cmd</name></expr></argument>,
<argument><expr><operator>(</operator><name>runner</name><operator>)</operator><name>run_do</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>OutputGetattr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"softspace"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>OutputObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>softspace</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"__members__"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ObjectDir</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OutputAttrs</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"errors"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><literal type="string">"strict"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"encoding"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>ENC_OPT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>OutputMethods</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WindowType_Check</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((obj)-&gt;ob_type == &amp;WindowType)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BufferType_Check</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((obj)-&gt;ob_type == &amp;BufferType)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>PyInt</name></type> <name>BufferAssItem</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyInt</name></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyInt</name></type> <name>BufferAssSlice</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyInt</name></type></decl></parameter>, <parameter><decl><type><name>PyInt</name></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RangeType_Check</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((obj)-&gt;ob_type == &amp;RangeType)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>PyInt</name></type> <name>RangeAssItem</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyInt</name></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyInt</name></type> <name>RangeAssSlice</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PyInt</name></type></decl></parameter>, <parameter><decl><type><name>PyInt</name></type></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>BufferAsSeq</name> <init>= <expr><block>{
<expr><operator>(</operator><name>PyInquiry</name><operator>)</operator> <name>BufferLength</name></expr>, 
<expr><operator>(</operator><name>binaryfunc</name><operator>)</operator> <literal type="number">0</literal></expr>, 
<expr><operator>(</operator><name>PyIntArgFunc</name><operator>)</operator> <literal type="number">0</literal></expr>, 
<expr><operator>(</operator><name>PyIntArgFunc</name><operator>)</operator> <name>BufferItem</name></expr>, 
<expr><operator>(</operator><name>PyIntIntArgFunc</name><operator>)</operator> <name>BufferSlice</name></expr>, 
<expr><operator>(</operator><name>PyIntObjArgProc</name><operator>)</operator> <name>BufferAssItem</name></expr>, 
<expr><operator>(</operator><name>PyIntIntObjArgProc</name><operator>)</operator> <name>BufferAssSlice</name></expr>, 
<expr><operator>(</operator><name>objobjproc</name><operator>)</operator> <literal type="number">0</literal></expr>,
<expr><operator>(</operator><name>binaryfunc</name><operator>)</operator> <literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>BufferGetattr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>BufferAttrValid</name><argument_list>(<argument><expr><operator>(</operator><name>BufferObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckBuffer</name><argument_list>(<argument><expr><operator>(</operator><name>BufferObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>BufferAttr</name><argument_list>(<argument><expr><operator>(</operator><name>BufferObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>||</operator> <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>BufferMethods</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>PyInt</name></type>
<name>BufferAssItem</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RBAsItem</name><argument_list>(<argument><expr><operator>(</operator><name>BufferObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyInt</name></type>
<name>BufferAssSlice</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>hi</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RBAsSlice</name><argument_list>(<argument><expr><operator>(</operator><name>BufferObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>RangeAsSeq</name> <init>= <expr><block>{
<expr><operator>(</operator><name>PyInquiry</name><operator>)</operator> <name>RangeLength</name></expr>, 
<expr><operator>(</operator><name>binaryfunc</name><operator>)</operator> <literal type="number">0</literal></expr>, 
<expr><operator>(</operator><name>PyIntArgFunc</name><operator>)</operator> <literal type="number">0</literal></expr>, 
<expr><operator>(</operator><name>PyIntArgFunc</name><operator>)</operator> <name>RangeItem</name></expr>, 
<expr><operator>(</operator><name>PyIntIntArgFunc</name><operator>)</operator> <name>RangeSlice</name></expr>, 
<expr><operator>(</operator><name>PyIntObjArgProc</name><operator>)</operator> <name>RangeAssItem</name></expr>, 
<expr><operator>(</operator><name>PyIntIntObjArgProc</name><operator>)</operator> <name>RangeAssSlice</name></expr>, 
<expr><operator>(</operator><name>objobjproc</name><operator>)</operator> <literal type="number">0</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></cpp:if>
<expr><operator>(</operator><name>binaryfunc</name><operator>)</operator> <literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>RangeGetattr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><name>Py_ssize_t_fmt</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RangeObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>start</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"end"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Py_BuildValue</name><argument_list>(<argument><expr><name>Py_ssize_t_fmt</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RangeObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>end</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"__members__"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ObjectDir</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RangeAttrs</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>RangeMethods</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>PyInt</name></type>
<name>RangeAssItem</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RBAsItem</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>RangeObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>val</name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>RangeObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>start</name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>RangeObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>end</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>RangeObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyInt</name></type>
<name>RangeAssSlice</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>PyInt</name></type> <name>hi</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>RBAsSlice</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>RangeObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>buf</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>val</name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>RangeObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>start</name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>RangeObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>end</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>RangeObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>TabPageGetattr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>TabPageAttrValid</name><argument_list>(<argument><expr><operator>(</operator><name>TabPageObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckTabPage</name><argument_list>(<argument><expr><operator>(</operator><name>TabPageObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>TabPageAttr</name><argument_list>(<argument><expr><operator>(</operator><name>TabPageObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>||</operator> <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>TabPageMethods</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>WindowGetattr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>WindowAttrValid</name><argument_list>(<argument><expr><operator>(</operator><name>WindowObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckWindow</name><argument_list>(<argument><expr><operator>(</operator><name>WindowObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>WindowAttr</name><argument_list>(<argument><expr><operator>(</operator><name>WindowObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>||</operator> <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>WindowMethods</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>TabListAsSeq</name> <init>= <expr><block>{
<expr><operator>(</operator><name>PyInquiry</name><operator>)</operator> <name>TabListLength</name></expr>, 
<expr><operator>(</operator><name>binaryfunc</name><operator>)</operator> <literal type="number">0</literal></expr>, 
<expr><operator>(</operator><name>PyIntArgFunc</name><operator>)</operator> <literal type="number">0</literal></expr>, 
<expr><operator>(</operator><name>PyIntArgFunc</name><operator>)</operator> <name>TabListItem</name></expr>, 
<expr><operator>(</operator><name>PyIntIntArgFunc</name><operator>)</operator> <literal type="number">0</literal></expr>, 
<expr><operator>(</operator><name>PyIntObjArgProc</name><operator>)</operator> <literal type="number">0</literal></expr>, 
<expr><operator>(</operator><name>PyIntIntObjArgProc</name><operator>)</operator> <literal type="number">0</literal></expr>, 
<expr><operator>(</operator><name>objobjproc</name><operator>)</operator> <literal type="number">0</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></cpp:if>
<expr><operator>(</operator><name>binaryfunc</name><operator>)</operator> <literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>WinListAsSeq</name> <init>= <expr><block>{
<expr><operator>(</operator><name>PyInquiry</name><operator>)</operator> <name>WinListLength</name></expr>, 
<expr><operator>(</operator><name>binaryfunc</name><operator>)</operator> <literal type="number">0</literal></expr>, 
<expr><operator>(</operator><name>PyIntArgFunc</name><operator>)</operator> <literal type="number">0</literal></expr>, 
<expr><operator>(</operator><name>PyIntArgFunc</name><operator>)</operator> <name>WinListItem</name></expr>, 
<expr><operator>(</operator><name>PyIntIntArgFunc</name><operator>)</operator> <literal type="number">0</literal></expr>, 
<expr><operator>(</operator><name>PyIntObjArgProc</name><operator>)</operator> <literal type="number">0</literal></expr>, 
<expr><operator>(</operator><name>PyIntIntObjArgProc</name><operator>)</operator> <literal type="number">0</literal></expr>, 
<expr><operator>(</operator><name>objobjproc</name><operator>)</operator> <literal type="number">0</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></cpp:if>
<expr><operator>(</operator><name>binaryfunc</name><operator>)</operator> <literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>



<function><type><name>void</name></type>
<name>python_buffer_free</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BUF_PYTHON_REF</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>BufferObject</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><call><name>BUF_PYTHON_REF</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>INVALID_BUFFER_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUF_PYTHON_REF</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>python_window_free</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>WIN_PYTHON_REF</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>WindowObject</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>WIN_PYTHON_REF</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>win</name></name> <operator>=</operator> <name>INVALID_WINDOW_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN_PYTHON_REF</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>python_tabpage_free</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TAB_PYTHON_REF</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>TabPageObject</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><call><name>TAB_PYTHON_REF</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tab</name></name> <operator>=</operator> <name>INVALID_TABPAGE_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAB_PYTHON_REF</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>PythonMod_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"/must&gt;not&amp;exist/foo"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>init_types</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>PySys_SetArgv</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vim_module</name> <operator>=</operator> <call><name>Py_InitModule4</name><argument_list>(<argument><expr><literal type="string">"vim"</literal></expr></argument>, <argument><expr><name>VimMethods</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><name>PYTHON_API_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>populate_module</name><argument_list>(<argument><expr><name>vim_module</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>init_sys_path</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>LineToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyInt</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>str</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>str</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>DictionaryGetattr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DictionaryObject</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><operator>(</operator><operator>(</operator><name>DictionaryObject</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>self</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"locked"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>dict</name><operator>-&gt;</operator><name>dv_lock</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"scope"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>dict</name><operator>-&gt;</operator><name>dv_scope</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"__members__"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ObjectDir</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DictionaryAttrs</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>DictionaryMethods</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>ListGetattr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"locked"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ListObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name><name>list</name><operator>-&gt;</operator><name>lv_lock</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"__members__"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ObjectDir</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ListAttrs</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>ListMethods</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>FunctionGetattr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>FunctionAttr</name><argument_list>(<argument><expr><operator>(</operator><name>FunctionObject</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>self</name><operator>)</operator></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>||</operator> <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>Py_FindMethod</name><argument_list>(<argument><expr><name>FunctionMethods</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>do_pyeval</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DoPyCommand</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>,
<argument><expr><operator>(</operator><name>rangeinitializer</name><operator>)</operator> <name>init_range_eval</name></expr></argument>,
<argument><expr><operator>(</operator><name>runner</name><operator>)</operator> <name>run_eval</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PYTHON_API_VERSION</name> <operator>&lt;</operator> <literal type="number">1007</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>Py_GetProgramName</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="string">"vim"</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>int</name></type>
<name>set_ref_in_python</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>set_ref_in_py</name><argument_list>(<argument><expr><name>copyID</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
