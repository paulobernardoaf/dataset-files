<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\terminal.c">







































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &lt; (y) ? (x) : (y))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt; (y) ? (x) : (y))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvterm/include/vterm.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>VTermScreenCellAttrs</name></type> <name>attrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermColor</name></type> <name>fg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermColor</name></type> <name>bg</name></decl>;</decl_stmt>
}</block></struct></type> <name>cellattr_T</name>;</typedef>

<typedef>typedef <type><struct>struct <name>sb_line_S</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>sb_cols</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>cellattr_T</name> <modifier>*</modifier></type><name>sb_cells</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>cellattr_T</name></type> <name>sb_fill_attr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sb_text</name></decl>;</decl_stmt> 
}</block></struct></type> <name>sb_line_T</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HPCON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HPCON</name></cpp:macro> <cpp:value>VOID*</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EXTENDED_STARTUPINFO_PRESENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENDED_STARTUPINFO_PRESENT</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE</name></cpp:macro> <cpp:value>0x00020016</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <name>_DYN_STARTUPINFOEXW</name>
<block>{
<decl_stmt><decl><type><name>STARTUPINFOW</name></type> <name>StartupInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPPROC_THREAD_ATTRIBUTE_LIST</name></type> <name>lpAttributeList</name></decl>;</decl_stmt>
}</block></struct></type> <name>DYN_STARTUPINFOEXW</name><operator>,</operator> *<name>PDYN_STARTUPINFOEXW</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<struct>struct <name>terminal_S</name> <block>{
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>tl_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>tl_vterm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>tl_job</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>tl_buffer</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>tl_system</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tl_toprow</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>int</name></type> <name>tl_vterm_size_changed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tl_normal_mode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tl_channel_closed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tl_channel_recently_closed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tl_finish</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TL_FINISH_UNSET</name></cpp:macro> <cpp:value>NUL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TL_FINISH_CLOSE</name></cpp:macro> <cpp:value>'c'</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TL_FINISH_NOCLOSE</name></cpp:macro> <cpp:value>'n'</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TL_FINISH_OPEN</name></cpp:macro> <cpp:value>'o'</cpp:value></cpp:define> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tl_opencmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tl_eof_chars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tl_api</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tl_arg0_cmd</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tl_winpty_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tl_winpty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HPCON</name></type> <name>tl_conpty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DYN_STARTUPINFOEXW</name></type> <name>tl_siex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>tl_out_fd</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tl_command</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tl_kill</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>tl_rows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tl_cols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tl_title</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tl_status_text</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>tl_dirty_row_start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tl_dirty_row_end</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tl_dirty_snapshot</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>tl_timer_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proftime_T</name></type> <name>tl_timer_due</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>tl_postponed_scroll</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>garray_T</name></type> <name>tl_scrollback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tl_scrollback_scrolled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name></type> <name>tl_scrollback_postponed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tl_highlight_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>cellattr_T</name></type> <name>tl_default_color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>tl_top_diff_rows</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>linenr_T</name></type> <name>tl_bot_diff_rows</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VTermPos</name></type> <name>tl_cursor_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tl_cursor_visible</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tl_cursor_blink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tl_cursor_shape</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tl_cursor_color</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tl_using_altscreen</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMODE_ONCE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMODE_LOOP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 




<decl_stmt><decl><type><specifier>static</specifier> <name>term_T</name> <modifier>*</modifier></type><name>first_term</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>term_T</name> <modifier>*</modifier></type><name>in_terminal_loop</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>has_winpty</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>has_conpty</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ROW</name></cpp:macro> <cpp:value>999999</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_BUF_LEN</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_TERMS</name><parameter_list>(<parameter><type><name>term</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((term) = first_term; (term) != NULL; (term) = (term)-&gt;tl_next)</cpp:value></cpp:define>





<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>term_and_job_init</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvar</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>orig_opt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>create_pty_only</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>term_report_winsize</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>term_free_vterm</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>update_system_term</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_postponed_scrollback</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>term_backspace_char</name> <init>= <expr><name>BS</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>term_default_cterm_fg</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>term_default_cterm_bg</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>last_set_cursor_color</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>desired_cursor_color</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_set_cursor_shape</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>desired_cursor_shape</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_set_cursor_blink</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>desired_cursor_blink</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>cursor_color_equal</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lhs_color</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rhs_color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lhs_color</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>rhs_color</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>lhs_color</name></expr></argument>, <argument><expr><name>rhs_color</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>lhs_color</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>rhs_color</name> <operator>==</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cursor_color_copy</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>to_color</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from_color</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>cursor_color_equal</name><argument_list>(<argument><expr><operator>*</operator><name>to_color</name></expr></argument>, <argument><expr><name>from_color</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>*</operator><name>to_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>to_color</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>from_color</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>from_color</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>cursor_color_get</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>color</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr> </then><else>: <expr><name>color</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_termwinsize</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cols</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>minsize</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>rows</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_tws</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_tws</name></name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>minsize</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_tws</name></name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>rows</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_tws</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cols</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>minsize</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_term_and_win_size</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_system</name></name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name> <operator>=</operator> <name>Rows</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>parse_termwinsize</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_setheight_win</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_setwidth_win</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>init_job_options</name><parameter_list>(<parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>clear_job_options</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_mode</name></name> <operator>=</operator> <name>MODE_RAW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_out_mode</name></name> <operator>=</operator> <name>MODE_RAW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_err_mode</name></name> <operator>=</operator> <name>MODE_RAW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>=</operator> <name>JO_MODE</name> <operator>|</operator> <name>JO_OUT_MODE</name> <operator>|</operator> <name>JO_ERR_MODE</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup_job_options</name><parameter_list>(<parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_OUT_IO</name><operator>)</operator></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_OUT</name></expr>]</index></name> <operator>=</operator> <name>JIO_BUFFER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io_buf</name><index>[<expr><name>PART_OUT</name></expr>]</index></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_modifiable</name><index>[<expr><name>PART_OUT</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_OUT_IO</name> <operator>+</operator> <name>JO_OUT_BUF</name> <operator>+</operator> <name>JO_OUT_MODIFIABLE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_ERR_IO</name><operator>)</operator></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_ERR</name></expr>]</index></name> <operator>=</operator> <name>JIO_BUFFER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io_buf</name><index>[<expr><name>PART_ERR</name></expr>]</index></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_modifiable</name><index>[<expr><name>PART_ERR</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_ERR_IO</name> <operator>+</operator> <name>JO_ERR_BUF</name> <operator>+</operator> <name>JO_ERR_MODIFIABLE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_pty</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>&amp;</operator> <name>JO2_TERM_ROWS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_rows</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>&amp;</operator> <name>JO2_TERM_COLS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_cols</name></name> <operator>=</operator> <name>cols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>term_flush_messages</name><parameter_list>()</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_check_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_queued_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>term_close_buffer</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>old_curbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free_terminal</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_curbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_nwindows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>old_curbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_nwindows</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>CHECK_CURBUF</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>do_buffer</name><argument_list>(<argument><expr><name>DOBUF_WIPE</name></expr></argument>, <argument><expr><name>DOBUF_FIRST</name></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>buf_T</name> <modifier>*</modifier></type>
<name>term_start</name><parameter_list>(
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvar</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,
<parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>exarg_T</name></type> <name>split_ea</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>old_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>old_curbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>newbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vertical</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>jo_vertical</name></name> <operator>||</operator> <operator>(</operator><name><name>cmdmod</name><operator>.</operator><name>split</name></name> <operator>&amp;</operator> <name>WSP_VERT</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobopt_T</name></type> <name>orig_opt</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <operator>(</operator><name>JO_IN_IO</name> <operator>+</operator> <name>JO_OUT_IO</name> <operator>+</operator> <name>JO_ERR_IO</name><operator>)</operator><operator>)</operator>
<operator>==</operator> <operator>(</operator><name>JO_IN_IO</name> <operator>+</operator> <name>JO_OUT_IO</name> <operator>+</operator> <name>JO_ERR_IO</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_OUT_IO</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_OUT_BUF</name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_ERR_IO</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_ERR_BUF</name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>argvar</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>argvar</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name>
<operator>&amp;&amp;</operator> <name><name>argvar</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>argvar</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_first</name></name> <operator>==</operator> <operator>&amp;</operator><name>range_list_item</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>term</name> <operator>=</operator> <call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>term_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_end</name></name> <operator>=</operator> <name>MAX_ROW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_visible</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_shape</name></name> <operator>=</operator> <name>VTERM_PROP_CURSORSHAPE_BLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_finish</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_term_finish</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_system</name></name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TERM_START_SYSTEM</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb_line_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_postponed</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb_line_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>split_ea</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>split_ea</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_curwin</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>can_abandon</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <name>TERM_START_FORCEIT</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>no_write_message</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>do_ecmd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>split_ea</name></expr></argument>, <argument><expr><name>ECMD_ONE</name></expr></argument>,
<argument><expr><name>ECMD_HIDE</name>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TERM_START_FORCEIT</name><operator>)</operator></expr> ?</condition><then> <expr><name>ECMD_FORCEIT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_hidden</name></name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TERM_START_SYSTEM</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>



<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_new</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>,
<argument><expr><name>BLN_NEW</name> <operator>|</operator> <name>BLN_LISTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ml_open</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>old_curbuf</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_nwindows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_nwindows</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>split_ea</name><operator>.</operator><name>cmdidx</name></name> <operator>=</operator> <name>CMD_new</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>split_ea</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"new"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>split_ea</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>vertical</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>split_ea</name><operator>.</operator><name>line2</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_term_rows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>split_ea</name><operator>.</operator><name>addr_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_cols</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>vertical</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>split_ea</name><operator>.</operator><name>line2</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_term_cols</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>split_ea</name><operator>.</operator><name>addr_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vertical</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>split</name></name> <operator>|=</operator> <name>WSP_VERT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ex_splitview</name><argument_list>(<argument><expr><operator>&amp;</operator><name>split_ea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>==</operator> <name>old_curwin</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_hidden</name></name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_curwin</name></name> <operator>||</operator> <name>vertical</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_setheight</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_cols</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_curwin</name></name> <operator>||</operator> <operator>!</operator><name>vertical</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_setwidth</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_next</name></name> <operator>=</operator> <name>first_term</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first_term</name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFFILEPRE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>argv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"!system"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvar</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>argvar</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"pty"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>argvar</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name>
<operator>||</operator> <name><name>argvar</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>argvar</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>argvar</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_first</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"!%s"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"!%s (%d)"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>buflist_findname</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_sfname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_sfname</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFFILEPOST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_opencmd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_opencmd</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_opencmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_eof_chars</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_eof_chars</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_eof_chars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"buftype"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"terminal"</literal></expr></argument>, <argument><expr><name>OPT_FREE</name><operator>|</operator><name>OPT_LOCAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_initialized</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_term_and_win_size</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>orig_opt</name><operator>.</operator><name>jo_io</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>orig_opt</name><operator>.</operator><name>jo_io</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>setup_job_options</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>TERM_START_NOJOB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>curbuf</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_norestore</name></name> <operator>||</operator> <name>argv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_command</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>argvar</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name><name>argvar</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>p_sh</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_command</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>argvar</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name>
<operator>&amp;&amp;</operator> <name><name>argvar</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>argvar</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>FOR_ALL_LIST_ITEMS</name><argument_list>(<argument>argvar-&gt;vval.v_list</argument>, <argument>item</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_fnameescape</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_command</name></name> <operator>=</operator> <name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_kill</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>skiptowhite</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_kill</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_kill</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_kill</name></name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_term_kill</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_api</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>skiptowhite</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_api</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_api</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_api</name></name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_term_api</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_api</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Tapi_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>&amp;</operator> <name>JO2_TERM_HIGHLIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_highlight_name</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_highlight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>argvar</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name>
<operator>&amp;&amp;</operator> <name><name>argvar</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>argvar</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>create_pty_only</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>term_and_job_init</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>argvar</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>orig_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>newbuf</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vterm_get_size</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>term_report_winsize</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_system</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_toprow</name></name> <operator>=</operator> <name>msg_row</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><call><name>channel_set_nonblock</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>, <argument><expr><name>PART_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_curbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_nwindows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>old_curbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_nwindows</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>term_close_buffer</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>old_curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_TERMINALOPEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>newbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_hidden</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TERM_START_SYSTEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_TERMINALWINOPEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>newbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>newbuf</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_terminal</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argvar</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobopt_T</name></type> <name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_shell</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>cmd</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cmd</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ep</name> <operator>&lt;</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTARG_HAS</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(p - cmd) == sizeof(name) - 1 &amp;&amp; STRNICMP(cmd, name, sizeof(name) - 1) == 0)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><call><name>OPTARG_HAS</name><argument_list>(<argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_term_finish</name></name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>OPTARG_HAS</name><argument_list>(<argument><expr><literal type="string">"noclose"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_term_finish</name></name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>OPTARG_HAS</name><argument_list>(<argument><expr><literal type="string">"open"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_term_finish</name></name> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>OPTARG_HAS</name><argument_list>(<argument><expr><literal type="string">"curwin"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_curwin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>OPTARG_HAS</name><argument_list>(<argument><expr><literal type="string">"hidden"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_hidden</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>OPTARG_HAS</name><argument_list>(<argument><expr><literal type="string">"norestore"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_term_norestore</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>OPTARG_HAS</name><argument_list>(<argument><expr><literal type="string">"shell"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>opt_shell</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>OPTARG_HAS</name><argument_list>(<argument><expr><literal type="string">"kill"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_TERM_KILL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_term_kill</name></name> <operator>=</operator> <name>ep</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>OPTARG_HAS</name><argument_list>(<argument><expr><literal type="string">"api"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_TERM_API</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_term_api</name></name> <operator>=</operator> <name>ep</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_term_api</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>OPTARG_HAS</name><argument_list>(<argument><expr><literal type="string">"rows"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ep</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>ep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_TERM_ROWS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_term_rows</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ep</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>OPTARG_HAS</name><argument_list>(<argument><expr><literal type="string">"cols"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ep</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>ep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_TERM_COLS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_term_cols</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ep</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>OPTARG_HAS</name><argument_list>(<argument><expr><literal type="string">"eof"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>jo_eof_chars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>replace_termcodes</name><argument_list>(<argument><expr><name>ep</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>,
<argument><expr><name>REPTERM_FROM_PART</name> <operator>|</operator> <name>REPTERM_DO_LT</name> <operator>|</operator> <name>REPTERM_SPECIAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_EOF_CHARS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_eof_chars</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>cmd</name><operator>)</operator> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>ep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tty_type</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>ep</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"winpty"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <operator>(</operator><name>ep</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tty_type</name> <operator>=</operator> <literal type="char">'w'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>ep</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"conpty"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <operator>(</operator><name>ep</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tty_type</name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_TTY_TYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_tty_type</name></name> <operator>=</operator> <name>tty_type</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E181: Invalid attribute: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></else></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OPTARG_HAS</name></cpp:undef>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>tofree</name> <operator>=</operator> <name>cmd</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>jo_term_finish</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_term_finish</name></name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_IN_IO</name> <operator>|</operator> <name>JO_IN_BUF</name> <operator>|</operator> <name>JO_IN_TOP</name> <operator>|</operator> <name>JO_IN_BOT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_io</name><index>[<expr><name>PART_IN</name></expr>]</index></name> <operator>=</operator> <name>JIO_BUFFER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_io_buf</name><index>[<expr><name>PART_IN</name></expr>]</index></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_in_top</name></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_in_bot</name></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_shell</name> <operator>&amp;&amp;</operator> <name>tofree</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>unix_build_argv</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tofree1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tofree2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>term_start</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr> ?</condition><then> <expr><name>TERM_START_FORCEIT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>long_u</name></type> <name>cmdlen</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_sh</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p_shcf</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newcmd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>newcmd</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>cmdlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newcmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tofree</name> <operator>=</operator> <name>newcmd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newcmd</name></expr></argument>, <argument><expr><name>cmdlen</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s"</literal></expr></argument>, <argument><expr><name>p_sh</name></expr></argument>, <argument><expr><name>p_shcf</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>newcmd</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E279: Sorry, ++shell is not supported on this system"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>argvar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argvar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argvar</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>term_start</name><argument_list>(<argument><expr><name>argvar</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr> ?</condition><then> <expr><name>TERM_START_FORCEIT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>theend</name>:</label>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>jo_eof_chars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>int</name></type>
<name>term_write_session</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_term</name></name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"terminal ++curwin ++cols=%d ++rows=%d "</literal></expr></argument>,
<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"++type=%s "</literal></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_tty_type</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_command</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>fputs</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>tl_command</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>term_should_restore</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>term</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>term</name><operator>-&gt;</operator><name>tl_command</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_command</name></name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_scrollback</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>sb_line_T</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name>i</name><operator>)</operator><operator>-&gt;</operator><name>sb_cells</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_postponed</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>sb_line_T</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_postponed</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name>i</name><operator>)</operator><operator>-&gt;</operator><name>sb_cells</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_postponed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>term_T</name> <modifier>*</modifier></type><name>terminals_to_free</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>









<function><type><name>void</name></type>
<name>free_terminal</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>first_term</name> <operator>==</operator> <name>term</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_term</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>first_term</name></expr>;</init> <condition><expr><name><name>tp</name><operator>-&gt;</operator><name>tl_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>tp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tl_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tl_next</name></name> <operator>==</operator> <name>term</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tl_next</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_next</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>!=</operator> <name>JOB_ENDED</name>
<operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>!=</operator> <name>JOB_FINISHED</name>
<operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>!=</operator> <name>JOB_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>job_stop</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"kill"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>job_unref</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_next</name></name> <operator>=</operator> <name>terminals_to_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name>terminals_to_free</name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>in_terminal_loop</name> <operator>==</operator> <name>term</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>in_terminal_loop</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>free_unused_terminals</name><parameter_list>()</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>terminals_to_free</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name>terminals_to_free</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>terminals_to_free</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_scrollback</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>term_free_vterm</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_api</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_kill</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_status_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_opencmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_eof_chars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_arg0_cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_out_fd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_out_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_highlight_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>ch_part_T</name></type>
<name>get_tty_part</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier><name>term</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ch_part_T</name></type> <name><name>parts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>PART_IN</name></expr>, <expr><name>PART_OUT</name></expr>, <expr><name>PART_ERR</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name><name>parts</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>ch_fd</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_isatty</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>parts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>PART_IN</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>term_write_job_output</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vterm</name> <init>= <expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>prevlen</name> <init>= <expr><call><name>vterm_output_get_buffer_current</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vterm_input_write</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>msg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>prevlen</name> <operator>!=</operator> <call><name>vterm_output_get_buffer_current</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>KEY_BUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>curlen</name> <init>= <expr><call><name>vterm_output_read</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>KEY_BUF_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>curlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>channel_send</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>, <argument><expr><call><name>get_tty_part</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>curlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>vterm_screen_flush_damage</name><argument_list>(<argument><expr><call><name>vterm_obtain_screen</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_cursor</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>redraw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_normal_mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_system</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_pos</name><operator>.</operator><name>row</name></name> <operator>+</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_toprow</name></name></expr></argument>,
<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>redraw</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name> <operator>==</operator> <name>curbuf</name> <operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_cursor_visible</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cursor_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>write_to_term</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>buffer</name><operator>-&gt;</operator><name>b_term</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_out_fd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Writing %d bytes to output file"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_out_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"NOT writing %d bytes to terminal"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"writing %d bytes to terminal"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>term_write_job_output</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_system</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>update_system_term</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_cursor</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


if <condition>(<expr><operator>!</operator><name><name>term</name><operator>-&gt;</operator><name>tl_normal_mode</name></name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>, <argument><expr><literal type="string">"updating screen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>curbuf</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>VALID_NO_UPDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>curbuf</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_cursor</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_after_callback</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>term_send_mouse</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vterm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VTermModifier</name></type> <name>mod</name> <init>= <expr><name>VTERM_MOD_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>mouse_row</name> <operator>-</operator> <call><name>W_WINROW</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>mouse_col</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>popup_is_popup</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row</name> <operator>-=</operator> <call><name>popup_top_extra</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <call><name>popup_left_extra</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>vterm_mouse_move</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vterm_mouse_button</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><name>pressed</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>enter_mouse_col</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>enter_mouse_row</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>term_mouse_click</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vterm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ignore_drag_release</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermMouseState</name></type> <name>mouse_state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vterm_state_get_mousestate</name><argument_list>(<argument><expr><call><name>vterm_obtain_state</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>mouse_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mouse_state</name><operator>.</operator><name>flags</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>K_LEFTDRAG</name></expr>:</case>
<case>case <expr><name>K_LEFTRELEASE</name></expr>:</case>
<case>case <expr><name>K_RIGHTDRAG</name></expr>:</case>
<case>case <expr><name>K_RIGHTRELEASE</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><name>ignore_drag_release</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_mouse_col</name></decl>, <decl><type ref="prev"/><name>save_mouse_row</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>enter_mouse_col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>



<expr_stmt><expr><name>save_mouse_col</name> <operator>=</operator> <name>mouse_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_mouse_row</name> <operator>=</operator> <name>mouse_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_col</name> <operator>=</operator> <name>enter_mouse_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_row</name> <operator>=</operator> <name>enter_mouse_row</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clip_modeless</name><argument_list>(<argument><expr><name>MOUSE_LEFT</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_col</name> <operator>=</operator> <name>save_mouse_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_row</name> <operator>=</operator> <name>save_mouse_row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>K_LEFTMOUSE</name></expr>:</case>
<case>case <expr><name>K_RIGHTMOUSE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>K_LEFTRELEASE</name> <operator>||</operator> <name>key</name> <operator>==</operator> <name>K_RIGHTRELEASE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ignore_drag_release</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ignore_drag_release</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>available</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>, <decl><type ref="prev"/><name>is_click</name></decl>, <decl><type ref="prev"/><name>is_drag</name></decl>;</decl_stmt>

<expr_stmt><expr><name>button</name> <operator>=</operator> <call><name>get_mouse_button</name><argument_list>(<argument><expr><call><name>KEY2TERMCAP1</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>is_click</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_drag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mouse_model_popup</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>button</name> <operator>==</operator> <name>MOUSE_LEFT</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_SHIFT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_RIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mod_mask</name> <operator>&amp;=</operator> <operator>~</operator><name>MOD_MASK_SHIFT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clip_modeless</name><argument_list>(<argument><expr><name>button</name></expr></argument>, <argument><expr><name>is_click</name></expr></argument>, <argument><expr><name>is_drag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>K_MIDDLEMOUSE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>available</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert_reg</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>enter_mouse_col</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>enter_mouse_col</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>K_LEFTMOUSE</name></expr>:</case>
<case>case <expr><name>K_LEFTMOUSE_NM</name></expr>:</case> <expr_stmt><expr><call><name>term_send_mouse</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_LEFTDRAG</name></expr>:</case> <expr_stmt><expr><call><name>term_send_mouse</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_LEFTRELEASE</name></expr>:</case>
<case>case <expr><name>K_LEFTRELEASE_NM</name></expr>:</case> <expr_stmt><expr><call><name>term_send_mouse</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_MOUSEMOVE</name></expr>:</case> <expr_stmt><expr><call><name>term_send_mouse</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_MIDDLEMOUSE</name></expr>:</case> <expr_stmt><expr><call><name>term_send_mouse</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_MIDDLEDRAG</name></expr>:</case> <expr_stmt><expr><call><name>term_send_mouse</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_MIDDLERELEASE</name></expr>:</case> <expr_stmt><expr><call><name>term_send_mouse</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_RIGHTMOUSE</name></expr>:</case> <expr_stmt><expr><call><name>term_send_mouse</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_RIGHTDRAG</name></expr>:</case> <expr_stmt><expr><call><name>term_send_mouse</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_RIGHTRELEASE</name></expr>:</case> <expr_stmt><expr><call><name>term_send_mouse</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>term_convert_key</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modmask</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vterm</name> <init>= <expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermKey</name></type> <name>key</name> <init>= <expr><name>VTERM_KEY_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermModifier</name></type> <name>mod</name> <init>= <expr><name>VTERM_MOD_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>other</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>




<case>case <expr><name>K_BS</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>term_backspace_char</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ESC</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_ESCAPE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_DEL</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_DEL</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_DOWN</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_DOWN</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_S_DOWN</name></expr>:</case> <expr_stmt><expr><name>mod</name> <operator>=</operator> <name>VTERM_MOD_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_DOWN</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_END</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_END</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_S_END</name></expr>:</case> <expr_stmt><expr><name>mod</name> <operator>=</operator> <name>VTERM_MOD_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_END</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_C_END</name></expr>:</case> <expr_stmt><expr><name>mod</name> <operator>=</operator> <name>VTERM_MOD_CTRL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_END</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_F10</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_F11</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_F12</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_F1</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_F2</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_F3</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_F4</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_F5</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_F6</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_F7</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_F8</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_F9</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_HOME</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_HOME</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_S_HOME</name></expr>:</case> <expr_stmt><expr><name>mod</name> <operator>=</operator> <name>VTERM_MOD_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_HOME</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_C_HOME</name></expr>:</case> <expr_stmt><expr><name>mod</name> <operator>=</operator> <name>VTERM_MOD_CTRL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_HOME</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_INS</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_INS</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K0</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_0</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K1</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_1</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K2</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K3</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_3</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K4</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_4</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K5</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_5</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K6</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_6</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K7</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_7</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K8</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_8</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K9</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_9</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_KDEL</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_DEL</name></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><name>K_KDIVIDE</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_DIVIDE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_KEND</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_1</name></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><name>K_KENTER</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_ENTER</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_KHOME</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_7</name></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><name>K_KINS</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_0</name></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><name>K_KMINUS</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_MINUS</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_KMULTIPLY</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_MULT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_KPAGEDOWN</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_3</name></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><name>K_KPAGEUP</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_9</name></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><name>K_KPLUS</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_PLUS</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_KPOINT</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_KP_PERIOD</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_LEFT</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_LEFT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_S_LEFT</name></expr>:</case> <expr_stmt><expr><name>mod</name> <operator>=</operator> <name>VTERM_MOD_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_LEFT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_C_LEFT</name></expr>:</case> <expr_stmt><expr><name>mod</name> <operator>=</operator> <name>VTERM_MOD_CTRL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_LEFT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_PAGEDOWN</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_PAGEDOWN</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_PAGEUP</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_PAGEUP</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_RIGHT</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_S_RIGHT</name></expr>:</case> <expr_stmt><expr><name>mod</name> <operator>=</operator> <name>VTERM_MOD_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_C_RIGHT</name></expr>:</case> <expr_stmt><expr><name>mod</name> <operator>=</operator> <name>VTERM_MOD_CTRL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_UP</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_UP</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_S_UP</name></expr>:</case> <expr_stmt><expr><name>mod</name> <operator>=</operator> <name>VTERM_MOD_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_UP</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TAB</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_TAB</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_S_TAB</name></expr>:</case> <expr_stmt><expr><name>mod</name> <operator>=</operator> <name>VTERM_MOD_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>VTERM_KEY_TAB</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_MOUSEUP</name></expr>:</case> <expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>term_send_mouse</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_MOUSEDOWN</name></expr>:</case> <expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>term_send_mouse</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_MOUSELEFT</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>K_MOUSERIGHT</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>K_LEFTMOUSE</name></expr>:</case>
<case>case <expr><name>K_LEFTMOUSE_NM</name></expr>:</case>
<case>case <expr><name>K_LEFTDRAG</name></expr>:</case>
<case>case <expr><name>K_LEFTRELEASE</name></expr>:</case>
<case>case <expr><name>K_LEFTRELEASE_NM</name></expr>:</case>
<case>case <expr><name>K_MOUSEMOVE</name></expr>:</case>
<case>case <expr><name>K_MIDDLEMOUSE</name></expr>:</case>
<case>case <expr><name>K_MIDDLEDRAG</name></expr>:</case>
<case>case <expr><name>K_MIDDLERELEASE</name></expr>:</case>
<case>case <expr><name>K_RIGHTMOUSE</name></expr>:</case>
<case>case <expr><name>K_RIGHTDRAG</name></expr>:</case>
<case>case <expr><name>K_RIGHTRELEASE</name></expr>:</case> <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>term_mouse_click</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>other</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>K_X1MOUSE</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>K_X1DRAG</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>K_X1RELEASE</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>K_X2MOUSE</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>K_X2DRAG</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>K_X2RELEASE</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>K_IGNORE</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>K_NOP</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>K_UNDO</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>K_HELP</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>K_XF1</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_XF2</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_XF3</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_XF4</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_SELECT</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>K_VER_SCROLLBAR</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>K_HOR_SCROLLBAR</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>K_TABLINE</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>K_TABMENU</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>K_F21</name></expr>:</case> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>VTERM_KEY_FUNCTION</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>K_DROP</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>K_CURSORHOLD</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>K_PS</name></expr>:</case> <expr_stmt><expr><call><name>vterm_keyboard_start_paste</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>other</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>K_PE</name></expr>:</case> <expr_stmt><expr><call><name>vterm_keyboard_end_paste</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>other</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name>modmask</name> <operator>&amp;</operator> <name>MOD_MASK_SHIFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod</name> <operator>|=</operator> <name>VTERM_MOD_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>modmask</name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod</name> <operator>|=</operator> <name>VTERM_MOD_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>modmask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_ALT</name> <operator>|</operator> <name>MOD_MASK_META</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod</name> <operator>|=</operator> <name>VTERM_MOD_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <name>VTERM_KEY_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_keyboard_key</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>other</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_keyboard_unichar</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>vterm_output_read</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>KEY_BUF_LEN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>term_job_running_check</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>check_job_status</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>term</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>channel_is_open</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>check_job_status</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>job_status</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>==</operator> <name>JOB_STARTED</name>
<operator>||</operator> <operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_channel</name><operator>-&gt;</operator><name>ch_keep_open</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>term_job_running</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>term_job_running_check</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>term_none_open</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<return>return <expr><name>term</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>channel_is_open</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name><operator>-&gt;</operator><name>ch_keep_open</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>term_try_stop_job</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>how</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_kill</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>how</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>how</name> <operator>==</operator> <name>NUL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>p_confirm</name> <operator>||</operator> <name><name>cmdmod</name><operator>.</operator><name>confirm</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buff</name><index>[<expr><name>DIALOG_MSG_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dialog_msg</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Kill job in \"%s\"?"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vim_dialog_yesnocancel</name><argument_list>(<argument><expr><name>VIM_QUESTION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VIM_YES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>how</name> <operator>=</operator> <literal type="string">"kill"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VIM_CANCEL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>how</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>how</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>job_stop</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_job</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>how</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>count</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>buf_valid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call>
<operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>job</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_job</name></name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>job_status</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>&gt;=</operator> <name>JOB_ENDED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ui_delay</name><argument_list>(<argument><expr><literal type="number">10L</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>term_flush_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_scrollback_line_to_buffer</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>empty</name> <init>= <expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>enc_codepage</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MultiByteToWideChar_alloc</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>text</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>WideCharToMultiByte_alloc</name><argument_list>(<argument><expr><name>enc_codepage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ml_append_buf</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ml_append_buf</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>empty</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cell2cellattr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermScreenCell</name> <modifier>*</modifier></type><name>cell</name></decl></parameter>, <parameter><decl><type><name>cellattr_T</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>attrs</name></name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>attrs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>fg</name></name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>fg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>bg</name></name> <operator>=</operator> <name><name>cell</name><operator>-&gt;</operator><name>bg</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>equal_celattr</name><parameter_list>(<parameter><decl><type><name>cellattr_T</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>cellattr_T</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>red</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>red</name></name>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>green</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>green</name></name>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>blue</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>blue</name></name>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>bg</name><operator>.</operator><name>red</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>bg</name><operator>.</operator><name>red</name></name>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>bg</name><operator>.</operator><name>green</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>bg</name><operator>.</operator><name>green</name></name>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>bg</name><operator>.</operator><name>blue</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>bg</name><operator>.</operator><name>blue</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>add_empty_scrollback</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>cellattr_T</name> <modifier>*</modifier></type><name>fill_attr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>sb_line_T</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><operator>(</operator><name>sb_line_T</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_data</name></name>
<operator>+</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <name>lnum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>line</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>line</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sb_cells</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sb_fill_attr</name></name> <operator>=</operator> <operator>*</operator><name>fill_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>cleanup_scrollback</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sb_line_T</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>&gt;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_scrolled</name></name>
<operator>&amp;&amp;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <operator>(</operator><name>sb_line_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>sb_cells</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curbuf</name> <operator>==</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_snapshot</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lines_skipped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermPos</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermScreenCell</name></type> <name>cell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cellattr_T</name></type> <name>fill_attr</name></decl>, <decl><type ref="prev"/><name>new_fill_attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cellattr_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="string">"Adding terminal window snapshot to buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>cleanup_scrollback</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>screen</name> <operator>=</operator> <call><name>vterm_obtain_screen</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fill_attr</name> <operator>=</operator> <name>new_fill_attr</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name><name>pos</name><operator>.</operator><name>row</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name><name>pos</name><operator>.</operator><name>col</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>vterm_screen_get_cell</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_fill_attr</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cell2cellattr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_fill_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>equal_celattr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_fill_attr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fill_attr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>lines_skipped</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<while>while <condition>(<expr><name>lines_skipped</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>lines_skipped</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>add_empty_scrollback</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fill_attr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_scrollback_line_to_buffer</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>cellattr_T</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sb_line_T</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><operator>(</operator><name>sb_line_T</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_data</name></name>
<operator>+</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name>width</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vterm_screen_get_cell</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cellattr_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>cell</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cell2cellattr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>VTERM_MAX_CHARS_PER_CELL</name> <operator>*</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><ternary><condition><expr><name>c</name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sb_cells</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sb_fill_attr</name></name> <operator>=</operator> <name>new_fill_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fill_attr</name> <operator>=</operator> <name>new_fill_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_scrollback_line_to_buffer</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name><operator>)</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_scrollback_line_to_buffer</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_len</name></name></expr>;</init>
<condition><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_scrolled</name></name> <operator>+</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_cursor_pos</name><operator>.</operator><name>row</name></name></expr>;</condition>
<incr><expr><operator>++</operator><name><name>pos</name><operator>.</operator><name>row</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>add_empty_scrollback</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fill_attr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_scrollback_line_to_buffer</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_snapshot</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_timer_set</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>for_all_windows_and_curwin</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>did_curwin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>-&gt;</operator><name>w_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>wp</name><operator>)</operator><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>*</operator><name>did_curwin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>wp</name> <operator>==</operator> <name>curwin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>did_curwin</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>may_move_terminal_to_buffer</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>redraw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_snapshot</name></name> <operator>||</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>
<operator>&lt;=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_scrolled</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_snapshot</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>vterm_state_get_default_colors</name><argument_list>(<argument><expr><call><name>vterm_obtain_state</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name><operator>.</operator><name>fg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>redraw</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_curwin</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>for_all_windows_and_curwin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>did_curwin</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>min_topline</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&lt;</operator> <name>min_topline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name>min_topline</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>int</name></type>
<name>term_check_timers</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>next_due_arg</name></decl></parameter>, <parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next_due</name> <init>= <expr><name>next_due_arg</name></expr></init></decl>;</decl_stmt>

<macro><name>FOR_ALL_TERMS</name><argument_list>(<argument>term</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_timer_set</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>term</name><operator>-&gt;</operator><name>tl_normal_mode</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>this_due</name> <init>= <expr><call><name>proftime_time_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_timer_due</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>this_due</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_timer_set</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>may_move_terminal_to_buffer</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>next_due</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>next_due</name> <operator>&gt;</operator> <name>this_due</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>next_due</name> <operator>=</operator> <name>this_due</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<return>return <expr><name>next_due</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_terminal_mode</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>normal_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_normal_mode</name></name> <operator>=</operator> <name>normal_mode</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>normal_mode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_postponed_scrollback</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_status_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name> <operator>==</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>cleanup_vterm</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>set_terminal_mode</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_finish</name></name> <operator>!=</operator> <name>TL_FINISH_CLOSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>may_move_terminal_to_buffer</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>term_free_vterm</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>term_enter_normal_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_terminal_mode</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>may_move_terminal_to_buffer</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_scrolled</name></name>
<operator>+</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_cursor_pos</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_scrolled</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>term_in_normal_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>term</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_normal_mode</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>term_enter_job_mode</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_terminal_mode</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_channel_closed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cleanup_vterm</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>redraw_buf_and_status_later</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>term_vgetc</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_State</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>modify_other_keys</name> <init>=
<expr><call><name>vterm_is_modify_other_keys</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>TERMINAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ctrl_break_was_pressed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>modify_other_keys</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>no_reduce_keys</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_State</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>modify_other_keys</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>no_reduce_keys</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mouse_was_outside</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>






<function><type><name>int</name></type>
<name>send_keys_to_term</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modmask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>typed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><name>KEY_BUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dragging_outside</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>


<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>NUL</name></expr>:</case>
<case>case <expr><name>K_ZERO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>typed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>

<case>case <expr><name>K_TABLINE</name></expr>:</case>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>

<case>case <expr><name>K_IGNORE</name></expr>:</case>
<case>case <expr><name>K_CANCEL</name></expr>:</case> 
<return>return <expr><name>FAIL</name></expr>;</return>

<case>case <expr><name>K_LEFTDRAG</name></expr>:</case>
<case>case <expr><name>K_MIDDLEDRAG</name></expr>:</case>
<case>case <expr><name>K_RIGHTDRAG</name></expr>:</case>
<case>case <expr><name>K_X1DRAG</name></expr>:</case>
<case>case <expr><name>K_X2DRAG</name></expr>:</case>
<expr_stmt><expr><name>dragging_outside</name> <operator>=</operator> <name>mouse_was_outside</name></expr>;</expr_stmt>

<case>case <expr><name>K_LEFTMOUSE</name></expr>:</case>
<case>case <expr><name>K_LEFTMOUSE_NM</name></expr>:</case>
<case>case <expr><name>K_LEFTRELEASE</name></expr>:</case>
<case>case <expr><name>K_LEFTRELEASE_NM</name></expr>:</case>
<case>case <expr><name>K_MOUSEMOVE</name></expr>:</case>
<case>case <expr><name>K_MIDDLEMOUSE</name></expr>:</case>
<case>case <expr><name>K_MIDDLERELEASE</name></expr>:</case>
<case>case <expr><name>K_RIGHTMOUSE</name></expr>:</case>
<case>case <expr><name>K_RIGHTRELEASE</name></expr>:</case>
<case>case <expr><name>K_X1MOUSE</name></expr>:</case>
<case>case <expr><name>K_X1RELEASE</name></expr>:</case>
<case>case <expr><name>K_X2MOUSE</name></expr>:</case>
<case>case <expr><name>K_X2RELEASE</name></expr>:</case>

<case>case <expr><name>K_MOUSEUP</name></expr>:</case>
<case>case <expr><name>K_MOUSEDOWN</name></expr>:</case>
<case>case <expr><name>K_MOUSELEFT</name></expr>:</case>
<case>case <expr><name>K_MOUSERIGHT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>mouse_row</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>mouse_col</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>popup_is_popup</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row</name> <operator>-=</operator> <call><name>popup_top_extra</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <call><name>popup_left_extra</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <call><name>W_WINROW</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call>
<operator>||</operator> <name>row</name> <operator>&gt;=</operator> <operator>(</operator><call><name>W_WINROW</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name><operator>)</operator>
<operator>||</operator> <name>col</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wincol</name></name>
<operator>||</operator> <name>col</name> <operator>&gt;=</operator> <call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call>
<operator>||</operator> <name>dragging_outside</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>typed</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_was_outside</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>typed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_was_outside</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>term_convert_key</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>modmask</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_send</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>, <argument><expr><call><name>get_tty_part</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>position_cursor</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>add_off</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>pos</name><operator>-&gt;</operator><name>row</name></name></expr></argument>, <argument><expr><call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr></argument>, <argument><expr><call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>add_off</name> <operator>&amp;&amp;</operator> <call><name>popup_is_popup</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>+=</operator> <call><name>popup_top_extra</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>+=</operator> <call><name>popup_left_extra</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <operator>(</operator><name>VALID_WCOL</name><operator>|</operator><name>VALID_WROW</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>term_paste_register</name><parameter_list>(<parameter><decl><type><name>int</name> <name>prev_c</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>reglen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>add_to_showcmd</name><argument_list>(<argument><expr><name>prev_c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>add_to_showcmd</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>term_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clear_showcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>term_use_loop</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <call><name>get_expr_register</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>term_use_loop</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>list_T</name> <operator>*</operator><operator>)</operator><call><name>get_reg_contents</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>GREG_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>get_reg_type</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>FOR_ALL_LIST_ITEMS</name><argument_list>(<argument>l</argument>, <argument>item</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>enc_codepage</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MultiByteToWideChar_alloc</name><argument_list>(<argument><expr><name>enc_codepage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>WideCharToMultiByte_alloc</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>channel_send</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>, <argument><expr><name>PART_IN</name></expr></argument>,
<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>li_next</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>MLINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>channel_send</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>, <argument><expr><name>PART_IN</name></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\r"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>terminal_is_active</name><parameter_list>()</parameter_list>
<block>{<block_content>
<return>return <expr><name>in_terminal_loop</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>term_get_highlight_name</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_highlight_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Terminal"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>term</name><operator>-&gt;</operator><name>tl_highlight_name</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>cursorentry_T</name> <modifier>*</modifier></type>
<name>term_get_cursor_shape</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name> <modifier>*</modifier></type><name>fg</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name> <modifier>*</modifier></type><name>bg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name>in_terminal_loop</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>cursorentry_T</name></type> <name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>term_fg</name></decl>, <decl><type ref="prev"/><name>term_bg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>shape</name></name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>mshape</name></name> <operator>=</operator>
<ternary><condition><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_shape</name></name> <operator>==</operator> <name>VTERM_PROP_CURSORSHAPE_UNDERLINE</name></expr> ?</condition><then> <expr><name>SHAPE_HOR</name></expr> </then><else>:
<expr><ternary><condition><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_shape</name></name> <operator>==</operator> <name>VTERM_PROP_CURSORSHAPE_BAR_LEFT</name></expr> ?</condition><then> <expr><name>SHAPE_VER</name></expr> </then><else>:
<expr><name>SHAPE_BLOCK</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>percentage</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_blink</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>blinkwait</name></name> <operator>=</operator> <literal type="number">700</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>blinkon</name></name> <operator>=</operator> <literal type="number">400</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>blinkoff</name></name> <operator>=</operator> <literal type="number">250</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><call><name>term_get_highlight_name</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>syn_id2colors</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>term_fg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>term_bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fg</name> <operator>=</operator> <name>term_bg</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>fg</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_color</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bg</name> <operator>=</operator> <name>term_fg</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bg</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bg</name> <operator>=</operator> <call><name>color_name2handle</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"n"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>used_for</name></name> <operator>=</operator> <name>SHAPE_CURSOR</name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name>entry</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>may_output_cursor_props</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cursor_color_equal</name><argument_list>(<argument><expr><name>last_set_cursor_color</name></expr></argument>, <argument><expr><name>desired_cursor_color</name></expr></argument>)</argument_list></call>
<operator>||</operator> <name>last_set_cursor_shape</name> <operator>!=</operator> <name>desired_cursor_shape</name>
<operator>||</operator> <name>last_set_cursor_blink</name> <operator>!=</operator> <name>desired_cursor_blink</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>cursor_color_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_set_cursor_color</name></expr></argument>, <argument><expr><name>desired_cursor_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_set_cursor_shape</name> <operator>=</operator> <name>desired_cursor_shape</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_set_cursor_blink</name> <operator>=</operator> <name>desired_cursor_blink</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>term_cursor_color</name><argument_list>(<argument><expr><call><name>cursor_color_get</name><argument_list>(<argument><expr><name>desired_cursor_color</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desired_cursor_shape</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>desired_cursor_blink</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ui_cursor_shape_forced</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>term_cursor_shape</name><argument_list>(<argument><expr><name>desired_cursor_shape</name></expr></argument>, <argument><expr><name>desired_cursor_blink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>may_set_cursor_props</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>in_terminal_loop</name> <operator>==</operator> <name>term</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>cursor_color_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desired_cursor_color</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>desired_cursor_shape</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_cursor_shape</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>desired_cursor_blink</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_cursor_blink</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>may_output_cursor_props</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>prepare_restore_cursor_props</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>cursor_color_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desired_cursor_color</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>desired_cursor_shape</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>desired_cursor_blink</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>may_output_cursor_props</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>term_use_loop_check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>check_job_status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>term</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>term</name><operator>-&gt;</operator><name>tl_normal_mode</name></name>
<operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>term_job_running_check</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>check_job_status</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>term_use_loop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>term_use_loop_check</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>term_win_entered</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>term</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>term_use_loop_check</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>reset_VIsual_and_resel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stop_insert_mode</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mouse_was_outside</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>enter_mouse_col</name> <operator>=</operator> <name>mouse_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>enter_mouse_row</name> <operator>=</operator> <name>mouse_row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>raw_c_to_ctrl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'`'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'@'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'_'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>ctrl_to_raw_c</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <call><name>vterm_is_modify_other_keys</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mod_mask</name> <operator>|=</operator> <name>MOD_MASK_CTRL</name></expr>;</expr_stmt>
<return>return <expr><name>c</name> <operator>+</operator> <literal type="char">'@'</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type>
<name>terminal_loop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>blocking</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>raw_c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>termwinkey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>tty_fd</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name>
<operator>-&gt;</operator><name>ch_part</name><index>[<expr><call><name>get_tty_part</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>ch_fd</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>restore_cursor</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><name>in_terminal_loop</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_twk</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>termwinkey</name> <operator>=</operator> <call><name>string_to_key</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_twk</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>termwinkey</name> <operator>==</operator> <name>Ctrl_W</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>termwinkey</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>position_cursor</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_cursor_pos</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>may_set_cursor_props</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>blocking</name> <operator>||</operator> <call><name>vpeekc_nomap</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_system</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<while>while <condition>(<expr><name>must_redraw</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>update_screen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>term_use_loop_check</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>in_terminal_loop</name> <operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>update_cursor</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>restore_cursor</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>raw_c</name> <operator>=</operator> <call><name>term_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>term_use_loop_check</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>in_terminal_loop</name> <operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>raw_c</name> <operator>!=</operator> <name>K_IGNORE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vungetc</name><argument_list>(<argument><expr><name>raw_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>raw_c</name> <operator>==</operator> <name>K_IGNORE</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>raw_c_to_ctrl</name><argument_list>(<argument><expr><name>raw_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><call><name>mch_isatty</name><argument_list>(<argument><expr><name>tty_fd</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>ttyinfo_T</name></type> <name>info</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>get_tty_info</name><argument_list>(<argument><expr><name>tty_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>term_backspace_char</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>backspace</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name>ctrl_break_was_pressed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_signal_job</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_job</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"kill"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name>termwinkey</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>Ctrl_W</name></expr> </then><else>: <expr><name>termwinkey</name></expr></else></ternary><operator>)</operator> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_BSL</name><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_system</name></name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prev_c</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_raw_c</name> <init>= <expr><name>raw_c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_mod_mask</name> <init>= <expr><name>mod_mask</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>add_to_showcmd</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>raw_c</name> <operator>=</operator> <call><name>term_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>raw_c_to_ctrl</name><argument_list>(<argument><expr><name>raw_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clear_showcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>term_use_loop_check</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <name>in_terminal_loop</name> <operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_c</name> <operator>==</operator> <name>Ctrl_BSL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_N</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>term_enter_normal_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>send_keys_to_term</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></argument>, <argument><expr><name>prev_raw_c</name></expr></argument>, <argument><expr><name>prev_mod_mask</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_C</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>mch_signal_job</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_job</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"kill"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>raw_c</name> <operator>=</operator> <call><name>ctrl_to_raw_c</name><argument_list>(<argument><expr><ternary><condition><expr><name>termwinkey</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>Ctrl_W</name></expr> </then><else>: <expr><name>termwinkey</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_BSL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>raw_c</name> <operator>=</operator> <call><name>ctrl_to_raw_c</name><argument_list>(<argument><expr><name>Ctrl_BSL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'N'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>term_enter_normal_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>term_paste_register</name><argument_list>(<argument><expr><name>prev_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>termwinkey</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>c</name> <operator>!=</operator> <name>termwinkey</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>



<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Ctrl_W</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ins_typebuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>REMAP_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>has_mbyte</name> <operator>&amp;&amp;</operator> <name>raw_c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name></type> <name>wc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>mb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>raw_c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>raw_c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><call><name>GetACP</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>mb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>raw_c</name> <operator>=</operator> <name>wc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>send_keys_to_term</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></argument>, <argument><expr><name>raw_c</name></expr></argument>, <argument><expr><name>mod_mask</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>raw_c</name> <operator>==</operator> <name>K_MOUSEMOVE</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>restore_cursor</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

<label><name>theend</name>:</label>
<expr_stmt><expr><name>in_terminal_loop</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>restore_cursor</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prepare_restore_cursor_props</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_normal_mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>may_move_terminal_to_buffer</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>may_toggle_cursor</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>in_terminal_loop</name> <operator>==</operator> <name>term</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_visible</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cursor_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cursor_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>set_terminal_default_colors</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cterm_fg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cterm_bg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>term_default_cterm_fg</name> <operator>=</operator> <name>cterm_fg</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>term_default_cterm_bg</name> <operator>=</operator> <name>cterm_bg</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_default_cterm_fg</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_highlight_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>syn_name2id</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_highlight_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fg</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bg</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syn_id2cterm_bg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>fg</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>term_default_cterm_fg</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_default_cterm_bg</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_highlight_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>syn_name2id</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_highlight_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fg</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bg</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syn_id2cterm_bg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>bg</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>term_default_cterm_bg</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>color2index</name><parameter_list>(<parameter><decl><type><name>VTermColor</name> <modifier>*</modifier></type><name>color</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>boldp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>red</name> <init>= <expr><name><name>color</name><operator>-&gt;</operator><name>red</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blue</name> <init>= <expr><name><name>color</name><operator>-&gt;</operator><name>blue</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>green</name> <init>= <expr><name><name>color</name><operator>-&gt;</operator><name>green</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>color</name><operator>-&gt;</operator><name>ansi_index</name></name> <operator>!=</operator> <name>VTERM_ANSI_INDEX_NONE</name></expr>)</condition>
<block>{<block_content>

<switch>switch <condition>(<expr><name><name>color</name><operator>-&gt;</operator><name>ansi_index</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><call><name>lookup_color</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>boldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
<case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><call><name>lookup_color</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>boldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
<case>case <expr><literal type="number">3</literal></expr>:</case> <return>return <expr><call><name>lookup_color</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>boldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
<case>case <expr><literal type="number">4</literal></expr>:</case> <return>return <expr><call><name>lookup_color</name><argument_list>( <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>boldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
<case>case <expr><literal type="number">5</literal></expr>:</case> <return>return <expr><call><name>lookup_color</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>boldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
<case>case <expr><literal type="number">6</literal></expr>:</case> <return>return <expr><call><name>lookup_color</name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>boldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
<case>case <expr><literal type="number">7</literal></expr>:</case> <return>return <expr><call><name>lookup_color</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>boldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
<case>case <expr><literal type="number">8</literal></expr>:</case> <return>return <expr><call><name>lookup_color</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>boldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
<case>case <expr><literal type="number">9</literal></expr>:</case> <return>return <expr><call><name>lookup_color</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>boldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
<case>case <expr><literal type="number">10</literal></expr>:</case> <return>return <expr><call><name>lookup_color</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>boldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
<case>case <expr><literal type="number">11</literal></expr>:</case> <return>return <expr><call><name>lookup_color</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>boldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
<case>case <expr><literal type="number">12</literal></expr>:</case> <return>return <expr><call><name>lookup_color</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>boldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
<case>case <expr><literal type="number">13</literal></expr>:</case> <return>return <expr><call><name>lookup_color</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>boldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
<case>case <expr><literal type="number">14</literal></expr>:</case> <return>return <expr><call><name>lookup_color</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>boldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
<case>case <expr><literal type="number">15</literal></expr>:</case> <return>return <expr><call><name>lookup_color</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>boldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
<case>case <expr><literal type="number">16</literal></expr>:</case> <return>return <expr><call><name>lookup_color</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>boldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return> 
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t_colors</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>red</name> <operator>==</operator> <name>blue</name> <operator>&amp;&amp;</operator> <name>red</name> <operator>==</operator> <name>green</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>cutoff</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x67</literal></expr>,
<expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xCB</literal></expr>,
<expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xE9</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>red</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">17</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>red</name> <operator>&gt;</operator> <literal type="number">245</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">232</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">23</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>red</name> <operator>&lt;</operator> <name><name>cutoff</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name> <operator>+</operator> <literal type="number">233</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">256</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>cutoff</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xEB</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ri</name></decl>, <decl><type ref="prev"/><name>gi</name></decl>, <decl><type ref="prev"/><name>bi</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>ri</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ri</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><operator>++</operator><name>ri</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>red</name> <operator>&lt;</operator> <name><name>cutoff</name><index>[<expr><name>ri</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>gi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>gi</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><operator>++</operator><name>gi</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>green</name> <operator>&lt;</operator> <name><name>cutoff</name><index>[<expr><name>gi</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>bi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bi</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><operator>++</operator><name>bi</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>blue</name> <operator>&lt;</operator> <name><name>cutoff</name><index>[<expr><name>bi</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">17</literal> <operator>+</operator> <name>ri</name> <operator>*</operator> <literal type="number">36</literal> <operator>+</operator> <name>gi</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <name>bi</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>vtermAttr2hl</name><parameter_list>(<parameter><decl><type><name>VTermScreenCellAttrs</name></type> <name>cellattrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cellattrs</name><operator>.</operator><name>bold</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>HL_BOLD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cellattrs</name><operator>.</operator><name>underline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>HL_UNDERLINE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cellattrs</name><operator>.</operator><name>italic</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>HL_ITALIC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cellattrs</name><operator>.</operator><name>strike</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>HL_STRIKETHROUGH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cellattrs</name><operator>.</operator><name>reverse</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>HL_INVERSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>hl2vtermAttr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>cellattr_T</name> <modifier>*</modifier></type><name>cell</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cell</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VTermScreenCellAttrs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>HL_BOLD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cell</name><operator>-&gt;</operator><name>attrs</name><operator>.</operator><name>bold</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>HL_UNDERLINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cell</name><operator>-&gt;</operator><name>attrs</name><operator>.</operator><name>underline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>HL_ITALIC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cell</name><operator>-&gt;</operator><name>attrs</name><operator>.</operator><name>italic</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>HL_STRIKETHROUGH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cell</name><operator>-&gt;</operator><name>attrs</name><operator>.</operator><name>strike</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>HL_INVERSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cell</name><operator>-&gt;</operator><name>attrs</name><operator>.</operator><name>reverse</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>cell2attr</name><parameter_list>(
<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>,
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>VTermScreenCellAttrs</name></type> <name>cellattrs</name></decl></parameter>,
<parameter><decl><type><name>VTermColor</name></type> <name>cellfg</name></decl></parameter>,
<parameter><decl><type><name>VTermColor</name></type> <name>cellbg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><call><name>vtermAttr2hl</name><argument_list>(<argument><expr><name>cellattrs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>fg</name></decl>, <decl><type ref="prev"/><name>bg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fg</name> <operator>=</operator> <call><name>gui_mch_get_rgb_color</name><argument_list>(<argument><expr><name><name>cellfg</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>cellfg</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>cellfg</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <call><name>gui_mch_get_rgb_color</name><argument_list>(<argument><expr><name><name>cellbg</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>cellbg</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>cellbg</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>get_gui_attr_idx</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><name>p_tgc</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>fg</name></decl>, <decl><type ref="prev"/><name>bg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fg</name> <operator>=</operator> <call><name>gui_get_rgb_color_cmn</name><argument_list>(<argument><expr><name><name>cellfg</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>cellfg</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>cellfg</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <call><name>gui_get_rgb_color_cmn</name><argument_list>(<argument><expr><name><name>cellbg</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>cellbg</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>cellbg</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>get_tgc_attr_idx</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bold</name> <init>= <expr><name>MAYBE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fg</name> <init>= <expr><call><name>color2index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cellfg</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bold</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bg</name> <init>= <expr><call><name>color2index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cellbg</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bold</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fg</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>bg</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>t_colors</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>wincolor_fg</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wincolor_bg</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_wcr</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>syn_name2id</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wcr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syn_id2cterm_bg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wincolor_fg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wincolor_bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fg</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wincolor_fg</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fg</name> <operator>=</operator> <name>wincolor_fg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cterm_fg</name> <init>= <expr><call><name>get_default_cterm_fg</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cterm_fg</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fg</name> <operator>=</operator> <name>cterm_fg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bg</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wincolor_bg</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <name>wincolor_bg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cterm_bg</name> <init>= <expr><call><name>get_default_cterm_bg</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cterm_bg</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <name>cterm_bg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>bold</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>HL_BOLD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>get_cterm_attr_idx</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_dirty_snapshot</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_snapshot</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>term</name><operator>-&gt;</operator><name>tl_normal_mode</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>profile_setlimit</name><argument_list>(<argument><expr><literal type="number">100L</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_timer_due</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_timer_set</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>handle_damage</name><parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>rect</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><operator>(</operator><name>term_T</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_start</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_start</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_end</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_end</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_dirty_snapshot</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_buf_later</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr></argument>, <argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>term_scroll_up</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_curwin</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermColor</name></type> <name>fg</name></decl>, <decl><type ref="prev"/><name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermScreenCellAttrs</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clear_attr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>for_all_windows_and_curwin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>did_curwin</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>vterm_state_get_default_colors</name><argument_list>(<argument><expr><call><name>vterm_obtain_state</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>fg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_attr</name> <operator>=</operator> <call><name>cell2attr</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_del_lines</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>start_row</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>clear_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>handle_moverect</name><parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>VTermRect</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><operator>(</operator><name>term_T</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>src</name><operator>.</operator><name>start_row</name></name> <operator>-</operator> <name><name>dest</name><operator>.</operator><name>start_row</name></name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>dest</name><operator>.</operator><name>start_col</name></name> <operator>==</operator> <name><name>src</name><operator>.</operator><name>start_col</name></name>
<operator>&amp;&amp;</operator> <name><name>dest</name><operator>.</operator><name>end_col</name></name> <operator>==</operator> <name><name>src</name><operator>.</operator><name>end_col</name></name>
<operator>&amp;&amp;</operator> <name><name>dest</name><operator>.</operator><name>start_row</name></name> <operator>&lt;</operator> <name><name>src</name><operator>.</operator><name>start_row</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dest</name><operator>.</operator><name>start_row</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_postponed_scroll</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>term_scroll_up</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>dest</name><operator>.</operator><name>start_row</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_start</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_start</name></name></expr></argument>, <argument><expr><name><name>dest</name><operator>.</operator><name>start_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_end</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_end</name></name></expr></argument>, <argument><expr><name><name>dest</name><operator>.</operator><name>end_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_dirty_snapshot</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>redraw_buf_later</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>handle_movecursor</name><parameter_list>(
<parameter><decl><type><name>VTermPos</name></type> <name>pos</name></decl></parameter>,
<parameter><decl><type><name>VTermPos</name> <name>oldpos</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>visible</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><operator>(</operator><name>term_T</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_curwin</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_visible</name></name> <operator>=</operator> <name>visible</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>for_all_windows_and_curwin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>did_curwin</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>position_cursor</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name> <operator>==</operator> <name>curbuf</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>term</name><operator>-&gt;</operator><name>tl_normal_mode</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>may_toggle_cursor</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_cursor</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_visible</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>handle_settermprop</name><parameter_list>(
<parameter><decl><type><name>VTermProp</name></type> <name>prop</name></decl></parameter>,
<parameter><decl><type><name>VTermValue</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><operator>(</operator><name>term_T</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>prop</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VTERM_PROP_TITLE</name></expr>:</case>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>value</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_title</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_arg0_cmd</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_arg0_cmd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>value</name><operator>-&gt;</operator><name>string</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_arg0_cmd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_title</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><literal type="string">" - "</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>value</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_title</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>enc_codepage</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MultiByteToWideChar_alloc</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>value</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>WideCharToMultiByte_alloc</name><argument_list>(<argument><expr><name>enc_codepage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_title</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_title</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>value</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_status_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>VTERM_PROP_CURSORVISIBLE</name></expr>:</case>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_visible</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>boolean</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>may_toggle_cursor</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VTERM_PROP_CURSORBLINK</name></expr>:</case>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_blink</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>boolean</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>may_set_cursor_props</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VTERM_PROP_CURSORSHAPE</name></expr>:</case>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_shape</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>may_set_cursor_props</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VTERM_PROP_CURSORCOLOR</name></expr>:</case>
<expr_stmt><expr><call><name>cursor_color_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_color</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name><operator>*</operator><operator>)</operator><name><name>value</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>may_set_cursor_props</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>VTERM_PROP_ALTSCREEN</name></expr>:</case>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_using_altscreen</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>boolean</name></name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>handle_resize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><operator>(</operator><name>term_T</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name> <operator>=</operator> <name>cols</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm_size_changed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm_size_changed</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>win_setheight_win</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_setwidth_win</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>redraw_buf_later</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>limit_scrollback</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>update_buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>&gt;=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name><operator>-&gt;</operator><name>b_p_twsl</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>todo</name> <init>= <expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name><operator>-&gt;</operator><name>b_p_twsl</name></name> <operator>/</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>todo</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>sb_line_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name>i</name><operator>)</operator><operator>-&gt;</operator><name>sb_cells</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>update_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-=</operator> <name>todo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>sb_line_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name>todo</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb_line_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>update_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_scrolled</name></name> <operator>-=</operator> <name>todo</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>handle_pushline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermScreenCell</name> <modifier>*</modifier></type><name>cells</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><operator>(</operator><name>term_T</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>update_buffer</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_normal_mode</name></name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_postponed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>update_buffer</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><call><name>cleanup_scrollback</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>update_buffer</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>limit_scrollback</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>, <argument><expr><name>update_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>cellattr_T</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>text_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sb_line_T</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cellattr_T</name></type> <name>fill_attr</name> <init>= <expr><name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name></name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>cells</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cell2cellattr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cells</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fill_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>cellattr_T</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>col</name> <operator>+=</operator> <name><name>cells</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name>width</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>MB_MAXBYTES</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>cells</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><ternary><condition><expr><name>c</name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>cell2cellattr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cells</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>update_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>text_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>text_len</name> <operator>=</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>text</name> <operator>+</operator> <name>text_len</name><operator>)</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>update_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_scrollback_line_to_buffer</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>text_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <operator>(</operator><name>sb_line_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sb_cells</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sb_fill_attr</name></name> <operator>=</operator> <name>fill_attr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>update_buffer</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sb_text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_scrolled</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sb_text</name></name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_postponed_scrollback</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_postponed</name><operator>.</operator><name>ga_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Moving postponed scrollback to scrollback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>cleanup_scrollback</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_postponed</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sb_line_T</name> <modifier>*</modifier></type><name>pp_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sb_line_T</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pp_line</name> <operator>=</operator> <operator>(</operator><name>sb_line_T</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_postponed</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <name><name>pp_line</name><operator>-&gt;</operator><name>sb_text</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>text</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>add_scrollback_line_to_buffer</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>pp_line</name><operator>-&gt;</operator><name>sb_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <operator>(</operator><name>sb_line_T</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_data</name></name>
<operator>+</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>=</operator> <name><name>pp_line</name><operator>-&gt;</operator><name>sb_cols</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sb_cells</name></name> <operator>=</operator> <name><name>pp_line</name><operator>-&gt;</operator><name>sb_cells</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sb_fill_attr</name></name> <operator>=</operator> <name><name>pp_line</name><operator>-&gt;</operator><name>sb_fill_attr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sb_text</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_scrolled</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_postponed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>limit_scrollback</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VTermScreenCallbacks</name></type> <name>screen_callbacks</name> <init>= <expr><block>{
<expr><name>handle_damage</name></expr>, 
<expr><name>handle_moverect</name></expr>, 
<expr><name>handle_movecursor</name></expr>, 
<expr><name>handle_settermprop</name></expr>, 
<expr><name>NULL</name></expr>, 
<expr><name>handle_resize</name></expr>, 
<expr><name>handle_pushline</name></expr>, 
<expr><name>NULL</name></expr> 
}</block></expr></init></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>term_after_channel_closed</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>term</name><operator>-&gt;</operator><name>tl_normal_mode</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fnum</name> <init>= <expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cleanup_vterm</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_finish</name></name> <operator>==</operator> <name>TL_FINISH_CLOSE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>aco_save_T</name></type> <name>aco</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_set_w_closing</name> <init>= <expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>pwin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>popup_is_popup</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>curbuf</name> <operator>==</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pwin</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>win_valid</name><argument_list>(<argument><expr><name>prevwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>prevwin</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>only_one_window</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>exarg_T</name></type> <name>ea</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ea</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ex_quit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"terminal job finished, closing window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aucmd_prepbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>==</operator> <name>aucmd_win</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_set_w_closing</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_set_w_closing</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_closing</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>do_bufdel</name><argument_list>(<argument><expr><name>DOBUF_WIPE</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fnum</name></expr></argument>, <argument><expr><name>fnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_set_w_closing</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_closing</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>aucmd_restbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>pwin</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popup_close_with_retval</name><argument_list>(<argument><expr><name>pwin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_finish</name></name> <operator>==</operator> <name>TL_FINISH_OPEN</name>
<operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"terminal job finished, opening window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>term</name><operator>-&gt;</operator><name>tl_opencmd</name></name> <operator>==</operator> <name>NULL</name></expr>
?</condition><then> <expr><literal type="string">"botright sbuf %d"</literal></expr>
</then><else>: <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>tl_opencmd</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>fnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"terminal job finished"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>redraw_buf_and_status_later</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>int</name></type>
<name>may_close_term_popup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>popup_is_popup</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>term_job_running</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>pwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>win_valid</name><argument_list>(<argument><expr><name>prevwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>prevwin</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>popup_close_with_retval</name><argument_list>(<argument><expr><name>pwin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>void</name></type>
<name>term_channel_closed</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>next_term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_one</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>term</name> <operator>=</operator> <name>first_term</name></expr>;</init> <condition><expr><name>term</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>term</name> <operator>=</operator> <name>next_term</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>next_term</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>==</operator> <name><name>ch</name><operator>-&gt;</operator><name>ch_job</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>term</name><operator>-&gt;</operator><name>tl_channel_closed</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_channel_closed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_one</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_status_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_out_fd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_out_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_out_fd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>updating_screen</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_channel_recently_closed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>term_after_channel_closed</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>next_term</name> <operator>=</operator> <name>first_term</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>did_one</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>redraw_statuslines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ins_char_typebuf</name><argument_list>(<argument><expr><name>K_IGNORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>typebuf_was_filled</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>term</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>term</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>==</operator> <name><name>ch</name><operator>-&gt;</operator><name>ch_job</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>update_cursor</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_visible</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>term_check_channel_closed_recently</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>next_term</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>term</name> <operator>=</operator> <name>first_term</name></expr>;</init> <condition><expr><name>term</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>term</name> <operator>=</operator> <name>next_term</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>next_term</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_channel_recently_closed</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_channel_recently_closed</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>term_after_channel_closed</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next_term</name> <operator>=</operator> <name>first_term</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>term_line2screenline</name><parameter_list>(
<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>,
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl></parameter>,
<parameter><decl><type><name>VTermPos</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>max_col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><call><name>screen_get_current_line_off</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <name>max_col</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>VTermScreenCell</name></type> <name>cell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vterm_screen_get_cell</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><operator>*</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Screen_mco</name>
<operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>VTERM_MAX_CHARS_PER_CELL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>||</operator> <operator>(</operator><name>Screen_mco</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>ScreenLinesC</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>mb</name><index>[<expr><name>MB_MAXBYTES</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name></type> <name>wc</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><call><name>GetACP</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>mb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name><name>mb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cell</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>mb_ptr2cells</name><argument_list>(<argument><expr><name>mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <call><name>cell2attr</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>cell</name><operator>.</operator><name>attrs</name></name></expr></argument>, <argument><expr><name><name>cell</name><operator>.</operator><name>fg</name></name></expr></argument>, <argument><expr><name><name>cell</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>off</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cell</name><operator>.</operator><name>width</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>||</operator> <operator>!</operator><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>off</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_system_term</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VTermPos</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>screen</name> <operator>=</operator> <call><name>vterm_obtain_screen</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_toprow</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>Rows</name> <operator>-</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_toprow</name></name><operator>)</operator> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_end</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_p_more</name> <init>= <expr><name>p_more</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_more</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_more</name> <operator>=</operator> <name>save_p_more</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>term</name><operator>-&gt;</operator><name>tl_toprow</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<for>for <control>(<init><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_start</name></name></expr>;</init> <condition><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_end</name></name>
<operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name>Rows</name></expr>;</condition> <incr><expr><operator>++</operator><name><name>pos</name><operator>.</operator><name>row</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>max_col</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>Columns</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>term_line2screenline</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>max_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>screen_line</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_toprow</name></name> <operator>+</operator> <name><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name>Columns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_start</name></name> <operator>=</operator> <name>MAX_ROW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>int</name></type>
<name>term_do_update_window</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_term</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>term</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>term</name><operator>-&gt;</operator><name>tl_normal_mode</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>term_update_window</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_term</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vterm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermPos</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>, <decl><type ref="prev"/><name>cols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>newrows</name></decl>, <decl><type ref="prev"/><name>newcols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>twp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vterm</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>screen</name> <operator>=</operator> <call><name>vterm_obtain_screen</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>vterm_obtain_state</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>&gt;</operator> <name>SOME_VALID</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_end</name></name> <operator>=</operator> <name>MAX_ROW</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_postponed_scroll</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_postponed_scroll</name></name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name> <operator>/</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><call><name>term_scroll_up</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_postponed_scroll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_postponed_scroll</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>minsize</name> <operator>=</operator> <call><name>parse_termwinsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newrows</name> <operator>=</operator> <literal type="number">99999</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>newcols</name> <operator>=</operator> <literal type="number">99999</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>twp</name> <operator>=</operator> <name>firstwin</name></expr>;</init> <condition>;</condition> <incr><expr><name>twp</name> <operator>=</operator> <name><name>twp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control>
<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wwp</name> <init>= <expr><ternary><condition><expr><name>twp</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>curwin</name></expr> </then><else>: <expr><name>twp</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>wwp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>newrows</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>newrows</name></expr></argument>, <argument><expr><name><name>wwp</name><operator>-&gt;</operator><name>w_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newcols</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>newcols</name></expr></argument>, <argument><expr><name><name>wwp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>twp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>newrows</name> <operator>==</operator> <literal type="number">99999</literal> <operator>||</operator> <name>newcols</name> <operator>==</operator> <literal type="number">99999</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>newrows</name> <operator>=</operator> <ternary><condition><expr><name>rows</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>newrows</name></expr> </then><else>: <expr><ternary><condition><expr><name>minsize</name></expr> ?</condition><then> <expr><call><name>MAX</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>newrows</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>rows</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>newcols</name> <operator>=</operator> <ternary><condition><expr><name>cols</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>newcols</name></expr> </then><else>: <expr><ternary><condition><expr><name>minsize</name></expr> ?</condition><then> <expr><call><name>MAX</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><name>newcols</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>cols</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name> <operator>!=</operator> <name>newrows</name> <operator>||</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name> <operator>!=</operator> <name>newcols</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm_size_changed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vterm_set_size</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><name>newrows</name></expr></argument>, <argument><expr><name>newcols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>, <argument><expr><literal type="string">"Resizing terminal to %d lines"</literal></expr></argument>,
<argument><expr><name>newrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>term_report_winsize</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>newrows</name></expr></argument>, <argument><expr><name>newcols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>term</name> <operator>!=</operator> <name>in_terminal_loop</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>may_move_terminal_to_buffer</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>vterm_state_get_cursorpos</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>position_cursor</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_start</name></name></expr>;</init> <condition><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_end</name></name>
<operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</condition> <incr><expr><operator>++</operator><name><name>pos</name><operator>.</operator><name>row</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>max_col</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>term_line2screenline</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>max_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>screen_line</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <name><name>pos</name><operator>.</operator><name>row</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>+</operator> <call><name>winbar_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<argument><expr><ternary><condition><expr><call><name>popup_is_popup</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SLF_POPUP</name></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_start</name></name> <operator>=</operator> <name>MAX_ROW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_dirty_row_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>term_is_finished</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>==</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>term_show_buffer</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>term</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_normal_mode</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>term_change_in_curbuf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>term_is_finished</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free_scrollback</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_buf_later</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"buftype"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>OPT_FREE</name><operator>|</operator><name>OPT_LOCAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>term_get_attr</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sb_line_T</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cellattr_T</name> <modifier>*</modifier></type><name>cellattr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cellattr</name> <operator>=</operator> <operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <operator>(</operator><name>sb_line_T</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name><name>line</name><operator>-&gt;</operator><name>sb_cols</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cellattr</name> <operator>=</operator> <operator>&amp;</operator><name><name>line</name><operator>-&gt;</operator><name>sb_fill_attr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cellattr</name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>sb_cells</name></name> <operator>+</operator> <name>col</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>cell2attr</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>cellattr</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>, <argument><expr><name><name>cellattr</name><operator>-&gt;</operator><name>fg</name></name></expr></argument>, <argument><expr><name><name>cellattr</name><operator>-&gt;</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>cterm_color2vterm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>, <parameter><decl><type><name>VTermColor</name> <modifier>*</modifier></type><name>rgb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cterm_color2rgb</name><argument_list>(<argument><expr><name>nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rgb</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rgb</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rgb</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rgb</name><operator>-&gt;</operator><name>ansi_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_default_colors</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VTermColor</name> <modifier>*</modifier></type><name>fg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fgval</name></decl>, <decl><type ref="prev"/><name>bgval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name><operator>.</operator><name>attrs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VTermScreenCellAttrs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fg</name> <operator>=</operator> <operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name><operator>.</operator><name>fg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name><operator>.</operator><name>bg</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_bg</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>fgval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bgval</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>fgval</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bgval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name><name>fg</name><operator>-&gt;</operator><name>green</name></name> <operator>=</operator> <name><name>fg</name><operator>-&gt;</operator><name>blue</name></name> <operator>=</operator> <name>fgval</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bg</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name><name>bg</name><operator>-&gt;</operator><name>green</name></name> <operator>=</operator> <name><name>bg</name><operator>-&gt;</operator><name>blue</name></name> <operator>=</operator> <name>bgval</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>ansi_index</name></name> <operator>=</operator> <name><name>bg</name><operator>-&gt;</operator><name>ansi_index</name></name> <operator>=</operator> <name>VTERM_ANSI_INDEX_DEFAULT</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_wcr</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wcr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><call><name>term_get_highlight_name</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>p_tgc</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VTP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>p_tgc</name> <operator>&amp;&amp;</operator> <name>t_colors</name> <operator>&gt;=</operator> <literal type="number">256</literal><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>fg_rgb</name> <init>= <expr><name>INVALCOLOR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>bg_rgb</name> <init>= <expr><name>INVALCOLOR</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syn_id2colors</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fg_rgb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bg_rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fg_rgb</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fg_rgb</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bg_rgb</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bg_rgb</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fg_rgb</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fg_rgb</name> <operator>=</operator> <name>cterm_normal_fg_gui_color</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bg_rgb</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bg_rgb</name> <operator>=</operator> <name>cterm_normal_bg_gui_color</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>fg_rgb</name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>long_u</name></type> <name>rgb</name> <init>= <expr><call><name>GUI_MCH_GET_RGB</name><argument_list>(<argument><expr><name>fg_rgb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>green</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>blue</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>rgb</name> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bg_rgb</name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>long_u</name></type> <name>rgb</name> <init>= <expr><call><name>GUI_MCH_GET_RGB</name><argument_list>(<argument><expr><name>bg_rgb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bg</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bg</name><operator>-&gt;</operator><name>green</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bg</name><operator>-&gt;</operator><name>blue</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>rgb</name> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name>id</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>t_colors</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cterm_fg</name> <init>= <expr><call><name>get_default_cterm_fg</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cterm_bg</name> <init>= <expr><call><name>get_default_cterm_bg</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cterm_fg</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cterm_color2vterm</name><argument_list>(<argument><expr><name>cterm_fg</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cterm_bg</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cterm_color2vterm</name><argument_list>(<argument><expr><name>cterm_bg</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>cterm_normal_fg_color</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>cterm_color2vterm</name><argument_list>(<argument><expr><name>cterm_normal_fg_color</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>fg</name><operator>-&gt;</operator><name>red</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name><name>fg</name><operator>-&gt;</operator><name>blue</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>blue</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>term_get_fg_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fg</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fg</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fg</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>cterm_normal_bg_color</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>cterm_color2vterm</name><argument_list>(<argument><expr><name>cterm_normal_bg_color</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>fg</name><operator>-&gt;</operator><name>red</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name><name>fg</name><operator>-&gt;</operator><name>blue</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fg</name><operator>-&gt;</operator><name>blue</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>term_get_bg_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bg</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bg</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bg</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_vterm_palette</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vterm</name></decl></parameter>, <parameter><decl><type><name>long_u</name> <modifier>*</modifier></type><name>rgb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>vterm_obtain_state</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>VTermColor</name></type> <name>color</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>color</name><operator>.</operator><name>red</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>rgb</name><index>[<expr><name>index</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>green</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>rgb</name><index>[<expr><name>index</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>blue</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>rgb</name><index>[<expr><name>index</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vterm_state_set_palette_color</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_ansi_colors_list</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vterm</name></decl></parameter>, <parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long_u</name></type> <name><name>rgb</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>li</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</init> <condition><expr><name>li</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr><operator>,</operator> <expr><name>n</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>color_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>guicolor</name></decl>;</decl_stmt>

<expr_stmt><expr><name>color_name</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>color_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>guicolor</name> <operator>=</operator> <call><name>GUI_GET_COLOR</name><argument_list>(<argument><expr><name>color_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>guicolor</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rgb</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>GUI_MCH_GET_RGB</name><argument_list>(<argument><expr><name>guicolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">16</literal> <operator>||</operator> <name>li</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_vterm_palette</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><name>rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_vterm_ansi_colors</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vterm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>find_var</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"g:terminal_ansi_colors"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name>
<operator>||</operator> <name><name>var</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>var</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_first</name></name> <operator>==</operator> <operator>&amp;</operator><name>range_list_item</name>
<operator>||</operator> <call><name>set_ansi_colors_list</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"g:terminal_ansi_colors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_drop_command</name><parameter_list>(<parameter><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>opt_item</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>li_next</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bufnr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>exarg_T</name></type> <name>ea</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bufnr</name> <operator>=</operator> <call><name>buflist_add</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>BLN_LISTED</name> <operator>|</operator> <name>BLN_NOOPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_fnum</name></name> <operator>==</operator> <name>bufnr</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>goto_tabpage_win</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ea</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_item</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>opt_item</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name>
<operator>&amp;&amp;</operator> <name><name>opt_item</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name><name>opt_item</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ff"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"fileformat"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_ff_value</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Invalid ff argument to drop: %s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>force_ff</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"enc"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"encoding"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ea</name><operator>.</operator><name>cmd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ea</name><operator>.</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"sbuf ++enc=%s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>force_enc</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tofree</name> <operator>=</operator> <name><name>ea</name><operator>.</operator><name>cmd</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bad"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_bad_opt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bin"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>force_bin</name></name> <operator>=</operator> <name>FORCE_BIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"binary"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>force_bin</name></name> <operator>=</operator> <name>FORCE_BIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"nobin"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>force_bin</name></name> <operator>=</operator> <name>FORCE_NOBIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"nobinary"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>force_bin</name></name> <operator>=</operator> <name>FORCE_NOBIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ea</name><operator>.</operator><name>cmd</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"split"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>cmdidx</name></name> <operator>=</operator> <name>CMD_split</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ex_splitview</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_permitted_term_api</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>pat</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pat</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_call_command</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>funcexe_T</name></type> <name>funcexe</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>li_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Missing function arguments for call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_permitted_term_api</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_api</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Unpermitted function: %s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>li_next</name><operator>-&gt;</operator><name>li_tv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>funcexe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>funcexe</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>funcexe</name><operator>.</operator><name>firstline</name></name> <operator>=</operator> <literal type="number">1L</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>funcexe</name><operator>.</operator><name>lastline</name></name> <operator>=</operator> <literal type="number">1L</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>funcexe</name><operator>.</operator><name>evaluate</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>call_func</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>funcexe</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Function %s called"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Calling function %s failed"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_osc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cmdlen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><operator>(</operator><name>term_T</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>js_read_T</name></type> <name>reader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><ternary><condition><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr>
</then><else>: <expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>cmdlen</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"51;"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>reader</name><operator>.</operator><name>js_buf</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>command</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>cmdlen</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>.</operator><name>js_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>reader</name><operator>.</operator><name>js_fill</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reader</name><operator>.</operator><name>js_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>json_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name>
<operator>&amp;&amp;</operator> <name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name>
<operator>&amp;&amp;</operator> <name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_first</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Missing command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><operator>++</operator><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name><operator>-&gt;</operator><name>b_locked</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Missing argument for %s"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"drop"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_drop_command</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"call"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_call_command</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Invalid command received: %s"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>--</operator><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name><operator>-&gt;</operator><name>b_locked</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Invalid JSON received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>reader</name><operator>.</operator><name>js_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_csi</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>leader</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name><name>args</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>intermed</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>command</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><operator>(</operator><name>term_T</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>command</name> <operator>!=</operator> <literal type="char">'t'</literal> <operator>||</operator> <name>argcount</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ui_get_winpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>


<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>*</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="string">"\x1b[3;%d;%dt"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_send</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>, <argument><expr><call><name>get_tty_part</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VTermParserCallbacks</name></type> <name>parser_fallbacks</name> <init>= <expr><block>{
<expr><name>NULL</name></expr>, 
<expr><name>NULL</name></expr>, 
<expr><name>NULL</name></expr>, 
<expr><name>parse_csi</name></expr>, 
<expr><name>parse_osc</name></expr>, 
<expr><name>NULL</name></expr>, 
<expr><name>NULL</name></expr> 
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>vterm_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>alloc_clear</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vterm_memfree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VTermAllocatorFunctions</name></type> <name>vterm_allocator</name> <init>= <expr><block>{
<expr><operator>&amp;</operator><name>vterm_malloc</name></expr>,
<expr><operator>&amp;</operator><name>vterm_memfree</name></expr>
}</block></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>create_vterm</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vterm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermValue</name></type> <name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vterm</name> <operator>=</operator> <call><name>vterm_new_with_allocator</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vterm_allocator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>=</operator> <name>vterm</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vterm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>vterm_obtain_state</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>screen</name> <operator>=</operator> <call><name>vterm_obtain_screen</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>screen</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vterm_free</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vterm_screen_set_callbacks</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_callbacks</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_set_utf8</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_default_colors</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_state_set_default_colors</name><argument_list>(
<argument><expr><name>state</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name><operator>.</operator><name>fg</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t_colors</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><call><name>vterm_state_set_bold_highbright</name><argument_list>(<argument><expr><call><name>vterm_obtain_state</name><argument_list>(<argument><expr><name>vterm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>vterm_screen_reset</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vterm_screen_enable_altscreen</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>GetCaretBlinkTime</name><argument_list>()</argument_list></call> <operator>==</operator> <name>INFINITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>boolean</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>boolean</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>boolean</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>vterm_state_set_termprop</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORBLINK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vterm_state_set_unrecognised_fallbacks</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parser_fallbacks</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>term_update_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_term</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>init_default_colors</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vterm_state_set_default_colors</name><argument_list>(
<argument><expr><call><name>vterm_obtain_state</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name><operator>.</operator><name>fg</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>term_get_status_text</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_status_text</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>txt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_normal_mode</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>term_job_running</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>txt</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Terminal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>txt</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Terminal-finished"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_title</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>txt</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_title</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>term_none_open</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>txt</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>term_job_running</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>txt</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"running"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>txt</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"finished"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">9</literal> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_status_text</name></name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_status_text</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>tl_status_text</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s [%s]"</literal></expr></argument>,
<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_buffer</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>term</name><operator>-&gt;</operator><name>tl_status_text</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>set_ref_in_term</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>abort</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>term</name> <operator>=</operator> <name>first_term</name></expr>;</init> <condition><expr><operator>!</operator><name>abort</name> <operator>&amp;&amp;</operator> <name>term</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>term</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_JOB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_job</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>abort</name> <operator>||</operator> <call><name>set_ref_in_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<return>return <expr><name>abort</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>buf_T</name> <modifier>*</modifier></type>
<name>term_get_buf</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>where</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>++</operator><name>emsg_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>tv_get_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>emsg_off</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%s: invalid buffer argument"</literal></expr></argument>, <argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>same_color</name><parameter_list>(<parameter><decl><type><name>VTermColor</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>VTermColor</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>red</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>red</name></name>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>green</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>green</name></name>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>blue</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>blue</name></name>
<operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>ansi_index</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>ansi_index</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_term_color</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>VTermColor</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%02x%02x%02x%d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>color</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>color</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>color</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>color</name><operator>-&gt;</operator><name>ansi_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>























<function><type><name>void</name></type>
<name>f_term_dumpwrite</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_dumpwrite()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stat_T</name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermPos</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermScreenCell</name></type> <name>prev_cell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermPos</name></type> <name>cursor_pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>term</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E958: Job already finished"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_DICT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>max_height</name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"rows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max_width</name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"columns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E953: File exists: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fname</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><name>fd</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><name>WRITEBIN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notcreate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>fname</name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&lt;empty&gt;"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>fname</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prev_cell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prev_cell</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>screen</name> <operator>=</operator> <call><name>vterm_obtain_screen</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>vterm_obtain_state</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vterm_state_get_cursorpos</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>max_height</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pos</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name>max_height</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name><name>pos</name><operator>.</operator><name>row</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>repeat</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>max_width</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name>max_width</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name><name>pos</name><operator>.</operator><name>col</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>VTermScreenCell</name></type> <name>cell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>same_attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>same_chars</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_cursor_pos</name> <init>= <expr><operator>(</operator><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name><name>cursor_pos</name><operator>.</operator><name>col</name></name>
<operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name><name>cursor_pos</name><operator>.</operator><name>row</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vterm_screen_get_cell</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VTERM_MAX_CHARS_PER_CELL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pc</name> <init>= <expr><name><name>prev_cell</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pc</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><name>pc</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>same_chars</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name>pc</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>same_attr</name> <operator>=</operator> <call><name>vtermAttr2hl</name><argument_list>(<argument><expr><name><name>cell</name><operator>.</operator><name>attrs</name></name></expr></argument>)</argument_list></call>
<operator>==</operator> <call><name>vtermAttr2hl</name><argument_list>(<argument><expr><name><name>prev_cell</name><operator>.</operator><name>attrs</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>same_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cell</name><operator>.</operator><name>fg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prev_cell</name><operator>.</operator><name>fg</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>same_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cell</name><operator>.</operator><name>bg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prev_cell</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>same_chars</name> <operator>&amp;&amp;</operator> <name><name>cell</name><operator>.</operator><name>width</name></name> <operator>==</operator> <name><name>prev_cell</name><operator>.</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name>same_attr</name>
<operator>&amp;&amp;</operator> <operator>!</operator><name>is_cursor_pos</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>repeat</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>repeat</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"@%d"</literal></expr></argument>, <argument><expr><name>repeat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>repeat</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_cursor_pos</name></expr> ?</condition><then> <expr><literal type="string">"&gt;"</literal></expr> </then><else>: <expr><literal type="string">"|"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>charbuf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VTERM_MAX_CHARS_PER_CELL</name>
<operator>&amp;&amp;</operator> <name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>charbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>charbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>cell</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <name><name>prev_cell</name><operator>.</operator><name>width</name></name> <operator>||</operator> <operator>!</operator><name>same_attr</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cell</name><operator>.</operator><name>width</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>same_attr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"&amp;"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>vtermAttr2hl</name><argument_list>(<argument><expr><name><name>cell</name><operator>.</operator><name>attrs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>same_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cell</name><operator>.</operator><name>fg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prev_cell</name><operator>.</operator><name>fg</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"&amp;"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"#"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_term_color</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cell</name><operator>.</operator><name>fg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>same_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cell</name><operator>.</operator><name>bg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prev_cell</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"&amp;"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"#"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_term_color</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cell</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_cell</name> <operator>=</operator> <name>cell</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cell</name><operator>.</operator><name>width</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>repeat</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"@%d"</literal></expr></argument>, <argument><expr><name>repeat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_is_corrupt</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"CORRUPT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>append_cell</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>cellattr_T</name> <modifier>*</modifier></type><name>cell</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>cellattr_T</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>)</operator> <operator>=</operator> <operator>*</operator><name>cell</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>read_dump_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name> <modifier>*</modifier></type><name>cursor_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga_text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga_cell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prev_char</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cellattr_T</name></type> <name>cell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cellattr_T</name></type> <name>empty_cell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_cells</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start_row</name> <init>= <expr><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_text</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">90</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_cell</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cellattr_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">90</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>empty_cell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>empty_cell</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cursor_pos</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cursor_pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ga_text</name><operator>.</operator><name>ga_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dump_is_corrupt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>sb_line_T</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><operator>(</operator><name>sb_line_T</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_data</name></name>
<operator>+</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>max_cells</name> <operator>&lt;</operator> <name><name>ga_cell</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_cells</name> <operator>=</operator> <name><name>ga_cell</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>=</operator> <name><name>ga_cell</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sb_cells</name></name> <operator>=</operator> <name><name>ga_cell</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>sb_fill_attr</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_text</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>, <argument><expr><name><name>ga_text</name><operator>.</operator><name>ga_data</name></name></expr></argument>,
<argument><expr><name><name>ga_text</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>ga_text</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'|'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prev_len</name> <init>= <expr><name><name>ga_text</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cursor_pos</name><operator>-&gt;</operator><name>row</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dump_is_corrupt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>cursor_pos</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <name>start_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cursor_pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>ga_cell</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_text</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'|'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'&gt;'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'@'</literal>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>EOF</name> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_text</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>prev_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ga_text</name><operator>.</operator><name>ga_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev_char</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga_text</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name>prev_len</name></expr></argument>,
<argument><expr><name><name>ga_text</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <name>prev_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'@'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'|'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'&gt;'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>

</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>is_bg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cell</name><operator>.</operator><name>width</name></name> <operator>=</operator> <ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <name>attr</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>hl2vtermAttr</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>is_bg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>is_bg</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>is_bg</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>red</name></decl>, <decl><type ref="prev"/><name>green</name></decl>, <decl><type ref="prev"/><name>blue</name></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>red</name> <operator>=</operator> <call><name>hex2nr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>red</name> <operator>=</operator> <operator>(</operator><name>red</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>hex2nr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>green</name> <operator>=</operator> <call><name>hex2nr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>green</name> <operator>=</operator> <operator>(</operator><name>green</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>hex2nr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blue</name> <operator>=</operator> <call><name>hex2nr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blue</name> <operator>=</operator> <operator>(</operator><name>blue</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>hex2nr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dump_is_corrupt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name>index</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>is_bg</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cell</name><operator>.</operator><name>bg</name><operator>.</operator><name>red</name></name> <operator>=</operator> <name>red</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cell</name><operator>.</operator><name>bg</name><operator>.</operator><name>green</name></name> <operator>=</operator> <name>green</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cell</name><operator>.</operator><name>bg</name><operator>.</operator><name>blue</name></name> <operator>=</operator> <name>blue</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cell</name><operator>.</operator><name>bg</name><operator>.</operator><name>ansi_index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>cell</name><operator>.</operator><name>fg</name><operator>.</operator><name>red</name></name> <operator>=</operator> <name>red</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cell</name><operator>.</operator><name>fg</name><operator>.</operator><name>green</name></name> <operator>=</operator> <name>green</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cell</name><operator>.</operator><name>fg</name><operator>.</operator><name>blue</name></name> <operator>=</operator> <name>blue</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cell</name><operator>.</operator><name>fg</name><operator>.</operator><name>ansi_index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dump_is_corrupt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dump_is_corrupt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dump_is_corrupt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>append_cell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_cell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cell</name><operator>.</operator><name>width</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>append_cell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_cell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>empty_cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prev_char</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dump_is_corrupt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>count</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<while>while <condition>(<expr><name>count</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_text</name></expr></argument>, <argument><expr><name>prev_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_cell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_cell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>dump_is_corrupt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ga_text</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>dump_is_corrupt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_text</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>, <argument><expr><name><name>ga_text</name><operator>.</operator><name>ga_data</name></name></expr></argument>,
<argument><expr><name><name>ga_text</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>prev_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>max_cells</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>get_separator</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>text_width</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><name>text_width</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>textline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fname_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>fname</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>off</name></decl>;</decl_stmt>

<expr_stmt><expr><name>textline</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>width</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>textline</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fname_size</name> <operator>=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fname_size</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>text_width</name></expr></argument>, <argument><expr><name>fname_size</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>fname_size</name> <operator>&gt;</operator> <name>width</name> <operator>-</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>gettail</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fname_size</name> <operator>=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>fname_size</name> <operator>&gt;</operator> <name>width</name> <operator>-</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fname_size</name> <operator>=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>width</name> <operator>-</operator> <name>fname_size</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>textline</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>textline</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>textline</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>textline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>textline</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>width</name> <operator>-</operator> <name>fname_size</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>textline</name><index>[<expr><name>off</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>textline</name><index>[<expr><name>off</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<return>return <expr><name>textline</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>term_load_dump</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_diff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>jobopt_T</name></type> <name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf1</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf2</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname_tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>textline</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>fname1</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_diff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fname2</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fname1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>do_diff</name> <operator>&amp;&amp;</operator> <name>fname2</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fd1</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname1</name></expr></argument>, <argument><expr><name>READBIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd1</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notread</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_diff</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>fd2</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname2</name></expr></argument>, <argument><expr><name>READBIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd2</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notread</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><ternary><condition><expr><name>do_diff</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name>
<operator>&amp;&amp;</operator> <call><name>get_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><ternary><condition><expr><name>do_diff</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>JO2_TERM_NAME</name> <operator>+</operator> <name>JO2_TERM_COLS</name> <operator>+</operator> <name>JO2_TERM_ROWS</name>
<operator>+</operator> <name>JO2_VERTICAL</name> <operator>+</operator> <name>JO2_CURWIN</name> <operator>+</operator> <name>JO2_NORESTORE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>jo_term_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>fname1</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fname_tofree</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fname_tofree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname_tofree</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"dump diff %s"</literal></expr></argument>, <argument><expr><name>fname1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_term_name</name></name> <operator>=</operator> <name>fname_tofree</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>jo_bufnr_buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>buf_jump_open_win</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>jo_bufnr_buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"bufnr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>free_scrollback</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>term_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>TERM_START_NOJOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>bot_lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermPos</name></type> <name>cursor_pos1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermPos</name></type> <name>cursor_pos2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_default_colors</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>read_dump_file</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor_pos1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cursor_pos1</name><operator>.</operator><name>row</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>cursor_pos1</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>cursor_pos1</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_diff</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_top_diff_rows</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>textline</name> <operator>=</operator> <call><name>get_separator</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>fname1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>textline</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>add_empty_scrollback</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>, <argument><expr><name>textline</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>textline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>textline</name> <operator>=</operator> <call><name>get_separator</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>fname2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>textline</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>add_empty_scrollback</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>, <argument><expr><name>textline</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>textline</name><index>[<expr><name>width</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bot_lnum</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>width2</name> <operator>=</operator> <call><name>read_dump_file</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor_pos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>width2</name> <operator>&gt;</operator> <name>width</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>textline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>textline</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>width2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>textline</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>width2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>textline</name><index>[<expr><name>width</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_bot_diff_rows</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>bot_lnum</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_top_diff_rows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>+</operator> <name>bot_lnum</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>textline</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sb_line_T</name> <modifier>*</modifier></type><name>sb_line</name> <init>= <expr><operator>(</operator><name>sb_line_T</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cellattr_T</name> <modifier>*</modifier></type><name>cellattr1</name> <init>= <expr><operator>(</operator><name>sb_line</name> <operator>+</operator> <name>lnum</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>sb_cells</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cellattr_T</name> <modifier>*</modifier></type><name>cellattr2</name> <init>= <expr><operator>(</operator><name>sb_line</name> <operator>+</operator> <name>lnum</name> <operator>+</operator> <name>bot_lnum</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>-&gt;</operator><name>sb_cells</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>line1</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>line1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line2</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name> <operator>+</operator> <name>bot_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>line2</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>width</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p1</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p2</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len1</name> <init>= <expr><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len2</name> <init>= <expr><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>textline</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len1</name> <operator>!=</operator> <name>len2</name> <operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>textline</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <literal type="char">'X'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>cursor_pos1</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name>col</name> <operator>==</operator> <name><name>cursor_pos1</name><operator>.</operator><name>col</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cursor_pos1</name><operator>.</operator><name>row</name></name> <operator>!=</operator> <name><name>cursor_pos2</name><operator>.</operator><name>row</name></name>
<operator>||</operator> <name><name>cursor_pos1</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <name><name>cursor_pos2</name><operator>.</operator><name>col</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>textline</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>cursor_pos2</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name>col</name> <operator>==</operator> <name><name>cursor_pos2</name><operator>.</operator><name>col</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cursor_pos1</name><operator>.</operator><name>row</name></name> <operator>!=</operator> <name><name>cursor_pos2</name><operator>.</operator><name>row</name></name>
<operator>||</operator> <name><name>cursor_pos1</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <name><name>cursor_pos2</name><operator>.</operator><name>col</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>textline</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cellattr1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>cellattr2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cellattr1</name> <operator>+</operator> <name>col</name><operator>)</operator><operator>-&gt;</operator><name>width</name>
<operator>!=</operator> <operator>(</operator><name>cellattr2</name> <operator>+</operator> <name>col</name><operator>)</operator><operator>-&gt;</operator><name>width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>textline</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <literal type="char">'w'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>same_color</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name>cellattr1</name> <operator>+</operator> <name>col</name><operator>)</operator><operator>-&gt;</operator><name>fg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name>cellattr2</name> <operator>+</operator> <name>col</name><operator>)</operator><operator>-&gt;</operator><name>fg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>textline</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>same_color</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name>cellattr1</name> <operator>+</operator> <name>col</name><operator>)</operator><operator>-&gt;</operator><name>bg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name>cellattr2</name> <operator>+</operator> <name>col</name><operator>)</operator><operator>-&gt;</operator><name>bg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>textline</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>vtermAttr2hl</name><argument_list>(<argument><expr><operator>(</operator><name>cellattr1</name> <operator>+</operator> <name>col</name><operator>)</operator><operator>-&gt;</operator><name>attrs</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <call><name>vtermAttr2hl</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>cellattr2</name> <operator>+</operator> <name>col</name><operator>)</operator><operator>-&gt;</operator><name>attrs</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>textline</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p1</name> <operator>+=</operator> <name>len1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>+=</operator> <name>len2</name></expr>;</expr_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name>width</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p1</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p2</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>textline</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p1</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>textline</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>textline</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>line1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>add_empty_scrollback</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name></name></expr></argument>,
<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_top_diff_rows</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_top_diff_rows</name></name> <operator>+</operator> <name>lnum</name></expr></argument>, <argument><expr><name>textline</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>bot_lnum</name></expr>;</expr_stmt>
</block_content>}</block></for>

<while>while <condition>(<expr><name>lnum</name> <operator>+</operator> <name>bot_lnum</name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>textline</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><call><name>add_empty_scrollback</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_default_color</name></name></expr></argument>,
<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_top_diff_rows</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_top_diff_rows</name></name> <operator>+</operator> <name>lnum</name></expr></argument>, <argument><expr><name>textline</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>bot_lnum</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>theend</name>:</label>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>textline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fname_tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>term_swap_diff</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>line_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>top_rows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>bot_rows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>bot_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sb_line_T</name> <modifier>*</modifier></type><name>sb_line</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <operator>!</operator><call><name>term_is_finished</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call>
<operator>||</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_top_diff_rows</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line_count</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>top_rows</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_top_diff_rows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bot_rows</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_bot_diff_rows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bot_start</name> <operator>=</operator> <name>line_count</name> <operator>-</operator> <name>bot_rows</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sb_line</name> <operator>=</operator> <operator>(</operator><name>sb_line_T</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name>top_rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>bot_start</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name>bot_rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>bot_start</name> <operator>+</operator> <name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><name>bot_start</name> <operator>+</operator> <name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>bot_rows</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>line_count</name> <operator>-</operator> <name>top_rows</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><name>bot_rows</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>line_count</name> <operator>-</operator> <name>top_rows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><name>line_count</name> <operator>-</operator> <name>top_rows</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>bot_rows</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top_rows</name> <operator>==</operator> <name>bot_rows</name></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;</operator> <name>top_rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>sb_line_T</name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>sb_line</name> <operator>+</operator> <name>lnum</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>sb_line</name> <operator>+</operator> <name>lnum</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>sb_line</name> <operator>+</operator> <name>bot_start</name> <operator>+</operator> <name>lnum</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>sb_line</name> <operator>+</operator> <name>bot_start</name> <operator>+</operator> <name>lnum</name><operator>)</operator> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb_line_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sb_line_T</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_data</name></name></expr></argument>,
<argument><expr><name>temp</name> <operator>+</operator> <name>bot_start</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb_line_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>bot_rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>(</operator><name>sb_line_T</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name>bot_rows</name></expr></argument>,
<argument><expr><name>temp</name> <operator>+</operator> <name>top_rows</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb_line_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>line_count</name> <operator>-</operator> <name>top_rows</name> <operator>-</operator> <name>bot_rows</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>(</operator><name>sb_line_T</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_data</name></name>
<operator>+</operator> <name>line_count</name> <operator>-</operator> <name>top_rows</name></expr></argument>,
<argument><expr><name>temp</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb_line_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>top_rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_top_diff_rows</name></name> <operator>=</operator> <name>bot_rows</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_bot_diff_rows</name></name> <operator>=</operator> <name>top_rows</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_dumpdiff</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>term_load_dump</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_dumpload</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>term_load_dump</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_getaltscreen</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_getaltscreen()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_using_altscreen</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_getattr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
}</block> <decl><name><name>attrs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"bold"</literal></expr>, <expr><name>HL_BOLD</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"italic"</literal></expr>, <expr><name>HL_ITALIC</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"underline"</literal></expr>, <expr><name>HL_UNDERLINE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"strike"</literal></expr>, <expr><name>HL_STRIKETHROUGH</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"reverse"</literal></expr>, <expr><name>HL_INVERSE</name></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&gt;</operator> <name>HL_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>syn_attr2attr</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>attrs</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>attrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>attr</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_getcursor</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_getcursor()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>term</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_pos</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>dict_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"visible"</literal></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_visible</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"blink"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>blink_state_is_inverted</name><argument_list>()</argument_list></call></expr>
?</condition><then> <expr><operator>!</operator><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_blink</name></name></expr> </then><else>: <expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_blink</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"shape"</literal></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_shape</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"color"</literal></expr></argument>, <argument><expr><call><name>cursor_color_get</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_color</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_append_dict</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_getjob</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_getjob()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>VVAL_NULL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_JOB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_job</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_job</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_job</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_job</name><operator>-&gt;</operator><name>jv_refcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_row_number</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name>
<operator>&amp;&amp;</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>term</name><operator>-&gt;</operator><name>tl_cursor_pos</name><operator>.</operator><name>row</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_getline</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_getline()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>term</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>get_row_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name>row</name> <operator>+</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_scrolled</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><call><name>vterm_obtain_screen</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermRect</name></type> <name>rect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>row</name> <operator>&gt;=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name> <operator>*</operator> <name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <name>row</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><call><name>vterm_screen_get_text</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_getscrolled</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_getscrolled()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_scrollback_scrolled</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_getsize</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_getsize()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_setsize</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_setsize()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>rows</name></decl>, <decl><type ref="prev"/><name>cols</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E955: Not a terminal buffer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>term</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rows</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rows</name> <operator>=</operator> <ternary><condition><expr><name>rows</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr> </then><else>: <expr><name>rows</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cols</name> <operator>=</operator> <ternary><condition><expr><name>cols</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr> </then><else>: <expr><name>cols</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vterm_set_size</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>vterm_get_size</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>term_report_winsize</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_getstatus</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_getstatus()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>val</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>term</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>term_job_running</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"running"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"finished"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_normal_mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">",normal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_gettitle</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_gettitle()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_title</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_gettty</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_gettty()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>num</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_tty_out</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_tty_in</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_list</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name> <operator>||</operator> <name>first_term</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>
<macro><name>FOR_ALL_TERMS</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>tp</name><operator>-&gt;</operator><name>tl_buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>,
<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>tp</name><operator>-&gt;</operator><name>tl_buffer</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_scrape</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_scrape()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermPos</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sb_line_T</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>term</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <call><name>get_row_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>screen</name> <operator>=</operator> <call><name>vterm_obtain_screen</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>screen</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>+</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback_scrolled</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>lnum</name> <operator>&gt;=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <operator>(</operator><name>sb_line_T</name> <operator>*</operator><operator>)</operator><name><name>term</name><operator>-&gt;</operator><name>tl_scrollback</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dcell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermScreenCellAttrs</name></type> <name>attrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermColor</name></type> <name>fg</name></decl>, <decl><type ref="prev"/><name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>rgb</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>mbs</name><index>[<expr><name>MB_MAXBYTES</name> <operator>*</operator> <name>VTERM_MAX_CHARS_PER_CELL</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>screen</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>cellattr_T</name> <modifier>*</modifier></type><name>cellattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <name><name>line</name><operator>-&gt;</operator><name>sb_cols</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cellattr</name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>sb_cells</name></name> <operator>+</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>cellattr</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>attrs</name> <operator>=</operator> <name><name>cellattr</name><operator>-&gt;</operator><name>attrs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fg</name> <operator>=</operator> <name><name>cellattr</name><operator>-&gt;</operator><name>fg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <name><name>cellattr</name><operator>-&gt;</operator><name>bg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>mbs</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mbs</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>VTermScreenCell</name></type> <name>cell</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vterm_screen_get_cell</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VTERM_MAX_CHARS_PER_CELL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>utf_char2bytes</name>)<argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>mbs</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>mbs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>cell</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>attrs</name> <operator>=</operator> <name><name>cell</name><operator>.</operator><name>attrs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fg</name> <operator>=</operator> <name><name>cell</name><operator>.</operator><name>fg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <name><name>cell</name><operator>.</operator><name>bg</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>dcell</name> <operator>=</operator> <call><name>dict_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dcell</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>list_append_dict</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>dcell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dcell</name></expr></argument>, <argument><expr><literal type="string">"chars"</literal></expr></argument>, <argument><expr><name>mbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>rgb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"#%02x%02x%02x"</literal></expr></argument>,
<argument><expr><name><name>fg</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>fg</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>fg</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dcell</name></expr></argument>, <argument><expr><literal type="string">"fg"</literal></expr></argument>, <argument><expr><name>rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>rgb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"#%02x%02x%02x"</literal></expr></argument>,
<argument><expr><name><name>bg</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>bg</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>bg</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dcell</name></expr></argument>, <argument><expr><literal type="string">"bg"</literal></expr></argument>, <argument><expr><name>rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dcell</name></expr></argument>, <argument><expr><literal type="string">"attr"</literal></expr></argument>, <argument><expr><call><name>cell2attr</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dcell</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_sendkeys</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_sendkeys()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>term</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>msg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>msg</name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>msg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>msg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><name><name>msg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>msg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg</name> <operator>+=</operator> <call><name>MB_CPTR2LEN</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>send_keys_to_term</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>f_term_getansicolors</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_getansicolors()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VTermColor</name></type> <name>color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>hexbuf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>term</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>vterm_obtain_state</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>vterm_state_get_palette_color</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>hexbuf</name></expr></argument>, <argument><expr><literal type="string">"#%02x%02x%02x"</literal></expr></argument>,
<argument><expr><name><name>color</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>list_append_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>hexbuf</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_setansicolors</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_setansicolors()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>term</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_LIST</name> <operator>||</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_ansi_colors_list</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>, <argument><expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>f_term_setapi</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_setapi()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>api</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>term</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_api</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>api</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>api</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_api</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>api</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_api</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_setrestore</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_setrestore()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>term</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_command</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_command</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_setkill</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_setkill()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>how</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>term</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_kill</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>how</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>how</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_kill</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>how</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_kill</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_start</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>jobopt_T</name></type> <name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name>
<operator>&amp;&amp;</operator> <call><name>get_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>,
<argument><expr><name>JO_TIMEOUT_ALL</name> <operator>+</operator> <name>JO_STOPONEXIT</name>
<operator>+</operator> <name>JO_CALLBACK</name> <operator>+</operator> <name>JO_OUT_CALLBACK</name> <operator>+</operator> <name>JO_ERR_CALLBACK</name>
<operator>+</operator> <name>JO_EXIT_CB</name> <operator>+</operator> <name>JO_CLOSE_CALLBACK</name> <operator>+</operator> <name>JO_OUT_IO</name></expr></argument>,
<argument><expr><name>JO2_TERM_NAME</name> <operator>+</operator> <name>JO2_TERM_FINISH</name> <operator>+</operator> <name>JO2_HIDDEN</name> <operator>+</operator> <name>JO2_TERM_OPENCMD</name>
<operator>+</operator> <name>JO2_TERM_COLS</name> <operator>+</operator> <name>JO2_TERM_ROWS</name> <operator>+</operator> <name>JO2_VERTICAL</name> <operator>+</operator> <name>JO2_CURWIN</name>
<operator>+</operator> <name>JO2_CWD</name> <operator>+</operator> <name>JO2_ENV</name> <operator>+</operator> <name>JO2_EOF_CHARS</name>
<operator>+</operator> <name>JO2_NORESTORE</name> <operator>+</operator> <name>JO2_TERM_KILL</name> <operator>+</operator> <name>JO2_TERM_HIGHLIGHT</name>
<operator>+</operator> <name>JO2_ANSI_COLORS</name> <operator>+</operator> <name>JO2_TTY_TYPE</name> <operator>+</operator> <name>JO2_TERM_API</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>term_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_term_wait</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>term_get_buf</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><literal type="string">"term_wait()"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"term_wait(): no job to wait for"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name><operator>-&gt;</operator><name>ch_keep_open</name></name>
<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><call><name>job_status</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_job</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"dead"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"term_wait(): waiting for channel to close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_term</name><operator>-&gt;</operator><name>tl_channel_closed</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>term_flush_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_delay</name><argument_list>(<argument><expr><literal type="number">10L</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>buf_valid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>


<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>term_flush_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>wait</name> <init>= <expr><literal type="number">10L</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>term_flush_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wait</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ui_delay</name><argument_list>(<argument><expr><name>wait</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>term_flush_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>term_send_eof</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_TERMS</name><argument_list>(<argument>term</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>==</operator> <name><name>ch</name><operator>-&gt;</operator><name>ch_job</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_eof_chars</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>channel_send</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>PART_IN</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_eof_chars</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_eof_chars</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_send</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>PART_IN</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\r"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_send</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>PART_IN</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\004\r"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>job_T</name> <modifier>*</modifier></type>
<name>term_getjob</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>term</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>COORD</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>DWORD</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>HANDLE</name>;</typedef>
<typedef>typedef <type><name>int</name> <modifier>*</modifier></type><name>DWORD_PTR</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>HPCON</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>HRESULT</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>LPPROC_THREAD_ATTRIBUTE_LIST</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>SIZE_T</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>PSIZE_T</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>PVOID</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>BOOL</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINAPI</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pCreatePseudoConsole</name>)<parameter_list>(<parameter><decl><type><name>COORD</name></type></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>HPCON</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pResizePseudoConsole</name>)<parameter_list>(<parameter><decl><type><name>HPCON</name></type></decl></parameter>, <parameter><decl><type><name>COORD</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pClosePseudoConsole</name>)<parameter_list>(<parameter><decl><type><name>HPCON</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pInitializeProcThreadAttributeList</name>)<parameter_list>(<parameter><decl><type><name>LPPROC_THREAD_ATTRIBUTE_LIST</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>PSIZE_T</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pUpdateProcThreadAttribute</name>)<parameter_list>(<parameter><decl><type><name>LPPROC_THREAD_ATTRIBUTE_LIST</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>DWORD_PTR</name></type></decl></parameter>, <parameter><decl><type><name>PVOID</name></type></decl></parameter>, <parameter><decl><type><name>SIZE_T</name></type></decl></parameter>, <parameter><decl><type><name>PVOID</name></type></decl></parameter>, <parameter><decl><type><name>PSIZE_T</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pDeleteProcThreadAttributeList</name>)<parameter_list>(<parameter><decl><type><name>LPPROC_THREAD_ATTRIBUTE_LIST</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dyn_conpty_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>HMODULE</name></type> <name>hKerneldll</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<struct><specifier>static</specifier> struct
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FARPROC</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
}</block> <decl><name><name>conpty_entry</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="string">"CreatePseudoConsole"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pCreatePseudoConsole</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ResizePseudoConsole"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pResizePseudoConsole</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ClosePseudoConsole"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pClosePseudoConsole</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"InitializeProcThreadAttributeList"</literal></expr>,
<expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pInitializeProcThreadAttributeList</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"UpdateProcThreadAttribute"</literal></expr>,
<expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pUpdateProcThreadAttribute</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"DeleteProcThreadAttributeList"</literal></expr>,
<expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pDeleteProcThreadAttributeList</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</struct>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_conpty_working</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E982: ConPTY is not available"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>hKerneldll</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hKerneldll</name> <operator>=</operator> <call><name>vimLoadLib</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>conpty_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>conpty_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name><name>conpty_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <operator>(</operator><name>FARPROC</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hKerneldll</name></expr></argument>,
<argument><expr><name><name>conpty_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_loadfunc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>conpty_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hKerneldll</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>conpty_term_and_job_init</name><parameter_list>(
<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>,
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvar</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
<parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>orig_opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>cmd_wchar</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>cmd_wchar_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>cwd_wchar</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>env_wchar</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>jo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga_cmd</name></decl>, <decl><type ref="prev"/><name>ga_env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COORD</name></type> <name>consize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIZE_T</name></type> <name>breq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>proc_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>i_theirs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>o_theirs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>i_ours</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>o_ours</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_cmd</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_env</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvar</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>argvar</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>argvar</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>win32_build_cmd</name><argument_list>(<argument><expr><name><name>argvar</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ga_cmd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>ga_cmd</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>cmd</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_arg0_cmd</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd_wchar</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd_wchar</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>breq</name> <operator>=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>cmd_wchar</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>cmd_wchar_copy</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><name>breq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wcsncpy</name><argument_list>(<argument><expr><name>cmd_wchar_copy</name></expr></argument>, <argument><expr><name>cmd_wchar</name></expr></argument>, <argument><expr><name>breq</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd_wchar</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_cwd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cwd_wchar</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_cwd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>win32_build_env</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_env</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ga_env</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>env_wchar</name> <operator>=</operator> <name><name>ga_env</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CreatePipe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i_theirs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_ours</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CreatePipe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o_ours</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o_theirs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>consize</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>consize</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>pCreatePseudoConsole</name><argument_list>(<argument><expr><name>consize</name></expr></argument>, <argument><expr><name>i_theirs</name></expr></argument>, <argument><expr><name>o_theirs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_conpty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_siex</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_siex</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>


<expr_stmt><expr><call><name>pInitializeProcThreadAttributeList</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>breq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_siex</name><operator>.</operator><name>lpAttributeList</name></name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>breq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>term</name><operator>-&gt;</operator><name>tl_siex</name><operator>.</operator><name>lpAttributeList</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pInitializeProcThreadAttributeList</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_siex</name><operator>.</operator><name>lpAttributeList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>breq</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pUpdateProcThreadAttribute</name><argument_list>(
<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_siex</name><operator>.</operator><name>lpAttributeList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_conpty</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HPCON</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>add_channel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>job</name> <operator>=</operator> <call><name>job_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>job</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argvar</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>build_argv_from_string</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>jv_argv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>build_argv_from_list</name><argument_list>(<argument><expr><name><name>argvar</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>jv_argv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_IN_BUF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_in_buf</name></name> <operator>=</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io_buf</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CreateProcessW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cmd_wchar_copy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>EXTENDED_STARTUPINFO_PRESENT</name> <operator>|</operator> <name>CREATE_UNICODE_ENVIRONMENT</name>
<operator>|</operator> <name>CREATE_SUSPENDED</name> <operator>|</operator> <name>CREATE_NEW_PROCESS_GROUP</name>
<operator>|</operator> <name>CREATE_DEFAULT_ERROR_MODE</name></expr></argument>,
<argument><expr><name>env_wchar</name></expr></argument>, <argument><expr><name>cwd_wchar</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_siex</name><operator>.</operator><name>StartupInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proc_info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>i_theirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>o_theirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_set_pipes</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,
<argument><expr><operator>(</operator><name>sock_T</name><operator>)</operator><name>i_ours</name></expr></argument>,
<argument><expr><operator>(</operator><name>sock_T</name><operator>)</operator><name>o_ours</name></expr></argument>,
<argument><expr><operator>(</operator><name>sock_T</name><operator>)</operator><name>o_ours</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_write_text_mode</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_anonymous_pipe</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>jo</name> <operator>=</operator> <call><name>CreateJobObject</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AssignProcessToJobObject</name><argument_list>(<argument><expr><name>jo</name></expr></argument>, <argument><expr><name><name>proc_info</name><operator>.</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>jo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ResumeThread</name><argument_list>(<argument><expr><name><name>proc_info</name><operator>.</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>proc_info</name><operator>.</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cmd_wchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cmd_wchar_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cwd_wchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>env_wchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>create_vterm</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>&amp;</operator> <name>JO2_ANSI_COLORS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_vterm_palette</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_ansi_colors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_vterm_ansi_colors</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>channel_set_job</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>job</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>job_set_options</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_proc_info</name></name> <operator>=</operator> <name>proc_info</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_job_object</name></name> <operator>=</operator> <name>jo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>=</operator> <name>JOB_STARTED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_tty_type</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"conpty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>job</name><operator>-&gt;</operator><name>jv_refcount</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>orig_opt</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_OUT</name></expr>]</index></name> <operator>==</operator> <name>JIO_FILE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io_name</name><index>[<expr><name>PART_OUT</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Opening output file %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_out_fd</name></name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><name>WRITEBIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_out_fd</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notopen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cmd_wchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cmd_wchar_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cwd_wchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>channel_clear</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>job</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>job_cleanup</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>jo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_siex</name><operator>.</operator><name>lpAttributeList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pDeleteProcThreadAttributeList</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_siex</name><operator>.</operator><name>lpAttributeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_siex</name><operator>.</operator><name>lpAttributeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_siex</name><operator>.</operator><name>lpAttributeList</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o_theirs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>o_theirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>o_ours</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>o_ours</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i_ours</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>i_ours</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i_theirs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>i_theirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_conpty</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pClosePseudoConsole</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_conpty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_conpty</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>conpty_term_report_winsize</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>COORD</name></type> <name>consize</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>consize</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name>cols</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>consize</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pResizePseudoConsole</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_conpty</name></name></expr></argument>, <argument><expr><name>consize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>term_free_conpty</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_siex</name><operator>.</operator><name>lpAttributeList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pDeleteProcThreadAttributeList</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_siex</name><operator>.</operator><name>lpAttributeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_siex</name><operator>.</operator><name>lpAttributeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_siex</name><operator>.</operator><name>lpAttributeList</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_conpty</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pClosePseudoConsole</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_conpty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_conpty</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>use_conpty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>has_conpty</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINPTY_SPAWN_FLAG_AUTO_SHUTDOWN</name></cpp:macro> <cpp:value>1ul</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINPTY_SPAWN_FLAG_EXIT_AFTER_SHUTDOWN</name></cpp:macro> <cpp:value>2ull</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINPTY_MOUSE_MODE_FORCE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>winpty_config_new</name>)<parameter_list>(<parameter><decl><type><name>UINT64</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>winpty_open</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>winpty_spawn_config_new</name>)<parameter_list>(<parameter><decl><type><name>UINT64</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> (<modifier>*</modifier><name>winpty_spawn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>HANDLE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>HANDLE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>DWORD</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>winpty_config_set_mouse_mode</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>winpty_config_set_initial_size</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LPCWSTR</name></type> (<modifier>*</modifier><name>winpty_conin_name</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LPCWSTR</name></type> (<modifier>*</modifier><name>winpty_conout_name</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LPCWSTR</name></type> (<modifier>*</modifier><name>winpty_conerr_name</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>winpty_free</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>winpty_config_free</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>winpty_spawn_config_free</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>winpty_error_free</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>LPCWSTR</name></type> (<modifier>*</modifier><name>winpty_error_msg</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> (<modifier>*</modifier><name>winpty_set_size</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>HANDLE</name></type> (<modifier>*</modifier><name>winpty_agent_process</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINPTY_DLL</name></cpp:macro> <cpp:value>"winpty.dll"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>HINSTANCE</name></type> <name>hWinPtyDLL</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dyn_winpty_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<struct><specifier>static</specifier> struct
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FARPROC</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
}</block> <decl><name><name>winpty_entry</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="string">"winpty_conerr_name"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>winpty_conerr_name</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"winpty_config_free"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>winpty_config_free</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"winpty_config_new"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>winpty_config_new</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"winpty_config_set_mouse_mode"</literal></expr>,
<expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>winpty_config_set_mouse_mode</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"winpty_config_set_initial_size"</literal></expr>,
<expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>winpty_config_set_initial_size</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"winpty_conin_name"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>winpty_conin_name</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"winpty_conout_name"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>winpty_conout_name</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"winpty_error_free"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>winpty_error_free</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"winpty_free"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>winpty_free</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"winpty_open"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>winpty_open</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"winpty_spawn"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>winpty_spawn</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"winpty_spawn_config_free"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>winpty_spawn_config_free</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"winpty_spawn_config_new"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>winpty_spawn_config_new</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"winpty_error_msg"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>winpty_error_msg</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"winpty_set_size"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>winpty_set_size</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"winpty_agent_process"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>winpty_agent_process</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</struct>


<if_stmt><if>if <condition>(<expr><name>hWinPtyDLL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_winptydll</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hWinPtyDLL</name> <operator>=</operator> <call><name>vimLoadLib</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_winptydll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hWinPtyDLL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hWinPtyDLL</name> <operator>=</operator> <call><name>vimLoadLib</name><argument_list>(<argument><expr><name>WINPTY_DLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hWinPtyDLL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_loadlib</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>p_winptydll</name> <operator>!=</operator> <name>NUL</name></expr> ?</condition><then> <expr><name>p_winptydll</name></expr>
</then><else>: <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>WINPTY_DLL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>winpty_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>winpty_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name><name>winpty_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <operator>(</operator><name>FARPROC</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hWinPtyDLL</name></expr></argument>,
<argument><expr><name><name>winpty_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_loadfunc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>winpty_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hWinPtyDLL</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>winpty_term_and_job_init</name><parameter_list>(
<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>,
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvar</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
<parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>orig_opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>cmd_wchar</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>cwd_wchar</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>env_wchar</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>jo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>child_process_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>child_thread_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>winpty_err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>spawn_config</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga_cmd</name></decl>, <decl><type ref="prev"/><name>ga_env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_cmd</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_env</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvar</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>argvar</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>argvar</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>win32_build_cmd</name><argument_list>(<argument><expr><name><name>argvar</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ga_cmd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>ga_cmd</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>cmd</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_arg0_cmd</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd_wchar</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd_wchar</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_cwd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cwd_wchar</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_cwd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>win32_build_env</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_env</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ga_env</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>env_wchar</name> <operator>=</operator> <name><name>ga_env</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty_config</name></name> <operator>=</operator> <call><name>winpty_config_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>winpty_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty_config</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>winpty_config_set_mouse_mode</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty_config</name></name></expr></argument>,
<argument><expr><name>WINPTY_MOUSE_MODE_FORCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>winpty_config_set_initial_size</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty_config</name></name></expr></argument>,
<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty</name></name> <operator>=</operator> <call><name>winpty_open</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty_config</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winpty_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>spawn_config</name> <operator>=</operator> <call><name>winpty_spawn_config_new</name><argument_list>(
<argument><expr><name>WINPTY_SPAWN_FLAG_AUTO_SHUTDOWN</name> <operator>|</operator>
<name>WINPTY_SPAWN_FLAG_EXIT_AFTER_SHUTDOWN</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>cmd_wchar</name></expr></argument>,
<argument><expr><name>cwd_wchar</name></expr></argument>,
<argument><expr><name>env_wchar</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>winpty_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>spawn_config</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>add_channel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>job</name> <operator>=</operator> <call><name>job_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>job</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argvar</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>build_argv_from_string</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>jv_argv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>build_argv_from_list</name><argument_list>(<argument><expr><name><name>argvar</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>jv_argv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_IN_BUF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_in_buf</name></name> <operator>=</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io_buf</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>winpty_spawn</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty</name></name></expr></argument>, <argument><expr><name>spawn_config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child_process_handle</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>child_thread_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winpty_err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>channel_set_pipes</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,
<argument><expr><operator>(</operator><name>sock_T</name><operator>)</operator><call><name>CreateFileW</name><argument_list>(
<argument><expr><call><name>winpty_conin_name</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>GENERIC_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>sock_T</name><operator>)</operator><call><name>CreateFileW</name><argument_list>(
<argument><expr><call><name>winpty_conout_name</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>GENERIC_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>sock_T</name><operator>)</operator><call><name>CreateFileW</name><argument_list>(
<argument><expr><call><name>winpty_conerr_name</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>GENERIC_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_write_text_mode</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>jo</name> <operator>=</operator> <call><name>CreateJobObject</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AssignProcessToJobObject</name><argument_list>(<argument><expr><name>jo</name></expr></argument>, <argument><expr><name>child_process_handle</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>jo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>winpty_spawn_config_free</name><argument_list>(<argument><expr><name>spawn_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cmd_wchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cwd_wchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>env_wchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>create_vterm</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>&amp;</operator> <name>JO2_ANSI_COLORS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_vterm_palette</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_ansi_colors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_vterm_ansi_colors</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>channel_set_job</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>job</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>job_set_options</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_proc_info</name><operator>.</operator><name>hProcess</name></name> <operator>=</operator> <name>child_process_handle</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_proc_info</name><operator>.</operator><name>dwProcessId</name></name> <operator>=</operator> <call><name>GetProcessId</name><argument_list>(<argument><expr><name>child_process_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_job_object</name></name> <operator>=</operator> <name>jo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>=</operator> <name>JOB_STARTED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_tty_in</name></name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(
<argument><expr><operator>(</operator><name>short_u</name> <operator>*</operator><operator>)</operator><call><name>winpty_conin_name</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_tty_out</name></name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(
<argument><expr><operator>(</operator><name>short_u</name> <operator>*</operator><operator>)</operator><call><name>winpty_conout_name</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_tty_type</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"winpty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>job</name><operator>-&gt;</operator><name>jv_refcount</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>orig_opt</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_OUT</name></expr>]</index></name> <operator>==</operator> <name>JIO_FILE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io_name</name><index>[<expr><name>PART_OUT</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Opening output file %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_out_fd</name></name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><name>WRITEBIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_out_fd</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notopen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cmd_wchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cwd_wchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>spawn_config</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>winpty_spawn_config_free</name><argument_list>(<argument><expr><name>spawn_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>channel_clear</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>job</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>job_cleanup</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>jo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>winpty_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty_config</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>winpty_config_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty_config</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>winpty_err</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>utf16_to_enc</name><argument_list>(
<argument><expr><operator>(</operator><name>short_u</name> <operator>*</operator><operator>)</operator><call><name>winpty_error_msg</name><argument_list>(<argument><expr><name>winpty_err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>winpty_error_free</name><argument_list>(<argument><expr><name>winpty_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>term_and_job_init</name><parameter_list>(
<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>,
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvar</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,
<parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
<parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>orig_opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>use_winpty</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_conpty</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tty_type</name> <init>= <expr><operator>*</operator><name>p_twt</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>has_winpty</name> <operator>=</operator> <ternary><condition><expr><call><name>dyn_winpty_init</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>has_conpty</name> <operator>=</operator> <ternary><condition><expr><call><name>dyn_conpty_init</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_winpty</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>has_conpty</name></expr>)</condition><block type="pseudo"><block_content>


<return>return <expr><call><name>dyn_winpty_init</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_tty_type</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tty_type</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_tty_type</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tty_type</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_conpty</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>is_conpty_stable</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><name>has_winpty</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use_conpty</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>has_winpty</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use_winpty</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>tty_type</name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_winpty</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use_winpty</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>tty_type</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_conpty</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use_conpty</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>dyn_conpty_init</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_conpty</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>conpty_term_and_job_init</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>argvar</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>orig_opt</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_winpty</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>winpty_term_and_job_init</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>argvar</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>orig_opt</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><call><name>dyn_winpty_init</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>create_pty_only</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hPipeIn</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hPipeOut</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>in_name</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>out_name</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>create_vterm</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>in_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>in_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\\\\.\\pipe\\vim-%d-in-%d"</literal></expr></argument>,
<argument><expr><call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hPipeIn</name> <operator>=</operator> <call><name>CreateNamedPipe</name><argument_list>(<argument><expr><name>in_name</name></expr></argument>, <argument><expr><name>PIPE_ACCESS_OUTBOUND</name></expr></argument>,
<argument><expr><name>PIPE_TYPE_MESSAGE</name> <operator>|</operator> <name>PIPE_NOWAIT</name></expr></argument>,
<argument><expr><name>PIPE_UNLIMITED_INSTANCES</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NMPWAIT_NOWAIT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hPipeIn</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>out_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\\\\.\\pipe\\vim-%d-out-%d"</literal></expr></argument>,
<argument><expr><call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hPipeOut</name> <operator>=</operator> <call><name>CreateNamedPipe</name><argument_list>(<argument><expr><name>out_name</name></expr></argument>, <argument><expr><name>PIPE_ACCESS_INBOUND</name></expr></argument>,
<argument><expr><name>PIPE_TYPE_MESSAGE</name> <operator>|</operator> <name>PIPE_NOWAIT</name></expr></argument>,
<argument><expr><name>PIPE_UNLIMITED_INSTANCES</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hPipeOut</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ConnectNamedPipe</name><argument_list>(<argument><expr><name>hPipeIn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ConnectNamedPipe</name><argument_list>(<argument><expr><name>hPipeOut</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>=</operator> <call><name>job_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_refcount</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>=</operator> <name>JOB_FINISHED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>add_channel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_keep_open</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_named_pipe</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_set_pipes</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,
<argument><expr><operator>(</operator><name>sock_T</name><operator>)</operator><name>hPipeIn</name></expr></argument>,
<argument><expr><operator>(</operator><name>sock_T</name><operator>)</operator><name>hPipeOut</name></expr></argument>,
<argument><expr><operator>(</operator><name>sock_T</name><operator>)</operator><name>hPipeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_set_job</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_tty_in</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name><operator>*</operator><operator>)</operator><name>in_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_tty_out</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name><operator>*</operator><operator>)</operator><name>out_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

<label><name>failed</name>:</label>
<if_stmt><if>if <condition>(<expr><name>hPipeIn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hPipeIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hPipeOut</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hPipeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>term_free_vterm</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>term_free_conpty</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>winpty_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty_config</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>winpty_config_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty_config</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vterm_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>term_report_winsize</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_conpty</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>conpty_term_report_winsize</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>winpty_set_size</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_winpty</name></name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>terminal_enabled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>dyn_winpty_init</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name> <operator>||</operator> <call><name>dyn_conpty_init</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>











<function><type><specifier>static</specifier> <name>int</name></type>
<name>term_and_job_init</name><parameter_list>(
<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>,
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvar</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,
<parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
<parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier><name>orig_opt</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_arg0_cmd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>create_vterm</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>&amp;</operator> <name>JO2_ANSI_COLORS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_vterm_palette</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_ansi_colors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_vterm_ansi_colors</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>=</operator> <call><name>job_start</name><argument_list>(<argument><expr><name>argvar</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_refcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>!=</operator> <name>JOB_FAILED</name></expr> ?</condition><then> <expr><name>OK</name></expr> </then><else>: <expr><name>FAIL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>create_pty_only</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>create_vterm</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_rows</name></name></expr></argument>, <argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_cols</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>=</operator> <call><name>job_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_refcount</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>=</operator> <name>JOB_FINISHED</name></expr>;</expr_stmt>

<return>return <expr><call><name>mch_create_pty_channel</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>term_free_vterm</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vterm_free</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>term</name><operator>-&gt;</operator><name>tl_vterm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>term_report_winsize</name><parameter_list>(<parameter><decl><type><name>term_T</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>part</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>part</name> <operator>=</operator> <name>PART_OUT</name></expr>;</init> <condition><expr><name>part</name> <operator>&lt;</operator> <name>PART_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>part</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>term</name><operator>-&gt;</operator><name>tl_job</name><operator>-&gt;</operator><name>jv_channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mch_isatty</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>part</name> <operator>&lt;</operator> <name>PART_COUNT</name> <operator>&amp;&amp;</operator> <call><name>mch_report_winsize</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_signal_job</name><argument_list>(<argument><expr><name><name>term</name><operator>-&gt;</operator><name>tl_job</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"winch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
