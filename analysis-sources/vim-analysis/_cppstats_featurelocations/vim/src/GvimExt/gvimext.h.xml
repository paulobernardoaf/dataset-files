<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\GvimExt\gvimext.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AFX_STDAFX_H__3389658B_AD83_11D3_9C1E_0090278BBD99__INCLUDED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AFX_STDAFX_H__3389658B_AD83_11D3_9C1E_0090278BBD99__INCLUDED_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>once</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STRICT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRICT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INC_OLE2</name></cpp:macro></cpp:define> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_DEPRECATE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_NONSTDC_NO_DEPRECATE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windowsx.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlobj.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1300</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAXULONG_PTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UINT_PTR</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_PTR</name></cpp:macro> <cpp:value>UINT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ResultFromShort</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ResultFromScode(MAKE_SCODE(SEVERITY_SUCCESS, 0, (USHORT)(i)))</cpp:value></cpp:define>



<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>data_seg</name><name>(</name><cpp:literal>".text"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITGUID</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initguid.h&gt;</cpp:file></cpp:include>
























<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>CLSID_ShellExtension</name></expr></argument>, <argument><expr><literal type="number">0x51eee242</literal></expr></argument>, <argument><expr><literal type="number">0xad87</literal></expr></argument>, <argument><expr><literal type="number">0x11d3</literal></expr></argument>, <argument><expr><literal type="number">0x9c</literal></expr></argument>, <argument><expr><literal type="number">0x1e</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><literal type="number">0x90</literal></expr></argument>, <argument><expr><literal type="number">0x27</literal></expr></argument>, <argument><expr><literal type="number">0x8b</literal></expr></argument>, <argument><expr><literal type="number">0xbd</literal></expr></argument>, <argument><expr><literal type="number">0x99</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>CShellExtClassFactory</name> <range>: <expr><name>public</name> <name>IClassFactory</name>
<block>{
<expr><name>protected</name><operator>:</operator>
<name>ULONG</name> <name>m_cRef</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>CShellExtClassFactory</name><argument_list>()</argument_list></call></expr>;
<expr><operator>~</operator><call><name>CShellExtClassFactory</name><argument_list>()</argument_list></call></expr>;


<expr><name>STDMETHODIMP</name> <macro><name>QueryInterface</name><argument_list>(<argument>REFIID</argument>, <argument>LPVOID FAR *</argument>)</argument_list></macro></expr>;
<macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro> <expr><call><name>AddRef</name><argument_list>()</argument_list></call></expr>;
<macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro> <expr><call><name>Release</name><argument_list>()</argument_list></call></expr>;


<expr><name>STDMETHODIMP</name> <macro><name>CreateInstance</name><argument_list>(<argument>LPUNKNOWN</argument>, <argument>REFIID</argument>, <argument>LPVOID FAR *</argument>)</argument_list></macro></expr>;
<expr><name>STDMETHODIMP</name> <call><name>LockServer</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>)</argument_list></call></expr>;

}</block></expr></range></decl>;</decl_stmt>
<typedef>typedef <type><name>CShellExtClassFactory</name> <modifier>*</modifier></type><name>LPCSHELLEXTCLASSFACTORY</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HWND</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>


<decl_stmt><decl><type><name>class</name></type> <name>CShellExt</name> <range>: <expr><name>public</name> <name>IContextMenu</name></expr></range></decl>,
<decl><type ref="prev"/><name>IShellExtInit</name>
<block>{<block_content>
<label><name>private</name>:</label>
<function_decl><type><name>BOOL</name></type> <name>LoadMenuIcon</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>ULONG</name></type> <name>m_cRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPDATAOBJECT</name></type> <name>m_pDataObj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>m_edit_existing_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HBITMAP</name></type> <name>m_hVimIconBitmap</name></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type> <name>EnumWindowsProc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHODIMP</name></type> <name>PushToWindow</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hParent</name></decl></parameter>,
<parameter><decl><type><name>LPCSTR</name></type> <name>pszWorkingDir</name></decl></parameter>,
<parameter><decl><type><name>LPCSTR</name></type> <name>pszCmd</name></decl></parameter>,
<parameter><decl><type><name>LPCSTR</name></type> <name>pszParam</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>iShowCmd</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>idHWnd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHODIMP</name></type> <name>InvokeGvim</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hParent</name></decl></parameter>,
<parameter><decl><type><name>LPCSTR</name></type> <name>pszWorkingDir</name></decl></parameter>,
<parameter><decl><type><name>LPCSTR</name></type> <name>pszCmd</name></decl></parameter>,
<parameter><decl><type><name>LPCSTR</name></type> <name>pszParam</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>iShowCmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHODIMP</name></type> <name>InvokeSingleGvim</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hParent</name></decl></parameter>,
<parameter><decl><type><name>LPCSTR</name></type> <name>pszWorkingDir</name></decl></parameter>,
<parameter><decl><type><name>LPCSTR</name></type> <name>pszCmd</name></decl></parameter>,
<parameter><decl><type><name>LPCSTR</name></type> <name>pszParam</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>iShowCmd</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>useDiff</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>int</name></type> <name>m_cntOfHWnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name><name>m_hWnd</name><index>[<expr><name>MAX_HWND</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CShellExt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>CShellExt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>STDMETHODIMP</name></type> <name>QueryInterface</name><parameter_list>(<parameter><decl><type><name>REFIID</name></type></decl></parameter>, <parameter><decl><type><name>LPVOID</name> <name>FAR</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro> <expr_stmt><expr><call><name>AddRef</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<macro><name>STDMETHODIMP_</name><argument_list>(<argument>ULONG</argument>)</argument_list></macro> <expr_stmt><expr><call><name>Release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>STDMETHODIMP</name></type> <name>QueryContextMenu</name><parameter_list>(<parameter><decl><type><name>HMENU</name></type> <name>hMenu</name></decl></parameter>,
<parameter><decl><type><name>UINT</name></type> <name>indexMenu</name></decl></parameter>,
<parameter><decl><type><name>UINT</name></type> <name>idCmdFirst</name></decl></parameter>,
<parameter><decl><type><name>UINT</name></type> <name>idCmdLast</name></decl></parameter>,
<parameter><decl><type><name>UINT</name></type> <name>uFlags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHODIMP</name></type> <name>InvokeCommand</name><parameter_list>(<parameter><decl><type><name>LPCMINVOKECOMMANDINFO</name></type> <name>lpcmi</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHODIMP</name></type> <name>GetCommandString</name><parameter_list>(<parameter><decl><type><name>UINT_PTR</name></type> <name>idCmd</name></decl></parameter>,
<parameter><decl><type><name>UINT</name></type> <name>uFlags</name></decl></parameter>,
<parameter><decl><type><name>UINT</name> <name>FAR</name> <modifier>*</modifier></type><name>reserved</name></decl></parameter>,
<parameter><decl><type><name>LPSTR</name></type> <name>pszName</name></decl></parameter>,
<parameter><decl><type><name>UINT</name></type> <name>cchMax</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>STDMETHODIMP</name></type> <name>Initialize</name><parameter_list>(<parameter><decl><type><name>LPCITEMIDLIST</name></type> <name>pIDFolder</name></decl></parameter>,
<parameter><decl><type><name>LPDATAOBJECT</name></type> <name>pDataObj</name></decl></parameter>,
<parameter><decl><type><name>HKEY</name></type> <name>hKeyID</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name>CShellExt</name> <modifier>*</modifier></type><name>LPCSHELLEXT</name>;</typedef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>data_seg</name><name>(</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
