<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\textprop.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT2HIKEY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;pt_name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIKEY2PT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((proptype_T *)((p) - offsetof(proptype_T, pt_name)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI2PT</name><parameter_list>(<parameter><type><name>hi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HIKEY2PT((hi)-&gt;hi_key)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>hashtab_T</name> <modifier>*</modifier></type><name>global_proptypes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>proptype_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_type_not_exist</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E971: Property type %s does not exist"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_invalid_col</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E964: Invalid column number: %ld"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_invalid_lnum</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E966: Invalid line number: %ld"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>hashitem_T</name> <modifier>*</modifier></type>
<name>find_prop_hi</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ht</name> <operator>=</operator> <name>global_proptypes</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ht</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_proptypes</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_find</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>hi</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>proptype_T</name> <modifier>*</modifier></type>
<name>find_prop</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name> <init>= <expr><call><name>find_prop_hi</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hi</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>HI2PT</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>find_prop_type_id</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>proptype_T</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>find_prop</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>pt</name><operator>-&gt;</operator><name>pt_id</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>proptype_T</name> <modifier>*</modifier></type>
<name>lookup_prop_type</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>proptype_T</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>find_prop</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>find_prop</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_type_not_exist</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_bufnr_from_arg</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_DICT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bufnr"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>get_buf_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_prop_add</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>start_lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>start_col</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start_lnum</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start_col</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start_col</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invalid_col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>start_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_DICT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prop_add_common</name><argument_list>(<argument><expr><name>start_lnum</name></expr></argument>, <argument><expr><name>start_col</name></expr></argument>, <argument><expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>,
<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>prop_add_common</name><parameter_list>(
<parameter><decl><type><name>linenr_T</name></type> <name>start_lnum</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name></type> <name>start_col</name></decl></parameter>,
<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>,
<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>default_buf</name></decl></parameter>,
<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>dict_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>end_lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>end_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>type_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proptype_T</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>default_buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newtext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>proplen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>textlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newprops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>textprop_T</name></type> <name>tmp_prop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"type"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E965: missing property type name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>type_name</name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"end_lnum"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>end_lnum</name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"end_lnum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end_lnum</name> <operator>&lt;</operator> <name>start_lnum</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"end_lnum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>end_lnum</name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"length"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>length</name> <init>= <expr><call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"length"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>length</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>end_lnum</name></expr></argument> &gt;</argument_list></name> <name>start_lnum</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>end_col</name> <operator>=</operator> <name>start_col</name> <operator>+</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"end_col"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>end_col</name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"end_col"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end_col</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"end_col"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>start_lnum</name> <operator>==</operator> <name>end_lnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end_col</name> <operator>=</operator> <name>start_col</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>end_col</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dict_arg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>get_bufnr_from_arg</name><argument_list>(<argument><expr><name>dict_arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>lookup_prop_type</name><argument_list>(<argument><expr><name>type_name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>start_lnum</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>start_lnum</name></expr></argument> &gt;</argument_list></name> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invalid_lnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>start_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>end_lnum</name> <argument_list type="generic">&lt; <argument><expr><name>start_lnum</name> <operator>||</operator> <name>end_lnum</name></expr></argument> &gt;</argument_list></name> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invalid_lnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>end_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E275: Cannot add text property to unloaded buffer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name>start_lnum</name></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name>end_lnum</name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>length</name></decl>;</decl_stmt> 


<expr_stmt><expr><name>proplen</name> <operator>=</operator> <call><name>get_text_props</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>textlen</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>-</operator> <name>proplen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name>start_lnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name>start_col</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>textlen</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invalid_col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>start_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name>end_lnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name>end_col</name> <operator>-</operator> <name>col</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>textlen</name> <operator>-</operator> <name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>textlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>textlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<expr_stmt><expr><name>newtext</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newtext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newtext</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name></expr></argument>, <argument><expr><name>textlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>proplen</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_prop</name></expr></argument>, <argument><expr><name>props</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tmp_prop</name><operator>.</operator><name>tp_col</name></name> <operator>&gt;=</operator> <name>col</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>newprops</name> <operator>=</operator> <name>newtext</name> <operator>+</operator> <name>textlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newprops</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tmp_prop</name><operator>.</operator><name>tp_col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_prop</name><operator>.</operator><name>tp_len</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_prop</name><operator>.</operator><name>tp_id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_prop</name><operator>.</operator><name>tp_type</name></name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>pt_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_prop</name><operator>.</operator><name>tp_flags</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>lnum</name> <operator>&gt;</operator> <name>start_lnum</name></expr> ?</condition><then> <expr><name>TP_FLAG_CONT_PREV</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name>lnum</name> <operator>&lt;</operator> <name>end_lnum</name></expr> ?</condition><then> <expr><name>TP_FLAG_CONT_NEXT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newprops</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_prop</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>proplen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newprops</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>props</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>proplen</name> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_LINE_DIRTY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name> <operator>=</operator> <name>newtext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|=</operator> <name>ML_LINE_DIRTY</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_has_textprop</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>redraw_buf_later</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>get_text_props</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>will_change</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>textlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>proplen</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_has_textprop</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>will_change</name><operator>)</operator> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>will_change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>textlen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>proplen</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>-</operator> <name>textlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>proplen</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E967: text property info corrupted"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>proplen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>props</name> <operator>=</operator> <name>text</name> <operator>+</operator> <name>textlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>proplen</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>find_visible_prop</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>textprop_T</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>,
<parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>found_lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>validate_botline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>get_text_props</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><name>props</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>tp_type</name></name> <operator>==</operator> <name>type_id</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>id</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>prop</name><operator>-&gt;</operator><name>tp_id</name></name> <operator>==</operator> <name>id</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>found_lnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_text_props</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newtext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>textlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>textlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>newtext</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>textlen</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newtext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newtext</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>textlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newtext</name> <operator>+</operator> <name>textlen</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_LINE_DIRTY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name> <operator>=</operator> <name>newtext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>=</operator> <name>textlen</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|=</operator> <name>ML_LINE_DIRTY</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>proptype_T</name> <modifier>*</modifier></type>
<name>find_type_by_id</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>todo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>proptype_T</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><call><name>HI2PT</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>pt_id</name></name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>prop</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>prop_fill_dict</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>textprop_T</name> <modifier>*</modifier></type><name>prop</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>proptype_T</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"col"</literal></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>tp_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"length"</literal></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>tp_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>tp_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>, <argument><expr><operator>!</operator><operator>(</operator><name><name>prop</name><operator>-&gt;</operator><name>tp_flags</name></name> <operator>&amp;</operator> <name>TP_FLAG_CONT_PREV</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"end"</literal></expr></argument>, <argument><expr><operator>!</operator><operator>(</operator><name><name>prop</name><operator>-&gt;</operator><name>tp_flags</name></name> <operator>&amp;</operator> <name>TP_FLAG_CONT_NEXT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>text_prop_type_by_id</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>tp_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>proptype_T</name> <modifier>*</modifier></type>
<name>text_prop_type_by_id</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>proptype_T</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>find_type_by_id</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_proptypes</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>find_type_by_id</name><argument_list>(<argument><expr><name>global_proptypes</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_prop_clear</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>start</name> <init>= <expr><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>end</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bufnr_from_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>end</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invrange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>&gt;</operator> <name>len</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_LINE_DIRTY</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newtext</name> <init>= <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>newtext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name> <operator>=</operator> <name>newtext</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|=</operator> <name>ML_LINE_DIRTY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>redraw_buf_later</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_prop_find</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lnum_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start_pos_has_prop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seen_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skipstart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lnum</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_DICT</name> <operator>||</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bufnr_from_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dir_s</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dir_s</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>dir_s</name> <operator>!=</operator> <literal type="char">'f'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"lnum"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"col"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>cursor</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>cursor</name><operator>-&gt;</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>col</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lnum</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>lnum</name></expr></argument> &gt;</argument_list></name> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invrange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"skipstart"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>skipstart</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"type"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>dict_get_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proptype_T</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>lookup_prop_type</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type_id</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>pt_id</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>type_id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E968: Need at least one of 'id' or 'type'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lnum_start</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_dict_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>textlen</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>-</operator> <name>textlen</name><operator>)</operator>
<operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>textprop_T</name></type> <name>prop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prop_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prop_end</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>, <argument><expr><name>text</name> <operator>+</operator> <name>textlen</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name>lnum_start</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <name><name>prop</name><operator>.</operator><name>tp_col</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>prop</name><operator>.</operator><name>tp_col</name></name> <operator>+</operator> <name><name>prop</name><operator>.</operator><name>tp_len</name></name> <operator>-</operator> <operator>(</operator><name><name>prop</name><operator>.</operator><name>tp_len</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&lt;</operator> <name>col</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>.</operator><name>tp_id</name></name> <operator>==</operator> <name>id</name> <operator>||</operator> <name><name>prop</name><operator>.</operator><name>tp_type</name></name> <operator>==</operator> <name>type_id</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum_start</name> <operator>==</operator> <name>lnum</name>
<operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <name><name>prop</name><operator>.</operator><name>tp_col</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>col</name> <operator>&lt;=</operator> <name><name>prop</name><operator>.</operator><name>tp_col</name></name> <operator>+</operator> <name><name>prop</name><operator>.</operator><name>tp_len</name></name>
<operator>-</operator> <operator>(</operator><name><name>prop</name><operator>.</operator><name>tp_len</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start_pos_has_prop</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prop_start</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>prop</name><operator>.</operator><name>tp_flags</name></name> <operator>&amp;</operator> <name>TP_FLAG_CONT_PREV</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>prop_end</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>prop</name><operator>.</operator><name>tp_flags</name></name> <operator>&amp;</operator> <name>TP_FLAG_CONT_NEXT</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prop_start</name> <operator>&amp;&amp;</operator> <name>prop_end</name> <operator>&amp;&amp;</operator> <name>dir</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>seen_end</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prop_start</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>start_pos_has_prop</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>skipstart</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>start_pos_has_prop</name> <operator>&amp;&amp;</operator> <name>skipstart</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>seen_end</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>start_pos_has_prop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prop_fill_dict</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><literal type="string">"lnum"</literal></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lnum</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lnum</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <ternary><condition><expr><name>dir</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_prop_list</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bufnr_from_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lnum</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>lnum</name></expr></argument> &gt;</argument_list></name> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invrange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>textlen</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>-</operator> <name>textlen</name><operator>)</operator>
<operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>textprop_T</name></type> <name>prop</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>dict_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>, <argument><expr><name>text</name> <operator>+</operator> <name>textlen</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prop_fill_dict</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_append_dict</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_prop_remove</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>start</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_all</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>both</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_DICT</name> <operator>||</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>end</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invrange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bufnr_from_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name><operator>*</operator><operator>)</operator><literal type="string">"all"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_all</name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"type"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>dict_get_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proptype_T</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>lookup_prop_type</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type_id</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>pt_id</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"both"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>both</name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"both"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>type_id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E968: Need at least one of 'id' or 'type'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>both</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>type_id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E860: Need 'id' and 'type' with 'both'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>&gt;</operator> <name>len</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>textprop_T</name></type> <name>textprop</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>idx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>-</operator> <name>len</name><operator>)</operator>
<operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cur_prop</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name> <operator>+</operator> <name>len</name>
<operator>+</operator> <name>idx</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>taillen</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>textprop</name></expr></argument>, <argument><expr><name>cur_prop</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>both</name></expr> ?</condition><then> <expr><name><name>textprop</name><operator>.</operator><name>tp_id</name></name> <operator>==</operator> <name>id</name> <operator>&amp;&amp;</operator> <name><name>textprop</name><operator>.</operator><name>tp_type</name></name> <operator>==</operator> <name>type_id</name></expr>
</then><else>: <expr><name><name>textprop</name><operator>.</operator><name>tp_id</name></name> <operator>==</operator> <name>id</name> <operator>||</operator> <name><name>textprop</name><operator>.</operator><name>tp_type</name></name> <operator>==</operator> <name>type_id</name></expr></else></ternary></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_LINE_DIRTY</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newptr</name> <init>= <expr><call><name>alloc</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>newptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newptr</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name></expr></argument>,
<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name> <operator>=</operator> <name>newptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|=</operator> <name>ML_LINE_DIRTY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_prop</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name> <operator>+</operator> <name>len</name>
<operator>+</operator> <name>idx</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>taillen</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>-</operator> <name>len</name>
<operator>-</operator> <operator>(</operator><name>idx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>taillen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>cur_prop</name></expr></argument>, <argument><expr><name>cur_prop</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>taillen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_all</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>redraw_buf_later</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>prop_type_set</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proptype_T</name> <modifier>*</modifier></type><name>prop</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bufnr_from_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prop</name> <operator>=</operator> <call><name>find_prop</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>add</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>htp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prop</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E969: Property type %s already defined"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prop</name> <operator>=</operator> <call><name>alloc_clear</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>proptype_T</name></expr></argument>, <argument><expr><name>pt_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prop</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>prop</name><operator>-&gt;</operator><name>pt_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>pt_id</name></name> <operator>=</operator> <operator>++</operator><name>proptype_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>pt_flags</name></name> <operator>=</operator> <name>PT_FLAG_COMBINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>htp</name> <operator>=</operator> <ternary><condition><expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>global_proptypes</name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_proptypes</name></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>htp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>htp</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>hashtab_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>htp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><operator>*</operator><name>htp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>hash_add</name><argument_list>(<argument><expr><operator>*</operator><name>htp</name></expr></argument>, <argument><expr><call><name>PT2HIKEY</name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prop</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_type_not_exist</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"highlight"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>highlight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hl_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>highlight</name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"highlight"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>highlight</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>highlight</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hl_id</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><name>highlight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hl_id</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E970: Unknown highlight group name: '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>highlight</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr> </then><else>: <expr><name>highlight</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>pt_hl_id</name></name> <operator>=</operator> <name>hl_id</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"combine"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>pt_flags</name></name> <operator>|=</operator> <name>PT_FLAG_COMBINE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>pt_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>PT_FLAG_COMBINE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"priority"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>pt_priority</name></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"start_incl"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>pt_flags</name></name> <operator>|=</operator> <name>PT_FLAG_INS_START_INCL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>pt_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>PT_FLAG_INS_START_INCL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"end_incl"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>pt_flags</name></name> <operator>|=</operator> <name>PT_FLAG_INS_END_INCL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prop</name><operator>-&gt;</operator><name>pt_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>PT_FLAG_INS_END_INCL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_prop_type_add</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>prop_type_set</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_prop_type_change</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>prop_type_set</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_prop_type_delete</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bufnr_from_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>find_prop_hi</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hi</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proptype_T</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><call><name>HI2PT</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ht</name> <operator>=</operator> <name>global_proptypes</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ht</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_proptypes</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>hash_remove</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_prop_type_get</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rettv_dict_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>proptype_T</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bufnr_from_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prop</name> <operator>=</operator> <call><name>find_prop</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prop</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>-&gt;</operator><name>pt_hl_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"highlight"</literal></expr></argument>, <argument><expr><call><name>syn_id2name</name><argument_list>(<argument><expr><name><name>prop</name><operator>-&gt;</operator><name>pt_hl_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"priority"</literal></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>pt_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"combine"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>prop</name><operator>-&gt;</operator><name>pt_flags</name></name> <operator>&amp;</operator> <name>PT_FLAG_COMBINE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"start_incl"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>prop</name><operator>-&gt;</operator><name>pt_flags</name></name> <operator>&amp;</operator> <name>PT_FLAG_INS_START_INCL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"end_incl"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>prop</name><operator>-&gt;</operator><name>pt_flags</name></name> <operator>&amp;</operator> <name>PT_FLAG_INS_END_INCL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"bufnr"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>list_types</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>todo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>proptype_T</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><call><name>HI2PT</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>list_append_string</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>pt_name</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_prop_type_list</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bufnr_from_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>global_proptypes</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>list_types</name><argument_list>(<argument><expr><name>global_proptypes</name></expr></argument>, <argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_proptypes</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>list_types</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_proptypes</name></name></expr></argument>, <argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>clear_ht_prop_types</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>todo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>proptype_T</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><call><name>HI2PT</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>hash_clear</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>clear_global_prop_types</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>clear_ht_prop_types</name><argument_list>(<argument><expr><name>global_proptypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>global_proptypes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>clear_buf_prop_types</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>clear_ht_prop_types</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_proptypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_proptypes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><name>int</name></type>
<name>adjust_prop_columns</name><parameter_list>(
<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bytes_added</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>proplen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proptype_T</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dirty</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ri</name></decl>, <decl><type ref="prev"/><name>wi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>textlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>text_prop_frozen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>proplen</name> <operator>=</operator> <call><name>get_text_props</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>proplen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>textlen</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>-</operator> <name>proplen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>wi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>ri</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ri</name> <operator>&lt;</operator> <name>proplen</name></expr>;</condition> <incr><expr><operator>++</operator><name>ri</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>textprop_T</name></type> <name>prop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start_incl</name></decl>, <decl><type ref="prev"/><name>end_incl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>can_drop</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>, <argument><expr><name>props</name> <operator>+</operator> <name>ri</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>text_prop_type_by_id</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>prop</name><operator>.</operator><name>tp_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start_incl</name> <operator>=</operator> <operator>(</operator><name>pt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>pt_flags</name></name> <operator>&amp;</operator> <name>PT_FLAG_INS_START_INCL</name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>APC_SUBSTITUTE</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>end_incl</name> <operator>=</operator> <operator>(</operator><name>pt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>pt_flags</name></name> <operator>&amp;</operator> <name>PT_FLAG_INS_END_INCL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>can_drop</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>start_incl</name> <operator>||</operator> <name>end_incl</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_added</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>prop</name><operator>.</operator><name>tp_col</name></name>
<operator>-</operator> <operator>(</operator><name>start_incl</name> <operator>||</operator> <operator>(</operator><name><name>prop</name><operator>.</operator><name>tp_len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>end_incl</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>tp_col</name></name> <operator>+=</operator> <name>bytes_added</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>APC_SAVE_FOR_UNDO</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>dirty</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>u_savesub</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dirty</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>col</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>prop</name><operator>.</operator><name>tp_col</name></name> <operator>+</operator> <name><name>prop</name><operator>.</operator><name>tp_len</name></name> <operator>+</operator> <name>end_incl</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>tp_len</name></name> <operator>+=</operator> <name>bytes_added</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>APC_SAVE_FOR_UNDO</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>dirty</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>u_savesub</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dirty</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>prop</name><operator>.</operator><name>tp_col</name></name> <operator>&gt;</operator> <name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len_changed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>.</operator><name>tp_col</name></name> <operator>+</operator> <name>bytes_added</name> <operator>&lt;</operator> <name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>tp_len</name></name> <operator>+=</operator> <operator>(</operator><name><name>prop</name><operator>.</operator><name>tp_col</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>col</name><operator>)</operator> <operator>+</operator> <name>bytes_added</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>tp_col</name></name> <operator>=</operator> <name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>tp_col</name></name> <operator>+=</operator> <name>bytes_added</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>APC_SAVE_FOR_UNDO</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>dirty</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>u_savesub</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dirty</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len_changed</name> <operator>&amp;&amp;</operator> <name><name>prop</name><operator>.</operator><name>tp_len</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>tp_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>can_drop</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>prop</name><operator>.</operator><name>tp_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>prop</name><operator>.</operator><name>tp_col</name></name> <operator>+</operator> <name><name>prop</name><operator>.</operator><name>tp_len</name></name> <operator>&gt;</operator> <name>col</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>after</name> <init>= <expr><name>col</name> <operator>-</operator> <name>bytes_added</name> <operator>-</operator> <operator>(</operator><name><name>prop</name><operator>.</operator><name>tp_col</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>prop</name><operator>.</operator><name>tp_len</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>after</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>tp_len</name></name> <operator>+=</operator> <name>bytes_added</name> <operator>+</operator> <name>after</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>tp_len</name></name> <operator>+=</operator> <name>bytes_added</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>APC_SAVE_FOR_UNDO</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>dirty</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>u_savesub</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dirty</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>.</operator><name>tp_len</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>can_drop</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>props</name> <operator>+</operator> <name>wi</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>wi</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>dirty</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>newlen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>textlen</name> <operator>+</operator> <name>wi</name> <operator>*</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_LINE_DIRTY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name> <operator>=</operator>
<call><name>vim_memsave</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|=</operator> <name>ML_LINE_DIRTY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>=</operator> <name>newlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>dirty</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>adjust_props_for_split</name><parameter_list>(
<parameter><decl><type><name>linenr_T</name></type> <name>lnum_props</name></decl></parameter>,
<parameter><decl><type><name>linenr_T</name></type> <name>lnum_top</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>kept</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>deleted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name></type> <name>prevprop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name></type> <name>nextprop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skipped</name> <init>= <expr><name>kept</name> <operator>+</operator> <name>deleted</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_has_textprop</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>get_text_props</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum_props</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prevprop</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nextprop</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>textprop_T</name></type> <name>prop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>textprop_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>, <argument><expr><name>props</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>.</operator><name>tp_col</name></name> <operator>&lt;</operator> <name>kept</name> <operator>&amp;&amp;</operator> <call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prevprop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>textprop_T</name> <operator>*</operator><operator>)</operator><name><name>prevprop</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>prevprop</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>prop</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>tp_col</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>tp_len</name></name> <operator>&gt;=</operator> <name>kept</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tp_len</name></name> <operator>=</operator> <name>kept</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>tp_col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>prevprop</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>.</operator><name>tp_col</name></name> <operator>+</operator> <name><name>prop</name><operator>.</operator><name>tp_len</name></name> <operator>&gt;</operator> <name>skipped</name> <operator>&amp;&amp;</operator> <call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nextprop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>textprop_T</name> <operator>*</operator><operator>)</operator><name><name>nextprop</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>nextprop</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>prop</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>tp_col</name></name> <operator>&gt;</operator> <name>skipped</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tp_col</name></name> <operator>-=</operator> <name>skipped</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tp_len</name></name> <operator>-=</operator> <name>skipped</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>tp_col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tp_col</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>nextprop</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>set_text_props</name><argument_list>(<argument><expr><name>lnum_top</name></expr></argument>, <argument><expr><name><name>prevprop</name><operator>.</operator><name>ga_data</name></name></expr></argument>,
<argument><expr><name><name>prevprop</name><operator>.</operator><name>ga_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prevprop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_text_props</name><argument_list>(<argument><expr><name>lnum_top</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>nextprop</name><operator>.</operator><name>ga_data</name></name></expr></argument>,
<argument><expr><name><name>nextprop</name><operator>.</operator><name>ga_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nextprop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>adjust_props_for_join</name><parameter_list>(
<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,
<parameter><decl><type><name>textprop_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>prop_line</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>prop_length</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>removed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>proplen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>proplen</name> <operator>=</operator> <call><name>get_text_props</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>proplen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>prop_line</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>textprop_T</name></expr></argument>, <argument><expr><name>proplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>prop_line</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>ri</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ri</name> <operator>&lt;</operator> <name>proplen</name></expr>;</condition> <incr><expr><operator>++</operator><name>ri</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>textprop_T</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>*</operator><name>prop_line</name> <operator>+</operator> <name>wi</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>props</name> <operator>+</operator> <name>ri</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>tp_col</name></name> <operator>+</operator> <name><name>cp</name><operator>-&gt;</operator><name>tp_len</name></name> <operator>&gt;</operator> <name>removed</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>tp_col</name></name> <operator>&gt;</operator> <name>removed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>tp_col</name></name> <operator>+=</operator> <name>col</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>tp_len</name></name> <operator>-=</operator> <name>removed</name> <operator>-</operator> <name><name>cp</name><operator>-&gt;</operator><name>tp_col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>tp_col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>wi</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>prop_length</name> <operator>=</operator> <name>wi</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>join_prop_lines</name><parameter_list>(
<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newp</name></decl></parameter>,
<parameter><decl><type><name>textprop_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>prop_lines</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>prop_lengths</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>proplen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>oldproplen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>proplen</name> <operator>+=</operator> <name><name>prop_lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>proplen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>newp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>oldproplen</name> <operator>=</operator> <call><name>get_text_props</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>newp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <operator>(</operator><name>oldproplen</name> <operator>+</operator> <name>proplen</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>newp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>oldproplen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>oldproplen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>prop_lines</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>prop_lengths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name><name>prop_lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>prop_lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ml_replace_len</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>newp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>prop_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>prop_lengths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
