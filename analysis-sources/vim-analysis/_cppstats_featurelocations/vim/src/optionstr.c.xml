<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\optionstr.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_ambw_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"single"</literal></expr>, <expr><literal type="string">"double"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_bg_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"light"</literal></expr>, <expr><literal type="string">"dark"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_bkc_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"yes"</literal></expr>, <expr><literal type="string">"auto"</literal></expr>, <expr><literal type="string">"no"</literal></expr>, <expr><literal type="string">"breaksymlink"</literal></expr>, <expr><literal type="string">"breakhardlink"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_bo_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"all"</literal></expr>, <expr><literal type="string">"backspace"</literal></expr>, <expr><literal type="string">"cursor"</literal></expr>, <expr><literal type="string">"complete"</literal></expr>,
<expr><literal type="string">"copy"</literal></expr>, <expr><literal type="string">"ctrlg"</literal></expr>, <expr><literal type="string">"error"</literal></expr>, <expr><literal type="string">"esc"</literal></expr>, <expr><literal type="string">"ex"</literal></expr>,
<expr><literal type="string">"hangul"</literal></expr>, <expr><literal type="string">"insertmode"</literal></expr>, <expr><literal type="string">"lang"</literal></expr>, <expr><literal type="string">"mess"</literal></expr>,
<expr><literal type="string">"showmatch"</literal></expr>, <expr><literal type="string">"operator"</literal></expr>, <expr><literal type="string">"register"</literal></expr>, <expr><literal type="string">"shell"</literal></expr>,
<expr><literal type="string">"spell"</literal></expr>, <expr><literal type="string">"wildmode"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_nf_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"bin"</literal></expr>, <expr><literal type="string">"octal"</literal></expr>, <expr><literal type="string">"hex"</literal></expr>, <expr><literal type="string">"alpha"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_ff_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><name>FF_UNIX</name></expr>, <expr><name>FF_DOS</name></expr>, <expr><name>FF_MAC</name></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_cm_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"zip"</literal></expr>, <expr><literal type="string">"blowfish"</literal></expr>, <expr><literal type="string">"blowfish2"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_cmp_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"internal"</literal></expr>, <expr><literal type="string">"keepascii"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_dy_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"lastline"</literal></expr>, <expr><literal type="string">"truncate"</literal></expr>, <expr><literal type="string">"uhex"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_fdo_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"all"</literal></expr>, <expr><literal type="string">"block"</literal></expr>, <expr><literal type="string">"hor"</literal></expr>, <expr><literal type="string">"mark"</literal></expr>, <expr><literal type="string">"percent"</literal></expr>,
<expr><literal type="string">"quickfix"</literal></expr>, <expr><literal type="string">"search"</literal></expr>, <expr><literal type="string">"tag"</literal></expr>, <expr><literal type="string">"insert"</literal></expr>,
<expr><literal type="string">"undo"</literal></expr>, <expr><literal type="string">"jump"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_ssop_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"buffers"</literal></expr>, <expr><literal type="string">"winpos"</literal></expr>, <expr><literal type="string">"resize"</literal></expr>, <expr><literal type="string">"winsize"</literal></expr>,
<expr><literal type="string">"localoptions"</literal></expr>, <expr><literal type="string">"options"</literal></expr>, <expr><literal type="string">"help"</literal></expr>, <expr><literal type="string">"blank"</literal></expr>, <expr><literal type="string">"globals"</literal></expr>, <expr><literal type="string">"slash"</literal></expr>, <expr><literal type="string">"unix"</literal></expr>,
<expr><literal type="string">"sesdir"</literal></expr>, <expr><literal type="string">"curdir"</literal></expr>, <expr><literal type="string">"folds"</literal></expr>, <expr><literal type="string">"cursor"</literal></expr>, <expr><literal type="string">"tabpages"</literal></expr>, <expr><literal type="string">"terminal"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_swb_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"useopen"</literal></expr>, <expr><literal type="string">"usetab"</literal></expr>, <expr><literal type="string">"split"</literal></expr>, <expr><literal type="string">"newtab"</literal></expr>, <expr><literal type="string">"vsplit"</literal></expr>, <expr><literal type="string">"uselast"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_tc_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"followic"</literal></expr>, <expr><literal type="string">"ignore"</literal></expr>, <expr><literal type="string">"match"</literal></expr>, <expr><literal type="string">"followscs"</literal></expr>, <expr><literal type="string">"smart"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_toolbar_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"text"</literal></expr>, <expr><literal type="string">"icons"</literal></expr>, <expr><literal type="string">"tooltips"</literal></expr>, <expr><literal type="string">"horiz"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_tbis_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"tiny"</literal></expr>, <expr><literal type="string">"small"</literal></expr>, <expr><literal type="string">"medium"</literal></expr>, <expr><literal type="string">"large"</literal></expr>, <expr><literal type="string">"huge"</literal></expr>, <expr><literal type="string">"giant"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_ttym_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"xterm"</literal></expr>, <expr><literal type="string">"xterm2"</literal></expr>, <expr><literal type="string">"dec"</literal></expr>, <expr><literal type="string">"netterm"</literal></expr>, <expr><literal type="string">"jsbterm"</literal></expr>, <expr><literal type="string">"pterm"</literal></expr>, <expr><literal type="string">"urxvt"</literal></expr>, <expr><literal type="string">"sgr"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_ve_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"block"</literal></expr>, <expr><literal type="string">"insert"</literal></expr>, <expr><literal type="string">"all"</literal></expr>, <expr><literal type="string">"onemore"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_wop_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"tagfile"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_wak_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"yes"</literal></expr>, <expr><literal type="string">"menu"</literal></expr>, <expr><literal type="string">"no"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_mousem_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"extend"</literal></expr>, <expr><literal type="string">"popup"</literal></expr>, <expr><literal type="string">"popup_setpos"</literal></expr>, <expr><literal type="string">"mac"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_sel_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"inclusive"</literal></expr>, <expr><literal type="string">"exclusive"</literal></expr>, <expr><literal type="string">"old"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_slm_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"mouse"</literal></expr>, <expr><literal type="string">"key"</literal></expr>, <expr><literal type="string">"cmd"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_km_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"startsel"</literal></expr>, <expr><literal type="string">"stopsel"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_bsdir_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"current"</literal></expr>, <expr><literal type="string">"last"</literal></expr>, <expr><literal type="string">"buffer"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_scbopt_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"ver"</literal></expr>, <expr><literal type="string">"hor"</literal></expr>, <expr><literal type="string">"jump"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_debug_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"msg"</literal></expr>, <expr><literal type="string">"throw"</literal></expr>, <expr><literal type="string">"beep"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_ead_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"both"</literal></expr>, <expr><literal type="string">"ver"</literal></expr>, <expr><literal type="string">"hor"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_buftype_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"nofile"</literal></expr>, <expr><literal type="string">"nowrite"</literal></expr>, <expr><literal type="string">"quickfix"</literal></expr>, <expr><literal type="string">"help"</literal></expr>, <expr><literal type="string">"terminal"</literal></expr>, <expr><literal type="string">"acwrite"</literal></expr>, <expr><literal type="string">"prompt"</literal></expr>, <expr><literal type="string">"popup"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_bufhidden_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"hide"</literal></expr>, <expr><literal type="string">"unload"</literal></expr>, <expr><literal type="string">"delete"</literal></expr>, <expr><literal type="string">"wipe"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_bs_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"indent"</literal></expr>, <expr><literal type="string">"eol"</literal></expr>, <expr><literal type="string">"start"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_fdm_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"manual"</literal></expr>, <expr><literal type="string">"expr"</literal></expr>, <expr><literal type="string">"marker"</literal></expr>, <expr><literal type="string">"indent"</literal></expr>, <expr><literal type="string">"syntax"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"diff"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_fcl_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"all"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_cot_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"menu"</literal></expr>, <expr><literal type="string">"menuone"</literal></expr>, <expr><literal type="string">"longest"</literal></expr>, <expr><literal type="string">"preview"</literal></expr>, <expr><literal type="string">"popup"</literal></expr>, <expr><literal type="string">"popuphidden"</literal></expr>, <expr><literal type="string">"noinsert"</literal></expr>, <expr><literal type="string">"noselect"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_csl_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"slash"</literal></expr>, <expr><literal type="string">"backslash"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_scl_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"yes"</literal></expr>, <expr><literal type="string">"no"</literal></expr>, <expr><literal type="string">"auto"</literal></expr>, <expr><literal type="string">"number"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>p_twt_values</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"winpty"</literal></expr>, <expr><literal type="string">"conpty"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>check_opt_strings</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>opt_strings_flags</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>flagp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>)</parameter_list>;</function_decl>





<function><type><name>void</name></type>
<name>didset_string_options</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_cmp</name></expr></argument>, <argument><expr><name>p_cmp_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_bkc</name></expr></argument>, <argument><expr><name>p_bkc_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bkc_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>p_bo_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bo_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_ssop</name></expr></argument>, <argument><expr><name>p_ssop_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssop_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_vop</name></expr></argument>, <argument><expr><name>p_ssop_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vop_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_fdo</name></expr></argument>, <argument><expr><name>p_fdo_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdo_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_dy</name></expr></argument>, <argument><expr><name>p_dy_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dy_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_tc</name></expr></argument>, <argument><expr><name>p_tc_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tc_flags</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_ve</name></expr></argument>, <argument><expr><name>p_ve_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ve_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_ttym</name></expr></argument>, <argument><expr><name>p_ttym_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ttym_flags</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_toolbar</name></expr></argument>, <argument><expr><name>p_toolbar_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>toolbar_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_tbis</name></expr></argument>, <argument><expr><name>p_tbis_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbis_flags</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>











<function><type><name>void</name></type>
<name>trigger_optionsset_string</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldval</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldval_l</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldval_g</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>oldval</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>newval</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>*</operator><call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_OPTION_TYPE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf_type</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf_type</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"local"</literal></expr> </then><else>: <expr><literal type="string">"global"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLD</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_NEW</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_TYPE</name></expr></argument>, <argument><expr><name>buf_type</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_COMMAND</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"setlocal"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLDLOCAL</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_COMMAND</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"setglobal"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLDGLOBAL</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_COMMAND</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"set"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLDLOCAL</name></expr></argument>, <argument><expr><name>oldval_l</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLDGLOBAL</name></expr></argument>, <argument><expr><name>oldval_g</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_MODELINE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_COMMAND</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"modeline"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OPTION_OLDLOCAL</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_OPTIONSET</name></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>get_option_fullname</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_v_option_vars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>illegal_char</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>errbuf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E539: Illegal character &lt;%s&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>transchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>errbuf</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>check_buf_options</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_bt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_def</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_inc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_inex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_inde</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_indk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_bexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_cm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_fex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_kp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_mps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_fo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_flp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_isk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_com</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_cms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_nf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEXTOBJ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_qe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_syn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_syn_isk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_p_spc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_p_spf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_p_spl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_sua</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_cink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_cino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_cino</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMARTINDENT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_cinw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_cpt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_COMPL_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_cfu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ofu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_tfu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_KEYMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_keymap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_gp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_mp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_efm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_tc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_tsr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_lw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_bkc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_menc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_vsts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_vts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>free_string_option</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>empty_option</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>clear_string_option</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pp</name> <operator>!=</operator> <name>empty_option</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>check_string_option</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_string_option_global</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>varp</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>is_window_local_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>GLOBAL_WO</name><argument_list>(<argument><expr><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_option_var</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_global_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>varp</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>set_string_option_direct</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <name>set_sid</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>both</name> <init>= <expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>opt_idx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_intern2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set_string_option_direct()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>siemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"For option %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_hidden_option</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_option_varp_scope</name><argument_list>(<argument><expr><name>idx</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>both</name></expr> ?</condition><then> <expr><name>OPT_LOCAL</name></expr> </then><else>: <expr><name>opt_flags</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_FREE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>get_option_flags</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>P_ALLOCED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>varp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>both</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_string_option_global</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_option_flag</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>P_ALLOCED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>is_global_local_option</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>both</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>varp</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>set_sid</name> <operator>!=</operator> <name>SID_NONE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>sctx_T</name></type> <name>script_ctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>set_sid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>script_ctx</name> <operator>=</operator> <name>current_sctx</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>script_ctx</name><operator>.</operator><name>sc_sid</name></name> <operator>=</operator> <name>set_sid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>script_ctx</name><operator>.</operator><name>sc_seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>script_ctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>script_ctx</name><operator>.</operator><name>sc_version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>set_option_sctx_idx</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>script_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>set_string_option_direct_in_win</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>set_sid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>save_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>set_sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>save_curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unblock_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>set_string_option_direct_in_buf</name><parameter_list>(
<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>set_sid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>save_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>set_sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>save_curbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unblock_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>char</name> <modifier>*</modifier></type>
<name>set_string_option</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>varp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldval</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldval_l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldval_g</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>saved_oldval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>saved_oldval_l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>saved_oldval_g</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>saved_newval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value_checked</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_hidden_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><ternary><condition><expr><name>value</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr> </then><else>: <expr><name>value</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_option_varp_scope</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><operator>(</operator><ternary><condition><expr><call><name>is_global_local_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name>OPT_GLOBAL</name></expr> </then><else>: <expr><name>OPT_LOCAL</name></expr></else></ternary><operator>)</operator></expr>
</then><else>: <expr><name>opt_flags</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>oldval</name> <operator>=</operator> <operator>*</operator><name>varp</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>oldval_l</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_option_varp_scope</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>oldval_g</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_option_varp_scope</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>varp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>starting</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_crypt_key_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>oldval_l</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>saved_oldval_l</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>oldval_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>oldval_g</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>saved_oldval_g</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>oldval_g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>saved_oldval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_newval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>did_set_string_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_checked</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>did_set_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>value_checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>trigger_optionsset_string</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>,
<argument><expr><name>saved_oldval</name></expr></argument>, <argument><expr><name>saved_oldval_l</name></expr></argument>,
<argument><expr><name>saved_oldval_g</name></expr></argument>, <argument><expr><name>saved_newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>saved_oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>saved_oldval_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>saved_oldval_g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>saved_newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>valid_filetype</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>valid_name</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">".-_"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>check_stl_option</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>itemcnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>groupdepth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <name>itemcnt</name> <operator>&lt;</operator> <name>STL_MAX_ITEM</name></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>itemcnt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>STL_TRUNCMARK</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>STL_MIDDLEMARK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>groupdepth</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>STL_USER_HL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>groupdepth</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>STL_ALL</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><call><name>illegal_char</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'}'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E540: Unclosed expression sequence"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>itemcnt</name> <operator>&gt;=</operator> <name>STL_MAX_ITEM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E541: too many items"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>groupdepth</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E542: unbalanced groups"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>char</name> <modifier>*</modifier></type>
<name>did_set_string_option</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>opt_idx</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>varp</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>new_value_alloced</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldval</name></decl></parameter>, 
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>value_checked</name></decl></parameter>)</parameter_list> 

<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_chartab</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>gvarp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long_u</name></type> <name>free_oldval</name> <init>= <expr><operator>(</operator><call><name>get_option_flags</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>P_ALLOCED</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>redraw_gui_only</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>value_changed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>did_swaptcap</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name>gvarp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>get_option_varp_scope</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>OPT_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>secure</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SANDBOX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>sandbox</name> <operator>!=</operator> <literal type="number">0</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>get_option_flags</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>P_SECURE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_secure</name></expr>;</expr_stmt></block_content></block></if>




<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>get_option_flags</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>P_NFNAME</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>vim_strpbrk</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>secure</name></expr>
?</condition><then> <expr><literal type="string">"/\\*?[|;&amp;&lt;&gt;\r\n"</literal></expr> </then><else>: <expr><literal type="string">"/\\*?[&lt;&gt;\r\n"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><call><name>get_option_flags</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>P_NDNAME</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>vim_strpbrk</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"*?[|;&amp;&lt;&gt;\r\n"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>T_NAME</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>T_NAME</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E529: Cannot set 'term' to empty string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E530: Cannot change term in GUI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>term_is_gui</name><argument_list>(<argument><expr><name>T_NAME</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E531: Use \":gui\" to start the GUI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if <condition>(<expr><call><name>set_termname</name><argument_list>(<argument><expr><name>T_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E522: Not found in termcap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>redraw_later_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>findoption</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>free_oldval</name> <operator>=</operator> <operator>(</operator><call><name>get_option_flags</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>P_ALLOCED</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_bkc</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>bkc</name> <init>= <expr><name>p_bkc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>flags</name> <init>= <expr><operator>&amp;</operator><name>bkc_flags</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>bkc</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bkc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_bkc_flags</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>bkc</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>bkc</name></expr></argument>, <argument><expr><name>p_bkc_values</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>BKC_AUTO</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>BKC_YES</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>BKC_NO</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>p_bkc_values</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_bex</name> <operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_pm</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>p_bex</name> <operator>==</operator> <literal type="char">'.'</literal></expr> ?</condition><then> <expr><name>p_bex</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>p_bex</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>*</operator><name>p_pm</name> <operator>==</operator> <literal type="char">'.'</literal></expr> ?</condition><then> <expr><name>p_pm</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>p_pm</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E589: 'backupext' and 'patchmode' are equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_briopt</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>briopt_check</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if type="elseif">else if <condition>( <expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_isi</name>
<operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_isk</name></name><operator>)</operator>
<operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_isp</name>
<operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_isf</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>init_chartab</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>did_chartab</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_hf</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>didset_vim</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_setenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"VIM"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>didset_vim</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>didset_vimruntime</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_setenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"VIMRUNTIME"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>didset_vimruntime</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_culopt</name></name>
<operator>||</operator> <name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_allbuf_opt</name><operator>.</operator><name>wo_culopt</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>varp</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>fill_culopt_flags</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>check_colorcolumn</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_hlg</name></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>p_hlg</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>s</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_hl</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>highlight_changed</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_nf</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><name>p_nf_values</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ssop</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_ssop</name></expr></argument>, <argument><expr><name>p_ssop_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssop_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_CURDIR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ssop_flags</name> <operator>&amp;</operator> <name>SSOP_SESDIR</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>p_ssop_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssop_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_vop</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_vop</name></expr></argument>, <argument><expr><name>p_ssop_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vop_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_sbo</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_sbo</name></expr></argument>, <argument><expr><name>p_scbopt_values</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ambw</name> <operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_emoji</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_ambw</name></expr></argument>, <argument><expr><name>p_ambw_values</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>set_chars_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_lcs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"E834: Conflicts with value of 'listchars'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>set_chars_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_fcs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"E835: Conflicts with value of 'fillchars'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_bg</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_bg</name></expr></argument>, <argument><expr><name>p_bg_values</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>dark</name> <init>= <expr><operator>(</operator><operator>*</operator><name>p_bg</name> <operator>==</operator> <literal type="char">'d'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>init_highlight</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>dark</name> <operator>!=</operator> <operator>(</operator><operator>*</operator><name>p_bg</name> <operator>==</operator> <literal type="char">'d'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>get_var_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"g:colors_name"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>do_unlet</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"g:colors_name"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name>p_bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_bg</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>dark</name></expr> ?</condition><then> <expr><literal type="string">"dark"</literal></expr> </then><else>: <expr><literal type="string">"light"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_highlight</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wim</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_wim</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wop</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_wop</name></expr></argument>, <argument><expr><name>p_wop_values</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WAK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_wak</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_wak</name> <operator>==</operator> <name>NUL</name>
<operator>||</operator> <call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_wak</name></expr></argument>, <argument><expr><name>p_wak_values</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_motif_set_mnemonics</name><argument_list>(<argument><expr><name><name>p_wak</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'y'</literal> <operator>||</operator> <name><name>p_wak</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_gtk_set_mnemonics</name><argument_list>(<argument><expr><name><name>p_wak</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'y'</literal> <operator>||</operator> <name><name>p_wak</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ei</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_ei</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_enc</name> <operator>||</operator> <name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_fenc</name> <operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_tenc</name>
<operator>||</operator> <name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_menc</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_fenc</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>&amp;&amp;</operator> <name>opt_flags</name> <operator>!=</operator> <name>OPT_GLOBAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_modifiable</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ml_setflags</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>enc_canonize</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>varp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_enc</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>mb_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_tenc</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>p_tenc</name></expr></argument>, <argument><expr><literal type="string">"utf-8"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E617: Cannot be changed in the GTK+ 2 GUI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_KEYMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_enc</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_keymap</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>keymap_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_enc</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_tenc</name> <operator>!=</operator> <name>NUL</name><operator>)</operator> <operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_tenc</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_conv</name></expr></argument>, <argument><expr><name>p_tenc</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>
<operator>||</operator> <call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_conv</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>p_tenc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E950: Cannot convert between %s and %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>p_tenc</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_enc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_homedir</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_POSTSCRIPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_penc</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>enc_canonize</name><argument_list>(<argument><expr><name>p_penc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p_penc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_penc</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>p_penc</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_imak</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>im_xim_isvalid_imactivate</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_KEYMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_keymap</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_filetype</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>secure_save</name> <init>= <expr><name>secure</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>secure</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>keymap_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>secure</name> <operator>=</operator> <name>secure_save</name></expr>;</expr_stmt>



<expr_stmt><expr><operator>*</operator><name>value_checked</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_keymap</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>=</operator> <name>B_IMODE_LMAP</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name> <operator>!=</operator> <name>B_IMODE_USE_INSERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name> <operator>=</operator> <name>B_IMODE_LMAP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>==</operator> <name>B_IMODE_LMAP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>=</operator> <name>B_IMODE_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name> <operator>==</operator> <name>B_IMODE_LMAP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_imsearch</name></name> <operator>=</operator> <name>B_IMODE_USE_INSERT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_iminsert_global</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_imsearch_global</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>status_redraw_curbuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ff</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_modifiable</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><name>p_ff_values</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_fileformat</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOL_DOS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tx</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tx</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ml_setflags</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>get_fileformat</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOL_MAC</name> <operator>||</operator> <operator>*</operator><name>oldval</name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ffs</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_ffs</name></expr></argument>, <argument><expr><name>p_ff_values</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_ffs</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p_ta</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_ta</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_key</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>remove_key_from_history</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_key</name></name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_set_crypt_key</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cm</name></name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><name>p_cm</name></expr> </then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cm</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_cm</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cm</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_cm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_cm_values</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>crypt_self_test</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_cm</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_value_alloced</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name>p_cm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_cm</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"zip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_value_alloced</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cm</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>oldval</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p_cm</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>oldval</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cm</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_cm</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cm</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ml_set_crypt_key</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_key</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_GLOBAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p_cm</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>curbuf</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_cm</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ml_set_crypt_key</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_mps</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>varp</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x3</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x2</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>mb_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x2</name> <operator>!=</operator> <literal type="char">':'</literal> <operator>||</operator> <name>x3</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>varp</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_com</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>varp</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>COM_ALL</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>illegal_char</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name><operator>++</operator> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E524: Missing colon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E525: Zero length string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skip_to_option_part</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_lcs</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>set_chars_option</name><argument_list>(<argument><expr><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_fcs</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>set_chars_option</name><argument_list>(<argument><expr><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_cedit</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>check_cedit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_vfile</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>verbose_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_vfile</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>verbose_open</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VIMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_viminfo</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>p_viminfo</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition><incr/>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"!\"%'/:&lt;@cfhnrs"</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>illegal_char</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition> 
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><call><name>vim_isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'!'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'h'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></if> 
<else>else 
<block>{<block_content>
<while>while <condition>(<expr><call><name>vim_isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E526: Missing number after &lt;%s&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>transchar_byte</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>errbuf</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E527: Missing comma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_viminfo</name> <operator>&amp;&amp;</operator> <name>errmsg</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>get_viminfo_parameter</name><argument_list>(<argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E528: Must specify a ' value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<if type="elseif">else if <condition>(<expr><call><name>istermoption_idx</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>full_screen</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>T_CCO</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>colors</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>T_CCO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>colors</name> <operator>!=</operator> <name>t_colors</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>t_colors</name> <operator>=</operator> <name>colors</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t_colors</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_value_alloced</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>T_CCO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>T_CCO</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>is_term_win32</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>swap_tcap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_swaptcap</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>init_highlight</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ttest</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>T_ME</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_ME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>mch_set_normal_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>T_BE</name> <operator>&amp;&amp;</operator> <name>termcap_active</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_BE</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_BD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_BE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_sbr</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>varp</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ptr2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E595: 'showbreak' contains unprintable or wide character"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_guifont</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_guifont</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>gui_mch_font_dialog</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_value_alloced</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name>p_guifont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_guifont</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>p</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>new_value_alloced</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>gui_init_font</name><argument_list>(<argument><expr><name>p_guifont</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>p_guifont</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>new_value_alloced</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name>p_guifont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_guifont</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_value_alloced</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E596: Invalid font(s)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>redraw_gui_only</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_guifontset</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>p_guifontset</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E597: can't select fontset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <call><name>gui_init_font</name><argument_list>(<argument><expr><name>p_guifontset</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E598: Invalid fontset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>redraw_gui_only</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_guifontwide</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>p_guifontwide</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E533: can't select wide font"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>gui_get_wide_font</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E534: Invalid wide font"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>redraw_gui_only</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_guicursor</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>parse_shape_opt</name><argument_list>(<argument><expr><name>SHAPE_CURSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_mouseshape</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>parse_shape_opt</name><argument_list>(<argument><expr><name>SHAPE_MOUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_mouseshape</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PRINTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_popt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>parse_printoptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_POSTSCRIPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_pmfn</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>parse_printmbfont</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LANGMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_langmap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>langmap_set</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_breakat</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fill_breakat_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_titlestring</name> <operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_iconstring</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>flagval</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_titlestring</name><operator>)</operator></expr> ?</condition><then> <expr><name>STL_IN_TITLE</name></expr> </then><else>: <expr><name>STL_IN_ICON</name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>check_stl_option</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stl_syntax</name> <operator>|=</operator> <name>flagval</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>stl_syntax</name> <operator>&amp;=</operator> <operator>~</operator><name>flagval</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>did_set_title</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_go</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_init_which_components</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw_gui_only</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_gtl</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw_gui_only</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_gtt</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>redraw_gui_only</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ttym</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>mch_setmouse</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_ttym</name></expr></argument>, <argument><expr><name>p_ttym_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ttym_flags</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_mouse_termcode</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>termcap_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_sel</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <name>NUL</name>
<operator>||</operator> <call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_sel</name></expr></argument>, <argument><expr><name>p_sel_values</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_slm</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_slm</name></expr></argument>, <argument><expr><name>p_slm_values</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_bsdir</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_bsdir</name></expr></argument>, <argument><expr><name>p_bsdir_values</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>mch_isdir</name><argument_list>(<argument><expr><name>p_bsdir</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_km</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_km</name></expr></argument>, <argument><expr><name>p_km_values</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>km_stopsel</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_km</name></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>km_startsel</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_km</name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_mousem</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_mousem</name></expr></argument>, <argument><expr><name>p_mousem_values</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>XmVersion</name> <operator>&lt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p_mousem</name> <operator>!=</operator> <operator>*</operator><name>oldval</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><call><name>gui_motif_update_mousemodel</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_swb</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_swb</name></expr></argument>, <argument><expr><name>p_swb_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>swb_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_debug</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_debug</name></expr></argument>, <argument><expr><name>p_debug_values</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_dy</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_dy</name></expr></argument>, <argument><expr><name>p_dy_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dy_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>init_chartab</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ead</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_ead</name></expr></argument>, <argument><expr><name>p_ead_values</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_cb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>check_clipboard_option</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spl</name></name><operator>)</operator>
<operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spf</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>is_spellfile</name> <init>= <expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spf</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>is_spellfile</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>valid_spellfile</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>!</operator><name>is_spellfile</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>valid_spellang</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>did_set_spell_option</name><argument_list>(<argument><expr><name>is_spellfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spc</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>compile_cap_prog</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_sps</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>spell_check_sps</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_msm</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>spell_check_msm</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_bh</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bh</name></name></expr></argument>, <argument><expr><name>p_bufhidden_values</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_bt</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bt</name></name></expr></argument>, <argument><expr><name>p_buftype_values</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_help</name></name> <operator>=</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>redraw_titles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_stl</name> <operator>||</operator> <name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ruf</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>wid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ruf</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>ru_wid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>varp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ruf</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>wid</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wid</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>errmsg</name> <operator>=</operator> <call><name>check_stl_option</name><argument_list>(<argument><expr><name>p_ruf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ru_wid</name> <operator>=</operator> <name>wid</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>check_stl_option</name><argument_list>(<argument><expr><name>p_ruf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ruf</name> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'%'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>check_stl_option</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ruf</name> <operator>&amp;&amp;</operator> <name>errmsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>comp_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_cpt</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>varp</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition><incr/>)</control>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".wbuksid]tU"</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>illegal_char</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'k'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>errbuf</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E535: Illegal character after &lt;%c&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>*</operator><operator>--</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>errbuf</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_cot</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_cot</name></expr></argument>, <argument><expr><name>p_cot_values</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>completeopt_was_set</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_csl</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_csl</name></expr></argument>, <argument><expr><name>p_csl_values</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name>
<operator>||</operator> <call><name>check_opt_strings</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_csl</name></name></expr></argument>, <argument><expr><name>p_csl_values</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scl</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><name>p_scl_values</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>oldval</name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>oldval</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'u'</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scl</name></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scl</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator><literal type="char">'u'</literal><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_rnu</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_nrwidth_line_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_toolbar</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_toolbar</name></expr></argument>, <argument><expr><name>p_toolbar_values</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>toolbar_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_show_toolbar</name><argument_list>(<argument><expr><operator>(</operator><name>toolbar_flags</name> <operator>&amp;</operator>
<operator>(</operator><name>TOOLBAR_TEXT</name> <operator>|</operator> <name>TOOLBAR_ICONS</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_tbis</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_tbis</name></expr></argument>, <argument><expr><name>p_tbis_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbis_flags</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_show_toolbar</name><argument_list>(<argument><expr><operator>(</operator><name>toolbar_flags</name> <operator>&amp;</operator>
<operator>(</operator><name>TOOLBAR_TEXT</name> <operator>|</operator> <name>TOOLBAR_ICONS</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_pt</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_pt</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>replace_termcodes</name><argument_list>(<argument><expr><name>p_pt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>,
<argument><expr><name>REPTERM_FROM_PART</name> <operator>|</operator> <name>REPTERM_DO_LT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_value_alloced</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name>p_pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p_pt</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_value_alloced</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_bs</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>p_bs</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_bs</name> <operator>&gt;</operator> <literal type="char">'2'</literal> <operator>||</operator> <name><name>p_bs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><name>p_bs_values</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_bo</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>p_bo_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bo_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_tc</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_tc_flags</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_tc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>&amp;</operator><name>tc_flags</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name>
<operator>||</operator> <call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_tc_values</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_cmp</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_cmp</name></expr></argument>, <argument><expr><name>p_cmp_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_dip</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>diffopt_changed</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_allbuf_opt</name><operator>.</operator><name>wo_fdm</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><name>p_fdm_values</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name>
<operator>||</operator> <operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdm</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsDiff</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>newFoldLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fde</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsExpr</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_allbuf_opt</name><operator>.</operator><name>wo_fmr</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E536: comma required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>p</name> <operator>==</operator> <operator>*</operator><name>varp</name> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>foldmethodIsMarker</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_cms</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>varp</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E537: 'commentstring' must be empty or contain %s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_fdo</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_fdo</name></expr></argument>, <argument><expr><name>p_fdo_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdo_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_fcl</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p_fcl</name></expr></argument>, <argument><expr><name>p_fcl_values</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_allbuf_opt</name><operator>.</operator><name>wo_fdi</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsIndent</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ve</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>p_ve</name></expr></argument>, <argument><expr><name>p_ve_values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ve_flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>p_ve</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CSCOPE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_csqf</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_csqf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_csqf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>CSQF_CMDS</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name>
<operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>CSQF_FLAGS</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_cino</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>parse_cino</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RENDER_OPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_rop</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gui_mch_set_rendering_options</name><argument_list>(<argument><expr><name>p_rop</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ft</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_filetype</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>value_changed</name> <operator>=</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>, <argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><operator>*</operator><name>value_checked</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>gvarp</name> <operator>==</operator> <operator>&amp;</operator><name>p_syn</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_filetype</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>value_changed</name> <operator>=</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>, <argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><operator>*</operator><name>value_checked</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_twk</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_twk</name></name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <call><name>string_to_key</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_twk</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_tws</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_tws</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipdigits</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_tws</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_tws</name></name>
<operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'x'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'*'</literal><operator>)</operator>
<operator>||</operator> <operator>*</operator><call><name>skipdigits</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wcr</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>term_update_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_twt</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><name>p_twt_values</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vsts</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>varp</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>varp</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>varp</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vsts_array</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vsts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vsts_array</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <operator>*</operator><name>varp</name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><operator>++</operator><name>cp</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <name>cp</name> <operator>&gt;</operator> <operator>*</operator><name>varp</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>cp</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>oldarray</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vsts_array</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>tabstop_set</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vsts_array</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>oldarray</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>oldarray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>varp</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>varp</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>varp</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <operator>*</operator><name>varp</name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><operator>++</operator><name>cp</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <name>cp</name> <operator>&gt;</operator> <operator>*</operator><name>varp</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>cp</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>oldarray</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tabstop_set</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>oldarray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsIndent</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_pvp</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_previewpopup</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_cpp</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_completepopup</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<else>else
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_ww</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>WW_ALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_shm</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>SHM_ALL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name>p_cpo</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>CPO_ALL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fo</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FO_ALL</name></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cocu</name></name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>COCU_ALL</name></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_mouse</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>MOUSE_ALL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_go</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>GO_ALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>varp</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <call><name>illegal_char</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_value_alloced</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><operator>*</operator><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>varp</name> <operator>=</operator> <name>oldval</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>did_chartab</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>init_chartab</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_hl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>highlight_changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>set_option_sctx_idx</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>current_sctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><name>free_oldval</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_value_alloced</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_option_flag</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>P_ALLOCED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_option_flag</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>P_ALLOCED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <operator>(</operator><name>OPT_LOCAL</name> <operator>|</operator> <name>OPT_GLOBAL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>is_global_local_option</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_option_varp_scope</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>p</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_LOCAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>opt_flags</name> <operator>!=</operator> <name>OPT_GLOBAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_string_option_global</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>, <argument><expr><name>varp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_syn</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>syn_recursive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>syn_recursive</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_SYNTAX</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_syn</name></name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>,
<argument><expr><name>value_changed</name> <operator>||</operator> <name>syn_recursive</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>|=</operator> <name>BF_SYN_SET</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>syn_recursive</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ft</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt_flags</name> <operator>&amp;</operator> <name>OPT_MODELINE</name><operator>)</operator> <operator>||</operator> <name>value_changed</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ft_recursive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>secure_save</name> <init>= <expr><name>secure</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>secure</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>ft_recursive</name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_filetype</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_FILETYPE</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ft</name></name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>,
<argument><expr><name>value_changed</name> <operator>||</operator> <name>ft_recursive</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>ft_recursive</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>!=</operator> <operator>&amp;</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ft</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>varp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>secure</name> <operator>=</operator> <name>secure_save</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spl</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>fname</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spl</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"cjk,"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>q</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>





<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>q</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"spell/%.*s.vim"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>q</name><operator>)</operator></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>source_runtime</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>DIP_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_mouse</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_mouse</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_setmouse</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>!=</operator> <name>MAXCOL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>get_option_flags</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>P_CURSWANT</name> <operator>|</operator> <name>P_RALL</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>redraw_gui_only</name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>check_redraw</name><argument_list>(<argument><expr><call><name>get_option_flags</name><argument_list>(<argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>did_swaptcap</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_termname</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"win32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_highlight</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>errmsg</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_opt_strings</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<return>return <expr><call><name>opt_strings_flags</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>opt_strings_flags</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, 
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl></parameter>, 
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>flagp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>new_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>val</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>list</name> <operator>&amp;&amp;</operator> <name><name>val</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator> <operator>||</operator> <name><name>val</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <operator>(</operator><name><name>val</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>new_flags</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>flagp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <name>new_flags</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>check_ff_value</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>check_opt_strings</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_ff_values</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
