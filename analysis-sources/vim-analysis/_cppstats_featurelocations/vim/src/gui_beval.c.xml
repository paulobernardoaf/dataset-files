<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\gui_beval.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdkkeysyms-compat.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdkkeysyms.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtk/gtk.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/keysym.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/PushB.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/Separator.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/List.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/Label.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/AtomMgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/Protocols.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Shell.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/Label.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/Label.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Widget</name></type> <name>vimShell</name></decl>;</decl_stmt>






<decl_stmt><decl><type><specifier>static</specifier> <name>BalloonEval</name> <modifier>*</modifier></type><name>current_beval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>addEventHandler</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>removeEventHandler</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>gint</name></type> <name>target_event_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GdkEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>gpointer</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>gint</name></type> <name>mainwin_event_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GdkEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>gpointer</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pointer_event</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>key_event</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>gboolean</name></type> <name>timeout_cb</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>gboolean</name></type> <name>balloon_draw_event_cb</name> <parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cairo_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>gpointer</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>static</specifier> <name>gint</name></type> <name>balloon_expose_event_cb</name> <parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GdkEventExpose</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>gpointer</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>addEventHandler</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>removeEventHandler</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pointerEventEH</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Boolean</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pointerEvent</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>timerRoutine</name><parameter_list>(<parameter><decl><type><name>XtPointer</name></type></decl></parameter>, <parameter><decl><type><name>XtIntervalId</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cancelBalloon</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>requestBalloon</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>drawBalloon</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>undrawBalloon</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>createBalloonEvalWindow</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>









<function><type><name>BalloonEval</name> <modifier>*</modifier></type>
<name>gui_mch_create_beval_area</name><parameter_list>(
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>target</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mesg</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mesgCB</name>)<parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>display_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>screen_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mesg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>mesgCB</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E232: Cannot create BalloonEval with both message and callback"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>beval</name> <operator>=</operator> <call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>BalloonEval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>beval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <call><name>GTK_WIDGET</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><name>target</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>appContext</name></name> <operator>=</operator> <call><name>XtWidgetToApplicationContext</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_NEUTRAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <ternary><condition><expr><name>mesg</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>msgCB</name></name> <operator>=</operator> <name>mesgCB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>clientData</name></name> <operator>=</operator> <name>clientData</name></expr>;</expr_stmt>






<expr_stmt><expr><call><name>addEventHandler</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>createBalloonEvalWindow</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><name>display_name</name> <operator>=</operator> <call><name>DisplayString</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>display_name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>screen_num</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>++</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>screen_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>screen_width</name></name> <operator>=</operator> <call><name>DisplayWidth</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>screen_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>screen_height</name></name> <operator>=</operator> <call><name>DisplayHeight</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>screen_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>beval</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TIP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>gui_mch_destroy_beval_area</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>cancelBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>removeEventHandler</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_widget_destroy</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>XtDestroyWidget</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>vts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>vts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>gui_mch_enable_beval_area</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>beval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addEventHandler</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_disable_beval_area</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>beval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>removeEventHandler</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TIP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>






<function><type><name>BalloonEval</name> <modifier>*</modifier></type>
<name>gui_mch_currently_showing_beval</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>current_beval</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>void</name></type>
<name>gui_mch_post_balloon</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mesg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <ternary><condition><expr><name>mesg</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>drawBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>undrawBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TIP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>gui_mch_unpost_balloon</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>undrawBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>addEventHandler</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"event"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>target_event_cb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>gtk_socket_id</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>mainwin</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>gtk_widget_is_ancestor</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"event"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>mainwin_event_cb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>removeEventHandler</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>g_signal_handlers_disconnect_by_func</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>FUNC2GENERIC</name><argument_list>(<argument><expr><name>target_event_cb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gtk_socket_id</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>mainwin</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>gtk_widget_is_ancestor</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>g_signal_handlers_disconnect_by_func</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>FUNC2GENERIC</name><argument_list>(<argument><expr><name>mainwin_event_cb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>target_event_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>GdkEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name> <init>= <expr><operator>(</operator><name>BalloonEval</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>GDK_ENTER_NOTIFY</name></expr>:</case>
<expr_stmt><expr><call><name>pointer_event</name><argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>event</name><operator>-&gt;</operator><name>crossing</name><operator>.</operator><name>x</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>event</name><operator>-&gt;</operator><name>crossing</name><operator>.</operator><name>y</name></name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>crossing</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GDK_MOTION_NOTIFY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>motion</name><operator>.</operator><name>is_hint</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GdkModifierType</name></type> <name>state</name></decl>;</decl_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>GdkWindow</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>win</name> <init>= <expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GdkDisplay</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dpy</name> <init>= <expr><call><name>gdk_window_get_display</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">20</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GdkSeat</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>seat</name> <init>= <expr><call><name>gdk_display_get_default_seat</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GdkDevice</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dev</name> <init>= <expr><call><name>gdk_seat_get_pointer</name><argument_list>(<argument><expr><name>seat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>GdkDeviceManager</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>mngr</name> <init>= <expr><call><name>gdk_display_get_device_manager</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GdkDevice</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dev</name> <init>= <expr><call><name>gdk_device_manager_get_client_pointer</name><argument_list>(<argument><expr><name>mngr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gdk_window_get_device_position</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>dev</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gdk_window_get_pointer</name><argument_list>(<argument><expr><name><name>widget</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>pointer_event</name><argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>pointer_event</name><argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>event</name><operator>-&gt;</operator><name>motion</name><operator>.</operator><name>x</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>event</name><operator>-&gt;</operator><name>motion</name><operator>.</operator><name>y</name></name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>motion</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>GDK_LEAVE_NOTIFY</name></expr>:</case>




<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>crossing</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>GDK_CROSSING_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cancelBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>GDK_BUTTON_PRESS</name></expr>:</case>
<case>case <expr><name>GDK_SCROLL</name></expr>:</case>
<expr_stmt><expr><call><name>cancelBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GDK_KEY_PRESS</name></expr>:</case>
<expr_stmt><expr><call><name>key_event</name><argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>keyval</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GDK_KEY_RELEASE</name></expr>:</case>
<expr_stmt><expr><call><name>key_event</name><argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>keyval</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>FALSE</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>mainwin_event_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>GdkEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name> <init>= <expr><operator>(</operator><name>BalloonEval</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>GDK_KEY_PRESS</name></expr>:</case>
<expr_stmt><expr><call><name>key_event</name><argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>keyval</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GDK_KEY_RELEASE</name></expr>:</case>
<expr_stmt><expr><call><name>key_event</name><argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>keyval</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>FALSE</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pointer_event</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>distance</name></decl>;</decl_stmt>

<expr_stmt><expr><name>distance</name> <operator>=</operator> <call><name>ABS</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name><name>beval</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ABS</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name><name>beval</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cancelBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>state</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>GDK_BUTTON1_MASK</name> <operator>|</operator> <operator>(</operator><name>int</name><operator>)</operator><name>GDK_BUTTON2_MASK</name>
<operator>|</operator> <operator>(</operator><name>int</name><operator>)</operator><name>GDK_BUTTON3_MASK</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>GDK_MOD1_MASK</name></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>msgCB</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_PENDING</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>beval</name><operator>-&gt;</operator><name>msgCB</name></name>)<argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>timerID</name></name> <operator>=</operator> <call><name>g_timeout_add</name><argument_list>(<argument><expr><operator>(</operator><name>guint</name><operator>)</operator><name>p_bdlay</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>timeout_cb</name></expr></argument>, <argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>key_event</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>keyval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_keypress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>==</operator> <name>ShS_SHOWING</name> <operator>&amp;&amp;</operator> <name><name>beval</name><operator>-&gt;</operator><name>msgCB</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name>keyval</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>GDK_Shift_L</name></expr>:</case>
<case>case <expr><name>GDK_Shift_R</name></expr>:</case>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_UPDATE_PENDING</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>beval</name><operator>-&gt;</operator><name>msgCB</name></name>)<argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>is_keypress</name><operator>)</operator></expr>
?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name>GDK_SHIFT_MASK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GDK_Control_L</name></expr>:</case>
<case>case <expr><name>GDK_Control_R</name></expr>:</case>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_UPDATE_PENDING</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>beval</name><operator>-&gt;</operator><name>msgCB</name></name>)<argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>is_keypress</name><operator>)</operator></expr>
?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name>GDK_CONTROL_MASK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>


<if_stmt><if>if <condition>(<expr><name>is_keypress</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cancelBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cancelBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>timeout_cb</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name> <init>= <expr><operator>(</operator><name>BalloonEval</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>timerID</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<expr_stmt><expr><call><name>requestBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return> 
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>balloon_draw_event_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,
<parameter><decl><type><name>cairo_t</name> <modifier>*</modifier></type><name>cr</name></decl></parameter>,
<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkStyleContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gint</name></type> <name>width</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>height</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>widget</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>context</name> <operator>=</operator> <call><name>gtk_widget_get_style_context</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>gtk_widget_get_allocated_width</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>gtk_widget_get_allocated_height</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_style_context_save</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_style_context_add_class</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"tooltip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_style_context_set_state</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>GTK_STATE_FLAG_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_save</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_render_frame</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>cr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_render_background</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>cr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cairo_restore</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_style_context_restore</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>gint</name></type>
<name>balloon_expose_event_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,
<parameter><decl><type><name>GdkEventExpose</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gtk_paint_flat_box</name><argument_list>(<argument><expr><name><name>widget</name><operator>-&gt;</operator><name>style</name></name></expr></argument>, <argument><expr><name><name>widget</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,
<argument><expr><name>GTK_STATE_NORMAL</name></expr></argument>, <argument><expr><name>GTK_SHADOW_OUT</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>area</name></name></expr></argument>, <argument><expr><name>widget</name></expr></argument>, <argument><expr><literal type="string">"tooltip"</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return> 
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function><type><specifier>static</specifier> <name>void</name></type>
<name>addEventHandler</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>target</name></expr></argument>,
<argument><expr><name>PointerMotionMask</name> <operator>|</operator> <name>EnterWindowMask</name> <operator>|</operator>
<name>LeaveWindowMask</name> <operator>|</operator> <name>ButtonPressMask</name> <operator>|</operator> <name>KeyPressMask</name> <operator>|</operator>
<name>KeyReleaseMask</name></expr></argument>,
<argument><expr><name>False</name></expr></argument>,
<argument><expr><name>pointerEventEH</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>removeEventHandler</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>XtRemoveEventHandler</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>target</name></name></expr></argument>,
<argument><expr><name>PointerMotionMask</name> <operator>|</operator> <name>EnterWindowMask</name> <operator>|</operator>
<name>LeaveWindowMask</name> <operator>|</operator> <name>ButtonPressMask</name> <operator>|</operator> <name>KeyPressMask</name> <operator>|</operator>
<name>KeyReleaseMask</name></expr></argument>,
<argument><expr><name>False</name></expr></argument>,
<argument><expr><name>pointerEventEH</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>pointerEventEH</name><parameter_list>(
<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>XtPointer</name></type> <name>client_data</name></decl></parameter>,
<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>unused</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name> <init>= <expr><operator>(</operator><name>BalloonEval</name> <operator>*</operator><operator>)</operator><name>client_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pointerEvent</name><argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>pointerEvent</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Position</name></type> <name>distance</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Position</name></type> <name>delta</name></decl>;</decl_stmt> 

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EnterNotify</name></expr>:</case>
<case>case <expr><name>MotionNotify</name></expr>:</case>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>beval</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>-</operator><name>delta</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>distance</name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>beval</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>-</operator><name>delta</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>distance</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>state</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <operator>(</operator><name>Button1Mask</name><operator>|</operator><name>Button2Mask</name><operator>|</operator><name>Button3Mask</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>cancelBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <operator>(</operator><name>Mod1Mask</name><operator>|</operator><name>Mod2Mask</name><operator>|</operator><name>Mod3Mask</name><operator>)</operator></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>x_root</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>x_root</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>y_root</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>y_root</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cancelBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>msgCB</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_PENDING</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>beval</name><operator>-&gt;</operator><name>msgCB</name></name>)<argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><name><name>beval</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>x_root</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>x_root</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>y_root</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>y_root</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cancelBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>timerID</name></name> <operator>=</operator> <call><name>XtAppAddTimeOut</name><argument_list>( <argument><expr><name><name>beval</name><operator>-&gt;</operator><name>appContext</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>long_u</name><operator>)</operator><name>p_bdlay</name></expr></argument>, <argument><expr><name>timerRoutine</name></expr></argument>, <argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>





<case>case <expr><name>KeyPress</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>==</operator> <name>ShS_SHOWING</name> <operator>&amp;&amp;</operator> <name><name>beval</name><operator>-&gt;</operator><name>msgCB</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Modifiers</name></type> <name>modifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>KeySym</name></type> <name>keysym</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtTranslateKeycode</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>xkey</name><operator>.</operator><name>keycode</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>xkey</name><operator>.</operator><name>state</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>modifier</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keysym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>keysym</name> <operator>==</operator> <name>XK_Shift_L</name> <operator>||</operator> <name>keysym</name> <operator>==</operator> <name>XK_Shift_R</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_UPDATE_PENDING</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>beval</name><operator>-&gt;</operator><name>msgCB</name></name>)<argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><name>ShiftMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>keysym</name> <operator>==</operator> <name>XK_Control_L</name> <operator>||</operator> <name>keysym</name> <operator>==</operator> <name>XK_Control_R</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_UPDATE_PENDING</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>beval</name><operator>-&gt;</operator><name>msgCB</name></name>)<argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><name>ControlMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cancelBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cancelBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>KeyRelease</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>==</operator> <name>ShS_SHOWING</name> <operator>&amp;&amp;</operator> <name><name>beval</name><operator>-&gt;</operator><name>msgCB</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Modifiers</name></type> <name>modifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>KeySym</name></type> <name>keysym</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtTranslateKeycode</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>xkey</name><operator>.</operator><name>keycode</name></name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>xkey</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modifier</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keysym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>keysym</name> <operator>==</operator> <name>XK_Shift_L</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>keysym</name> <operator>==</operator> <name>XK_Shift_R</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_UPDATE_PENDING</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>beval</name><operator>-&gt;</operator><name>msgCB</name></name>)<argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>keysym</name> <operator>==</operator> <name>XK_Control_L</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>keysym</name> <operator>==</operator> <name>XK_Control_R</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_UPDATE_PENDING</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>beval</name><operator>-&gt;</operator><name>msgCB</name></name>)<argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cancelBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cancelBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>LeaveNotify</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xcrossing</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>NotifyNormal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cancelBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>ButtonPress</name></expr>:</case>
<expr_stmt><expr><call><name>cancelBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>timerRoutine</name><parameter_list>(<parameter><decl><type><name>XtPointer</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>XtIntervalId</name> <modifier>*</modifier><name>id</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name> <init>= <expr><operator>(</operator><name>BalloonEval</name> <operator>*</operator><operator>)</operator><name>dx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>timerID</name></name> <operator>=</operator> <operator>(</operator><name>XtIntervalId</name><operator>)</operator><name>NULL</name></expr>;</expr_stmt>






<expr_stmt><expr><call><name>requestBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type>
<name>requestBalloon</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>!=</operator> <name>ShS_PENDING</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>msgCB</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_PENDING</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>beval</name><operator>-&gt;</operator><name>msgCB</name></name>)<argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><name><name>beval</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>drawBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NONPRINTABLE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((c) &lt; 0x20 &amp;&amp; (c) != TAB &amp;&amp; (c) != NL) || (c) == DEL)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_printable_label_text</name><parameter_list>(<parameter><decl><type><name>GtkLabel</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>convbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pdest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>charlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PangoAttrList</name> <modifier>*</modifier></type><name>attr_list</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>output_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>convbuf</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_conv</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>convbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <name>convbuf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>text</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <name>charlen</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>charlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <ternary><condition><expr><call><name>IS_NONPRINTABLE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>charlen</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>charlen</name> <operator>!=</operator> <call><name>utf_char2len</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>charlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>uc</name> <operator>&lt;</operator> <literal type="number">0xa0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>utf_printable</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>charlen</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>attr_list</name> <operator>=</operator> <call><name>pango_attr_list_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>attrentry_T</name> <modifier>*</modifier></type><name>aep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PangoAttribute</name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>pixel</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GdkRGBA</name></type> <name>color</name> <init>= <expr><block>{ <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>PANGO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator><literal type="number">38</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>PangoAttribute</name> <modifier>*</modifier></type><name>attr_alpha</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>GdkColor</name></type> <name>color</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>aep</name> <operator>=</operator> <call><name>syn_gui_attr2entry</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixel</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>aep</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fg_color</name></name></expr> </then><else>: <expr><name>INVALCOLOR</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pixel</name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>red</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>green</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>blue</name></name> <operator>=</operator> <operator>(</operator><name>pixel</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gdk_colormap_query_color</name><argument_list>(<argument><expr><call><name>gtk_widget_get_colormap</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>pixel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>pdest</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_NONPRINTABLE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pdest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>charlen</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>charlen</name> <operator>!=</operator> <call><name>utf_char2len</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>charlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>charlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>uc</name> <operator>&lt;</operator> <literal type="number">0xa0</literal> <operator>||</operator> <operator>!</operator><call><name>utf_printable</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>outlen</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>charlen</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>transchar_hex</name><argument_list>(<argument><expr><name>pdest</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>outlen</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>uc</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>transchar_hex</name><argument_list>(<argument><expr><name>pdest</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>outlen</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>uc</name> <operator>&lt;</operator> <literal type="number">0x100</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>transchar_nonprint</name><argument_list>(<argument><expr><name>pdest</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>outlen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pixel</name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUBLE2UINT16</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((guint16)((val) * 65535 + 0.5))</cpp:value></cpp:define>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>pango_attr_foreground_new</name><argument_list>(
<argument><expr><call><name>DOUBLE2UINT16</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>red</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DOUBLE2UINT16</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>green</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DOUBLE2UINT16</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>PANGO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator><literal type="number">38</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>attr_alpha</name> <operator>=</operator> <call><name>pango_attr_foreground_alpha_new</name><argument_list>(
<argument><expr><call><name>DOUBLE2UINT16</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DOUBLE2UINT16</name></cpp:undef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>pango_attr_foreground_new</name><argument_list>(
<argument><expr><name><name>color</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>start_index</name></name> <operator>=</operator> <name>pdest</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>end_index</name></name> <operator>=</operator> <name>pdest</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <name>outlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pango_attr_list_insert</name><argument_list>(<argument><expr><name>attr_list</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>PANGO_VERSION_CHECK</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator><literal type="number">38</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>attr_alpha</name><operator>-&gt;</operator><name>start_index</name></name> <operator>=</operator> <name>pdest</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr_alpha</name><operator>-&gt;</operator><name>end_index</name></name> <operator>=</operator> <name>pdest</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <name>outlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pango_attr_list_insert</name><argument_list>(<argument><expr><name>attr_list</name></expr></argument>, <argument><expr><name>attr_alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pdest</name> <operator>+=</operator> <name>outlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>charlen</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pdest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block>
while <condition>(<expr><operator>--</operator><name>charlen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>pdest</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>convbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_label_set_text</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_label_set_attributes</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>attr_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pango_attr_list_unref</name><argument_list>(<argument><expr><name>attr_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IS_NONPRINTABLE</name></cpp:undef>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>drawBalloon</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkRequisition</name></type> <name>requisition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>screen_w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>screen_h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>screen_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>screen_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_offset</name> <init>= <expr><name>EVAL_OFFSET_X</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_offset</name> <init>= <expr><name>EVAL_OFFSET_Y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PangoLayout</name> <modifier>*</modifier></type><name>layout</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">22</literal><operator>,</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GdkScreen</name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>screen</name> <operator>=</operator> <call><name>gtk_widget_get_screen</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_window_set_screen</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gui_gtk_get_screen_geom_of_win</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>target</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>screen_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_widget_ensure_style</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_ensure_style</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>set_printable_label_text</name><argument_list>(<argument><expr><call><name>GTK_LABEL</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>layout</name> <operator>=</operator> <call><name>gtk_label_get_layout</name><argument_list>(<argument><expr><call><name>GTK_LABEL</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PANGO_WRAP_WORD_CHAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>pango_layout_set_wrap</name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><name>PANGO_WRAP_WORD_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>pango_layout_set_wrap</name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><name>PANGO_WRAP_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>pango_layout_set_width</name><argument_list>(<argument><expr><name>layout</name></expr></argument>,

<argument><expr><name>PANGO_SCALE</name> <operator>*</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>num_cols</name></name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr></argument>,
<argument><expr><name>screen_w</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>screen_w</name> <operator>-</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_widget_get_preferred_size</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>requisition</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_widget_size_request</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>requisition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>gdk_window_get_origin</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>beval</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name><name>beval</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <name>x_offset</name> <operator>+</operator> <name><name>requisition</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <name>screen_x</name> <operator>+</operator> <name>screen_w</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y_offset</name> <operator>+=</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <name>y_offset</name> <operator>+</operator> <name><name>requisition</name><operator>.</operator><name>height</name></name> <operator>&gt;</operator> <name>screen_y</name> <operator>+</operator> <name>screen_h</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y_offset</name> <operator>=</operator> <operator>-</operator><name><name>requisition</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>EVAL_OFFSET_Y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>x_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screen_x</name> <operator>+</operator> <name>screen_w</name> <operator>-</operator> <name><name>requisition</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>CLAMP</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <name>y_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screen_y</name> <operator>+</operator> <name>screen_h</name> <operator>-</operator> <name><name>requisition</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_window_move</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_widget_set_uposition</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_SHOWING</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>undrawBalloon</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_widget_hide</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_NEUTRAL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cancelBalloon</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>==</operator> <name>ShS_SHOWING</name>
<operator>||</operator> <name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>==</operator> <name>ShS_UPDATE_PENDING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>undrawBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>timerID</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>g_source_remove</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>timerID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>timerID</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_NEUTRAL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>createBalloonEvalWindow</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name> <operator>=</operator> <call><name>gtk_window_new</name><argument_list>(<argument><expr><name>GTK_WINDOW_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_set_app_paintable</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_window_set_resizable</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_set_name</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>, <argument><expr><literal type="string">"gtk-tooltips"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_container_set_border_width</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"draw"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>balloon_draw_event_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_signal_connect</name><argument_list>(<argument><expr><operator>(</operator><name>GtkObject</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"expose_event"</literal></expr></argument>,
<argument><expr><call><name>GTK_SIGNAL_FUNC</name><argument_list>(<argument><expr><name>balloon_expose_event_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name> <operator>=</operator> <call><name>gtk_label_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_label_set_line_wrap</name><argument_list>(<argument><expr><call><name>GTK_LABEL</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_label_set_justify</name><argument_list>(<argument><expr><call><name>GTK_LABEL</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GTK_JUSTIFY_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">16</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_label_set_xalign</name><argument_list>(<argument><expr><call><name>GTK_LABEL</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_label_set_yalign</name><argument_list>(<argument><expr><call><name>GTK_LABEL</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">14</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>GValue</name></type> <name>align_val</name> <init>= <expr><name>G_VALUE_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>g_value_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>align_val</name></expr></argument>, <argument><expr><name>G_TYPE_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_value_set_float</name><argument_list>(<argument><expr><operator>&amp;</operator><name>align_val</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_set_property</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"xalign"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>align_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_set_property</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"yalign"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>align_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_value_unset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>align_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_misc_set_alignment</name><argument_list>(<argument><expr><call><name>GTK_MISC</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gtk_widget_set_name</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>, <argument><expr><literal type="string">"vim-balloon-label"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 




<function><type><specifier>static</specifier> <name>void</name></type>
<name>drawBalloon</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dimension</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dimension</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Position</name></type> <name>tx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Position</name></type> <name>ty</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>XmString</name></type> <name>s</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>msgCB</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>XmStringCreateLtoR</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name>XmFONTLIST_DEFAULT_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>XmStringCreateLocalized</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>XmFontList</name></type> <name>fl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fl</name> <operator>=</operator> <call><name>gui_motif_fontset2fontlist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>tooltip_fontset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fl</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>XmStringExtent</name><argument_list>(<argument><expr><name>fl</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XmFontListFree</name><argument_list>(<argument><expr><name>fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name>w</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>, <argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<decl_stmt><decl><type><name>XFontSet</name></type> <name>fset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XFontSetExtents</name> <modifier>*</modifier></type><name>ext</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>, <argument><expr><name>XtNfontSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ext</name> <operator>=</operator> <call><name>XExtentsOfFontSet</name><argument_list>(<argument><expr><name>fset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>ext</name><operator>-&gt;</operator><name>max_ink_extent</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>XmbTextEscapement</name><argument_list>(<argument><expr><name>fset</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>, <argument><expr><name>XtNlabel</name></expr></argument>, <argument><expr><name><name>beval</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>tx</name> <operator>=</operator> <name><name>beval</name><operator>-&gt;</operator><name>x_root</name></name> <operator>+</operator> <name>EVAL_OFFSET_X</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ty</name> <operator>=</operator> <name><name>beval</name><operator>-&gt;</operator><name>y_root</name></name> <operator>+</operator> <name>EVAL_OFFSET_Y</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tx</name> <operator>+</operator> <name>w</name><operator>)</operator> <operator>&gt;</operator> <name><name>beval</name><operator>-&gt;</operator><name>screen_width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tx</name> <operator>=</operator> <name><name>beval</name><operator>-&gt;</operator><name>screen_width</name></name> <operator>-</operator> <name>w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ty</name> <operator>+</operator> <name>h</name><operator>)</operator> <operator>&gt;</operator> <name><name>beval</name><operator>-&gt;</operator><name>screen_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ty</name> <operator>=</operator> <name><name>beval</name><operator>-&gt;</operator><name>screen_height</name></name> <operator>-</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>,
<argument><expr><name>XmNx</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>,
<argument><expr><name>XmNy</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>,
<argument><expr><name>XtNx</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>,
<argument><expr><name>XtNy</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>
<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>XmNbackground</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>tooltip_bg_pixel</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>XmNforeground</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>tooltip_fg_pixel</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>XtNbackground</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>tooltip_bg_pixel</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>XtNforeground</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>tooltip_fg_pixel</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>XtPopup</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>, <argument><expr><name>XtGrabNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_SHOWING</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_beval</name> <operator>=</operator> <name>beval</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>undrawBalloon</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XtPopdown</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_NEUTRAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_beval</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cancelBalloon</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>==</operator> <name>ShS_SHOWING</name>
<operator>||</operator> <name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>==</operator> <name>ShS_UPDATE_PENDING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>undrawBalloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>timerID</name></name> <operator>!=</operator> <operator>(</operator><name>XtIntervalId</name><operator>)</operator><name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XtRemoveTimeOut</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>timerID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>timerID</name></name> <operator>=</operator> <operator>(</operator><name>XtIntervalId</name><operator>)</operator><name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>showState</name></name> <operator>=</operator> <name>ShS_NEUTRAL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>createBalloonEvalWindow</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNallowShellResize</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name> <operator>=</operator> <call><name>XtAppCreateShell</name><argument_list>(<argument><expr><literal type="string">"balloonEval"</literal></expr></argument>, <argument><expr><literal type="string">"BalloonEval"</literal></expr></argument>,
<argument><expr><name>overrideShellWidgetClass</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNallowShellResize</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name> <operator>=</operator> <call><name>XtAppCreateShell</name><argument_list>(<argument><expr><literal type="string">"balloonEval"</literal></expr></argument>, <argument><expr><literal type="string">"BalloonEval"</literal></expr></argument>,
<argument><expr><name>overrideShellWidgetClass</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>XmFontList</name></type> <name>fl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fl</name> <operator>=</operator> <call><name>gui_motif_fontset2fontlist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>tooltip_fontset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNforeground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>tooltip_fg_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbackground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>tooltip_bg_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNfontList</name></expr></argument>, <argument><expr><name>fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNalignment</name></expr></argument>, <argument><expr><name>XmALIGNMENT_BEGINNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name> <operator>=</operator> <call><name>XtCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"balloonLabel"</literal></expr></argument>,
<argument><expr><name>xmLabelWidgetClass</name></expr></argument>, <argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>tooltip_fg_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>tooltip_bg_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNinternational</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNfontSet</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>tooltip_fontset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonLabel</name></name> <operator>=</operator> <call><name>XtCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"balloonLabel"</literal></expr></argument>,
<argument><expr><name>labelWidgetClass</name></expr></argument>, <argument><expr><name><name>beval</name><operator>-&gt;</operator><name>balloonShell</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
