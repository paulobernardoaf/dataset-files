<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\arglist.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AL_SET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AL_ADD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AL_DEL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>




<function><type><name>void</name></type>
<name>alist_clear</name><parameter_list>(<parameter><decl><type><name>alist_T</name> <modifier>*</modifier></type><name>al</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>--</operator><name><name>al</name><operator>-&gt;</operator><name>al_ga</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>AARGLIST</name><argument_list>(<argument><expr><name>al</name></expr></argument>)</argument_list></call><index>[<expr><name><name>al</name><operator>-&gt;</operator><name>al_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index><operator>.</operator><name>ae_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>al</name><operator>-&gt;</operator><name>al_ga</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>alist_init</name><parameter_list>(<parameter><decl><type><name>alist_T</name> <modifier>*</modifier></type><name>al</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>al</name><operator>-&gt;</operator><name>al_ga</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aentry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>alist_unlink</name><parameter_list>(<parameter><decl><type><name>alist_T</name> <modifier>*</modifier></type><name>al</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>al</name> <operator>!=</operator> <operator>&amp;</operator><name>global_alist</name> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>al</name><operator>-&gt;</operator><name>al_refcount</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>alist_clear</name><argument_list>(<argument><expr><name>al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>alist_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_alist</name></name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>alist_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_alist</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_alist</name></name> <operator>=</operator> <operator>&amp;</operator><name>global_alist</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>global_alist</name><operator>.</operator><name>al_refcount</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_alist</name><operator>-&gt;</operator><name>al_refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_alist</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>++</operator><name>max_alist_id</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alist_init</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_alist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>void</name></type>
<name>alist_expand</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fnum_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fnum_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>old_arg_files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_arg_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_arg_files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_arg_file_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_p_su</name> <init>= <expr><name>p_su</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>




<expr_stmt><expr><name>p_su</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_arg_files</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>, <argument><expr><name>GARGCOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_arg_files</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GARGCOUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>old_arg_files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>GARGLIST</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ae_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>old_arg_count</name> <operator>=</operator> <name>GARGCOUNT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>expand_wildcards</name><argument_list>(<argument><expr><name>old_arg_count</name></expr></argument>, <argument><expr><name>old_arg_files</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>new_arg_file_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_arg_files</name></expr></argument>,
<argument><expr><name>EW_FILE</name><operator>|</operator><name>EW_NOTFOUND</name><operator>|</operator><name>EW_ADDSLASH</name><operator>|</operator><name>EW_NOERROR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name>
<operator>&amp;&amp;</operator> <name>new_arg_file_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>alist_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>global_alist</name></expr></argument>, <argument><expr><name>new_arg_file_count</name></expr></argument>, <argument><expr><name>new_arg_files</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>fnum_list</name></expr></argument>, <argument><expr><name>fnum_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeWild</name><argument_list>(<argument><expr><name>old_arg_count</name></expr></argument>, <argument><expr><name>old_arg_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_su</name> <operator>=</operator> <name>save_p_su</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>void</name></type>
<name>alist_set</name><parameter_list>(
<parameter><decl><type><name>alist_T</name> <modifier>*</modifier></type><name>al</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>use_curbuf</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fnum_list</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fnum_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>recursive</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_au_recursive</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>recursive</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>alist_clear</name><argument_list>(<argument><expr><name>al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>al</name><operator>-&gt;</operator><name>al_ga</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition>
<block>{<block_content>


<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<break>break;</break>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>fnum_list</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>fnum_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>buf_set_name</name><argument_list>(<argument><expr><name><name>fnum_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>alist_add</name><argument_list>(<argument><expr><name>al</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>use_curbuf</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FreeWild</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>al</name> <operator>==</operator> <operator>&amp;</operator><name>global_alist</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg_had_last</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>recursive</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>alist_add</name><parameter_list>(
<parameter><decl><type><name>alist_T</name> <modifier>*</modifier></type><name>al</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>set_fnum</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>slash_adjust</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>AARGLIST</name><argument_list>(<argument><expr><name>al</name></expr></argument>)</argument_list></call><index>[<expr><name><name>al</name><operator>-&gt;</operator><name>al_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index><operator>.</operator><name>ae_fname</name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>set_fnum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AARGLIST</name><argument_list>(<argument><expr><name>al</name></expr></argument>)</argument_list></call><index>[<expr><name><name>al</name><operator>-&gt;</operator><name>al_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index><operator>.</operator><name>ae_fnum</name> <operator>=</operator>
<call><name>buflist_add</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>BLN_LISTED</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>set_fnum</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>BLN_CURBUF</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>al</name><operator>-&gt;</operator><name>al_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>alist_slash_adjust</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GARGCOUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>GARGLIST</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ae_fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>slash_adjust</name><argument_list>(<argument><expr><name><name>GARGLIST</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ae_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_alist</name></name> <operator>!=</operator> <operator>&amp;</operator><name>global_alist</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>WARGCOUNT</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>WARGLIST</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>ae_fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>slash_adjust</name><argument_list>(<argument><expr><call><name>WARGLIST</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>ae_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>do_one_arg</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inbacktick</name></decl>;</decl_stmt>

<expr_stmt><expr><name>inbacktick</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><operator>*</operator><name>str</name></expr>;</condition> <incr><expr><operator>++</operator><name>str</name></expr></incr>)</control>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>rem_backslash</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>str</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inbacktick</name> <operator>&amp;&amp;</operator> <call><name>vim_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'`'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inbacktick</name> <operator>^=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>str</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_arglist</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>escaped</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><name>gap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <name>str</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>escaped</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>do_one_arg</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>int</name></type>
<name>get_arglist_exp</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fcountp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>fnamesp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>wig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_arglist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wig</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>expand_wildcards</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>,
<argument><expr><name>fcountp</name></expr></argument>, <argument><expr><name>fnamesp</name></expr></argument>, <argument><expr><name>EW_FILE</name><operator>|</operator><name>EW_NOTFOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>gen_expand_wildcards</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>,
<argument><expr><name>fcountp</name></expr></argument>, <argument><expr><name>fnamesp</name></expr></argument>, <argument><expr><name>EW_FILE</name><operator>|</operator><name>EW_NOTFOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>alist_check_arg_idx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>win</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_alist</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_alist</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_arg_idx</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>alist_add_list</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>after</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>will_edit</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_argcount</name> <init>= <expr><name>ARGCOUNT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>ALIST</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>al_ga</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>after</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>after</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>after</name> <operator>&gt;</operator> <name>ARGCOUNT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>after</name> <operator>=</operator> <name>ARGCOUNT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>after</name> <operator>&lt;</operator> <name>ARGCOUNT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ARGLIST</name><index>[<expr><name>after</name> <operator>+</operator> <name>count</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ARGLIST</name><index>[<expr><name>after</name></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>ARGCOUNT</name> <operator>-</operator> <name>after</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aentry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>BLN_LISTED</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>will_edit</name></expr> ?</condition><then> <expr><name>BLN_CURBUF</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ARGLIST</name><index>[<expr><name>after</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>ae_fname</name> <operator>=</operator> <name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ARGLIST</name><index>[<expr><name>after</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>ae_fnum</name> <operator>=</operator> <call><name>buflist_add</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ALIST</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>al_ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_argcount</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>&gt;=</operator> <name>after</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_arglist</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>,
<parameter><decl><type><name>int</name> <name>after</name></type> <name>UNUSED</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>will_edit</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>new_ga</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exp_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>exp_files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arg_escaped</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <name>AL_ADD</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg_escaped</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>get_arglist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_ga</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>arg_escaped</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <name>AL_DEL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>didone</name></decl>;</decl_stmt>



<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <name>p_fic</name></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>new_ga</name><operator>.</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>new_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>file_pat_to_reg_pat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><ternary><condition><expr><name>p_magic</name></expr> ?</condition><then> <expr><name>RE_MAGIC</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>didone</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>match</name> <operator>&lt;</operator> <name>ARGCOUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>match</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ARGLIST</name><index>[<expr><name>match</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>didone</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>ARGLIST</name><index>[<expr><name>match</name></expr>]</index></name><operator>.</operator><name>ae_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>ARGLIST</name> <operator>+</operator> <name>match</name></expr></argument>, <argument><expr><name>ARGLIST</name> <operator>+</operator> <name>match</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>ARGCOUNT</name> <operator>-</operator> <name>match</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aentry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><call><name>ALIST</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>al_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>&gt;</operator> <name>match</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>match</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>didone</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nomatch2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>new_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>expand_wildcards</name><argument_list>(<argument><expr><name><name>new_ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>new_ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>exp_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exp_files</name></expr></argument>, <argument><expr><name>EW_DIR</name><operator>|</operator><name>EW_FILE</name><operator>|</operator><name>EW_ADDSLASH</name><operator>|</operator><name>EW_NOTFOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>FAIL</name> <operator>||</operator> <name>exp_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nomatch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <name>AL_ADD</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>alist_add_list</name><argument_list>(<argument><expr><name>exp_count</name></expr></argument>, <argument><expr><name>exp_files</name></expr></argument>, <argument><expr><name>after</name></expr></argument>, <argument><expr><name>will_edit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>exp_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>alist_set</name><argument_list>(<argument><expr><call><name>ALIST</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>exp_count</name></expr></argument>, <argument><expr><name>exp_files</name></expr></argument>, <argument><expr><name>will_edit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>alist_check_arg_idx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>set_arglist</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>do_arglist</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>AL_SET</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>editing_arg_idx</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><operator>(</operator><name><name>win</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>&gt;=</operator> <call><name>WARGCOUNT</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_fnum</name></name>
<operator>!=</operator> <call><name>WARGLIST</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call><index>[<expr><name><name>win</name><operator>-&gt;</operator><name>w_arg_idx</name></name></expr>]</index><operator>.</operator><name>ae_fnum</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <operator>!</operator><operator>(</operator><call><name>fullpathcmp</name><argument_list>(
<argument><expr><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>WARGLIST</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call><index>[<expr><name><name>win</name><operator>-&gt;</operator><name>w_arg_idx</name></name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FPC_SAME</name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>check_arg_idx</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>WARGCOUNT</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>editing_arg_idx</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_arg_idx_invalid</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>!=</operator> <call><name>WARGCOUNT</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name>arg_had_last</name> <operator>==</operator> <name>FALSE</name>
<operator>&amp;&amp;</operator> <call><name>ALIST</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>&amp;</operator><name>global_alist</name>
<operator>&amp;&amp;</operator> <name>GARGCOUNT</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>win</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>&lt;</operator> <name>GARGCOUNT</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_fnum</name></name> <operator>==</operator> <name><name>GARGLIST</name><index>[<expr><name>GARGCOUNT</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ae_fnum</name>
<operator>||</operator> <operator>(</operator><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>fullpathcmp</name><argument_list>(<argument><expr><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GARGLIST</name><index>[<expr><name>GARGCOUNT</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FPC_SAME</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg_had_last</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_arg_idx_invalid</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>==</operator> <call><name>WARGCOUNT</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name><name>win</name><operator>-&gt;</operator><name>w_alist</name></name> <operator>==</operator> <operator>&amp;</operator><name>global_alist</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg_had_last</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_args</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>!=</operator> <name>CMD_args</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>alist_unlink</name><argument_list>(<argument><expr><call><name>ALIST</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_argglobal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ALIST</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><name>global_alist</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>alist_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>ex_next</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_args</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ARGCOUNT</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name> <init>= <expr><call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>, <argument><expr><name>ARGCOUNT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>items</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>gotocmdline</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ARGCOUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ARGLIST</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>list_in_columns</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>ARGCOUNT</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_arglocal</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name> <init>= <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_alist</name><operator>-&gt;</operator><name>al_ga</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>GARGCOUNT</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GARGCOUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>GARGLIST</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ae_fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>AARGLIST</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_alist</name></name></expr></argument>)</argument_list></call><index>[<expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>]</index><operator>.</operator><name>ae_fname</name> <operator>=</operator>
<call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>GARGLIST</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ae_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AARGLIST</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_alist</name></name></expr></argument>)</argument_list></call><index>[<expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>]</index><operator>.</operator><name>ae_fnum</name> <operator>=</operator>
<name><name>GARGLIST</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ae_fnum</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_previous</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>&gt;=</operator> <name>ARGCOUNT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_argfile</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>ARGCOUNT</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_argfile</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_rewind</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>do_argfile</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_last</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>do_argfile</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>ARGCOUNT</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_argument</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>do_argfile</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>do_argfile</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>other</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_arg_idx</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ERROR_IF_ANY_POPUP_WINDOW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argn</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>argn</name> <operator>&gt;=</operator> <name>ARGCOUNT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ARGCOUNT</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E163: There is only one file to edit"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>argn</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E164: Cannot go before first file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E165: Cannot go beyond last file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>cmd</name></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <name><name>cmdmod</name><operator>.</operator><name>tab</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>win_split</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RESET_BINDING</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name>other</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>buf_hide</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>fix_fname</name><argument_list>(<argument><expr><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ARGLIST</name><index>[<expr><name>argn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>otherfile</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>buf_hide</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>other</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>check_changed</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>CCGD_AW</name>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name>other</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>CCGD_MULTWIN</name></expr></else></ternary><operator>)</operator>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr> ?</condition><then> <expr><name>CCGD_FORCEIT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>|</operator> <name>CCGD_EXCMD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>=</operator> <name>argn</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argn</name> <operator>==</operator> <name>ARGCOUNT</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_alist</name></name> <operator>==</operator> <operator>&amp;</operator><name>global_alist</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg_had_last</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>do_ecmd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ARGLIST</name><index>[<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>ECMD_LAST</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><call><name>buf_hide</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ECMD_HIDE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr> ?</condition><then> <expr><name>ECMD_FORCEIT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>=</operator> <name>old_arg_idx</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>!=</operator> <name>CMD_argdo</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setmark</name><argument_list>(<argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_next</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>( <expr><call><name>buf_hide</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call>
<operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_snext</name>
<operator>||</operator> <operator>!</operator><call><name>check_changed</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>CCGD_AW</name>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr> ?</condition><then> <expr><name>CCGD_FORCEIT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>|</operator> <name>CCGD_EXCMD</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>do_arglist</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>AL_SET</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>do_argfile</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_argedit</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr> </then><else>: <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curbuf_is_reusable</name> <init>= <expr><call><name>curbuf_reusable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>do_arglist</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>AL_ADD</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>curbuf_is_reusable</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>ARGCOUNT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_argfile</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_argadd</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>do_arglist</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>AL_ADD</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr> </then><else>: <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_argdelete</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>&gt;</operator> <name>ARGCOUNT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>=</operator> <name>ARGCOUNT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invrange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>ARGLIST</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ae_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>ARGLIST</name> <operator>+</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ARGLIST</name> <operator>+</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>ARGCOUNT</name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aentry_T</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALIST</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>al_ga</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>&gt;=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>&gt;</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARGCOUNT</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>&gt;=</operator> <name>ARGCOUNT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>=</operator> <name>ARGCOUNT</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_argreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_arglist</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>AL_DEL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>get_arglist_name</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier><name>xp</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name>ARGCOUNT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ARGLIST</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>alist_name</name><parameter_list>(<parameter><decl><type><name>aentry_T</name> <modifier>*</modifier></type><name>aep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>


<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><name><name>aep</name><operator>-&gt;</operator><name>ae_fnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>bp</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>aep</name><operator>-&gt;</operator><name>ae_fname</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>bp</name><operator>-&gt;</operator><name>b_fname</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_arg_all</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>keep_tabs</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wpnext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>opened</name></decl>;</decl_stmt> 





<decl_stmt><decl><type><name>int</name></type> <name>opened_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>use_firstwin</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tab_drop_empty_window</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>split_ret</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p_ea_save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>alist_T</name> <modifier>*</modifier></type><name>alist</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tpnext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>had_tab</name> <init>= <expr><name><name>cmdmod</name><operator>.</operator><name>tab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>old_curwin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last_curwin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>old_curtab</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last_curtab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>new_curwin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>new_curtab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ARGCOUNT</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>opened_len</name> <operator>=</operator> <name>ARGCOUNT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>opened</name> <operator>=</operator> <call><name>alloc_clear</name><argument_list>(<argument><expr><name>opened_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opened</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>alist</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_alist</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>alist</name><operator>-&gt;</operator><name>al_refcount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_curwin</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_curtab</name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<if_stmt><if>if <condition>(<expr><name>had_tab</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>goto_tabpage_tp</name><argument_list>(<argument><expr><name>first_tabpage</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>tpnext</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_next</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <name>firstwin</name></expr>;</init> <condition><expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name>wpnext</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>wpnext</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><operator>!</operator><name>keep_tabs</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>!=</operator> <name>Columns</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>opened_len</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>opened_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>alist</name><operator>-&gt;</operator><name>al_ga</name><operator>.</operator><name>ga_len</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>AARGLIST</name><argument_list>(<argument><expr><name>alist</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>ae_fnum</name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name>
<operator>||</operator> <call><name>fullpathcmp</name><argument_list>(<argument><expr><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>AARGLIST</name><argument_list>(<argument><expr><name>alist</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FPC_SAME</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>weight</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>old_curtab</name> <operator>==</operator> <name>curtab</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>weight</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old_curwin</name> <operator>==</operator> <name>wp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>weight</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>weight</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>opened</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>opened</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>weight</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_curwin</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>new_curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>=</operator> <name>opened_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>new_curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_curtab</name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>keep_tabs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>opened_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_alist</name></name> <operator>!=</operator> <name>alist</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>alist_unlink</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_alist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_alist</name></name> <operator>=</operator> <name>alist</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>wp</name><operator>-&gt;</operator><name>w_alist</name><operator>-&gt;</operator><name>al_refcount</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>opened_len</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>keep_tabs</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>buf_hide</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>forceit</name> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>||</operator> <operator>!</operator><call><name>bufIsChanged</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>buf_hide</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>&lt;=</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <call><name>bufIsChanged</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>bufref_T</name></type> <name>bufref</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>autowrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_valid</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>wpnext</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt> 
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ONE_WINDOW</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>first_tabpage</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name>had_tab</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use_firstwin</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>win_close</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>!</operator><call><name>buf_hide</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>bufIsChanged</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_valid</name><argument_list>(<argument><expr><name>wpnext</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wpnext</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>had_tab</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>tpnext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_tabpage</name><argument_list>(<argument><expr><name>tpnext</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tpnext</name> <operator>=</operator> <name>first_tabpage</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>goto_tabpage_tp</name><argument_list>(<argument><expr><name>tpnext</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>opened_len</name> <operator>||</operator> <name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>opened_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><operator>++</operator><name>autocmd_no_enter</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>autocmd_no_leave</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_curwin</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_curtab</name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>lastwin</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>keep_tabs</name> <operator>&amp;&amp;</operator> <call><name>BUFEMPTY</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_changed</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>use_firstwin</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tab_drop_empty_window</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>alist</name> <operator>==</operator> <operator>&amp;</operator><name>global_alist</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name><name>global_alist</name><operator>.</operator><name>al_ga</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg_had_last</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opened</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>!=</operator> <name>i</name></expr>)</condition>
<block>{<block_content>
<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wpnext</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wpnext</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>==</operator> <name>i</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>keep_tabs</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_curwin</name> <operator>=</operator> <name>wpnext</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_curtab</name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>wpnext</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_parent</name></name>
<operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_frame</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E249: window layout changed unexpectedly"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_move_after</name><argument_list>(<argument><expr><name>wpnext</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>split_ret</name> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tab_drop_empty_window</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>autocmd_no_enter</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_firstwin</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>p_ea_save</name> <operator>=</operator> <name>p_ea</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ea</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>split_ret</name> <operator>=</operator> <call><name>win_split</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WSP_ROOM</name> <operator>|</operator> <name>WSP_BELOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ea</name> <operator>=</operator> <name>p_ea_save</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>split_ret</name> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><operator>--</operator><name>autocmd_no_leave</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_curwin</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_curtab</name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_ecmd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>AARGLIST</name><argument_list>(<argument><expr><name>alist</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ECMD_ONE</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>buf_hide</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>bufIsChanged</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>ECMD_HIDE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>+</operator> <name>ECMD_OLDBUF</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tab_drop_empty_window</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>autocmd_no_enter</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_firstwin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>autocmd_no_leave</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>use_firstwin</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ui_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>had_tab</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>tabpage_index</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>p_tpm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>tab</name></name> <operator>=</operator> <literal type="number">9999</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>alist_unlink</name><argument_list>(<argument><expr><name>alist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>autocmd_no_enter</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>last_curtab</name> <operator>!=</operator> <name>new_curtab</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>valid_tabpage</name><argument_list>(<argument><expr><name>last_curtab</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>goto_tabpage_tp</name><argument_list>(<argument><expr><name>last_curtab</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>win_valid</name><argument_list>(<argument><expr><name>last_curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>last_curwin</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>valid_tabpage</name><argument_list>(<argument><expr><name>new_curtab</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>goto_tabpage_tp</name><argument_list>(<argument><expr><name>new_curtab</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>win_valid</name><argument_list>(<argument><expr><name>new_curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>new_curwin</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>autocmd_no_leave</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>opened</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>ex_all</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>=</operator> <literal type="number">9999</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>do_arg_all</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_drop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>arg_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>




<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>ARGCOUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ARGLIST</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>retval</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'`'</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>retval</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>retval</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>retval</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>f_argc</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>ARGCOUNT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_NUMBER</name>
<operator>&amp;&amp;</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>GARGCOUNT</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>find_win_by_nr_or_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>WARGCOUNT</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_argidx</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_arglistid</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>find_tabwin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_alist</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_arglist_as_rettv</name><parameter_list>(<parameter><decl><type><name>aentry_T</name> <modifier>*</modifier></type><name>arglist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <name>arglist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>argcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>list_append_string</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>,
<argument><expr><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arglist</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_argv</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>aentry_T</name> <modifier>*</modifier></type><name>arglist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argcount</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>arglist</name> <operator>=</operator> <name>ARGLIST</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argcount</name> <operator>=</operator> <name>ARGCOUNT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_NUMBER</name>
<operator>&amp;&amp;</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>arglist</name> <operator>=</operator> <name>GARGLIST</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argcount</name> <operator>=</operator> <name>GARGCOUNT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>find_win_by_nr_or_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>arglist</name> <operator>=</operator> <call><name>WARGLIST</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argcount</name> <operator>=</operator> <call><name>WARGCOUNT</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arglist</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name>argcount</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arglist</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_arglist_as_rettv</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_arglist_as_rettv</name><argument_list>(<argument><expr><name>ARGLIST</name></expr></argument>, <argument><expr><name>ARGCOUNT</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
