<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\debugger.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>debug_greedy</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_setdebugtracelevel</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_checkbacktracelevel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_showbacktrace</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>debug_oldval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>debug_newval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>debug_expr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<function><type><name>int</name></type>
<name>has_watchexpr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>debug_expr</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>do_debug</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_msg_scroll</name> <init>= <expr><name>msg_scroll</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_State</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_did_emsg</name> <init>= <expr><name>did_emsg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_cmd_silent</name> <init>= <expr><name>cmd_silent</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_msg_silent</name> <init>= <expr><name>msg_silent</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_emsg_silent</name> <init>= <expr><name>emsg_silent</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_redir_off</name> <init>= <expr><name>redir_off</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tasave_T</name></type> <name>typeaheadbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>typeahead_saved</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_ignore_script</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_ex_normal_busy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmdline</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_cmd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_CONT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_NEXT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_STEP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_FINISH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_QUIT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_INTERRUPT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_BACKTRACE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_FRAME</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_UP</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_DOWN</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALWAYS_USE_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>debug_break_level</name> <operator>=</operator> <literal type="number">9999</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><call><name>settmode</name><argument_list>(<argument><expr><name>TMODE_RAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>starttermcap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>RedrawingDisabled</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>++</operator><name>no_wait_return</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>emsg_silent</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>redir_off</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_mode</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>debug_did_msg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Entering Debug mode. Type \"cont\" to continue."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>debug_oldval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Oldval = \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>debug_oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>debug_oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_oldval</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>debug_newval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Newval = \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>debug_newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>debug_newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_newval</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sname</name> <operator>=</operator> <call><name>estack_sfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>SOURCING_LNUM</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"line %ld: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SOURCING_LNUM</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cmd: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>






<expr_stmt><expr><name>save_ex_normal_busy</name> <operator>=</operator> <name>ex_normal_busy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ex_normal_busy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>debug_greedy</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>save_typeahead</name><argument_list>(<argument><expr><operator>&amp;</operator><name>typeaheadbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>typeahead_saved</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_ignore_script</name> <operator>=</operator> <name>ignore_script</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ignore_script</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdline</name> <operator>=</operator> <call><name>getcmdline_prompt</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EXPAND_NOTHING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>typeahead_saved</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>restore_typeahead</name><argument_list>(<argument><expr><operator>&amp;</operator><name>typeaheadbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ignore_script</name> <operator>=</operator> <name>save_ignore_script</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ex_normal_busy</name> <operator>=</operator> <name>save_ex_normal_busy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_starthere</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdline</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>last_cmd</name> <operator>=</operator> <name>CMD_CONT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"ont"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><name>last_cmd</name> <operator>=</operator> <name>CMD_NEXT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"ext"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name>last_cmd</name> <operator>=</operator> <name>CMD_STEP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"tep"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name>last_cmd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>last_cmd</name> <operator>=</operator> <name>CMD_FRAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"rame"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>last_cmd</name> <operator>=</operator> <name>CMD_FINISH</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"inish"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case> <expr_stmt><expr><name>last_cmd</name> <operator>=</operator> <name>CMD_QUIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"uit"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case> <expr_stmt><expr><name>last_cmd</name> <operator>=</operator> <name>CMD_INTERRUPT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"nterrupt"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><name>last_cmd</name> <operator>=</operator> <name>CMD_BACKTRACE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"t"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"acktrace"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case> <expr_stmt><expr><name>last_cmd</name> <operator>=</operator> <name>CMD_BACKTRACE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"here"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case> <expr_stmt><expr><name>last_cmd</name> <operator>=</operator> <name>CMD_UP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"p"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case> <expr_stmt><expr><name>last_cmd</name> <operator>=</operator> <name>CMD_DOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> <operator>=</operator> <literal type="string">"own"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> <expr_stmt><expr><name>last_cmd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>last_cmd</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <operator>*</operator><name>tail</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>tail</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>last_cmd</name> <operator>!=</operator> <name>CMD_FRAME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_cmd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last_cmd</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<switch>switch <condition>(<expr><name>last_cmd</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>CMD_CONT</name></expr>:</case>
<expr_stmt><expr><name>debug_break_level</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CMD_NEXT</name></expr>:</case>
<expr_stmt><expr><name>debug_break_level</name> <operator>=</operator> <name>ex_nesting_level</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CMD_STEP</name></expr>:</case>
<expr_stmt><expr><name>debug_break_level</name> <operator>=</operator> <literal type="number">9999</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CMD_FINISH</name></expr>:</case>
<expr_stmt><expr><name>debug_break_level</name> <operator>=</operator> <name>ex_nesting_level</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CMD_QUIT</name></expr>:</case>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_break_level</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CMD_INTERRUPT</name></expr>:</case>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_break_level</name> <operator>=</operator> <literal type="number">9999</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_cmd</name> <operator>=</operator> <name>CMD_STEP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CMD_BACKTRACE</name></expr>:</case>
<expr_stmt><expr><call><name>do_showbacktrace</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><name>CMD_FRAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>do_showbacktrace</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_setdebugtracelevel</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
<case>case <expr><name>CMD_UP</name></expr>:</case>
<expr_stmt><expr><name>debug_backtrace_level</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_checkbacktracelevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><name>CMD_DOWN</name></expr>:</case>
<expr_stmt><expr><name>debug_backtrace_level</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_checkbacktracelevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>

<expr_stmt><expr><name>debug_backtrace_level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <name>debug_break_level</name></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_break_level</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_cmdline</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>, <argument><expr><name>getexline</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>DOCMD_VERBOSE</name><operator>|</operator><name>DOCMD_EXCRESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_break_level</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lines_left</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>RedrawingDisabled</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>save_msg_scroll</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lines_left</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_State</name></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_mode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>save_did_emsg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <name>save_cmd_silent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <name>save_msg_silent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>emsg_silent</name> <operator>=</operator> <name>save_emsg_silent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>redir_off</name> <operator>=</operator> <name>save_redir_off</name></expr>;</expr_stmt>



<expr_stmt><expr><name>debug_did_msg</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_maxbacktrace_level</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxbacktrace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>sname</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>q</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>maxbacktrace</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>maxbacktrace</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_setdebugtracelevel</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>debug_backtrace_level</name> <operator>+=</operator> <name>level</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>debug_backtrace_level</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>do_checkbacktracelevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_checkbacktracelevel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>debug_backtrace_level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>debug_backtrace_level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"frame is zero"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sname</name> <init>= <expr><call><name>estack_sfile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><call><name>get_maxbacktrace_level</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_backtrace_level</name> <operator>&gt;</operator> <name>max</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>debug_backtrace_level</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"frame at highest level: %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_showbacktrace</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sname</name> <operator>=</operator> <call><name>estack_sfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>get_maxbacktrace_level</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>sname</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>max</name> <operator>-</operator> <name>debug_backtrace_level</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"-&gt;%d %s"</literal></expr></argument>, <argument><expr><name>max</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">" %d %s"</literal></expr></argument>, <argument><expr><name>max</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>next</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>SOURCING_LNUM</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"line %ld: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>SOURCING_LNUM</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cmd: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_debug</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>debug_break_level_save</name> <init>= <expr><name>debug_break_level</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>debug_break_level</name> <operator>=</operator> <literal type="number">9999</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_break_level</name> <operator>=</operator> <name>debug_break_level_save</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>debug_breakpoint_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>debug_breakpoint_lnum</name></decl>;</decl_stmt>








<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>debug_skipped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>debug_skipped_name</name></decl>;</decl_stmt>








<function><type><name>void</name></type>
<name>dbg_check_breakpoint</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>debug_skipped</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>debug_breakpoint_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>debug_breakpoint_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name>
<operator>&amp;&amp;</operator> <name><name>debug_breakpoint_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_EXTRA</name>
<operator>&amp;&amp;</operator> <name><name>debug_breakpoint_name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_SNR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;SNR&gt;"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Breakpoint in \"%s%s\" line %ld"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>p</name></expr></argument>,
<argument><expr><name>debug_breakpoint_name</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>debug_breakpoint_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_breakpoint_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_debug</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>debug_skipped</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_skipped_name</name> <operator>=</operator> <name>debug_breakpoint_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_breakpoint_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ex_nesting_level</name> <operator>&lt;=</operator> <name>debug_break_level</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_debug</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>debug_skipped</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_skipped_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>dbg_check_skipped</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prev_got_int</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_skipped</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>prev_got_int</name> <operator>=</operator> <name>got_int</name></expr>;</expr_stmt>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_breakpoint_name</name> <operator>=</operator> <name>debug_skipped_name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>dbg_check_breakpoint</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>got_int</name> <operator>|=</operator> <name>prev_got_int</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<struct>struct <name>debuggy</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>dbg_nr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dbg_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dbg_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>dbg_prog</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>linenr_T</name></type> <name>dbg_lnum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dbg_forceit</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>dbg_val</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>dbg_level</name></decl>;</decl_stmt> 
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>dbg_breakp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>debuggy</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BREAKP</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((struct debuggy *)dbg_breakp.ga_data)[idx])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUGGY</name><parameter_list>(<parameter><type><name>gap</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((struct debuggy *)gap-&gt;ga_data)[idx])</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_breakp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>prof_ga</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>debuggy</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBG_FUNC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBG_FILE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBG_EXPR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>debuggy_find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>,<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>after</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbg_parsearg</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>debuggy</name></name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>here</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <operator>&amp;</operator><call><name>DEBUGGY</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"func"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_type</name></name> <operator>=</operator> <name>DBG_FUNC</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_type</name></name> <operator>=</operator> <name>DBG_FILE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>gap</name> <operator>!=</operator> <operator>&amp;</operator><name>prof_ga</name> <operator>&amp;&amp;</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"here"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_type</name></name> <operator>=</operator> <name>DBG_FILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>here</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>gap</name> <operator>!=</operator> <operator>&amp;</operator><name>prof_ga</name> <operator>&amp;&amp;</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"expr"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_type</name></name> <operator>=</operator> <name>DBG_EXPR</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>here</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>gap</name> <operator>!=</operator> <operator>&amp;</operator><name>prof_ga</name> <operator>&amp;&amp;</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_lnum</name></name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>here</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>here</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>bp</name><operator>-&gt;</operator><name>dbg_type</name></name> <operator>==</operator> <name>DBG_FUNC</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"()"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_type</name></name> <operator>==</operator> <name>DBG_FUNC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_name</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>here</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_name</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_type</name></name> <operator>==</operator> <name>DBG_EXPR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_name</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_val</name></name> <operator>=</operator> <call><name>eval_expr</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>



<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>expand_env_save</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>expand_env_save</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'*'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_name</name></name> <operator>=</operator> <call><name>fix_fname</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_name</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_breakadd</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>debuggy</name></name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><name>dbg_breakp</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_profile</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><name>prof_ga</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>dbg_parsearg</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>gap</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <operator>&amp;</operator><call><name>DEBUGGY</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_forceit</name></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_type</name></name> <operator>!=</operator> <name>DBG_EXPR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>file_pat_to_reg_pat</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_prog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>RE_MAGIC</name> <operator>+</operator> <name>RE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>bp</name><operator>-&gt;</operator><name>dbg_prog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_lnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>!=</operator> <name>CMD_profile</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>DEBUGGY</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>dbg_nr</name> <operator>=</operator> <operator>++</operator><name>last_breakp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>debug_tick</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>DEBUGGY</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator></expr></argument>)</argument_list></call><operator>.</operator><name>dbg_nr</name> <operator>=</operator> <operator>++</operator><name>last_breakp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>debug_tick</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_debuggreedy</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>debug_greedy</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>debug_greedy</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_breakdel</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>debuggy</name></name> <modifier>*</modifier></type><name>bp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bpi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>todel</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>del_all</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>best_lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><name>dbg_breakp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_profdel</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><name>prof_ga</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ex_ni</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>DEBUGGY</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>dbg_nr</name> <operator>==</operator> <name>nr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>todel</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>todel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>del_all</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>dbg_parsearg</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>gap</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <operator>&amp;</operator><call><name>DEBUGGY</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>bpi</name> <operator>=</operator> <operator>&amp;</operator><call><name>DEBUGGY</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_type</name></name> <operator>==</operator> <name><name>bpi</name><operator>-&gt;</operator><name>dbg_type</name></name>
<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_name</name></name></expr></argument>, <argument><expr><name><name>bpi</name><operator>-&gt;</operator><name>dbg_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>bp</name><operator>-&gt;</operator><name>dbg_lnum</name></name> <operator>==</operator> <name><name>bpi</name><operator>-&gt;</operator><name>dbg_lnum</name></name>
<operator>||</operator> <operator>(</operator><name><name>bp</name><operator>-&gt;</operator><name>dbg_lnum</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>best_lnum</name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>bpi</name><operator>-&gt;</operator><name>dbg_lnum</name></name> <operator>&lt;</operator> <name>best_lnum</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>todel</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_lnum</name> <operator>=</operator> <name><name>bpi</name><operator>-&gt;</operator><name>dbg_lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>todel</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E161: Breakpoint not found: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<while>while <condition>(<expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>DEBUGGY</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>todel</name></expr></argument>)</argument_list></call><operator>.</operator><name>dbg_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>DEBUGGY</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>todel</name></expr></argument>)</argument_list></call><operator>.</operator><name>dbg_type</name> <operator>==</operator> <name>DBG_EXPR</name>
<operator>&amp;&amp;</operator> <call><name>DEBUGGY</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>todel</name></expr></argument>)</argument_list></call><operator>.</operator><name>dbg_val</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_tv</name><argument_list>(<argument><expr><call><name>DEBUGGY</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>todel</name></expr></argument>)</argument_list></call><operator>.</operator><name>dbg_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><call><name>DEBUGGY</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>todel</name></expr></argument>)</argument_list></call><operator>.</operator><name>dbg_prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>todel</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>DEBUGGY</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>todel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>DEBUGGY</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>todel</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-</operator> <name>todel</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>debuggy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_breakdel</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>++</operator><name>debug_tick</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>del_all</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><name>gap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_breaklist</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier><name>eap</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>debuggy</name></name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbg_breakp</name><operator>.</operator><name>ga_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No breakpoints defined"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dbg_breakp</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <operator>&amp;</operator><call><name>BREAKP</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_type</name></name> <operator>==</operator> <name>DBG_FILE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_name</name></name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_type</name></name> <operator>!=</operator> <name>DBG_EXPR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%3d %s %s line %ld"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_nr</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_type</name></name> <operator>==</operator> <name>DBG_FUNC</name></expr> ?</condition><then> <expr><literal type="string">"func"</literal></expr> </then><else>: <expr><literal type="string">"file"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_type</name></name> <operator>==</operator> <name>DBG_FUNC</name></expr> ?</condition><then> <expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_name</name></name></expr> </then><else>: <expr><name>NameBuff</name></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>bp</name><operator>-&gt;</operator><name>dbg_lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%3d expr %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_nr</name></name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>linenr_T</name></type>
<name>dbg_find_breakpoint</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, 
<parameter><decl><type><name>linenr_T</name></type> <name>after</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<return>return <expr><call><name>debuggy_find</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>after</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbg_breakp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>int</name></type>
<name>has_profiling</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>debuggy_find</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>prof_ga</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>linenr_T</name></type>
<name>debuggy_find</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>file</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, 
<parameter><decl><type><name>linenr_T</name></type> <name>after</name></decl></parameter>, 
<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>debuggy</name></name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>fname</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_got_int</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name> <operator>&amp;&amp;</operator> <name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"&lt;SNR&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>fname</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>


<expr_stmt><expr><name>bp</name> <operator>=</operator> <operator>&amp;</operator><call><name>DEBUGGY</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>bp</name><operator>-&gt;</operator><name>dbg_type</name></name> <operator>==</operator> <name>DBG_FILE</name><operator>)</operator> <operator>==</operator> <name>file</name> <operator>&amp;&amp;</operator>
<name><name>bp</name><operator>-&gt;</operator><name>dbg_type</name></name> <operator>!=</operator> <name>DBG_EXPR</name> <operator>&amp;&amp;</operator> <operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>gap</name> <operator>==</operator> <operator>&amp;</operator><name>prof_ga</name> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>(</operator><name><name>bp</name><operator>-&gt;</operator><name>dbg_lnum</name></name> <operator>&gt;</operator> <name>after</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>lnum</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>bp</name><operator>-&gt;</operator><name>dbg_lnum</name></name> <operator>&lt;</operator> <name>lnum</name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>prev_got_int</name> <operator>=</operator> <name>got_int</name></expr>;</expr_stmt>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_regexec_prog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bp</name><operator>-&gt;</operator><name>dbg_prog</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>dbg_lnum</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>dbg_forceit</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>got_int</name> <operator>|=</operator> <name>prev_got_int</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_type</name></name> <operator>==</operator> <name>DBG_EXPR</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>prev_got_int</name> <operator>=</operator> <name>got_int</name></expr>;</expr_stmt>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>eval_expr</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_val</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>debug_oldval</name> <operator>=</operator> <call><name>typval_tostring</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_val</name></name> <operator>=</operator> <name>tv</name></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_newval</name> <operator>=</operator> <call><name>typval_tostring</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>typval_compare</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_val</name></name></expr></argument>, <argument><expr><name>EXPR_IS</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name>
<operator>&amp;&amp;</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>==</operator> <name>FALSE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_oldval</name> <operator>=</operator> <call><name>typval_tostring</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>eval_expr</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_newval</name> <operator>=</operator> <call><name>typval_tostring</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_tv</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_val</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_val</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>debug_oldval</name> <operator>=</operator> <call><name>typval_tostring</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_newval</name> <operator>=</operator> <call><name>typval_tostring</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_tv</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>dbg_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <ternary><condition><expr><name>after</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>after</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>got_int</name> <operator>|=</operator> <name>prev_got_int</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>fname</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>lnum</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>dbg_breakpoint</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>debug_breakpoint_name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_breakpoint_lnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
