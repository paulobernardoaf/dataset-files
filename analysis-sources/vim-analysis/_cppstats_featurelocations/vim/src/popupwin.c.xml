<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\popupwin.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pp_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>poppos_T</name></type> <name>pp_val</name></decl>;</decl_stmt>
}</block></struct></type> <name>poppos_entry_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>poppos_entry_T</name></type> <name><name>poppos_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"botleft"</literal></expr>, <expr><name>POPPOS_BOTLEFT</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"topleft"</literal></expr>, <expr><name>POPPOS_TOPLEFT</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"botright"</literal></expr>, <expr><name>POPPOS_BOTRIGHT</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"topright"</literal></expr>, <expr><name>POPPOS_TOPRIGHT</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"center"</literal></expr>, <expr><name>POPPOS_CENTER</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>popup_adjust_position</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>popup_options_one</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MAXCOL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"cursor"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>dict_get_number_check</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>setcursor_mayforce</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>val</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>endp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>endp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invexpr2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"line"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>screen_screenrow</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>screen_screencol</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_padding_border</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>li</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>lv_len</name></name></expr>;</condition>
<incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>nr</name> <operator>&gt;</operator> <name>max_val</name></expr> ?</condition><then> <expr><name>max_val</name></expr> </then><else>: <expr><name>nr</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_moved_values</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_curwin</name></name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mincol</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_maxcol</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_moved_columns</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>find_ident_under_cursor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>FIND_NOERROR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mincol</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <call><name>ml_get_curline</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_maxcol</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_mincol</name></name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_mousemoved_values</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mouse_row</name></name> <operator>=</operator> <name>mouse_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mouse_mincol</name></name> <operator>=</operator> <name>mouse_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mouse_maxcol</name></name> <operator>=</operator> <name>mouse_col</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_mousemoved_columns</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>textwp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>mcol</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_word_under_cursor</name><argument_list>(<argument><expr><name>mouse_row</name></expr></argument>, <argument><expr><name>mouse_col</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>textwp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>text</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>textwp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mcol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mouse_mincol</name></name> <operator>=</operator> <name>mcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name> <operator>+</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>textwp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mouse_maxcol</name></name> <operator>=</operator> <name>mcol</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>popup_on_border</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>row</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>row</name> <operator>==</operator> <call><name>popup_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>col</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>col</name> <operator>==</operator> <call><name>popup_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>popup_close_if_on_X</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_close</name></name> <operator>==</operator> <name>POPCLOSE_BUTTON</name>
<operator>&amp;&amp;</operator> <name>row</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>==</operator> <call><name>popup_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>popup_close_for_mouse_click</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>drag_start_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>drag_start_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>drag_start_wantline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>drag_start_wantcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>drag_on_resize_handle</name></decl>;</decl_stmt>





<function><type><name>void</name></type>
<name>popup_start_drag</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>drag_start_row</name> <operator>=</operator> <name>mouse_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>drag_start_col</name> <operator>=</operator> <name>mouse_col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>drag_start_wantline</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>drag_start_wantline</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>drag_start_wantcol</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>drag_start_wantcol</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_CENTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>=</operator> <name>POPPOS_TOPLEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>drag_on_resize_handle</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>row</name> <operator>==</operator> <call><name>popup_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name>col</name> <operator>==</operator> <call><name>popup_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>!=</operator> <name>POPPOS_TOPLEFT</name> <operator>&amp;&amp;</operator> <name>drag_on_resize_handle</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_TOPRIGHT</name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_BOTRIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_BOTLEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>=</operator> <name>POPPOS_TOPLEFT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>popup_drag</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_valid_popup</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_RESIZE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>drag_on_resize_handle</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width_inc</name> <init>= <expr><name>mouse_col</name> <operator>-</operator> <name>drag_start_col</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height_inc</name> <init>= <expr><name>mouse_row</name> <operator>-</operator> <name>drag_start_row</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>width_inc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <name>width_inc</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_minwidth</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_maxwidth</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>drag_start_col</name> <operator>=</operator> <name>mouse_col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>height_inc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <name>height_inc</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_minheight</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_maxheight</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name>drag_start_row</name> <operator>=</operator> <name>mouse_row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>popup_adjust_position</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_DRAG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>=</operator> <name>drag_start_wantline</name> <operator>+</operator> <operator>(</operator><name>mouse_row</name> <operator>-</operator> <name>drag_start_row</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>&gt;</operator> <name>Rows</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>=</operator> <name>Rows</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name> <operator>=</operator> <name>drag_start_wantcol</name> <operator>+</operator> <operator>(</operator><name>mouse_col</name> <operator>-</operator> <name>drag_start_col</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name> <operator>&gt;</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>popup_adjust_position</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>popup_set_firstline</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_firstline</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popup_adjust_position</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<while>while <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_firstline</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&lt;</operator> <name>height</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name><name>wp</name><operator>-&gt;</operator><name>w_firstline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popup_adjust_position</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>popup_is_in_scrollbar</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_has_scrollbar</name></name>
<operator>&amp;&amp;</operator> <name>row</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>
<operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <call><name>popup_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
<operator>&amp;&amp;</operator> <name>col</name> <operator>==</operator> <call><name>popup_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>popup_handle_scrollbar_click</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name>popup_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_topline</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>popup_is_in_scrollbar</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name>height</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>!=</operator> <name>old_topline</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>popup_set_firstline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>popup_add_timeout</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>cbbuf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>cbbuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cbbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"{_ -&gt; popup_close(%d)}"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_lambda_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_timer</name></name> <operator>=</operator> <call><name>create_timer</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_timer</name><operator>-&gt;</operator><name>tr_callback</name></name> <operator>=</operator> <call><name>get_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>poppos_T</name></type>
<name>get_pos_entry</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>give_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>dict_get_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"pos"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>POPPOS_NONE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nr</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>poppos_entries</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>poppos_entry_T</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition>
<incr><expr><operator>++</operator><name>nr</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>poppos_entries</name><index>[<expr><name>nr</name></expr>]</index></name><operator>.</operator><name>pp_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>poppos_entries</name><index>[<expr><name>nr</name></expr>]</index></name><operator>.</operator><name>pp_val</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>give_error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>POPPOS_NONE</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>apply_move_options</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nr</name> <operator>=</operator> <call><name>dict_get_number_def</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"minwidth"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_minwidth</name></name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nr</name> <operator>=</operator> <call><name>dict_get_number_def</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"minheight"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_minheight</name></name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nr</name> <operator>=</operator> <call><name>dict_get_number_def</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"maxwidth"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_maxwidth</name></name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nr</name> <operator>=</operator> <call><name>dict_get_number_def</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"maxheight"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_maxheight</name></name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>popup_options_one</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>!=</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>popup_options_one</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"col"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>!=</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"fixed"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_fixed</name></name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"fixed"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>poppos_T</name></type> <name>ppt</name> <init>= <expr><call><name>get_pos_entry</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ppt</name> <operator>!=</operator> <name>POPPOS_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>=</operator> <name>ppt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"textprop"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name></name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"textpropwin"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name></name> <operator>=</operator> <call><name>find_win_by_nr_or_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_valid</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name></name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>find_prop_type_id</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>find_prop_type_id</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_type</name></name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"textpropid"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_id</name></name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"textpropid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_moved_argument</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mousemoved</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name> <operator>&amp;&amp;</operator> <name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"word"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>FIND_IDENT</name> <operator>|</operator> <name>FIND_STRING</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"WORD"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>FIND_STRING</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"expr"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>FIND_IDENT</name> <operator>|</operator> <name>FIND_STRING</name> <operator>|</operator> <name>FIND_EVAL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mousemoved</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_mousemoved_columns</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_moved_columns</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name>
<operator>&amp;&amp;</operator> <name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>==</operator> <literal type="number">2</literal>
<operator>||</operator> <name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mincol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxcol</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>nr</name> <init>= <expr><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>lv_first</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>mousemoved</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mouse_row</name></name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_lnum</name></name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_curwin</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mincol</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxcol</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_next</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mousemoved</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mouse_mincol</name></name> <operator>=</operator> <name>mincol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mouse_maxcol</name></name> <operator>=</operator> <name>maxcol</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mincol</name></name> <operator>=</operator> <name>mincol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_maxcol</name></name> <operator>=</operator> <name>maxcol</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_highlight</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_STRING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>popup_show_curline</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <name>VALID_BOTLINE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>
<operator>&amp;&amp;</operator> <call><name>plines_m_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call>
<operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_firstline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>popup_get_sign_name</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"popup-%d"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>popup_highlight_curline</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sign_name</name> <init>= <expr><call><name>popup_get_sign_name</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>buf_delete_signs</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"PopUpMenu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_CURSORLINE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>popup_show_curline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sign_exists_by_name</name><argument_list>(<argument><expr><name>sign_name</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linehl</name> <init>= <expr><literal type="string">"PopupSelected"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>syn_name2id</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>linehl</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>linehl</name> <operator>=</operator> <literal type="string">"PmenuSel"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sign_define_by_name</name><argument_list>(<argument><expr><name>sign_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>linehl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sign_place</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sign_id</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"PopUpMenu"</literal></expr></argument>, <argument><expr><name>sign_name</name></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>SIGN_DEF_PRIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sign_undefine_by_name</name><argument_list>(<argument><expr><name>sign_name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_last_curline</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>apply_general_options</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>



<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"firstline"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_firstline</name></name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"firstline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_firstline</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_firstline</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"scrollbar"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_want_scrollbar</name></name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"scrollbar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_title</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"wrap"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"wrap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>=</operator> <name>nr</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"drag"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"drag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>|=</operator> <name>POPF_DRAG</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>POPF_DRAG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"posinvert"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"posinvert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>|=</operator> <name>POPF_POSINVERT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>POPF_POSINVERT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"resize"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"resize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>|=</operator> <name>POPF_RESIZE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>POPF_RESIZE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"close"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name> <operator>&amp;&amp;</operator> <name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_close</name></name> <operator>=</operator> <name>POPCLOSE_NONE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"button"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_close</name></name> <operator>=</operator> <name>POPCLOSE_BUTTON</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"click"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_close</name></name> <operator>=</operator> <name>POPCLOSE_CLICK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargNval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"highlight"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_string_option_direct_in_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"wincolor"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>str</name></expr></argument>, <argument><expr><name>OPT_FREE</name><operator>|</operator><name>OPT_LOCAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_string_option_direct_in_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"signcolumn"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"no"</literal></expr></argument>, <argument><expr><name>OPT_FREE</name><operator>|</operator><name>OPT_LOCAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_padding_border</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name></name></expr></argument>, <argument><expr><literal type="string">"padding"</literal></expr></argument>, <argument><expr><literal type="number">999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_padding_border</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name></name></expr></argument>, <argument><expr><literal type="string">"border"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"borderhighlight"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name> <operator>||</operator> <name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>li</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>lv_len</name></name></expr>;</condition>
<incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_highlight</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_highlight</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_border_highlight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_highlight</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_highlight</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_highlight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"borderchars"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>li</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>lv_len</name></name></expr>;</condition>
<incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_char</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mb_ptr2char</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_char</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_border_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_char</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_border_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_char</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_border_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>check_highlight</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"scrollbarhighlight"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbar_highlight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_highlight</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"thumbhighlight"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_thumb_highlight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"zindex"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_zindex</name></name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"zindex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_zindex</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_zindex</name></name> <operator>=</operator> <name>POPUPWIN_DEFAULT_ZINDEX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_zindex</name></name> <operator>&gt;</operator> <literal type="number">32000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_zindex</name></name> <operator>=</operator> <literal type="number">32000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"mask"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name> <operator>&amp;&amp;</operator> <name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<macro><name>FOR_ALL_LIST_ITEMS</name><argument_list>(<argument>di-&gt;di_tv.vval.v_list</argument>, <argument>li</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name>
<operator>||</operator> <name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mask</name></name> <operator>=</operator> <name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mask</name><operator>-&gt;</operator><name>lv_refcount</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mask_cells</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"mask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popup_add_timeout</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"moved"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_moved_values</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handle_moved_argument</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>di</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"mousemoved"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_mousemoved_values</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handle_moved_argument</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>di</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"cursorline"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>|=</operator> <name>POPF_CURSORLINE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>POPF_CURSORLINE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"cursorline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"filter"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>callback_T</name></type> <name>callback</name> <init>= <expr><call><name>get_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>callback</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_filter_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_filter_cb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"mapping"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"mapping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>|=</operator> <name>POPF_MAPPING</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>POPF_MAPPING</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"filtermode"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_filter_mode</name></name> <operator>=</operator> <name>MODE_ALL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_filter_mode</name></name> <operator>=</operator> <call><name>mode_str2flags</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"callback"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>callback_T</name></type> <name>callback</name> <init>= <expr><call><name>get_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>callback</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_close_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_close_cb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>apply_options</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>apply_move_options</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_general_options</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"hidden"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>|=</operator> <name>POPF_HIDDEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>popup_mask_refresh</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popup_highlight_curline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_popup_strings</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_LIST_ITEMS</name><argument_list>(<argument>l</argument>, <argument>li</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ml_append_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name><operator>++</operator></expr></argument>,
<argument><expr><ternary><condition><expr><name>p</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_popup_dicts</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>pli</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>


<macro><name>FOR_ALL_LIST_ITEMS</name><argument_list>(<argument>l</argument>, <argument>li</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_DICT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><name>dict</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr>
</then><else>: <expr><call><name>dict_get_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"text"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ml_append_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name><operator>++</operator></expr></argument>,
<argument><expr><ternary><condition><expr><name>p</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>li</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</init> <condition><expr><name>li</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>lnum</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>plist</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"props"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>plist</name> <operator>=</operator> <name><name>di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>plist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<macro><name>FOR_ALL_LIST_ITEMS</name><argument_list>(<argument>plist</argument>, <argument>pli</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pli</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_DICT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>pli</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><call><name>dict_get_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"col"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>prop_add_common</name><argument_list>( <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>popup_top_extra</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>extra</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_title</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_title</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>extra</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>popup_left_extra</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>popup_height</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name>
<operator>+</operator> <call><name>popup_top_extra</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>
<operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>popup_width</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name>
<operator>+</operator> <call><name>popup_extra_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>
<operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_rightoff</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>popup_extra_width</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
<operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
<operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_has_scrollbar</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>popup_adjust_position</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wrapped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxwidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>used_maxwidth</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>center_vert</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>center_hor</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allow_adjust_left</name> <init>= <expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_fixed</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_extra</name> <init>= <expr><call><name>popup_top_extra</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>right_extra</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bot_extra</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left_extra</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extra_height</name> <init>= <expr><name>top_extra</name> <operator>+</operator> <name>bot_extra</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extra_width</name> <init>= <expr><name>left_extra</name> <operator>+</operator> <name>right_extra</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w_height_before_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>org_winrow</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>org_wincol</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>org_width</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>org_height</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>org_leftcol</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>org_leftoff</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_leftoff</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minwidth</name></decl>, <decl><type ref="prev"/><name>minheight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wantline</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>wantcol</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>use_wantcol</name> <init>= <expr><name>wantcol</name> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_leftoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_rightoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_last_curline</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popup_highlight_curline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_type</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>win_valid</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>prop_win</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>textprop_T</name></type> <name>prop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>prop_lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>screen_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>screen_scol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>screen_ccol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>screen_ecol</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>find_visible_prop</name><argument_list>(<argument><expr><name>prop_win</name></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_type</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_id</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop_lnum</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_HIDDEN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>|=</operator> <name>POPF_HIDDEN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>win_valid</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name></name></expr></argument>, <argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>prop_lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>prop</name><operator>.</operator><name>tp_col</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_TOPLEFT</name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_BOTLEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name><name>prop</name><operator>.</operator><name>tp_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>textpos2screenpos</name><argument_list>(<argument><expr><name>prop_win</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_row</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>screen_scol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_ccol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_ecol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_TOPLEFT</name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_TOPRIGHT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wantline</name> <operator>=</operator> <name>screen_row</name> <operator>+</operator> <name>wantline</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>wantline</name> <operator>=</operator> <name>screen_row</name> <operator>+</operator> <name>wantline</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>center_vert</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_TOPLEFT</name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_BOTLEFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wantcol</name> <operator>=</operator> <name>screen_ecol</name> <operator>+</operator> <name>wantcol</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>wantcol</name> <operator>=</operator> <name>screen_scol</name> <operator>+</operator> <name>wantcol</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>use_wantcol</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wantline</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>center_vert</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>wantline</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wantline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wantcol</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wantcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_CENTER</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>center_vert</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>center_hor</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wantline</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_TOPLEFT</name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_TOPRIGHT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <name>wantline</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>&gt;=</operator> <name>Rows</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_wantcol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>center_hor</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>wantcol</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_TOPLEFT</name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_BOTLEFT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>=</operator> <name>wantcol</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>&gt;</operator> <name>Columns</name> <operator>-</operator> <name>left_extra</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <name>left_extra</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><name>maxspace</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>-</operator> <name>left_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxwidth</name> <operator>=</operator> <name>maxspace</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_maxwidth</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>maxwidth</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_maxwidth</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>allow_adjust_left</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxwidth</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_maxwidth</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>minwidth</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_minwidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>minheight</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_minheight</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>minwidth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>minwidth</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>minheight</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>minheight</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_firstline</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_firstline</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>







<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_firstline</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<while>while <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w_width</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&lt;</operator> <name>maxwidth</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>=</operator> <name>maxwidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>win_linetabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>=</operator> <name>w_width</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>maxwidth</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>wrapped</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>maxwidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>=</operator> <name>maxwidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name>used_maxwidth</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>maxwidth</name>
<operator>&amp;&amp;</operator> <name>allow_adjust_left</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_TOPLEFT</name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_BOTLEFT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>shift_by</name> <init>= <expr><name>len</name> <operator>-</operator> <name>maxwidth</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>shift_by</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>truncate_shift</name> <init>= <expr><name>shift_by</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>truncate_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shift_by</name> <operator>-=</operator> <name>truncate_shift</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>-=</operator> <name>shift_by</name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxwidth</name> <operator>+=</operator> <name>shift_by</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>=</operator> <name>maxwidth</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_maxwidth</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_maxwidth</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_maxwidth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_firstline</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>lnum</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>lnum</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_maxheight</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_firstline</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><name>lnum</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>
</then><else>: <expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>lnum</name></expr></else></ternary><operator>)</operator>
<operator>+</operator> <name>wrapped</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_maxheight</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_firstline</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <ternary><condition><expr><name>lnum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>lnum</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_has_scrollbar</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_want_scrollbar</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_has_scrollbar</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_has_scrollbar</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>right_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>extra_width</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>maxwidth</name> <operator>+</operator> <name>right_extra</name> <operator>&gt;=</operator> <name>maxspace</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>used_maxwidth</name> <operator>||</operator> <operator>(</operator><name>minwidth</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&lt;</operator> <name>minwidth</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxwidth</name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_title</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_title</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>title_len</name> <init>= <expr><call><name>vim_strsize</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_title</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <name>extra_width</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>minwidth</name> <operator>&lt;</operator> <name>title_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>minwidth</name> <operator>=</operator> <name>title_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>minwidth</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&lt;</operator> <name>minwidth</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>=</operator> <name>minwidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&gt;</operator> <name>maxwidth</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&gt;</operator> <name>maxspace</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_rightoff</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>maxspace</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>=</operator> <name>maxwidth</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>center_hor</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>=</operator> <operator>(</operator><name>Columns</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>extra_width</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_BOTRIGHT</name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_TOPRIGHT</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>leftoff</name> <init>= <expr><name>wantcol</name> <operator>-</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <name>extra_width</name><operator>)</operator></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>leftoff</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>=</operator> <name>leftoff</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_fixed</name></name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>-</operator><name>leftoff</name> <operator>&gt;</operator> <name>left_extra</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>=</operator> <operator>-</operator><name>leftoff</name> <operator>-</operator> <name>left_extra</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_leftoff</name></name> <operator>=</operator> <operator>-</operator><name>leftoff</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_fixed</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_TOPLEFT</name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_BOTLEFT</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>want_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>want_col</name> <operator>=</operator> <name>left_extra</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <name>right_extra</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>want_col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name>want_col</name> <operator>&gt;=</operator> <name>Columns</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <name>want_col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name>
<operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>wrapped</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>minheight</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&lt;</operator> <name>minheight</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>=</operator> <name>minheight</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_maxheight</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_maxheight</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_maxheight</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>w_height_before_limit</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&gt;</operator> <name>Rows</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>!=</operator> <name>org_height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_comp_scroll</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>center_vert</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <operator>(</operator><name>Rows</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>extra_height</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_BOTRIGHT</name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_BOTLEFT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <name>extra_height</name><operator>)</operator> <operator>&lt;=</operator> <name>wantline</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <name>wantline</name> <operator>-</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <name>extra_height</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>wantline</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>Rows</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_POSINVERT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>=</operator> <name>wantline</name> <operator>-</operator> <name>extra_height</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>


<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>wantline</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>wantline</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_TOPRIGHT</name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name>POPPOS_TOPLEFT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wantline</name> <operator>+</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <name>extra_height</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>Rows</name>
<operator>&amp;&amp;</operator> <name>wantline</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>Rows</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_POSINVERT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>=</operator> <name>w_height_before_limit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <name>wantline</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>extra_height</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <name>wantline</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>&gt;=</operator> <name>Rows</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_last_changedtick</name></name> <operator>=</operator> <call><name>CHANGEDTICK</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>win_valid</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_changedtick</name></name> <operator>=</operator>
<call><name>CHANGEDTICK</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_topline</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>org_winrow</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name>
<operator>||</operator> <name>org_wincol</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name>
<operator>||</operator> <name>org_leftcol</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name>
<operator>||</operator> <name>org_leftoff</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_leftoff</name></name>
<operator>||</operator> <name>org_width</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name>
<operator>||</operator> <name>org_height</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_ON_CMDLINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>popup_mask_refresh</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<typedef>typedef <type><enum>enum
<block>{
<decl><name>TYPE_NORMAL</name></decl>,
<decl><name>TYPE_ATCURSOR</name></decl>,
<decl><name>TYPE_BEVAL</name></decl>,
<decl><name>TYPE_NOTIFICATION</name></decl>,
<decl><name>TYPE_DIALOG</name></decl>,
<decl><name>TYPE_MENU</name></decl>,
<decl><name>TYPE_PREVIEW</name></decl>, 
<decl><name>TYPE_INFO</name></decl> 
}</block></enum></type> <name>create_type_T</name>;</typedef>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>popup_set_buffer_text</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>typval_T</name></type> <name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lnum</name></decl>;</decl_stmt>


<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</init> <condition><expr><name>lnum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>lnum</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>text</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>ml_append_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>text</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>text</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>lv_first</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_popup_strings</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_popup_dicts</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_popup_option</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_preview</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<expr><ternary><condition><expr><operator>!</operator><name>is_preview</name></expr> ?</condition><then> <expr><name>p_cpp</name></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>p_pvp</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>POPF_INFO_MENU</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>e</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dig</name> <operator>=</operator> <name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"height:"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dig</name> <operator>!=</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_preview</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_minheight</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_maxheight</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"width:"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dig</name> <operator>!=</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_preview</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_minwidth</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_maxwidth</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"highlight:"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_string_option_direct_in_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"wincolor"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>s</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>OPT_FREE</name><operator>|</operator><name>OPT_LOCAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"border:"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>s</name> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>on</name> <init>= <expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>arg</name> <operator>+</operator> <literal type="number">2</literal> <operator>==</operator> <name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>arg</name> <operator>+</operator> <literal type="number">3</literal> <operator>==</operator> <name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>on</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>off</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>on</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>off</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_close</name></name> <operator>=</operator> <name>POPCLOSE_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"align:"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>s</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>item</name> <init>= <expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"item"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>arg</name> <operator>+</operator> <literal type="number">4</literal> <operator>==</operator> <name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>menu</name> <init>= <expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"menu"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>arg</name> <operator>+</operator> <literal type="number">4</literal> <operator>==</operator> <name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>menu</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>menu</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>|=</operator> <name>POPF_INFO_MENU</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>parse_previewpopup</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>parse_popup_option</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>parse_completepopup</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>parse_popup_option</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>popup_set_wantpos_cursor</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>poppos_T</name></type> <name>ppt</name> <init>= <expr><name>POPPOS_NONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ppt</name> <operator>=</operator> <call><name>get_pos_entry</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>setcursor_mayforce</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ppt</name> <operator>==</operator> <name>POPPOS_TOPRIGHT</name> <operator>||</operator> <name>ppt</name> <operator>==</operator> <name>POPPOS_TOPLEFT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>=</operator> <ternary><condition><expr><name>ppt</name> <operator>==</operator> <name>POPPOS_BOTRIGHT</name></expr>
?</condition><then> <expr><name>POPPOS_TOPRIGHT</name></expr> </then><else>: <expr><name>POPPOS_TOPLEFT</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name> <operator>&gt;</operator> <name>Columns</name> <operator>-</operator> <name>width</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <name>width</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>popup_adjust_position</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>popup_set_wantpos_rowcol</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popup_adjust_position</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_border_left_right_padding</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type>
<name>popup_create</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>create_type_T</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tabnr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argvars</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nobufnr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_STRING</name>
<operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_LIST</name>
<operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E450: buffer number, text or a list required"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_DICT</name> <operator>||</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dict_find</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"tabpage"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tabnr</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>dict_get_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"tabpage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_NOTIFICATION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tabnr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tabnr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tabnr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>find_tabpage</name><argument_list>(<argument><expr><name>tabnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E997: Tabpage not found: %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tabnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>win_alloc_popup_win</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rettv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>=</operator> <name>POPPOS_TOPLEFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>=</operator> <name>POPF_IS_POPUP</name> <operator>|</operator> <name>POPF_MAPPING</name> <operator>|</operator> <name>POPF_POSINVERT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>new_buffer</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_init_popup_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_local_options_default</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>buffer_ensure_loaded</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>new_buffer</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLN_NEW</name><operator>|</operator><name>BLN_DUMMY</name><operator>|</operator><name>BLN_REUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ml_open</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_init_popup_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_local_options_default</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_string_option_direct_in_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"buftype"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"popup"</literal></expr></argument>, <argument><expr><name>OPT_FREE</name><operator>|</operator><name>OPT_LOCAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_string_option_direct_in_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bufhidden"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"wipe"</literal></expr></argument>, <argument><expr><name>OPT_FREE</name><operator>|</operator><name>OPT_LOCAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ul</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_swf</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bl</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_locked</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_initialized</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_so</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_first_popupwin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_first_popupwin</name></name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>tabnr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_first_popupwin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_first_popupwin</name></name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>first_popupwin</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>first_popupwin</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_popupwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<while>while <condition>(<expr><name><name>prev</name><operator>-&gt;</operator><name>w_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>w_next</name></name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_buffer</name> <operator>&amp;&amp;</operator> <name>argvars</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popup_set_buffer_text</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_ATCURSOR</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TYPE_PREVIEW</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>=</operator> <name>POPPOS_BOTLEFT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_ATCURSOR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>popup_set_wantpos_cursor</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_moved_values</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_moved_columns</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FIND_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_BEVAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>=</operator> <name>POPPOS_BOTLEFT</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>=</operator> <name>mouse_row</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>=</operator> <name>POPPOS_TOPLEFT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name> <operator>=</operator> <name>mouse_col</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_mousemoved_values</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_mousemoved_columns</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FIND_IDENT</name> <operator>+</operator> <name>FIND_STRING</name> <operator>+</operator> <name>FIND_EVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_zindex</name></name> <operator>=</operator> <name>POPUPWIN_DEFAULT_ZINDEX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_close</name></name> <operator>=</operator> <name>POPCLOSE_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_NOTIFICATION</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>twp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nextwin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>twp</name> <operator>=</operator> <name>first_popupwin</name></expr>;</init> <condition><expr><name>twp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>twp</name> <operator>=</operator> <name>nextwin</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>nextwin</name> <operator>=</operator> <name><name>twp</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>twp</name> <operator>!=</operator> <name>wp</name>
<operator>&amp;&amp;</operator> <name><name>twp</name><operator>-&gt;</operator><name>w_zindex</name></name> <operator>==</operator> <name>POPUPWIN_NOTIFICATION_ZINDEX</name>
<operator>&amp;&amp;</operator> <name><name>twp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>&lt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>height</name>
<operator>&amp;&amp;</operator> <name><name>twp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <call><name>popup_height</name><argument_list>(<argument><expr><name>twp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>=</operator> <name><name>twp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <call><name>popup_height</name><argument_list>(<argument><expr><name>twp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nextwin</name> <operator>=</operator> <name>first_popupwin</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>+</operator> <name>height</name> <operator>&gt;</operator> <name>Rows</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_zindex</name></name> <operator>=</operator> <name>POPUPWIN_NOTIFICATION_ZINDEX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_minwidth</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>|=</operator> <name>POPF_DRAG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_close</name></name> <operator>=</operator> <name>POPCLOSE_CLICK</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"PopupNotification"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_string_option_direct_in_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"wincolor"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>nr</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"WarningMsg"</literal></expr> </then><else>: <expr><literal type="string">"PopupNotification"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name>OPT_FREE</name><operator>|</operator><name>OPT_LOCAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_DIALOG</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TYPE_MENU</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>=</operator> <name>POPPOS_CENTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_zindex</name></name> <operator>=</operator> <name>POPUPWIN_DIALOG_ZINDEX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>|=</operator> <name>POPF_DRAG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>POPF_MAPPING</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_border_left_right_padding</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_MENU</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_T</name></type> <name>callback</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"popup_filter_menu"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>callback</name> <operator>=</operator> <call><name>get_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>callback</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_filter_cb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>|=</operator> <name>POPF_CURSORLINE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_PREVIEW</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>|=</operator> <name>POPF_DRAG</name> <operator>|</operator> <name>POPF_RESIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_close</name></name> <operator>=</operator> <name>POPCLOSE_BUTTON</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>parse_previewpopup</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popup_set_wantpos_cursor</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_minwidth</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_INFO</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>=</operator> <name>POPPOS_TOPLEFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>|=</operator> <name>POPF_DRAG</name> <operator>|</operator> <name>POPF_RESIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_close</name></name> <operator>=</operator> <name>POPCLOSE_BUTTON</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_border_left_right_padding</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_completepopup</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_highlight</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_char</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_want_scrollbar</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_fixed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_filter_mode</name></name> <operator>=</operator> <name>MODE_ALL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>apply_options</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_NOTIFICATION</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_timer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popup_add_timeout</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>popup_adjust_position</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>popup_mask_refresh</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>wp</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_popup_clear</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>close_all_popups</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_popup_create</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>popup_create</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TYPE_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_popup_atcursor</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>popup_create</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TYPE_ATCURSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_popup_beval</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>popup_create</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TYPE_BEVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>invoke_popup_callback</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_id</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_close_cb</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>popup_close_and_callback</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_id</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>owp</name></decl>;</decl_stmt>






<for>for <control>(<init><expr><name>owp</name> <operator>=</operator> <name>first_popupwin</name></expr>;</init> <condition><expr><name>owp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>owp</name> <operator>=</operator> <name><name>owp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>owp</name> <operator>!=</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name><name>owp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>owp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>owp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><expr><name>owp</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_first_popupwin</name></name></expr>;</init> <condition><expr><name>owp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><name>owp</name> <operator>=</operator> <name><name>owp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>owp</name> <operator>!=</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name><name>owp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>owp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>owp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>win_valid</name><argument_list>(<argument><expr><name>prevwin</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>wp</name> <operator>!=</operator> <name>prevwin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>prevwin</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>firstwin</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name>ERROR_IF_POPUP_WINDOW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>CHECK_CURBUF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_close_cb</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>invoke_popup_callback</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>popup_close</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CHECK_CURBUF</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>popup_close_with_retval</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>retval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>retval</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popup_close_and_callback</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>popup_close_for_mouse_click</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>popup_close_with_retval</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_mouse_moved</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>mouse_wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>mouse_wp</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_mouse_row</name></name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mouse_row</name></name> <operator>!=</operator> <name>mouse_row</name>
<operator>||</operator> <name><name>mouse_col</name> <argument_list type="generic">&lt; <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mouse_mincol</name></name>
<operator>||</operator> <name>mouse_col</name></expr></argument> &gt;</argument_list></name> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_mouse_maxcol</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>popup_close_with_retval</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>popup_handle_mouse_moved</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nextwp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>mouse_wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>mouse_row</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>mouse_col</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>mouse_wp</name> <operator>=</operator> <call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>FIND_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <name>first_popupwin</name></expr>;</init> <condition><expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name>nextwp</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>nextwp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_mouse_moved</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>mouse_wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_first_popupwin</name></name></expr>;</init> <condition><expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name>nextwp</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>nextwp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_mouse_moved</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>mouse_wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>filter_handle_drag</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>mouse_row</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>mouse_col</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_DRAG</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>is_mouse_key</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>wp</name> <operator>==</operator> <name>popup_dragwin</name>
<operator>||</operator> <name>wp</name> <operator>==</operator> <call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>FIND_POPUP</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_popup_filter_menu</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>win_id2wp</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>old_lnum</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>key</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'k'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'K'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_UP</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'j'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'J'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_DOWN</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>old_lnum</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition>
<block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'X'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>ESC</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_C</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popup_close_and_callback</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_KENTER</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>CAR</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>NL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popup_close_and_callback</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>filter_handle_drag</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_popup_filter_yesno</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>win_id2wp</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>key</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'y'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'Y'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'N'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'X'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>ESC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>filter_handle_drag</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>res</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popup_close_and_callback</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_popup_dialog</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>popup_create</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TYPE_DIALOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_popup_menu</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>popup_create</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TYPE_MENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_popup_notification</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>popup_create</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TYPE_NOTIFICATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type>
<name>find_popup_win</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>win_id2wp</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E993: window %d is not a popup window"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>wp</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_popup_close</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>ERROR_IF_ANY_POPUP_WINDOW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>find_popup_win</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popup_close_and_callback</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>popup_hide</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>error_if_term_popup_window</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_HIDDEN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>|=</operator> <name>POPF_HIDDEN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>popup_mask_refresh</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_popup_hide</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>find_popup_win</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popup_hide</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>popup_show</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_HIDDEN</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>POPF_HIDDEN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>popup_mask_refresh</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_popup_show</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>find_popup_win</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>popup_show</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_INFO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pum_position_info_popup</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_popup_settext</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>find_popup_win</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_STRING</name> <operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>popup_set_buffer_text</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popup_adjust_position</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>popup_free</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>sign_undefine_by_name</name><argument_list>(<argument><expr><call><name>popup_get_sign_name</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_locked</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <call><name>popup_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>cmdline_row</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>win_free_popup</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>popup_mask_refresh</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>error_for_popup_window</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E994: Not allowed in a popup window"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>error_if_popup_window</name><parameter_list>(<parameter><decl><type><name>int</name> <name>also_with_term</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>(</operator><name>also_with_term</name> <operator>||</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>term_is_finished</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error_for_popup_window</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>popup_close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <name>first_popupwin</name></expr>;</init> <condition><expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>prev</name> <operator>=</operator> <name>wp</name></expr><operator>,</operator> <expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_id</name></name> <operator>==</operator> <name>id</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error_for_popup_window</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_popupwin</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>w_next</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>popup_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>


<macro><name>FOR_ALL_TABPAGES</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>popup_close_tabpage</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>popup_close_tabpage</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name> <init>= <expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>tp_first_popupwin</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <operator>*</operator><name>root</name></expr>;</init> <condition><expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>prev</name> <operator>=</operator> <name>wp</name></expr><operator>,</operator> <expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_id</name></name> <operator>==</operator> <name>id</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error_for_popup_window</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>w_next</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>popup_free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>close_all_popups</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ERROR_IF_ANY_POPUP_WINDOW</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>first_popupwin</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popup_close</name><argument_list>(<argument><expr><name><name>first_popupwin</name><operator>-&gt;</operator><name>w_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_first_popupwin</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popup_close</name><argument_list>(<argument><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_first_popupwin</name><operator>-&gt;</operator><name>w_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_popup_move</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>find_popup_win</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_DICT</name> <operator>||</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_move_options</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&gt;=</operator> <name>cmdline_row</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>popup_adjust_position</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_popup_setoptions</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>find_popup_win</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>old_firstline</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_DICT</name> <operator>||</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_firstline</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_firstline</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_move_options</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apply_general_options</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_firstline</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_firstline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>popup_mask_refresh</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popup_highlight_curline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popup_adjust_position</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_popup_getpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>find_popup_win</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_extra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left_extra</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_dict_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>top_extra</name> <operator>=</operator> <call><name>popup_top_extra</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>left_extra</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hash_lock_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"line"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"col"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <name>left_extra</name>
<operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <name>top_extra</name>
<operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"core_line"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>top_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"core_col"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>left_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"core_width"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"core_height"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"scrollbar"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_has_scrollbar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"firstline"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"lastline"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"visible"</literal></expr></argument>,
<argument><expr><call><name>win_valid</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_HIDDEN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type>
<name>f_popup_locate</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>FIND_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_padding_border</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>array</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>array</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>array</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>list_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dict_add_list</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>array</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>array</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>array</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_borderhighlight</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_highlight</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>list_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dict_add_list</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"borderhighlight"</literal></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>list_append_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_highlight</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_borderchars</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_char</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>list_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dict_add_list</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"borderchars"</literal></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mb_char2bytes</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_char</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_append_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_moved_list</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>list_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dict_add_list</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"moved"</literal></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mincol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_maxcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>list_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dict_add_list</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"mousemoved"</literal></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mouse_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mouse_mincol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mouse_maxcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_popup_getoptions</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>find_popup_win</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_dict_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"line"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"col"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wantcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"minwidth"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_minwidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"minheight"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_minheight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"maxheight"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_maxheight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"maxwidth"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_maxwidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"firstline"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_firstline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"scrollbar"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_want_scrollbar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"zindex"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_zindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"fixed"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_fixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_type</name></name> <operator>&amp;&amp;</operator> <call><name>win_valid</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>proptype_T</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>text_prop_type_by_id</name><argument_list>(
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"textprop"</literal></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"textpropwin"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name><operator>-&gt;</operator><name>w_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"textpropid"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"wrap"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"drag"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_DRAG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"mapping"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_MAPPING</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"resize"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_RESIZE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"posinvert"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_POSINVERT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"cursorline"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_CURSORLINE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"highlight"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wcr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbar_highlight</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"scrollbarhighlight"</literal></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbar_highlight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_thumb_highlight</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"thumbhighlight"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_thumb_highlight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<macro><name>FOR_ALL_TABPAGES</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>twp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_POPUPWINS_IN_TAB</name><argument_list>(<argument>tp</argument>, <argument>twp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>twp</name><operator>-&gt;</operator><name>w_id</name></name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>twp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>tp</name> <operator>==</operator> <name>curtab</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"tabpage"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_padding_border</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name></name></expr></argument>, <argument><expr><literal type="string">"padding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_padding_border</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name></name></expr></argument>, <argument><expr><literal type="string">"border"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_borderhighlight</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_borderchars</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_moved_list</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_filter_cb</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dict_add_callback</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"filter"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_filter_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_close_cb</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dict_add_callback</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"callback"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_close_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>poppos_entries</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>poppos_entry_T</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition>
<incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_pos</name></name> <operator>==</operator> <name><name>poppos_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pp_val</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"pos"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>poppos_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator>
<ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_close</name></name> <operator>==</operator> <name>POPCLOSE_BUTTON</name></expr> ?</condition><then> <expr><literal type="string">"button"</literal></expr>
</then><else>: <expr><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_close</name></name> <operator>==</operator> <name>POPCLOSE_CLICK</name></expr> ?</condition><then> <expr><literal type="string">"click"</literal></expr> </then><else>: <expr><literal type="string">"none"</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_timer</name></name> <operator>!=</operator> <name>NULL</name></expr>
?</condition><then> <expr><operator>(</operator><name>long</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_timer</name><operator>-&gt;</operator><name>tr_interval</name></name></expr> </then><else>: <expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>int</name></type>
<name>error_if_term_popup_window</name><parameter_list>()</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>term_job_running</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E863: Not allowed for a terminal in a popup window"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><name>void</name></type>
<name>popup_reset_handled</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>handled_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_POPUPWINS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_handled</name></name> <operator>&amp;=</operator> <operator>~</operator><name>handled_flag</name></expr>;</expr_stmt>
<macro><name>FOR_ALL_POPUPWINS_IN_TAB</name><argument_list>(<argument>curtab</argument>, <argument>wp</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_handled</name></name> <operator>&amp;=</operator> <operator>~</operator><name>handled_flag</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>win_T</name> <modifier>*</modifier></type>
<name>find_next_popup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lowest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>handled_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>found_wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found_zindex</name></decl>;</decl_stmt>

<expr_stmt><expr><name>found_zindex</name> <operator>=</operator> <ternary><condition><expr><name>lowest</name></expr> ?</condition><then> <expr><name>INT_MAX</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>found_wp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<macro><name>FOR_ALL_POPUPWINS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_handled</name></name> <operator>&amp;</operator> <name>handled_flag</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_HIDDEN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>lowest</name></expr> ?</condition><then> <expr><name><name>wp</name><operator>-&gt;</operator><name>w_zindex</name></name> <operator>&lt;</operator> <name>found_zindex</name></expr>
</then><else>: <expr><name><name>wp</name><operator>-&gt;</operator><name>w_zindex</name></name> <operator>&gt;</operator> <name>found_zindex</name></expr></else></ternary><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>found_zindex</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_zindex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>found_wp</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<macro><name>FOR_ALL_POPUPWINS_IN_TAB</name><argument_list>(<argument>curtab</argument>, <argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_handled</name></name> <operator>&amp;</operator> <name>handled_flag</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_HIDDEN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>lowest</name></expr> ?</condition><then> <expr><name><name>wp</name><operator>-&gt;</operator><name>w_zindex</name></name> <operator>&lt;</operator> <name>found_zindex</name></expr>
</then><else>: <expr><name><name>wp</name><operator>-&gt;</operator><name>w_zindex</name></name> <operator>&gt;</operator> <name>found_zindex</name></expr></else></ternary><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>found_zindex</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_zindex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>found_wp</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>found_wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>found_wp</name><operator>-&gt;</operator><name>w_popup_handled</name></name> <operator>|=</operator> <name>handled_flag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>found_wp</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>invoke_popup_filter</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>old_lnum</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_C</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_got_int</name> <init>= <expr><name>got_int</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popup_close_with_retval</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_int</name> <operator>|=</operator> <name>save_got_int</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_id</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>special_to_buf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>mod_mask</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>call_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_filter_cb</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>win_valid_popup</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>old_lnum</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popup_highlight_curline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>popup_do_filter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_KeyTyped</name> <init>= <expr><name>KeyTyped</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>was_must_redraw</name> <init>= <expr><name>must_redraw</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>popup_is_popup</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>recursive</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_LEFTMOUSE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>mouse_row</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>mouse_col</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>FIND_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>popup_close_if_on_X</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>popup_reset_handled</name><argument_list>(<argument><expr><name>POPUP_HANDLED_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>get_real_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name>res</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>wp</name> <operator>=</operator> <call><name>find_next_popup</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>POPUP_HANDLED_2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_filter_cb</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_filter_mode</name></name> <operator>&amp;</operator> <name>state</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>invoke_popup_filter</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>must_redraw</name> <operator>&gt;</operator> <name>was_must_redraw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_after_callback</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>KeyTyped</name> <operator>=</operator> <name>save_KeyTyped</name></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>popup_no_mapping</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>round</name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <ternary><condition><expr><name>round</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>first_popupwin</name></expr> </then><else>: <expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_first_popupwin</name></name></expr></else></ternary></expr>;</init>
<condition><expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_filter_cb</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>POPF_HIDDEN</name> <operator>|</operator> <name>POPF_MAPPING</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>popup_check_cursor_pos</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>popup_reset_handled</name><argument_list>(<argument><expr><name>POPUP_HANDLED_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>wp</name> <operator>=</operator> <call><name>find_next_popup</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>POPUP_HANDLED_3</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_curwin</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>curwin</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_curwin</name></name>
<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_lnum</name></name>
<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_mincol</name></name>
<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_maxcol</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popup_close_with_retval</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>popup_update_mask</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>lio</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cells</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mask</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mask_cells</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_mask_height</name></name> <operator>==</operator> <name>height</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_mask_width</name></name> <operator>==</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mask_cells</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mask_cells</name></name> <operator>=</operator> <call><name>alloc_clear</name><argument_list>(<argument><expr><name>width</name> <operator>*</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mask_cells</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cells</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_mask_cells</name></name></expr>;</expr_stmt>

<macro><name>FOR_ALL_LIST_ITEMS</name><argument_list>(<argument>wp-&gt;w_popup_mask</argument>, <argument>lio</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cols</name></decl>, <decl><type ref="prev"/><name>cole</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>, <decl><type ref="prev"/><name>linee</name></decl>;</decl_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>lio</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cols</name> <operator>=</operator> <name>width</name> <operator>+</operator> <name>cols</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cole</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cole</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cole</name> <operator>=</operator> <name>width</name> <operator>+</operator> <name>cole</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lines</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lines</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lines</name> <operator>=</operator> <name>height</name> <operator>+</operator> <name>lines</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>linee</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linee</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>linee</name> <operator>=</operator> <name>height</name> <operator>+</operator> <name>linee</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <name>lines</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>linee</name> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><operator>++</operator><name>row</name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <name>cols</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>cole</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cells</name><index>[<expr><name>row</name> <operator>*</operator> <name>width</name> <operator>+</operator> <name>col</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>popup_masked</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>screencol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>screenline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>screencol</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_leftoff</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><name>screenline</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name>width</name>
<operator>&amp;&amp;</operator> <name>line</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>line</name> <operator>&lt;</operator> <name>height</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_mask_cells</name><index>[<expr><name>line</name> <operator>*</operator> <name>width</name> <operator>+</operator> <name>col</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_popup_transparent</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mask</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>popup_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name>popup_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>lio</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cols</name></decl>, <decl><type ref="prev"/><name>cole</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>, <decl><type ref="prev"/><name>linee</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>, <decl><type ref="prev"/><name>line</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_LIST_ITEMS</name><argument_list>(<argument>wp-&gt;w_popup_mask</argument>, <argument>lio</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>lio</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cols</name> <operator>=</operator> <name>width</name> <operator>+</operator> <name>cols</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cole</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cole</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cole</name> <operator>=</operator> <name>width</name> <operator>+</operator> <name>cole</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lines</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lines</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lines</name> <operator>=</operator> <name>height</name> <operator>+</operator> <name>lines</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>linee</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linee</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>linee</name> <operator>=</operator> <name>height</name> <operator>+</operator> <name>linee</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>cols</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cols</name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_leftoff</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cole</name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_leftoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>lines</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lines</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>line</name> <operator>=</operator> <name>lines</name></expr>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name>linee</name>
<operator>&amp;&amp;</operator> <name>line</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>&lt;</operator> <name>screen_Rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>line</name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <name>cols</name></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>cole</name>
<operator>&amp;&amp;</operator> <name>col</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>&lt;</operator> <name>screen_Columns</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>popup_transparent</name><index>[<expr><operator>(</operator><name>line</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name><operator>)</operator> <operator>*</operator> <name>screen_Columns</name>
<operator>+</operator> <name>col</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_popup_unhidden</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_type</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>win_valid</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>textprop_T</name></type> <name>prop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_visible_prop</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name></name></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_type</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_id</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>POPF_HIDDEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_topline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>popup_need_position_adjust</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_last_changedtick</name></name> <operator>!=</operator> <call><name>CHANGEDTICK</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>win_valid</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_changedtick</name></name>
<operator>!=</operator> <call><name>CHANGEDTICK</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_topline</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name><operator>-&gt;</operator><name>w_topline</name></name>
<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_CURSORLINE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_last_curline</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>may_update_popup_mask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>redraw_all_popups</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>redrawing_all_win</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>popup_mask_tab</name> <operator>!=</operator> <name>curtab</name> <operator>||</operator> <name>type</name> <operator>&gt;=</operator> <name>NOT_VALID</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>popup_mask_refresh</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw_all_popups</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<macro><name>FOR_ALL_POPUPWINS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_HIDDEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>popup_mask_refresh</name> <operator>|=</operator> <call><name>check_popup_unhidden</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>popup_need_position_adjust</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>popup_mask_refresh</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<macro><name>FOR_ALL_POPUPWINS_IN_TAB</name><argument_list>(<argument>curtab</argument>, <argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_HIDDEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>popup_mask_refresh</name> <operator>|=</operator> <call><name>check_popup_unhidden</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>popup_need_position_adjust</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>popup_mask_refresh</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>popup_mask_refresh</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>popup_mask_refresh</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>popup_mask_tab</name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt>
<expr_stmt><expr><name>popup_visible</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>




<expr_stmt><expr><name>redrawing_all_win</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>&lt;</operator> <name>SOME_VALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>redrawing_all_win</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>redrawing_all_win</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>popup_mask</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>popup_mask_next</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screen_Rows</name> <operator>*</operator> <name>screen_Columns</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>popup_reset_handled</name><argument_list>(<argument><expr><name>POPUP_HANDLED_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>wp</name> <operator>=</operator> <call><name>find_next_popup</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>POPUP_HANDLED_4</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<expr_stmt><expr><name>popup_visible</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>redraw_all_popups</name> <operator>||</operator> <call><name>popup_need_position_adjust</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>popup_adjust_position</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_HIDDEN</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>popup_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>popup_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popup_update_mask</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>line</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>;</init>
<condition><expr><name>line</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <name>height</name> <operator>&amp;&amp;</operator> <name>line</name> <operator>&lt;</operator> <name>screen_Rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>line</name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</init>
<condition><expr><name>col</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name>width</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_leftoff</name></name>
<operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name>screen_Columns</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mask_cells</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <operator>!</operator><call><name>popup_masked</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mask</name><index>[<expr><name>line</name> <operator>*</operator> <name>screen_Columns</name> <operator>+</operator> <name>col</name></expr>]</index></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_zindex</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>==</operator> <name>popup_mask_next</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>plines_cache</name> <init>= <expr><call><name>ALLOC_CLEAR_MULT</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>Rows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>prev_wp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name>screen_Rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>line</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>col_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>screen_Columns</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>line</name> <operator>*</operator> <name>screen_Columns</name> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>popup_mask</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <name><name>popup_mask_next</name><index>[<expr><name>off</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>popup_mask</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name><name>popup_mask_next</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>&gt;=</operator> <name>cmdline_row</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg_scrolled</name> <operator>&amp;&amp;</operator> <name><name>popup_mask_next</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>col_done</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_cp</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col_cp</name> <init>= <expr><name>col</name></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col_cp</name></expr></argument>, <argument><expr><name>IGNORE_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>prev_wp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>plines_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>Rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_wp</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line_cp</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><call><name>mouse_comp_pos</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line_cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col_cp</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>, <argument><expr><name>plines_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawWinline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name>col_done</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>plines_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>get_spaces</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>IObuff</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<return>return <expr><name>IObuff</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>update_popups</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>win_update</name>)<parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left_extra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_padding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>popup_attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>border_attr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>border_char</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wincol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>padcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>padwidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sb_thumb_top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sb_thumb_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr_scroll</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr_thumb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>popup_reset_handled</name><argument_list>(<argument><expr><name>POPUP_HANDLED_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>wp</name> <operator>=</operator> <call><name>find_next_popup</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>POPUP_HANDLED_5</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>screen_zindex</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_zindex</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>update_popup_transparent</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>top_off</name> <operator>=</operator> <call><name>popup_top_extra</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>left_extra</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
<operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_leftoff</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name>left_extra</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>left_extra</name> <operator>=</operator> <operator>-</operator><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+=</operator> <name>top_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+=</operator> <name>left_extra</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>&lt;</operator> <name>screen_Rows</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>&lt;</operator> <name>screen_Columns</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>win_update</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>-=</operator> <name>top_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>-=</operator> <name>left_extra</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>curwin</name> <operator>||</operator> <operator>!</operator><call><name>term_in_normal_mode</name><argument_list>()</argument_list></call></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>+=</operator> <name>top_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>+=</operator> <name>left_extra</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>total_width</name> <operator>=</operator> <call><name>popup_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total_height</name> <operator>=</operator> <call><name>popup_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>popup_attr</name> <operator>=</operator> <call><name>get_wcr_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <name>total_height</name> <operator>&gt;</operator> <name>cmdline_row</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>|=</operator> <name>POPF_ON_CMDLINE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>POPF_ON_CMDLINE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_ambw</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>border_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>border_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x2550</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>border_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>border_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x2551</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>border_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x2554</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>border_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x2557</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>border_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_RESIZE</name><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">0x21f2</literal></expr> </then><else>: <expr><literal type="number">0x255d</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>border_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x255a</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>border_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>border_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>border_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>border_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>border_char</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_RESIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>border_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'@'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_char</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>border_char</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_border_char</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>border_attr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>popup_attr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_highlight</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>border_attr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>syn_name2attr</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_border_highlight</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>wincol</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_leftoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>top_padding</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>wincol</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>wincol</name></expr></else></ternary></expr></argument>, <argument><expr><name>wincol</name> <operator>+</operator> <name>total_width</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_leftoff</name></name> <operator>==</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><name><name>border_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>border_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>border_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>border_attr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_rightoff</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>mb_char2bytes</name><argument_list>(<argument><expr><name><name>border_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screen_puts</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name></expr></argument>,
<argument><expr><name>wincol</name> <operator>+</operator> <name>total_width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>border_attr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>popup_top_extra</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>top_padding</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>top_padding</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>padcol</name> <operator>=</operator> <name>wincol</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>padwidth</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name>total_width</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
<operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_has_scrollbar</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>padcol</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>padwidth</name> <operator>+=</operator> <name>padcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>padcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>top_padding</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <name>top_padding</name></expr></argument>, <argument><expr><name>padcol</name></expr></argument>, <argument><expr><name>padwidth</name></expr></argument>,
<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>popup_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_title</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_title</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>trunc_string</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_title</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>total_width</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screen_puts</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>border_attr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>popup_attr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_has_scrollbar</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>linecount</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sb_thumb_height</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>*</operator> <name>height</name> <operator>+</operator> <name>linecount</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>linecount</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>sb_thumb_height</name> <operator>==</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>sb_thumb_height</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>sb_thumb_height</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sb_thumb_height</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>linecount</name> <operator>&lt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sb_thumb_top</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sb_thumb_top</name> <operator>=</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>-</operator> <literal type="number">1</literal>
<operator>+</operator> <operator>(</operator><name>linecount</name> <operator>/</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator>
<operator>*</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>sb_thumb_height</name><operator>)</operator>
<operator>/</operator> <operator>(</operator><name>linecount</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>sb_thumb_top</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>height</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sb_thumb_top</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbar_highlight</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr_scroll</name> <operator>=</operator> <call><name>syn_name2attr</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbar_highlight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>attr_scroll</name> <operator>=</operator> <name><name>highlight_attr</name><index>[<expr><name>HLF_PSB</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_thumb_highlight</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr_thumb</name> <operator>=</operator> <call><name>syn_name2attr</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_thumb_highlight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>attr_thumb</name> <operator>=</operator> <name><name>highlight_attr</name><index>[<expr><name>HLF_PST</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init>
<condition><expr><name>i</name> <operator>&lt;</operator> <name>total_height</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pad_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_padding</name> <init>=
<expr><name>i</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>
<operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>total_height</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
<operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wincol</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>mb_char2bytes</name><argument_list>(<argument><expr><name><name>border_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screen_puts</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>wincol</name></expr></argument>, <argument><expr><name><name>border_attr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_padding</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>wincol</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>pad_left</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pad_left</name> <operator>+=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pad_left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>screen_puts</name><argument_list>(<argument><expr><call><name>get_spaces</name><argument_list>(<argument><expr><name>pad_left</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>popup_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_has_scrollbar</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><name>i</name> <operator>-</operator> <name>top_off</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scroll_col</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name>total_width</name> <operator>-</operator> <literal type="number">1</literal>
<operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>line</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>screen_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>scroll_col</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>line</name> <operator>&gt;=</operator> <name>sb_thumb_top</name>
<operator>&amp;&amp;</operator> <name>line</name> <operator>&lt;</operator> <name>sb_thumb_top</name> <operator>+</operator> <name>sb_thumb_height</name></expr>
?</condition><then> <expr><name>attr_thumb</name></expr> </then><else>: <expr><name>attr_scroll</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>screen_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>scroll_col</name></expr></argument>, <argument><expr><name>popup_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>mb_char2bytes</name><argument_list>(<argument><expr><name><name>border_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screen_puts</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>wincol</name> <operator>+</operator> <name>total_width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>border_attr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_padding</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>screen_puts</name><argument_list>(<argument><expr><call><name>get_spaces</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>row</name></expr></argument>,
<argument><expr><name>wincol</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>
<operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr></argument>,
<argument><expr><name>popup_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>
<operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_padding</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>padcol</name></expr></argument>, <argument><expr><name>padwidth</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>popup_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <name>total_height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><name>row</name></expr></argument> , <argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>wincol</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>wincol</name></expr></else></ternary></expr></argument>,
<argument><expr><name>wincol</name> <operator>+</operator> <name>total_width</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_leftoff</name></name> <operator>==</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><name><name>border_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>border_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>border_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>border_attr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>mb_char2bytes</name><argument_list>(<argument><expr><name><name>border_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screen_puts</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>wincol</name> <operator>+</operator> <name>total_width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>border_attr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_close</name></name> <operator>==</operator> <name>POPCLOSE_BUTTON</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>mb_char2bytes</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screen_puts</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name></expr></argument>, <argument><expr><name>wincol</name> <operator>+</operator> <name>total_width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>border_attr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>popup_attr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>update_popup_transparent</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>screen_zindex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_ref_in_one_popup</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>abort</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_close_cb</name><operator>.</operator><name>cb_partial</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_PARTIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_close_cb</name><operator>.</operator><name>cb_partial</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>abort</name> <operator>||</operator> <call><name>set_ref_in_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_filter_cb</name><operator>.</operator><name>cb_partial</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_PARTIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_filter_cb</name><operator>.</operator><name>cb_partial</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>abort</name> <operator>||</operator> <call><name>set_ref_in_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>abort</name> <operator>||</operator> <call><name>set_ref_in_list</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_mask</name></name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>abort</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>set_ref_in_popups</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>abort</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <name>first_popupwin</name></expr>;</init> <condition><expr><operator>!</operator><name>abort</name> <operator>&amp;&amp;</operator> <name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>abort</name> <operator>||</operator> <call><name>set_ref_in_one_popup</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<macro><name>FOR_ALL_TABPAGES</name><argument_list>(<argument>tp</argument>)</argument_list></macro>
<block>{<block_content>
<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_first_popupwin</name></name></expr>;</init> <condition><expr><operator>!</operator><name>abort</name> <operator>&amp;&amp;</operator> <name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>abort</name> <operator>||</operator> <call><name>set_ref_in_one_popup</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>abort</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>abort</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>popup_is_popup</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>win_T</name> <modifier>*</modifier></type>
<name>popup_find_preview_window</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>


<macro><name>FOR_ALL_POPUPWINS_IN_TAB</name><argument_list>(<argument>curtab</argument>, <argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_pvw</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>wp</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>win_T</name> <modifier>*</modifier></type>
<name>popup_find_info_window</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>


<macro><name>FOR_ALL_POPUPWINS_IN_TAB</name><argument_list>(<argument>curtab</argument>, <argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_INFO</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>wp</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>f_popup_findinfo</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>popup_find_info_window</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <ternary><condition><expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>wp</name><operator>-&gt;</operator><name>w_id</name></name></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>f_popup_findpreview</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>popup_find_preview_window</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <ternary><condition><expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>wp</name><operator>-&gt;</operator><name>w_id</name></name></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>






<function><type><name>int</name></type>
<name>popup_create_preview_window</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>popup_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name>info</name></expr> ?</condition><then> <expr><name>TYPE_INFO</name></expr> </then><else>: <expr><name>TYPE_PREVIEW</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>|=</operator> <name>POPF_INFO</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_pvw</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_minwidth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_minwidth</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_maxwidth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_maxwidth</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_locked</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>popup_close_preview</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>popup_find_preview_window</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popup_close_with_retval</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>popup_hide_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>popup_find_info_window</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popup_hide</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>int</name></type>
<name>popup_win_closed</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>round</name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <ternary><condition><expr><name>round</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>first_popupwin</name></expr> </then><else>: <expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_first_popupwin</name></name></expr></else></ternary></expr>;</init>
<condition><expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name>next</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_prop_win</name></name> <operator>==</operator> <name>win</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>popup_close_with_retval</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for></block_content></block></for>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>popup_set_title</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>dirname</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_dirname</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shorten_buf_fname</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_title</name></name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_title</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_title</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">" %s "</literal></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>void</name></type>
<name>popup_update_preview_title</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>popup_find_preview_window</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popup_set_title</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
