<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\winclip.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CYGWIN_WIN32_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"winclip.pro"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINAPI</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINBASEAPI</name></cpp:macro></cpp:define>
<typedef>typedef <type><name>int</name></type> <name>DWORD</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>LPBOOL</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>LPCSTR</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>LPCWSTR</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>LPSTR</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>LPWSTR</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>UINT</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><name>int</name></type>
<name>utf8_to_utf16</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>short_u</name> <modifier>*</modifier></type><name>outstr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>unconvlenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>outlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>instr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>todo</name> <init>= <expr><name>inlen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utf_ptr2len_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>todo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>todo</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>unconvlenp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>unconvlenp</name> <operator>=</operator> <name>todo</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0x10000</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>outlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>outstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>outstr</name><operator>++</operator> <operator>=</operator> <operator>(</operator><literal type="number">0xD800</literal> <operator>-</operator> <operator>(</operator><literal type="number">0x10000</literal> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outstr</name><operator>++</operator> <operator>=</operator> <literal type="number">0xDC00</literal> <operator>|</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3FF</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>outstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>outstr</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>outlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>todo</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>outlen</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>utf16_to_utf8</name><parameter_list>(<parameter><decl><type><name>short_u</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>outstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>outlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>todo</name> <init>= <expr><name>inlen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>instr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>ch2</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0xD800</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="number">0xDBFF</literal> <operator>&amp;&amp;</operator> <name>todo</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>ch2</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch2</name> <operator>&gt;=</operator> <literal type="number">0xDC00</literal> <operator>&amp;&amp;</operator> <name>ch2</name> <operator>&lt;=</operator> <literal type="number">0xDFFF</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>-</operator> <literal type="number">0xD800</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>ch2</name> <operator>&amp;</operator> <literal type="number">0x3FF</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>outstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>outstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outstr</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utf_char2len</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outlen</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>outlen</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>MultiByteToWideChar_alloc</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>LPCSTR</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inlen</name></decl></parameter>,
<parameter><decl><type><name>LPWSTR</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><operator>*</operator><name>outlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><operator>*</operator><name>out</name></expr></argument>, <argument><expr><operator>*</operator><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><operator>*</operator><name>outlen</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>WideCharToMultiByte_alloc</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>LPCWSTR</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inlen</name></decl></parameter>,
<parameter><decl><type><name>LPSTR</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,
<parameter><decl><type><name>LPCSTR</name></type> <name>def</name></decl></parameter>, <parameter><decl><type><name>LPBOOL</name></type> <name>useddef</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>def</name></expr></argument>, <argument><expr><name>useddef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><operator>*</operator><name>outlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><operator>*</operator><name>out</name></expr></argument>, <argument><expr><operator>*</operator><name>outlen</name></expr></argument>, <argument><expr><name>def</name></expr></argument>, <argument><expr><name>useddef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><index>[<expr><operator>*</operator><name>outlen</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>void</name></type>
<name>win_clip_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>clip_init</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name><name>clip_star</name><operator>.</operator><name>format</name></name> <operator>=</operator> <call><name>RegisterClipboardFormat</name><argument_list>(<argument><expr><literal type="string">"VimClipboard2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clip_star</name><operator>.</operator><name>format_raw</name></name> <operator>=</operator> <call><name>RegisterClipboardFormat</name><argument_list>(<argument><expr><literal type="string">"VimRawBytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>txtlen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ucslen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>rawlen</name></decl>;</decl_stmt> 

}</block></struct></type> <name>VimClipType_t</name>;</typedef>




<function><type><name>int</name></type>
<name>clip_mch_own_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier><name>cbd</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>clip_mch_lose_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier><name>cbd</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>crnl_to_nl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>str_len</name> <init>= <expr><operator>*</operator><name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retp</name></decl>;</decl_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><ternary><condition><expr><name>str_len</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>str_len</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>retp</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>str_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>pos</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><operator>(</operator><operator>*</operator><name>size</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>retp</name><operator>++</operator> <operator>=</operator> <name><name>str</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>vim_open_clipboard</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>delay</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>OpenClipboard</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&gt;</operator> <literal type="number">500</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delay</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
</block_content>}</block></while>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>












<function><type><name>void</name></type>
<name>clip_mch_request_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VimClipType_t</name></type> <name>metadata</name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HGLOBAL</name></type> <name>hMem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to_free</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HGLOBAL</name></type> <name>rawh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>str_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_open_clipboard</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>IsClipboardFormatAvailable</name><argument_list>(<argument><expr><name><name>cbd</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>VimClipType_t</name> <modifier>*</modifier></type><name>meta_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HGLOBAL</name></type> <name>meta_h</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>meta_h</name> <operator>=</operator> <call><name>GetClipboardData</name><argument_list>(<argument><expr><name><name>cbd</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>meta_p</name> <operator>=</operator> <operator>(</operator><name>VimClipType_t</name> <operator>*</operator><operator>)</operator><call><name>GlobalLock</name><argument_list>(<argument><expr><name>meta_h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VimClipType_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GlobalSize</name><argument_list>(<argument><expr><name>meta_h</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>GlobalSize</name><argument_list>(<argument><expr><name>meta_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metadata</name></expr></argument>, <argument><expr><name>meta_p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GlobalUnlock</name><argument_list>(<argument><expr><name>meta_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>IsClipboardFormatAvailable</name><argument_list>(<argument><expr><name><name>cbd</name><operator>-&gt;</operator><name>format_raw</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>metadata</name><operator>.</operator><name>rawlen</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rawh</name> <operator>=</operator> <call><name>GetClipboardData</name><argument_list>(<argument><expr><name><name>cbd</name><operator>-&gt;</operator><name>format_raw</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rawp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rawp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>GlobalLock</name><argument_list>(<argument><expr><name>rawh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rawp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>rawp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>rawp</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str_size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>metadata</name><operator>.</operator><name>rawlen</name></name> <operator>-</operator> <name>n</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>GlobalUnlock</name><argument_list>(<argument><expr><name>rawh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rawh</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsClipboardFormatAvailable</name><argument_list>(<argument><expr><name>CF_UNICODETEXT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>metadata</name><operator>.</operator><name>ucslen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>HGLOBAL</name></type> <name>hMemW</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hMemW</name> <operator>=</operator> <call><name>GetClipboardData</name><argument_list>(<argument><expr><name>CF_UNICODETEXT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>hMemWstr</name> <init>= <expr><operator>(</operator><name>WCHAR</name> <operator>*</operator><operator>)</operator><call><name>GlobalLock</name><argument_list>(<argument><expr><name>hMemW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>GlobalSize</name><argument_list>(<argument><expr><name>hMemW</name></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>.</operator><name>ucslen</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>.</operator><name>ucslen</name></name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str_size</name> <operator>=</operator> <name>maxlen</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>str_size</name> <operator>=</operator> <name><name>metadata</name><operator>.</operator><name>ucslen</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><expr><name>str_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>str_size</name> <operator>&lt;</operator> <name>maxlen</name></expr>;</condition> <incr><expr><operator>++</operator><name>str_size</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>hMemWstr</name><index>[<expr><name>str_size</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>to_free</name> <operator>=</operator> <name>str</name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(<argument><expr><operator>(</operator><name>short_u</name> <operator>*</operator><operator>)</operator><name>hMemWstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GlobalUnlock</name><argument_list>(<argument><expr><name>hMemW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsClipboardFormatAvailable</name><argument_list>(<argument><expr><name>CF_TEXT</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hMem</name> <operator>=</operator> <call><name>GetClipboardData</name><argument_list>(<argument><expr><name>CF_TEXT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>GlobalLock</name><argument_list>(<argument><expr><name>hMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>GlobalSize</name><argument_list>(<argument><expr><name>hMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>.</operator><name>txtlen</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>.</operator><name>txtlen</name></name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str_size</name> <operator>=</operator> <name>maxlen</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>str_size</name> <operator>=</operator> <name><name>metadata</name><operator>.</operator><name>txtlen</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><expr><name>str_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>str_size</name> <operator>&lt;</operator> <name>maxlen</name></expr>;</condition> <incr><expr><operator>++</operator><name>str_size</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>str_size</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><call><name>acp_to_enc</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>str_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to_free</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>to_free</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>str_size</name> <operator>=</operator> <name>maxlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>to_free</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>temp_clipboard</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>.</operator><name>type</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>MAUTO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>temp_clipboard</name> <operator>=</operator> <call><name>crnl_to_nl</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>temp_clipboard</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clip_yank_selection</name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>temp_clipboard</name></expr></argument>, <argument><expr><name>str_size</name></expr></argument>, <argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>temp_clipboard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>hMem</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GlobalUnlock</name><argument_list>(<argument><expr><name>hMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rawh</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GlobalUnlock</name><argument_list>(<argument><expr><name>rawh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CloseClipboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>to_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>clip_mch_set_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VimClipType_t</name></type> <name>metadata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long_u</name></type> <name>txtlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HGLOBAL</name></type> <name>hMemRaw</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HGLOBAL</name></type> <name>hMem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HGLOBAL</name></type> <name>hMemVim</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HGLOBAL</name></type> <name>hMemW</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>cbd</name><operator>-&gt;</operator><name>owned</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clip_get_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbd</name><operator>-&gt;</operator><name>owned</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>type</name></name> <operator>=</operator> <call><name>clip_convert_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txtlen</name></expr></argument>, <argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>.</operator><name>type</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>txtlen</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>txtlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>ucslen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>rawlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<block>{<block_content>
<decl_stmt><decl><type><name>LPSTR</name></type> <name>lpszMemRaw</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>rawlen</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>txtlen</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>hMemRaw</name> <operator>=</operator> <operator>(</operator><name>LPSTR</name><operator>)</operator><call><name>GlobalAlloc</name><argument_list>(<argument><expr><name>GMEM_MOVEABLE</name> <operator>|</operator> <name>GMEM_DDESHARE</name></expr></argument>,
<argument><expr><name><name>metadata</name><operator>.</operator><name>rawlen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lpszMemRaw</name> <operator>=</operator> <operator>(</operator><name>LPSTR</name><operator>)</operator><call><name>GlobalLock</name><argument_list>(<argument><expr><name>hMemRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lpszMemRaw</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>lpszMemRaw</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lpszMemRaw</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>txtlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GlobalUnlock</name><argument_list>(<argument><expr><name>hMemRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>rawlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>metadata</name><operator>.</operator><name>txtlen</name></name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>WCHAR</name> <operator>*</operator><operator>)</operator><call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>lpszMemW</name></decl>;</decl_stmt>



<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>txtlen</name></name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><call><name>GetACP</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>metadata</name><operator>.</operator><name>txtlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>metadata</name><operator>.</operator><name>txtlen</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><call><name>GetACP</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><operator>(</operator><name>LPSTR</name><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name><name>metadata</name><operator>.</operator><name>txtlen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>hMemW</name> <operator>=</operator> <operator>(</operator><name>LPSTR</name><operator>)</operator><call><name>GlobalAlloc</name><argument_list>(<argument><expr><name>GMEM_MOVEABLE</name> <operator>|</operator> <name>GMEM_DDESHARE</name></expr></argument>,
<argument><expr><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lpszMemW</name> <operator>=</operator> <operator>(</operator><name>WCHAR</name> <operator>*</operator><operator>)</operator><call><name>GlobalLock</name><argument_list>(<argument><expr><name>hMemW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lpszMemW</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lpszMemW</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lpszMemW</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GlobalUnlock</name><argument_list>(<argument><expr><name>hMemW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>metadata</name><operator>.</operator><name>ucslen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>


<expr_stmt><expr><name>hMem</name> <operator>=</operator> <call><name>GlobalAlloc</name><argument_list>(<argument><expr><name>GMEM_MOVEABLE</name> <operator>|</operator> <name>GMEM_DDESHARE</name></expr></argument>, <argument><expr><name><name>metadata</name><operator>.</operator><name>txtlen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>LPSTR</name></type> <name>lpszMem</name> <init>= <expr><operator>(</operator><name>LPSTR</name><operator>)</operator><call><name>GlobalLock</name><argument_list>(<argument><expr><name>hMem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lpszMem</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>lpszMem</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>metadata</name><operator>.</operator><name>txtlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GlobalUnlock</name><argument_list>(<argument><expr><name>hMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>


<block>{<block_content>
<decl_stmt><decl><type><name>VimClipType_t</name> <modifier>*</modifier></type><name>lpszMemVim</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hMemVim</name> <operator>=</operator> <call><name>GlobalAlloc</name><argument_list>(<argument><expr><name>GMEM_MOVEABLE</name><operator>|</operator><name>GMEM_DDESHARE</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VimClipType_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lpszMemVim</name> <operator>=</operator> <operator>(</operator><name>VimClipType_t</name> <operator>*</operator><operator>)</operator><call><name>GlobalLock</name><argument_list>(<argument><expr><name>hMemVim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lpszMemVim</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metadata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GlobalUnlock</name><argument_list>(<argument><expr><name>hMemVim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>









<if_stmt><if>if <condition>(<expr><call><name>vim_open_clipboard</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>EmptyClipboard</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SetClipboardData</name><argument_list>(<argument><expr><name><name>cbd</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>hMemVim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hMemVim</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hMemW</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>SetClipboardData</name><argument_list>(<argument><expr><name>CF_UNICODETEXT</name></expr></argument>, <argument><expr><name>hMemW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hMemW</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>SetClipboardData</name><argument_list>(<argument><expr><name>CF_TEXT</name></expr></argument>, <argument><expr><name>hMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hMem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CloseClipboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hMemRaw</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GlobalFree</name><argument_list>(<argument><expr><name>hMemRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hMem</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GlobalFree</name><argument_list>(<argument><expr><name>hMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hMemW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GlobalFree</name><argument_list>(<argument><expr><name>hMemW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hMemVim</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GlobalFree</name><argument_list>(<argument><expr><name>hMemVim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 













<function><type><name>short_u</name> <modifier>*</modifier></type>
<name>enc_to_utf16</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vimconv_T</name></type> <name>conv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>allocbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len_loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lenp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>len_loc</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lenp</name> <operator>=</operator> <operator>&amp;</operator><name>len_loc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_codepage</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>MultiByteToWideChar_alloc</name><argument_list>(<argument><expr><name>enc_codepage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator><name>str</name></expr></argument>, <argument><expr><operator>*</operator><name>lenp</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>



<expr_stmt><expr><name><name>conv</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><ternary><condition><expr><name>p_enc</name></expr> ?</condition><then> <expr><name>p_enc</name></expr> </then><else>: <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"latin1"</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"utf-8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>allocbuf</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>utf8_to_utf16</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>*</operator><name>lenp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>utf8_to_utf16</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>*</operator><name>lenp</name></expr></argument>, <argument><expr><operator>(</operator><name>short_u</name> <operator>*</operator><operator>)</operator><name>ret</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><index>[<expr><name>length</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>allocbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>short_u</name> <operator>*</operator><operator>)</operator><name>ret</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>utf16_to_enc</name><parameter_list>(<parameter><decl><type><name>short_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vimconv_T</name></type> <name>conv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>utf8_str</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>enc_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len_loc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lenp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>len_loc</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>wcslen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lenp</name> <operator>=</operator> <operator>&amp;</operator><name>len_loc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_codepage</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>WideCharToMultiByte_alloc</name><argument_list>(<argument><expr><name>enc_codepage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>*</operator><name>lenp</name></expr></argument>,
<argument><expr><operator>(</operator><name>LPSTR</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>enc_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<return>return <expr><name>enc_str</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>utf8_str</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>utf16_to_utf8</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>lenp</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>*</operator><name>lenp</name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>utf8_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <call><name>utf16_to_utf8</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>*</operator><name>lenp</name></expr></argument>, <argument><expr><name>utf8_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>conv</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"utf-8"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>p_enc</name></expr>?</condition><then> <expr><name>p_enc</name></expr></then><else>: <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"latin1"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conv</name><operator>.</operator><name>vc_type</name></name> <operator>==</operator> <name>CONV_NONE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>enc_str</name> <operator>=</operator> <name>utf8_str</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>enc_str</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>utf8_str</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>utf8_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>enc_str</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>acp_to_enc</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>str_size</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>
<decl_stmt><decl><type><name>LPWSTR</name></type> <name>widestr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MultiByteToWideChar_alloc</name><argument_list>(<argument><expr><call><name>GetACP</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>str_size</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>widestr</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>widestr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>outlen</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(<argument><expr><operator>(</operator><name>short_u</name> <operator>*</operator><operator>)</operator><name>widestr</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>widestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>enc_to_acp</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>str_size</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>
<decl_stmt><decl><type><name>LPWSTR</name></type> <name>widestr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>str_size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>widestr</name> <operator>=</operator> <operator>(</operator><name>WCHAR</name> <operator>*</operator><operator>)</operator><call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>widestr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>WideCharToMultiByte_alloc</name><argument_list>(<argument><expr><call><name>GetACP</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>widestr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><operator>(</operator><name>LPSTR</name> <operator>*</operator><operator>)</operator><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>widestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
