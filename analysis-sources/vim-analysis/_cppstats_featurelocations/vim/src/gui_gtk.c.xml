<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\gui_gtk.c">
































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gui_gtk_f.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MIN</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAX</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>N_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>N_</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>textdomain</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>textdomain</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>bindtextdomain</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>bindtextdomain</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>bind_textdomain_codeset</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>bind_textdomain_codeset</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GETTEXT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_NLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_NLS</name></cpp:macro></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gnome.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdkkeysyms-compat.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdkkeysyms.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdk.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdkwin32.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdkx.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtk/gtk.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>int</name></type> <name>GtkWidget</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gpointer</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>guint8</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GdkPixmap</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GdkBitmap</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GtkIconFactory</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GtkToolbar</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GtkAdjustment</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gboolean</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GdkEventKey</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CancelData</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>entry_activate_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>entry_changed_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>dialog</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>find_replace_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>recent_func_log_func</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>log_domain</name></decl></parameter>,
<parameter><decl><type><name>GLogLevelFlags</name></type> <name>log_level</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,
<parameter><decl><type><name>gpointer</name></type> <name>user_data</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>menu_themed_names</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"document-new"</literal></expr>, 
<expr><literal type="string">"document-open"</literal></expr>, 
<expr><literal type="string">"document-save"</literal></expr>, 
<expr><literal type="string">"edit-undo"</literal></expr>, 
<expr><literal type="string">"edit-redo"</literal></expr>, 
<expr><literal type="string">"edit-cut"</literal></expr>, 
<expr><literal type="string">"edit-copy"</literal></expr>, 
<expr><literal type="string">"edit-paste"</literal></expr>, 
<expr><literal type="string">"document-print"</literal></expr>, 
<expr><literal type="string">"help-browser"</literal></expr>, 
<expr><literal type="string">"edit-find"</literal></expr>, 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">14</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>


<expr><literal type="string">"stock_vim_save_all"</literal></expr>,
<expr><literal type="string">"stock_vim_session_save"</literal></expr>,
<expr><literal type="string">"stock_vim_session_new"</literal></expr>,
<expr><literal type="string">"stock_vim_session_load"</literal></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><literal type="string">"vim-save-all"</literal></expr>,
<expr><literal type="string">"vim-session-save"</literal></expr>,
<expr><literal type="string">"vim-session-new"</literal></expr>,
<expr><literal type="string">"vim-session-load"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">"system-run"</literal></expr>, 
<expr><literal type="string">"edit-find-replace"</literal></expr>, 
<expr><literal type="string">"window-close"</literal></expr>, 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">14</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"stock_vim_window_maximize"</literal></expr>,
<expr><literal type="string">"stock_vim_window_minimize"</literal></expr>,
<expr><literal type="string">"stock_vim_window_split"</literal></expr>,
<expr><literal type="string">"stock_vim_shell"</literal></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><literal type="string">"vim-window-maximize"</literal></expr>,
<expr><literal type="string">"vim-window-minimize"</literal></expr>,
<expr><literal type="string">"vim-window-split"</literal></expr>,
<expr><literal type="string">"vim-shell"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">"go-previous"</literal></expr>, 
<expr><literal type="string">"go-next"</literal></expr>, 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">14</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"stock_vim_find_help"</literal></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><literal type="string">"vim-find-help"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">"gtk-convert"</literal></expr>, 
<expr><literal type="string">"go-jump"</literal></expr>, 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">14</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"stock_vim_build_tags"</literal></expr>,
<expr><literal type="string">"stock_vim_window_split_vertical"</literal></expr>,
<expr><literal type="string">"stock_vim_window_maximize_width"</literal></expr>,
<expr><literal type="string">"stock_vim_window_minimize_width"</literal></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><literal type="string">"vim-build-tags"</literal></expr>,
<expr><literal type="string">"vim-window-split-vertical"</literal></expr>,
<expr><literal type="string">"vim-window-maximize-width"</literal></expr>,
<expr><literal type="string">"vim-window-minimize-width"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">"application-exit"</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>menu_stock_ids</name><index>[]</index></name> <init>=
<expr><block>{
<expr><name>GTK_STOCK_NEW</name></expr>,
<expr><name>GTK_STOCK_OPEN</name></expr>,
<expr><name>GTK_STOCK_SAVE</name></expr>,
<expr><name>GTK_STOCK_UNDO</name></expr>,
<expr><name>GTK_STOCK_REDO</name></expr>,
<expr><name>GTK_STOCK_CUT</name></expr>,
<expr><name>GTK_STOCK_COPY</name></expr>,
<expr><name>GTK_STOCK_PASTE</name></expr>,
<expr><name>GTK_STOCK_PRINT</name></expr>,
<expr><name>GTK_STOCK_HELP</name></expr>,
<expr><name>GTK_STOCK_FIND</name></expr>,
<expr><literal type="string">"vim-save-all"</literal></expr>,
<expr><literal type="string">"vim-session-save"</literal></expr>,
<expr><literal type="string">"vim-session-new"</literal></expr>,
<expr><literal type="string">"vim-session-load"</literal></expr>,
<expr><name>GTK_STOCK_EXECUTE</name></expr>,
<expr><name>GTK_STOCK_FIND_AND_REPLACE</name></expr>,
<expr><name>GTK_STOCK_CLOSE</name></expr>, 
<expr><literal type="string">"vim-window-maximize"</literal></expr>,
<expr><literal type="string">"vim-window-minimize"</literal></expr>,
<expr><literal type="string">"vim-window-split"</literal></expr>,
<expr><literal type="string">"vim-shell"</literal></expr>,
<expr><name>GTK_STOCK_GO_BACK</name></expr>,
<expr><name>GTK_STOCK_GO_FORWARD</name></expr>,
<expr><literal type="string">"vim-find-help"</literal></expr>,
<expr><name>GTK_STOCK_CONVERT</name></expr>,
<expr><name>GTK_STOCK_JUMP_TO</name></expr>,
<expr><literal type="string">"vim-build-tags"</literal></expr>,
<expr><literal type="string">"vim-window-split-vertical"</literal></expr>,
<expr><literal type="string">"vim-window-maximize-width"</literal></expr>,
<expr><literal type="string">"vim-window-minimize-width"</literal></expr>,
<expr><name>GTK_STOCK_QUIT</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GRESOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>IconNames</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>icon_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_name</name></decl>;</decl_stmt>
}</block></struct></type> <name>IconNames</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>IconNames</name></type> <name><name>stock_vim_icons</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"vim-build-tags"</literal></expr>, <expr><literal type="string">"stock_vim_build_tags.png"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vim-find-help"</literal></expr>, <expr><literal type="string">"stock_vim_find_help.png"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vim-save-all"</literal></expr>, <expr><literal type="string">"stock_vim_save_all.png"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vim-session-load"</literal></expr>, <expr><literal type="string">"stock_vim_session_load.png"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vim-session-new"</literal></expr>, <expr><literal type="string">"stock_vim_session_new.png"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vim-session-save"</literal></expr>, <expr><literal type="string">"stock_vim_session_save.png"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vim-shell"</literal></expr>, <expr><literal type="string">"stock_vim_shell.png"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vim-window-maximize"</literal></expr>, <expr><literal type="string">"stock_vim_window_maximize.png"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vim-window-maximize-width"</literal></expr>, <expr><literal type="string">"stock_vim_window_maximize_width.png"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vim-window-minimize"</literal></expr>, <expr><literal type="string">"stock_vim_window_minimize.png"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vim-window-minimize-width"</literal></expr>, <expr><literal type="string">"stock_vim_window_minimize_width.png"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vim-window-split"</literal></expr>, <expr><literal type="string">"stock_vim_window_split.png"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vim-window-split-vertical"</literal></expr>, <expr><literal type="string">"stock_vim_window_split_vertical.png"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_GRESOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_stock_icon</name><parameter_list>(<parameter><decl><type><name>GtkIconFactory</name> <modifier>*</modifier></type><name>factory</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stock_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>guint8</name> <modifier>*</modifier></type><name>inline_data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>data_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GdkPixbuf</name> <modifier>*</modifier></type><name>pixbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkIconSet</name> <modifier>*</modifier></type><name>icon_set</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pixbuf</name> <operator>=</operator> <call><name>gdk_pixbuf_new_from_inline</name><argument_list>(<argument><expr><name>data_length</name></expr></argument>, <argument><expr><name>inline_data</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>icon_set</name> <operator>=</operator> <call><name>gtk_icon_set_new_from_pixbuf</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_icon_factory_add</name><argument_list>(<argument><expr><name>factory</name></expr></argument>, <argument><expr><name>stock_id</name></expr></argument>, <argument><expr><name>icon_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_icon_set_unref</name><argument_list>(<argument><expr><name>icon_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>lookup_menu_iconfile</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>iconfile</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>expand_env</name><argument_list>(<argument><expr><name>iconfile</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_isFullName</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return <expr><call><name>vim_fexists</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>suffixes</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"png"</literal></expr>, <expr><literal type="string">"xpm"</literal></expr>, <expr><literal type="string">"bmp"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>G_N_ELEMENTS</name><argument_list>(<argument><expr><name>suffixes</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>gui_find_bitmap</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>suffixes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GtkWidget</name> <modifier>*</modifier></type>
<name>load_menu_iconfile</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>GtkIconSize</name></type> <name>icon_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>image</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>pixel_size</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>icon_size</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>GTK_ICON_SIZE_MENU</name></expr>:</case>
<expr_stmt><expr><name>pixel_size</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GTK_ICON_SIZE_SMALL_TOOLBAR</name></expr>:</case>
<expr_stmt><expr><name>pixel_size</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GTK_ICON_SIZE_LARGE_TOOLBAR</name></expr>:</case>
<expr_stmt><expr><name>pixel_size</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GTK_ICON_SIZE_BUTTON</name></expr>:</case>
<expr_stmt><expr><name>pixel_size</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GTK_ICON_SIZE_DND</name></expr>:</case>
<expr_stmt><expr><name>pixel_size</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GTK_ICON_SIZE_DIALOG</name></expr>:</case>
<expr_stmt><expr><name>pixel_size</name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GTK_ICON_SIZE_INVALID</name></expr>:</case>

<default>default:</default>
<expr_stmt><expr><name>pixel_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>pixel_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>pixel_size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GdkPixbuf</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pixbuf</name>
<init>= <expr><call><name>gdk_pixbuf_new_from_file_at_scale</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>,
<argument><expr><name>pixel_size</name></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pixbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>gtk_image_new_from_pixbuf</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>image</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>gtk_image_new_from_icon_name</name><argument_list>(<argument><expr><literal type="string">"image-missing"</literal></expr></argument>, <argument><expr><name>icon_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>image</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<decl_stmt><decl><type><name>GtkIconSet</name> <modifier>*</modifier></type><name>icon_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkIconSource</name> <modifier>*</modifier></type><name>icon_source</name></decl>;</decl_stmt>






<expr_stmt><expr><name>icon_set</name> <operator>=</operator> <call><name>gtk_icon_set_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>icon_source</name> <operator>=</operator> <call><name>gtk_icon_source_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_icon_source_set_filename</name><argument_list>(<argument><expr><name>icon_source</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_icon_set_add_source</name><argument_list>(<argument><expr><name>icon_set</name></expr></argument>, <argument><expr><name>icon_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>gtk_image_new_from_icon_set</name><argument_list>(<argument><expr><name>icon_set</name></expr></argument>, <argument><expr><name>icon_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_icon_source_free</name><argument_list>(<argument><expr><name>icon_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_icon_set_unref</name><argument_list>(<argument><expr><name>icon_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>image</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GtkWidget</name> <modifier>*</modifier></type>
<name>create_menu_icon</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>GtkIconSize</name></type> <name>icon_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>image</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>iconfile</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>lookup_menu_iconfile</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>iconfile</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>load_menu_iconfile</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>icon_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>image</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>menu</name><operator>-&gt;</operator><name>icon_builtin</name></name>
<operator>&amp;&amp;</operator> <call><name>lookup_menu_iconfile</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>load_menu_iconfile</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>icon_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>image</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>icon_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n_names</name> <init>= <expr><call><name>G_N_ELEMENTS</name><argument_list>(<argument><expr><name>menu_themed_names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name> <operator>&lt;</operator> <name>n_names</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>icon_name</name> <operator>=</operator> <name><name>menu_themed_names</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>icon_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>icon_name</name> <operator>=</operator> <literal type="string">"image-missing"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>gtk_image_new_from_icon_name</name><argument_list>(<argument><expr><name>icon_name</name></expr></argument>, <argument><expr><name>icon_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stock_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n_ids</name> <init>= <expr><call><name>G_N_ELEMENTS</name><argument_list>(<argument><expr><name>menu_stock_ids</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name> <operator>&lt;</operator> <name>n_ids</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stock_id</name> <operator>=</operator> <name><name>menu_stock_ids</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>stock_id</name> <operator>=</operator> <name>GTK_STOCK_MISSING_IMAGE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>gtk_image_new_from_stock</name><argument_list>(<argument><expr><name>stock_id</name></expr></argument>, <argument><expr><name>icon_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>image</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>
<name>toolbar_button_focus_in_event</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>GdkEventFocus</name> <modifier>*</modifier><name>event</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>gtk_socket_id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_widget_grab_focus</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>
<name>gui_gtk_register_stock_icons</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_GRESOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../pixmaps/stock_icons.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>GtkIconFactory</name> <modifier>*</modifier></type><name>factory</name></decl>;</decl_stmt>

<expr_stmt><expr><name>factory</name> <operator>=</operator> <call><name>gtk_icon_factory_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_ICON</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_stock_icon(factory, Name, Data, (int)sizeof(Data))</cpp:value></cpp:define>

<expr_stmt><expr><call><name>ADD_ICON</name><argument_list>(<argument><expr><literal type="string">"vim-build-tags"</literal></expr></argument>, <argument><expr><name>stock_vim_build_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_ICON</name><argument_list>(<argument><expr><literal type="string">"vim-find-help"</literal></expr></argument>, <argument><expr><name>stock_vim_find_help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_ICON</name><argument_list>(<argument><expr><literal type="string">"vim-save-all"</literal></expr></argument>, <argument><expr><name>stock_vim_save_all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_ICON</name><argument_list>(<argument><expr><literal type="string">"vim-session-load"</literal></expr></argument>, <argument><expr><name>stock_vim_session_load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_ICON</name><argument_list>(<argument><expr><literal type="string">"vim-session-new"</literal></expr></argument>, <argument><expr><name>stock_vim_session_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_ICON</name><argument_list>(<argument><expr><literal type="string">"vim-session-save"</literal></expr></argument>, <argument><expr><name>stock_vim_session_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_ICON</name><argument_list>(<argument><expr><literal type="string">"vim-shell"</literal></expr></argument>, <argument><expr><name>stock_vim_shell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_ICON</name><argument_list>(<argument><expr><literal type="string">"vim-window-maximize"</literal></expr></argument>, <argument><expr><name>stock_vim_window_maximize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_ICON</name><argument_list>(<argument><expr><literal type="string">"vim-window-maximize-width"</literal></expr></argument>, <argument><expr><name>stock_vim_window_maximize_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_ICON</name><argument_list>(<argument><expr><literal type="string">"vim-window-minimize"</literal></expr></argument>, <argument><expr><name>stock_vim_window_minimize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_ICON</name><argument_list>(<argument><expr><literal type="string">"vim-window-minimize-width"</literal></expr></argument>, <argument><expr><name>stock_vim_window_minimize_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_ICON</name><argument_list>(<argument><expr><literal type="string">"vim-window-split"</literal></expr></argument>, <argument><expr><name>stock_vim_window_split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_ICON</name><argument_list>(<argument><expr><literal type="string">"vim-window-split-vertical"</literal></expr></argument>, <argument><expr><name>stock_vim_window_split_vertical</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ADD_ICON</name></cpp:undef>

<expr_stmt><expr><call><name>gtk_icon_factory_add_default</name><argument_list>(<argument><expr><name>factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>path_prefix</name> <init>= <expr><literal type="string">"/org/vim/gui/icon"</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">14</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GdkScreen</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkIconTheme</name> <modifier>*</modifier></type><name>icon_theme</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GTK_IS_WIDGET</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>screen</name> <operator>=</operator> <call><name>gtk_widget_get_screen</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>screen</name> <operator>=</operator> <call><name>gdk_screen_get_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>icon_theme</name> <operator>=</operator> <call><name>gtk_icon_theme_get_for_screen</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_icon_theme_add_resource_path</name><argument_list>(<argument><expr><name>icon_theme</name></expr></argument>, <argument><expr><name>path_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>IconNames</name> <modifier>*</modifier></type><name>names</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>names</name> <operator>=</operator> <name>stock_vim_icons</name></expr>;</init> <condition><expr><name><name>names</name><operator>-&gt;</operator><name>icon_name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>names</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>path_prefix</name></expr></argument>, <argument><expr><name><name>names</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>GdkPixbuf</name> <modifier>*</modifier></type><name>pixbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pixbuf</name> <operator>=</operator> <call><name>gdk_pixbuf_new_from_resource</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pixbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>gint</name></type> <name>size</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><call><name>gdk_pixbuf_get_width</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>gdk_pixbuf_get_height</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition>
<block>{<block_content>












<decl_stmt><decl><type><name>GdkPixbuf</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>pixbuf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pixbuf</name> <operator>=</operator> <call><name>gdk_pixbuf_scale_simple</name><argument_list>(<argument><expr><name>src</name></expr></argument>,
<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
<argument><expr><name>GDK_INTERP_BILINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pixbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pixbuf</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gtk_icon_theme_add_builtin_icon</name><argument_list>(<argument><expr><name><name>names</name><operator>-&gt;</operator><name>icon_name</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<decl_stmt><decl><type><name>GtkIconFactory</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>factory</name> <init>= <expr><call><name>gtk_icon_factory_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IconNames</name> <modifier>*</modifier></type><name>names</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>names</name> <operator>=</operator> <name>stock_vim_icons</name></expr>;</init> <condition><expr><name><name>names</name><operator>-&gt;</operator><name>icon_name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>names</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GdkPixbuf</name> <modifier>*</modifier></type><name>pixbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>path_prefix</name></expr></argument>, <argument><expr><name><name>names</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixbuf</name> <operator>=</operator> <call><name>gdk_pixbuf_new_from_resource</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pixbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkIconSet</name> <modifier>*</modifier></type><name>icon_set</name> <init>= <expr><call><name>gtk_icon_set_new_from_pixbuf</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gtk_icon_factory_add</name><argument_list>(<argument><expr><name>factory</name></expr></argument>, <argument><expr><name><name>names</name><operator>-&gt;</operator><name>icon_name</name></name></expr></argument>, <argument><expr><name>icon_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_icon_set_unref</name><argument_list>(<argument><expr><name>icon_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>gtk_icon_factory_add_default</name><argument_list>(<argument><expr><name>factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>











<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>translate_mnemonic_tag</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_mnemonic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>psrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pdest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_underscores</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>CONVERT_TO_UTF8</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>psrc</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><operator>*</operator><name>psrc</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psrc</name> <operator>!=</operator> <name>TAB</name></expr>;</condition> <incr><expr><operator>++</operator><name>psrc</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>psrc</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>n_underscores</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>psrc</name> <operator>-</operator> <name>name</name> <operator>+</operator> <name>n_underscores</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pdest</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>psrc</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><operator>*</operator><name>psrc</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psrc</name> <operator>!=</operator> <name>TAB</name></expr>;</condition> <incr><expr><operator>++</operator><name>psrc</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>psrc</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pdest</name><operator>++</operator> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pdest</name><operator>++</operator> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>psrc</name> <operator>!=</operator> <literal type="char">'&amp;'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pdest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>psrc</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name>psrc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pdest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>psrc</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>use_mnemonic</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pdest</name><operator>++</operator> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>pdest</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CONVERT_TO_UTF8_FREE</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>menu_item_new</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>parent_widget</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>box</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_mnemonic</name></decl>;</decl_stmt>




<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>gtk_menu_item_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>box</name> <operator>=</operator> <call><name>gtk_box_new</name><argument_list>(<argument><expr><name>GTK_ORIENTATION_HORIZONTAL</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_box_set_homogeneous</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>box</name> <operator>=</operator> <call><name>gtk_hbox_new</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>use_mnemonic</name> <operator>=</operator> <operator>(</operator><name><name>p_wak</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'n'</literal> <operator>||</operator> <operator>!</operator><call><name>GTK_IS_MENU_BAR</name><argument_list>(<argument><expr><name>parent_widget</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>translate_mnemonic_tag</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>use_mnemonic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>label</name></name> <operator>=</operator> <call><name>gtk_label_new_with_mnemonic</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_box_pack_start</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>actext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>CONVERT_TO_UTF8</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_box_pack_end</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>gtk_label_new</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>text</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CONVERT_TO_UTF8_FREE</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_show_all</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_add_menu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>parent_widget</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal> <operator>||</operator> <call><name>menu_is_popup</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <call><name>gtk_menu_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>parent</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator>
<operator>||</operator> <operator>!</operator><call><name>menu_is_menubar</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>parent_widget</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>parent</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr> </then><else>: <expr><name><name>gui</name><operator>.</operator><name>menubar</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>menu_item_new</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>parent_widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>menu_is_popup</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gtk_menu_shell_insert</name><argument_list>(<argument><expr><call><name>GTK_MENU_SHELL</name><argument_list>(<argument><expr><name>parent_widget</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <call><name>gtk_menu_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_menu_set_accel_group</name><argument_list>(<argument><expr><call><name>GTK_MENU</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>accel_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_menu_item_set_submenu</name><argument_list>(<argument><expr><call><name>GTK_MENU_ITEM</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>tearoff_handle</name></name> <operator>=</operator> <call><name>gtk_tearoff_menu_item_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_TEAROFF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_menu_shell_prepend</name><argument_list>(<argument><expr><call><name>GTK_MENU_SHELL</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_menu_prepend</name><argument_list>(<argument><expr><call><name>GTK_MENU</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>menu_item_activate</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_menu_cb</name><argument_list>(<argument><expr><operator>(</operator><name>vimmenu_T</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_add_menu_item</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>menu_is_toolbar</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkToolbar</name> <modifier>*</modifier></type><name>toolbar</name></decl>;</decl_stmt>

<expr_stmt><expr><name>toolbar</name> <operator>=</operator> <call><name>GTK_TOOLBAR</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GtkToolItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>gtk_separator_tool_item_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gtk_separator_tool_item_set_draw</name><argument_list>(<argument><expr><call><name>GTK_SEPARATOR_TOOL_ITEM</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_tool_item_set_expand</name><argument_list>(<argument><expr><call><name>GTK_TOOL_ITEM</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><call><name>GTK_WIDGET</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_toolbar_insert</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_toolbar_insert_space</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tooltip</name></decl>;</decl_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>CONVERT_TO_UTF8</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tooltip</name> <operator>=</operator> <call><name>CONVERT_TO_UTF8</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>MENU_INDEX_TIP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tooltip</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>utf_valid_string</name><argument_list>(<argument><expr><name>tooltip</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><call><name>CONVERT_TO_UTF8_FREE</name><argument_list>(<argument><expr><name>tooltip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>icon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkToolItem</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><name>icon</name> <operator>=</operator> <call><name>create_menu_icon</name><argument_list>(<argument><expr><name>menu</name></expr></argument>,
<argument><expr><call><name>gtk_toolbar_get_icon_size</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>gtk_tool_button_new</name><argument_list>(<argument><expr><name>icon</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>gchar</name> <operator>*</operator><operator>)</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_tool_item_set_tooltip_text</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>gchar</name> <operator>*</operator><operator>)</operator><name>tooltip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"clicked"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>menu_item_activate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_show_all</name><argument_list>(<argument><expr><call><name>GTK_WIDGET</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_toolbar_insert</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>GTK_WIDGET</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>gtk_toolbar_insert_item</name><argument_list>(
<argument><expr><name>toolbar</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>text</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>tooltip</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>create_menu_icon</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><call><name>gtk_toolbar_get_icon_size</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>menu_item_activate</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>menu</name></expr></argument>,
<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>gtk_socket_id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"focus-in-event"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>toolbar_button_focus_in_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CONVERT_TO_UTF8_FREE</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_UTF8_FREE</name><argument_list>(<argument><expr><name>tooltip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>menu_is_popup</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>gtk_separator_menu_item_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>gtk_menu_item_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_set_sensitive</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_menu_shell_insert</name><argument_list>(<argument><expr><call><name>GTK_MENU_SHELL</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>menu_item_new</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_menu_shell_insert</name><argument_list>(<argument><expr><call><name>GTK_MENU_SHELL</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"activate"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>menu_item_activate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<function><type><name>void</name></type>
<name>gui_mch_set_text_area_pos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gtk_form_move_resize</name><argument_list>(<argument><expr><call><name>GTK_FORM</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>formwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>gui_gtk_set_mnemonics</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>menu</name> <operator>=</operator> <name>root_menu</name></expr>;</init> <condition><expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>translate_mnemonic_tag</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_label_set_text_with_mnemonic</name><argument_list>(<argument><expr><call><name>GTK_LABEL</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>recurse_tearoffs</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>tearoff_handle</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">']'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>menu_is_popup</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_widget_hide</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>recurse_tearoffs</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>gui_mch_toggle_tearoffs</name><parameter_list>(<parameter><decl><type><name>int</name> <name>enable</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>void</name></type>
<name>gui_mch_toggle_tearoffs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>recurse_tearoffs</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_menu_position</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>node</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr>;</init> <condition><expr><name>node</name> <operator>!=</operator> <name>menu</name></expr>;</condition> <incr><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>gui_mch_menu_set_tip</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>toolbar</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>menu_is_toolbar</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tooltip</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tooltip</name> <operator>=</operator> <call><name>CONVERT_TO_UTF8</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>MENU_INDEX_TIP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tooltip</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>utf_valid_string</name><argument_list>(<argument><expr><name>tooltip</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gtk_widget_set_tooltip_text</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>gchar</name> <operator>*</operator><operator>)</operator><name>tooltip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gtk_tooltips_set_tip</name><argument_list>(<argument><expr><call><name>GTK_TOOLBAR</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>tooltips</name></expr></argument>,
<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>tooltip</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>CONVERT_TO_UTF8_FREE</name><argument_list>(<argument><expr><name>tooltip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>gui_mch_destroy_menu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>g_object_ref</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>menubar</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>gtk_widget_get_parent</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>gui</name><operator>.</operator><name>menubar</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_container_remove</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>menubar</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>menu_is_toolbar</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkToolItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>gtk_toolbar_get_nth_item</name><argument_list>(<argument><expr><call><name>GTK_TOOLBAR</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>get_menu_position</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_container_remove</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GTK_WIDGET</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_toolbar_remove_space</name><argument_list>(<argument><expr><call><name>GTK_TOOLBAR</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>get_menu_position</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if type="elseif">else if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_widget_destroy</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_widget_destroy</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_widget_destroy</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 





<function><type><name>void</name></type>
<name>gui_mch_set_scrollbar_thumb</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkAdjustment</name> <modifier>*</modifier></type><name>adjustment</name></decl>;</decl_stmt>

<expr_stmt><expr><name>adjustment</name> <operator>=</operator> <call><name>gtk_range_get_adjustment</name><argument_list>(<argument><expr><call><name>GTK_RANGE</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_adjustment_set_lower</name><argument_list>(<argument><expr><name>adjustment</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_adjustment_set_value</name><argument_list>(<argument><expr><name>adjustment</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_adjustment_set_upper</name><argument_list>(<argument><expr><name>adjustment</name></expr></argument>, <argument><expr><name>max</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_adjustment_set_page_size</name><argument_list>(<argument><expr><name>adjustment</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_adjustment_set_page_increment</name><argument_list>(<argument><expr><name>adjustment</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">3L</literal></expr> ?</condition><then> <expr><literal type="number">1L</literal></expr> </then><else>: <expr><name>size</name> <operator>-</operator> <literal type="number">2L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_adjustment_set_step_increment</name><argument_list>(<argument><expr><name>adjustment</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_handler_block</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>adjustment</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>gulong</name><operator>)</operator><name><name>sb</name><operator>-&gt;</operator><name>handler_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">18</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_adjustment_changed</name><argument_list>(<argument><expr><name>adjustment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>g_signal_handler_unblock</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>adjustment</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>gulong</name><operator>)</operator><name><name>sb</name><operator>-&gt;</operator><name>handler_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_set_scrollbar_pos</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_form_move_resize</name><argument_list>(<argument><expr><call><name>GTK_FORM</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>formwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>adjustment_value_changed</name><parameter_list>(<parameter><decl><type><name>GtkAdjustment</name> <modifier>*</modifier></type><name>adjustment</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dragging</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>im_is_preediting</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xim_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>sb</name> <operator>=</operator> <call><name>gui_find_scrollbar</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>gtk_adjustment_get_value</name><argument_list>(<argument><expr><name>adjustment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>









<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>dragging</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>wp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GdkModifierType</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>gdk_window_get_pointer</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gdk_window_get_size</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name>width</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>height</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>width</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>dragging</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>height</name> <operator>-</operator> <name>width</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>dragging</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><call><name>gui_drag_scrollbar</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>dragging</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>gui_mch_create_scrollbar</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orient</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>orient</name> <operator>==</operator> <name>SBAR_HORIZ</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>gtk_scrollbar_new</name><argument_list>(<argument><expr><name>GTK_ORIENTATION_HORIZONTAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>gtk_hscrollbar_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if type="elseif">else if <condition>(<expr><name>orient</name> <operator>==</operator> <name>SBAR_VERT</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>gtk_scrollbar_new</name><argument_list>(<argument><expr><name>GTK_ORIENTATION_VERTICAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>gtk_vscrollbar_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkAdjustment</name> <modifier>*</modifier></type><name>adjustment</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gtk_widget_set_can_focus</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_form_put</name><argument_list>(<argument><expr><call><name>GTK_FORM</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>formwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>adjustment</name> <operator>=</operator> <call><name>gtk_range_get_adjustment</name><argument_list>(<argument><expr><call><name>GTK_RANGE</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>handler_id</name></name> <operator>=</operator> <call><name>g_signal_connect</name><argument_list>(
<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>adjustment</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"value-changed"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>adjustment_value_changed</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>ident</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_destroy_scrollbar</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gtk_widget_destroy</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_FILE_CHOOSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>browse_ok_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>cbdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gui_T</name> <modifier>*</modifier></type><name>vw</name> <init>= <expr><operator>(</operator><name>gui_T</name> <operator>*</operator><operator>)</operator><name>cbdata</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vw</name><operator>-&gt;</operator><name>browse_fname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>vw</name><operator>-&gt;</operator><name>browse_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vw</name><operator>-&gt;</operator><name>browse_fname</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>g_strdup</name><argument_list>(<argument><expr><call><name>gtk_file_selection_get_filename</name><argument_list>(
<argument><expr><call><name>GTK_FILE_SELECTION</name><argument_list>(<argument><expr><name><name>vw</name><operator>-&gt;</operator><name>filedlg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_hide</name><argument_list>(<argument><expr><name><name>vw</name><operator>-&gt;</operator><name>filedlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>browse_cancel_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>cbdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gui_T</name> <modifier>*</modifier></type><name>vw</name> <init>= <expr><operator>(</operator><name>gui_T</name> <operator>*</operator><operator>)</operator><name>cbdata</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vw</name><operator>-&gt;</operator><name>browse_fname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>vw</name><operator>-&gt;</operator><name>browse_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vw</name><operator>-&gt;</operator><name>browse_fname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gtk_widget_hide</name><argument_list>(<argument><expr><name><name>vw</name><operator>-&gt;</operator><name>filedlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>browse_destroy_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>browse_fname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>browse_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>browse_fname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>filedlg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_main_quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>gui_mch_browse</name><parameter_list>(<parameter><decl><type><name>int</name> <name>saving</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dflt</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>ext</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>initdir</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FILE_CHOOSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>fc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>dirbuf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>log_handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>domain</name> <init>= <expr><literal type="string">"Gtk"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>title</name> <operator>=</operator> <call><name>CONVERT_TO_UTF8</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>initdir</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>initdir</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_dirname</name><argument_list>(<argument><expr><name>dirbuf</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>vim_FullName</name><argument_list>(<argument><expr><name>initdir</name></expr></argument>, <argument><expr><name>dirbuf</name></expr></argument>, <argument><expr><name>MAXPATHL</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dirbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>dirbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>log_handler</name> <operator>=</operator> <call><name>g_log_set_handler</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>G_LOG_LEVEL_WARNING</name></expr></argument>,
<argument><expr><name>recent_func_log_func</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FILE_CHOOSER</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><name>fc</name> <operator>=</operator> <call><name>gtk_file_chooser_dialog_new</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>gchar</name> <operator>*</operator><operator>)</operator><name>title</name></expr></argument>,
<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>saving</name></expr> ?</condition><then> <expr><name>GTK_FILE_CHOOSER_ACTION_SAVE</name></expr>
</then><else>: <expr><name>GTK_FILE_CHOOSER_ACTION_OPEN</name></expr></else></ternary></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"_Cancel"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GTK_RESPONSE_CANCEL</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>saving</name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"_Save"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"_Open"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name>GTK_RESPONSE_ACCEPT</name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr><name>GTK_STOCK_CANCEL</name></expr></argument>, <argument><expr><name>GTK_RESPONSE_CANCEL</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>saving</name></expr> ?</condition><then> <expr><name>GTK_STOCK_SAVE</name></expr> </then><else>: <expr><name>GTK_STOCK_OPEN</name></expr></else></ternary></expr></argument>, <argument><expr><name>GTK_RESPONSE_ACCEPT</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_file_chooser_set_current_folder</name><argument_list>(<argument><expr><call><name>GTK_FILE_CHOOSER</name><argument_list>(<argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>gchar</name> <operator>*</operator><operator>)</operator><name>dirbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>filter</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>filter</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>patt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>filter</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkFileFilter</name> <modifier>*</modifier></type><name>gfilter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gfilter</name> <operator>=</operator> <call><name>gtk_file_filter_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>patt</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">';'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name>patt</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>patt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_file_filter_set_name</name><argument_list>(<argument><expr><name>gfilter</name></expr></argument>, <argument><expr><operator>(</operator><name>gchar</name> <operator>*</operator><operator>)</operator><name>patt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>gtk_file_filter_add_pattern</name><argument_list>(<argument><expr><name>gfilter</name></expr></argument>, <argument><expr><operator>(</operator><name>gchar</name> <operator>*</operator><operator>)</operator><name>patt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gtk_file_chooser_add_filter</name><argument_list>(<argument><expr><operator>(</operator><name>GtkFileChooser</name> <operator>*</operator><operator>)</operator><name>fc</name></expr></argument>,
<argument><expr><name>gfilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gfilter</name> <operator>=</operator> <call><name>gtk_file_filter_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <operator>++</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>patt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>saving</name> <operator>&amp;&amp;</operator> <name>dflt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dflt</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_file_chooser_set_current_name</name><argument_list>(<argument><expr><call><name>GTK_FILE_CHOOSER</name><argument_list>(<argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dflt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>browse_fname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gtk_dialog_run</name><argument_list>(<argument><expr><call><name>GTK_DIALOG</name><argument_list>(<argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>GTK_RESPONSE_ACCEPT</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>gtk_file_chooser_get_filename</name><argument_list>(<argument><expr><call><name>GTK_FILE_CHOOSER</name><argument_list>(<argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>browse_fname</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>g_strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gtk_widget_destroy</name><argument_list>(<argument><expr><call><name>GTK_WIDGET</name><argument_list>(<argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>filedlg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkFileSelection</name> <modifier>*</modifier></type><name>fs</name></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>filedlg</name></name> <operator>=</operator> <call><name>gtk_file_selection_new</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>gchar</name> <operator>*</operator><operator>)</operator><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_window_set_modal</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>filedlg</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_window_set_transient_for</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>filedlg</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> <operator>=</operator> <call><name>GTK_FILE_SELECTION</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>filedlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_container_border_width</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_signal_connect</name><argument_list>(<argument><expr><call><name>GTK_OBJECT</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>ok_button</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"clicked"</literal></expr></argument>, <argument><expr><call><name>GTK_SIGNAL_FUNC</name><argument_list>(<argument><expr><name>browse_ok_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>gui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_signal_connect</name><argument_list>(<argument><expr><call><name>GTK_OBJECT</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>cancel_button</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"clicked"</literal></expr></argument>, <argument><expr><call><name>GTK_SIGNAL_FUNC</name><argument_list>(<argument><expr><name>browse_cancel_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>gui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_signal_connect_object</name><argument_list>(<argument><expr><call><name>GTK_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>filedlg</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"destroy"</literal></expr></argument>, <argument><expr><call><name>GTK_SIGNAL_FUNC</name><argument_list>(<argument><expr><name>browse_destroy_cb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GTK_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>filedlg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_window_set_title</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>filedlg</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>gchar</name> <operator>*</operator><operator>)</operator><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>dflt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dflt</name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>dirbuf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>dflt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>MAXPATHL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>dirbuf</name></expr></argument>, <argument><expr><name>dflt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gtk_file_selection_set_filename</name><argument_list>(<argument><expr><call><name>GTK_FILE_SELECTION</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>filedlg</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>gchar</name> <operator>*</operator><operator>)</operator><name>dirbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>filedlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_main</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><call><name>g_log_remove_handler</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>log_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CONVERT_TO_UTF8_FREE</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>browse_fname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>shorten_fname1</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>browse_fname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>gui_mch_browsedir</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>initdir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GTK_FILE_CHOOSER</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<decl_stmt><decl><type><name>char_u</name></type> <name><name>dirbuf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>dirdlg</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dirname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>title</name> <operator>=</operator> <call><name>CONVERT_TO_UTF8</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dirdlg</name> <operator>=</operator> <call><name>gtk_file_chooser_dialog_new</name><argument_list>(
<argument><expr><operator>(</operator><specifier>const</specifier> <name>gchar</name> <operator>*</operator><operator>)</operator><name>title</name></expr></argument>,
<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"_Cancel"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GTK_RESPONSE_CANCEL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"_OK"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GTK_RESPONSE_ACCEPT</name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr><name>GTK_STOCK_CANCEL</name></expr></argument>, <argument><expr><name>GTK_RESPONSE_CANCEL</name></expr></argument>,
<argument><expr><name>GTK_STOCK_OK</name></expr></argument>, <argument><expr><name>GTK_RESPONSE_ACCEPT</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CONVERT_TO_UTF8_FREE</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>initdir</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>initdir</name> <operator>==</operator> <name>NUL</name>
<operator>||</operator> <call><name>vim_FullName</name><argument_list>(<argument><expr><name>initdir</name></expr></argument>, <argument><expr><name>dirbuf</name></expr></argument>, <argument><expr><name>MAXPATHL</name> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_dirname</name><argument_list>(<argument><expr><name>dirbuf</name></expr></argument>, <argument><expr><name>MAXPATHL</name> <operator>-</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>dirbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>dirbuf</name></expr></argument>, <argument><expr><literal type="string">"@zd(*&amp;1|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_file_chooser_set_filename</name><argument_list>(<argument><expr><call><name>GTK_FILE_CHOOSER</name><argument_list>(<argument><expr><name>dirdlg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>gchar</name> <operator>*</operator><operator>)</operator><name>dirbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>gtk_dialog_run</name><argument_list>(<argument><expr><call><name>GTK_DIALOG</name><argument_list>(<argument><expr><name>dirdlg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>GTK_RESPONSE_ACCEPT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dirname</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>gtk_file_chooser_get_filename</name><argument_list>(
<argument><expr><call><name>GTK_FILE_CHOOSER</name><argument_list>(<argument><expr><name>dirdlg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gtk_widget_destroy</name><argument_list>(<argument><expr><name>dirdlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dirname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>shorten_fname1</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<return>return <expr><call><name>gui_mch_browse</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>initdir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>GtkWidget</name> <modifier>*</modifier></type>
<name>create_message_dialog</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>dialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkMessageType</name></type> <name>message_type</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>VIM_ERROR</name></expr>:</case> <expr_stmt><expr><name>message_type</name> <operator>=</operator> <name>GTK_MESSAGE_ERROR</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VIM_WARNING</name></expr>:</case> <expr_stmt><expr><name>message_type</name> <operator>=</operator> <name>GTK_MESSAGE_WARNING</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VIM_QUESTION</name></expr>:</case> <expr_stmt><expr><name>message_type</name> <operator>=</operator> <name>GTK_MESSAGE_QUESTION</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>message_type</name> <operator>=</operator> <name>GTK_MESSAGE_INFO</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>CONVERT_TO_UTF8</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dialog</name> <operator>=</operator> <call><name>gtk_message_dialog_new</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>GTK_DIALOG_DESTROY_WITH_PARENT</name></expr></argument>,
<argument><expr><name>message_type</name></expr></argument>,
<argument><expr><name>GTK_BUTTONS_NONE</name></expr></argument>,
<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_UTF8_FREE</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>title</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>title</name> <operator>=</operator> <call><name>CONVERT_TO_UTF8</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_window_set_title</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_UTF8_FREE</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>VIM_GENERIC</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gtk_window_set_title</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"VIM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>dialog</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>split_button_string</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>button_string</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>n_buttons</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>button_string</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>DLG_BUTTON_SEP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>array</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>button_string</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>button_string</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>DLG_BUTTON_SEP</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>DLG_HOTKEY_CHAR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>n_buttons</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<return>return <expr><name>array</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>split_button_translation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buttons</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_buttons</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_expected</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>message</name></expr>;</init> <condition><expr><operator>*</operator><name>str</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>str</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <name>DLG_BUTTON_SEP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>n_expected</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>output_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_conv</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buttons</name> <operator>=</operator> <call><name>split_button_string</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>buttons</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>n_buttons</name> <operator>!=</operator> <name>n_expected</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buttons</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buttons</name> <operator>=</operator> <call><name>split_button_string</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buttons</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>buttons</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>button_equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>a</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>b</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>a</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>++</operator><name>a</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>b</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>++</operator><name>b</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>g_unichar_tolower</name><argument_list>(<argument><expr><call><name>g_utf8_get_char</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>!=</operator> <call><name>g_unichar_tolower</name><argument_list>(<argument><expr><call><name>g_utf8_get_char</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>g_utf8_next_char</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>g_utf8_next_char</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><operator>*</operator><name>a</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>b</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dialog_add_buttons</name><parameter_list>(<parameter><decl><type><name>GtkDialog</name> <modifier>*</modifier></type><name>dialog</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>button_string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ync</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buttons</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_buttons</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>button_string</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>button_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>button_string</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_VERTICAL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>vbutton_box</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vbutton_box</name> <operator>=</operator> <call><name>gtk_vbutton_box_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name>vbutton_box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_box_pack_end</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><call><name>GTK_DIALOG</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>vbox</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>vbutton_box</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GTK_DIALOG</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>action_area</name> <operator>=</operator> <name>vbutton_box</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>split_button_translation</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&amp;Ok"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ync</name> <operator>=</operator> <call><name>split_button_translation</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&amp;Yes\n&amp;No\n&amp;Cancel"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buttons</name> <operator>=</operator> <call><name>split_button_string</name><argument_list>(<argument><expr><name>button_string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;=</operator> <name>n_buttons</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>label8</name></decl>;</decl_stmt>

<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>buttons</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>









<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ync</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>button_equal</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>ok</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>button_equal</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>ync</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>button_equal</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>ync</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>button_equal</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>ync</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cancel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>button_equal</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="string">"Ok"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>button_equal</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>button_equal</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>button_equal</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="string">"Cancel"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cancel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>button_equal</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>ok</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label</name> <operator>=</operator> <name>GTK_STOCK_OK</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>button_equal</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>ync</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label</name> <operator>=</operator> <name>GTK_STOCK_YES</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>button_equal</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>ync</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label</name> <operator>=</operator> <name>GTK_STOCK_NO</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>button_equal</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>ync</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label</name> <operator>=</operator> <name>GTK_STOCK_CANCEL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>button_equal</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="string">"Ok"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label</name> <operator>=</operator> <name>GTK_STOCK_OK</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>button_equal</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label</name> <operator>=</operator> <name>GTK_STOCK_YES</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>button_equal</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label</name> <operator>=</operator> <name>GTK_STOCK_NO</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>button_equal</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="string">"Cancel"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label</name> <operator>=</operator> <name>GTK_STOCK_CANCEL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>label8</name> <operator>=</operator> <call><name>CONVERT_TO_UTF8</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_dialog_add_button</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>gchar</name> <operator>*</operator><operator>)</operator><name>label8</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_UTF8_FREE</name><argument_list>(<argument><expr><name>label8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>*</operator><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ync</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>*</operator><name>ync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>button_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<typedef>typedef <type><struct>struct <name>_DialogInfo</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>ignore_enter</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>noalt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GtkDialog</name> <modifier>*</modifier></type><name>dialog</name></decl>;</decl_stmt> 
}</block></struct></type> <name>DialogInfo</name>;</typedef>

<function><type><specifier>static</specifier> <name>gboolean</name></type>
<name>dialog_key_press_event_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>GdkEventKey</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DialogInfo</name> <modifier>*</modifier></type><name>di</name> <init>= <expr><operator>(</operator><name>DialogInfo</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>ignore_enter</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>keyval</name></name> <operator>==</operator> <name>GDK_Return</name>
<operator>||</operator> <name><name>event</name><operator>-&gt;</operator><name>keyval</name></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>di</name><operator>-&gt;</operator><name>ignore_enter</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>keyval</name></name> <operator>==</operator> <name>GDK_Escape</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gtk_dialog_response</name><argument_list>(<argument><expr><name><name>di</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>, <argument><expr><name>GTK_RESPONSE_REJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>di</name><operator>-&gt;</operator><name>noalt</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <call><name>gtk_accelerator_get_default_mod_mask</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><call><name>gtk_window_mnemonic_activate</name><argument_list>(
<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>keyval</name></name></expr></argument>,
<argument><expr><call><name>gtk_window_get_mnemonic_modifier</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return> 
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gui_mch_dialog</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buttons</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>def_but</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>textfield</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <name>ex_cmd</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>dialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>response</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DialogInfo</name></type> <name>dialoginfo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dialog</name> <operator>=</operator> <call><name>create_message_dialog</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialoginfo</name><operator>.</operator><name>dialog</name></name> <operator>=</operator> <call><name>GTK_DIALOG</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dialog_add_buttons</name><argument_list>(<argument><expr><call><name>GTK_DIALOG</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textfield</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>alignment</name></decl>;</decl_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>gtk_entry_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>gtk_entry_set_activates_default</name><argument_list>(<argument><expr><call><name>GTK_ENTRY</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>CONVERT_TO_UTF8</name><argument_list>(<argument><expr><name>textfield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_entry_set_text</name><argument_list>(<argument><expr><call><name>GTK_ENTRY</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_UTF8_FREE</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">14</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_widget_set_halign</name><argument_list>(<argument><expr><call><name>GTK_WIDGET</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GTK_ALIGN_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_set_valign</name><argument_list>(<argument><expr><call><name>GTK_WIDGET</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GTK_ALIGN_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_set_hexpand</name><argument_list>(<argument><expr><call><name>GTK_WIDGET</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_set_vexpand</name><argument_list>(<argument><expr><call><name>GTK_WIDGET</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>alignment</name> <operator>=</operator> <call><name>gtk_box_new</name><argument_list>(<argument><expr><name>GTK_ORIENTATION_HORIZONTAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>alignment</name> <operator>=</operator> <call><name>gtk_alignment_new</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><literal type="number">0.5</literal></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_container_set_border_width</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>vbox</name>
<init>= <expr><call><name>gtk_dialog_get_content_area</name><argument_list>(<argument><expr><call><name>GTK_DIALOG</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gtk_box_pack_start</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>vbox</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_box_pack_start</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><call><name>GTK_DIALOG</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>vbox</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>dialoginfo</name><operator>.</operator><name>noalt</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dialoginfo</name><operator>.</operator><name>noalt</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-press-event"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dialog_key_press_event_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>dialoginfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>def_but</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gtk_dialog_set_default_response</name><argument_list>(<argument><expr><call><name>GTK_DIALOG</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>def_but</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialoginfo</name><operator>.</operator><name>ignore_enter</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dialoginfo</name><operator>.</operator><name>ignore_enter</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>gtk_dialog_run</name><argument_list>(<argument><expr><call><name>GTK_DIALOG</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>response</name> <operator>!=</operator> <name>GTK_RESPONSE_NONE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>response</name> <operator>==</operator> <name>GTK_RESPONSE_ACCEPT</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>response</name> <operator>=</operator> <name>def_but</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>textfield</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>gtk_entry_get_text</name><argument_list>(<argument><expr><call><name>GTK_ENTRY</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>CONVERT_FROM_UTF8</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>textfield</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>IOSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CONVERT_FROM_UTF8_FREE</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gtk_widget_destroy</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>response</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>response</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>
<name>gui_mch_show_popupmenu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>xic</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>g_object_get_data</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"vim-has-im-menu"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>menuitem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>submenu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>menuitem</name> <operator>=</operator> <call><name>gtk_separator_menu_item_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name>menuitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_menu_shell_append</name><argument_list>(<argument><expr><call><name>GTK_MENU_SHELL</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>menuitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Input _Methods"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>CONVERT_TO_UTF8</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>menuitem</name> <operator>=</operator> <call><name>gtk_menu_item_new_with_mnemonic</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_TO_UTF8_FREE</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name>menuitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>submenu</name> <operator>=</operator> <call><name>gtk_menu_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_menu_item_set_submenu</name><argument_list>(<argument><expr><call><name>GTK_MENU_ITEM</name><argument_list>(<argument><expr><name>menuitem</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>submenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_menu_shell_append</name><argument_list>(<argument><expr><call><name>GTK_MENU_SHELL</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>menuitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_im_multicontext_append_menuitems</name><argument_list>(<argument><expr><call><name>GTK_IM_MULTICONTEXT</name><argument_list>(<argument><expr><name>xic</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GTK_MENU_SHELL</name><argument_list>(<argument><expr><name>submenu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_set_data</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"vim-has-im-menu"</literal></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">22</literal><operator>,</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>GdkEventButton</name></type> <name>trigger</name></decl>;</decl_stmt>





<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>GDK_BUTTON_PRESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>window</name></name> <operator>=</operator> <call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>send_event</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>event_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>axes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>button</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>device</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>x_root</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>y_root</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_menu_popup_at_pointer</name><argument_list>(<argument><expr><call><name>GTK_MENU</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>GdkEvent</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_menu_popup</name><argument_list>(<argument><expr><call><name>GTK_MENU</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><name>GtkMenuPositionFunc</name><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">3U</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>event_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>popup_mouse_pos</name></decl>;</decl_stmt>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>popup_menu_position_func</name><parameter_list>(<parameter><decl><type><name>GtkMenu</name> <modifier>*</modifier><name>menu</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>gint</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>gint</name> <modifier>*</modifier></type><name>y</name></decl></parameter>,
<parameter><decl><type><name>gboolean</name> <modifier>*</modifier><name>push_in</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>gpointer</name> <name>user_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gdk_window_get_origin</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>popup_mouse_pos</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gui_mch_getmouse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>+=</operator> <name>mx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>+=</operator> <name>my</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>drawarea</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>+=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>+=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_make_popup</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mouse_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<expr_stmt><expr><name>popup_mouse_pos</name> <operator>=</operator> <name>mouse_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <call><name>gui_find_menu</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">22</literal><operator>,</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GdkWindow</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>win</name> <init>= <expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GdkEventButton</name></type> <name>trigger</name></decl>;</decl_stmt>






<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>GDK_BUTTON_PRESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>window</name></name> <operator>=</operator> <name>win</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>send_event</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name>GDK_CURRENT_TIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>axes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>button</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>device</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>x_root</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trigger</name><operator>.</operator><name>y_root</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mouse_pos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_menu_popup_at_pointer</name><argument_list>(<argument><expr><call><name>GTK_MENU</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>GdkEvent</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>gint</name></type> <name>origin_x</name></decl>, <decl><type ref="prev"/><name>origin_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GdkRectangle</name></type> <name>rect</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gdk_window_get_origin</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>origin_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>origin_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popup_menu_position_func</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rect</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rect</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name>origin_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name>origin_y</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_menu_popup_at_rect</name><argument_list>(<argument><expr><call><name>GTK_MENU</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>win</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>,
<argument><expr><name>GDK_GRAVITY_SOUTH_EAST</name></expr></argument>,
<argument><expr><name>GDK_GRAVITY_NORTH_WEST</name></expr></argument>,
<argument><expr><operator>(</operator><name>GdkEvent</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_menu_popup</name><argument_list>(<argument><expr><call><name>GTK_MENU</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>popup_menu_position_func</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0U</literal></expr></argument>, <argument><expr><operator>(</operator><name>guint32</name><operator>)</operator><name>GDK_CURRENT_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 






<typedef>typedef <type><struct>struct <name>_SharedFindReplace</name>
<block>{
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>dialog</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>wword</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>mcase</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>up</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>down</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>what</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>with</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>find</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>replace</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>all</name></decl>;</decl_stmt> 
}</block></struct></type> <name>SharedFindReplace</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>SharedFindReplace</name></type> <name>find_widgets</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>SharedFindReplace</name></type> <name>repl_widgets</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>find_key_press_event</name><parameter_list>(
<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>GdkEventKey</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>SharedFindReplace</name> <modifier>*</modifier></type><name>frdp</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <operator>(</operator><name>GDK_CONTROL_MASK</name> <operator>|</operator> <name>GDK_SHIFT_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>keyval</name></name> <operator>==</operator> <name>GDK_Escape</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gtk_widget_hide</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GtkWidget</name> <modifier>*</modifier></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<name>create_image_button</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>stock_id</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
create_image_button<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stock_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>box</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>alignment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>button</name></decl>;</decl_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>CONVERT_TO_UTF8</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>box</name> <operator>=</operator> <call><name>gtk_box_new</name><argument_list>(<argument><expr><name>GTK_ORIENTATION_VERTICAL</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_box_set_homogeneous</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>box</name> <operator>=</operator> <call><name>gtk_hbox_new</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>stock_id</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_box_pack_start</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>gtk_image_new_from_stock</name><argument_list>(<argument><expr><name>stock_id</name></expr></argument>, <argument><expr><name>GTK_ICON_SIZE_BUTTON</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gtk_box_pack_start</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>gtk_label_new</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>text</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CONVERT_TO_UTF8_FREE</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">14</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_widget_set_halign</name><argument_list>(<argument><expr><call><name>GTK_WIDGET</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GTK_ALIGN_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_set_valign</name><argument_list>(<argument><expr><call><name>GTK_WIDGET</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GTK_ALIGN_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_set_hexpand</name><argument_list>(<argument><expr><call><name>GTK_WIDGET</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_set_vexpand</name><argument_list>(<argument><expr><call><name>GTK_WIDGET</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>alignment</name> <operator>=</operator> <call><name>gtk_box_new</name><argument_list>(<argument><expr><name>GTK_ORIENTATION_HORIZONTAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>alignment</name> <operator>=</operator> <call><name>gtk_alignment_new</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><literal type="number">0.5</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><literal type="number">0.5</literal></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><literal type="number">0.0</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_show_all</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>button</name> <operator>=</operator> <call><name>gtk_button_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>button</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>button</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>convert_localized_message</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>output_conv</name><operator>.</operator><name>vc_type</name></name> <operator>==</operator> <name>CONV_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>message</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_conv</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>message</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>buffer</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type>
<name>entry_get_text_length</name><parameter_list>(<parameter><decl><type><name>GtkEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name>entry</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><call><name>GTK_IS_ENTRY</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">18</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>




<return>return <expr><call><name>gtk_entry_buffer_get_length</name><argument_list>(<argument><expr><call><name>gtk_entry_get_buffer</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">14</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>


<return>return <expr><call><name>gtk_entry_get_text_length</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>





<return>return <expr><call><name>g_utf8_strlen</name><argument_list>(<argument><expr><call><name>gtk_entry_get_text</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>find_replace_dialog_create</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_replace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>hbox</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>actionarea</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>vbox</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>sensitive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SharedFindReplace</name> <modifier>*</modifier></type><name>frdp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>entry_text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wword</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mcase</name> <init>= <expr><operator>!</operator><name>p_ic</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>conv_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONV</name><parameter_list>(<parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>convert_localized_message(&amp;conv_buffer, (message))</cpp:value></cpp:define>

<expr_stmt><expr><name>frdp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>do_replace</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>&amp;</operator><name>repl_widgets</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>&amp;</operator><name>find_widgets</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><name>entry_text</name> <operator>=</operator> <call><name>get_find_dialog_text</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wword</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mcase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>entry_text</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>output_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>old_text</name> <init>= <expr><name>entry_text</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>entry_text</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_conv</name></expr></argument>, <argument><expr><name>entry_text</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>old_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>entry_text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gtk_entry_set_text</name><argument_list>(<argument><expr><call><name>GTK_ENTRY</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>entry_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_toggle_button_set_active</name><argument_list>(<argument><expr><call><name>GTK_TOGGLE_BUTTON</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>wword</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>gboolean</name><operator>)</operator><name>wword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_toggle_button_set_active</name><argument_list>(<argument><expr><call><name>GTK_TOGGLE_BUTTON</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>mcase</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>gboolean</name><operator>)</operator><name>mcase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gtk_window_present</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>gtk_widget_grab_focus</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_replace</name> <operator>&amp;&amp;</operator> <call><name>entry_get_text_length</name><argument_list>(<argument><expr><call><name>GTK_ENTRY</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_widget_grab_focus</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>with</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>entry_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name> <operator>=</operator> <call><name>gtk_dialog_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_dialog_set_has_separator</name><argument_list>(<argument><expr><call><name>GTK_DIALOG</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gtk_window_set_transient_for</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_window_set_destroy_with_parent</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_replace</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gtk_window_set_title</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>CONV</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"VIM - Search and Replace..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>gtk_window_set_title</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>CONV</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"VIM - Search..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>hbox</name> <operator>=</operator> <call><name>gtk_box_new</name><argument_list>(<argument><expr><name>GTK_ORIENTATION_HORIZONTAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_box_set_homogeneous</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>hbox</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>hbox</name> <operator>=</operator> <call><name>gtk_hbox_new</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gtk_container_set_border_width</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>hbox</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dialog_vbox</name>
<init>= <expr><call><name>gtk_dialog_get_content_area</name><argument_list>(<argument><expr><call><name>GTK_DIALOG</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>dialog_vbox</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><call><name>GTK_DIALOG</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>vbox</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>do_replace</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>gtk_grid_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>gtk_table_new</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>gtk_grid_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>gtk_table_new</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gtk_box_pack_start</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>hbox</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_container_set_border_width</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>gtk_label_new</name><argument_list>(<argument><expr><call><name>CONV</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Find what:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">16</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_label_set_xalign</name><argument_list>(<argument><expr><call><name>GTK_LABEL</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_label_set_yalign</name><argument_list>(<argument><expr><call><name>GTK_LABEL</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">14</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<block>{<block_content>
<decl_stmt><decl><type><name>GValue</name></type> <name>align_val</name> <init>= <expr><name>G_VALUE_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>g_value_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>align_val</name></expr></argument>, <argument><expr><name>G_TYPE_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_value_set_float</name><argument_list>(<argument><expr><operator>&amp;</operator><name>align_val</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_set_property</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"xalign"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>align_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_value_set_float</name><argument_list>(<argument><expr><operator>&amp;</operator><name>align_val</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_set_property</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"yalign"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>align_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_value_unset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>align_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_misc_set_alignment</name><argument_list>(<argument><expr><call><name>GTK_MISC</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>gfloat</name><operator>)</operator><literal type="number">0.0</literal></expr></argument>, <argument><expr><operator>(</operator><name>gfloat</name><operator>)</operator><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_grid_attach</name><argument_list>(<argument><expr><call><name>GTK_GRID</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_table_attach</name><argument_list>(<argument><expr><call><name>GTK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>GTK_FILL</name></expr></argument>, <argument><expr><name>GTK_EXPAND</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name> <operator>=</operator> <call><name>gtk_entry_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sensitive</name> <operator>=</operator> <operator>(</operator><name>entry_text</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>entry_text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>entry_text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_entry_set_text</name><argument_list>(<argument><expr><call><name>GTK_ENTRY</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>entry_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"changed"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>entry_changed_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_signal_connect_after</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-press-event"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>find_key_press_event</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>gpointer</name><operator>)</operator> <name>frdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_grid_attach</name><argument_list>(<argument><expr><call><name>GTK_GRID</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_table_attach</name><argument_list>(<argument><expr><call><name>GTK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>GTK_EXPAND</name> <operator>|</operator> <name>GTK_FILL</name></expr></argument>, <argument><expr><name>GTK_EXPAND</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>do_replace</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>gtk_label_new</name><argument_list>(<argument><expr><call><name>CONV</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Replace with:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">16</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_label_set_xalign</name><argument_list>(<argument><expr><call><name>GTK_LABEL</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_label_set_yalign</name><argument_list>(<argument><expr><call><name>GTK_LABEL</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">14</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>
<block>{<block_content>
<decl_stmt><decl><type><name>GValue</name></type> <name>align_val</name> <init>= <expr><name>G_VALUE_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>g_value_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>align_val</name></expr></argument>, <argument><expr><name>G_TYPE_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_value_set_float</name><argument_list>(<argument><expr><operator>&amp;</operator><name>align_val</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_set_property</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"xalign"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>align_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_value_set_float</name><argument_list>(<argument><expr><operator>&amp;</operator><name>align_val</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_set_property</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"yalign"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>align_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_value_unset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>align_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_misc_set_alignment</name><argument_list>(<argument><expr><call><name>GTK_MISC</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>gfloat</name><operator>)</operator><literal type="number">0.0</literal></expr></argument>, <argument><expr><operator>(</operator><name>gfloat</name><operator>)</operator><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_grid_attach</name><argument_list>(<argument><expr><call><name>GTK_GRID</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_table_attach</name><argument_list>(<argument><expr><call><name>GTK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name>GTK_FILL</name></expr></argument>, <argument><expr><name>GTK_EXPAND</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>with</name></name> <operator>=</operator> <call><name>gtk_entry_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>with</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"activate"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>find_replace_cb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><name>FRD_R_FINDNEXT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_signal_connect_after</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>with</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key-press-event"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>find_key_press_event</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>gpointer</name><operator>)</operator> <name>frdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_grid_attach</name><argument_list>(<argument><expr><call><name>GTK_GRID</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>with</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_table_attach</name><argument_list>(<argument><expr><call><name>GTK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>with</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name>GTK_EXPAND</name> <operator>|</operator> <name>GTK_FILL</name></expr></argument>, <argument><expr><name>GTK_EXPAND</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"activate"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>entry_activate_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>with</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>



<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"activate"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>find_replace_cb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><name>FRD_FINDNEXT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>wword</name></name> <operator>=</operator> <call><name>gtk_check_button_new_with_label</name><argument_list>(<argument><expr><call><name>CONV</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Match whole word only"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_toggle_button_set_active</name><argument_list>(<argument><expr><call><name>GTK_TOGGLE_BUTTON</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>wword</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>gboolean</name><operator>)</operator><name>wword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_replace</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_grid_attach</name><argument_list>(<argument><expr><call><name>GTK_GRID</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>wword</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_table_attach</name><argument_list>(<argument><expr><call><name>GTK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>wword</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><name>GTK_FILL</name></expr></argument>, <argument><expr><name>GTK_EXPAND</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_grid_attach</name><argument_list>(<argument><expr><call><name>GTK_GRID</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>wword</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_table_attach</name><argument_list>(<argument><expr><call><name>GTK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>wword</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name>GTK_FILL</name></expr></argument>, <argument><expr><name>GTK_EXPAND</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>mcase</name></name> <operator>=</operator> <call><name>gtk_check_button_new_with_label</name><argument_list>(<argument><expr><call><name>CONV</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Match case"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_toggle_button_set_active</name><argument_list>(<argument><expr><call><name>GTK_TOGGLE_BUTTON</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>mcase</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>gboolean</name><operator>)</operator><name>mcase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_replace</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_grid_attach</name><argument_list>(<argument><expr><call><name>GTK_GRID</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>mcase</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_table_attach</name><argument_list>(<argument><expr><call><name>GTK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>mcase</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><name>GTK_FILL</name></expr></argument>, <argument><expr><name>GTK_EXPAND</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_grid_attach</name><argument_list>(<argument><expr><call><name>GTK_GRID</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>mcase</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_table_attach</name><argument_list>(<argument><expr><call><name>GTK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>mcase</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><name>GTK_FILL</name></expr></argument>, <argument><expr><name>GTK_EXPAND</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>gtk_frame_new</name><argument_list>(<argument><expr><call><name>CONV</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Direction"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_replace</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_grid_attach</name><argument_list>(<argument><expr><call><name>GTK_GRID</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_table_attach</name><argument_list>(<argument><expr><call><name>GTK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><name>GTK_FILL</name></expr></argument>, <argument><expr><name>GTK_FILL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else<block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_grid_attach</name><argument_list>(<argument><expr><call><name>GTK_GRID</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_table_attach</name><argument_list>(<argument><expr><call><name>GTK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><name>GTK_FILL</name></expr></argument>, <argument><expr><name>GTK_FILL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>vbox</name> <operator>=</operator> <call><name>gtk_box_new</name><argument_list>(<argument><expr><name>GTK_ORIENTATION_VERTICAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_box_set_homogeneous</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>vbox</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>vbox</name> <operator>=</operator> <call><name>gtk_vbox_new</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gtk_container_set_border_width</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>vbox</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>up</name></name> <operator>=</operator> <call><name>gtk_radio_button_new_with_label</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>CONV</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Up"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_box_pack_start</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>vbox</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>up</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>down</name></name> <operator>=</operator> <call><name>gtk_radio_button_new_with_label</name><argument_list>(
<argument><expr><call><name>gtk_radio_button_get_group</name><argument_list>(<argument><expr><call><name>GTK_RADIO_BUTTON</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>up</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>CONV</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Down"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_toggle_button_set_active</name><argument_list>(<argument><expr><call><name>GTK_TOGGLE_BUTTON</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>down</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_container_set_border_width</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>vbox</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_box_pack_start</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>vbox</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>down</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>actionarea</name> <operator>=</operator> <call><name>gtk_button_box_new</name><argument_list>(<argument><expr><name>GTK_ORIENTATION_VERTICAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>actionarea</name> <operator>=</operator> <call><name>gtk_vbutton_box_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gtk_container_set_border_width</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>actionarea</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_box_pack_end</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>hbox</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>actionarea</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>find</name></name> <operator>=</operator> <call><name>create_image_button</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Find Next"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>find</name></name> <operator>=</operator> <call><name>create_image_button</name><argument_list>(<argument><expr><name>GTK_STOCK_FIND</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Find Next"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gtk_widget_set_sensitive</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>find</name></name></expr></argument>, <argument><expr><name>sensitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>find</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"clicked"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>find_replace_cb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>do_replace</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><name>FRD_R_FINDNEXT</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><name>FRD_FINDNEXT</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_set_can_default</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>find</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_box_pack_start</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>actionarea</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>find</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_grab_default</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>find</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_replace</name></expr>)</condition>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>replace</name></name> <operator>=</operator> <call><name>create_image_button</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Replace"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>replace</name></name> <operator>=</operator> <call><name>create_image_button</name><argument_list>(<argument><expr><name>GTK_STOCK_CONVERT</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Replace"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gtk_widget_set_sensitive</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>replace</name></name></expr></argument>, <argument><expr><name>sensitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_set_can_default</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>find</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_box_pack_start</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>actionarea</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>replace</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>replace</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"clicked"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>find_replace_cb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><name>FRD_REPLACE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>all</name></name> <operator>=</operator> <call><name>create_image_button</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Replace All"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>all</name></name> <operator>=</operator> <call><name>create_image_button</name><argument_list>(<argument><expr><name>GTK_STOCK_CONVERT</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Replace All"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gtk_widget_set_sensitive</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>all</name></name></expr></argument>, <argument><expr><name>sensitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_set_can_default</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>all</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_box_pack_start</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>actionarea</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>all</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>all</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"clicked"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>find_replace_cb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><name>FRD_REPLACEALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>gtk_button_new_with_mnemonic</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"_Close"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>gtk_button_new_from_stock</name><argument_list>(<argument><expr><name>GTK_STOCK_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gtk_widget_set_can_default</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_box_pack_end</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>actionarea</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_signal_connect_swapped</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"clicked"</literal></expr></argument>, <argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>gtk_widget_hide</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_signal_connect_swapped</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"delete-event"</literal></expr></argument>, <argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>gtk_widget_hide_on_delete</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>gtk_separator_new</name><argument_list>(<argument><expr><name>GTK_ORIENTATION_VERTICAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>gtk_vseparator_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gtk_box_pack_end</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>hbox</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">12</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gtk_widget_hide</name><argument_list>(<argument><expr><call><name>gtk_dialog_get_action_area</name><argument_list>(<argument><expr><call><name>GTK_DIALOG</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>gtk_widget_hide</name><argument_list>(<argument><expr><call><name>GTK_DIALOG</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>action_area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>gtk_widget_show_all</name><argument_list>(<argument><expr><name>hbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>entry_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>conv_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CONV</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_find_dialog</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>find_replace_dialog_create</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gui_mch_replace_dialog</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>find_replace_dialog_create</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>find_replace_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>find_text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>repl_text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>direction_down</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SharedFindReplace</name> <modifier>*</modifier></type><name>sfr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>data</name></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>FRD_FINDNEXT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>repl_text</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sfr</name> <operator>=</operator> <operator>&amp;</operator><name>find_widgets</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>repl_text</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>gtk_entry_get_text</name><argument_list>(<argument><expr><call><name>GTK_ENTRY</name><argument_list>(<argument><expr><name><name>repl_widgets</name><operator>.</operator><name>with</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sfr</name> <operator>=</operator> <operator>&amp;</operator><name>repl_widgets</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>find_text</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>gtk_entry_get_text</name><argument_list>(<argument><expr><call><name>GTK_ENTRY</name><argument_list>(<argument><expr><name><name>sfr</name><operator>-&gt;</operator><name>what</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>direction_down</name> <operator>=</operator> <call><name>gtk_toggle_button_get_active</name><argument_list>(<argument><expr><call><name>GTK_TOGGLE_BUTTON</name><argument_list>(<argument><expr><name><name>sfr</name><operator>-&gt;</operator><name>down</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gtk_toggle_button_get_active</name><argument_list>(<argument><expr><call><name>GTK_TOGGLE_BUTTON</name><argument_list>(<argument><expr><name><name>sfr</name><operator>-&gt;</operator><name>wword</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FRD_WHOLE_WORD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gtk_toggle_button_get_active</name><argument_list>(<argument><expr><call><name>GTK_TOGGLE_BUTTON</name><argument_list>(<argument><expr><name><name>sfr</name><operator>-&gt;</operator><name>mcase</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FRD_MATCH_CASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>repl_text</name> <operator>=</operator> <call><name>CONVERT_FROM_UTF8</name><argument_list>(<argument><expr><name>repl_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>find_text</name> <operator>=</operator> <call><name>CONVERT_FROM_UTF8</name><argument_list>(<argument><expr><name>find_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_do_findrepl</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>find_text</name></expr></argument>, <argument><expr><name>repl_text</name></expr></argument>, <argument><expr><name>direction_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_FROM_UTF8_FREE</name><argument_list>(<argument><expr><name>repl_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT_FROM_UTF8_FREE</name><argument_list>(<argument><expr><name>find_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>entry_activate_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gtk_widget_grab_focus</name><argument_list>(<argument><expr><call><name>GTK_WIDGET</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type>
<name>entry_changed_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type> <name>dialog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>entry_text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gboolean</name></type> <name>nonempty</name></decl>;</decl_stmt>

<expr_stmt><expr><name>entry_text</name> <operator>=</operator> <call><name>gtk_entry_get_text</name><argument_list>(<argument><expr><call><name>GTK_ENTRY</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry_text</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>nonempty</name> <operator>=</operator> <operator>(</operator><name><name>entry_text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dialog</name> <operator>==</operator> <name><name>find_widgets</name><operator>.</operator><name>dialog</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gtk_widget_set_sensitive</name><argument_list>(<argument><expr><name><name>find_widgets</name><operator>.</operator><name>find</name></name></expr></argument>, <argument><expr><name>nonempty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dialog</name> <operator>==</operator> <name><name>repl_widgets</name><operator>.</operator><name>dialog</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gtk_widget_set_sensitive</name><argument_list>(<argument><expr><name><name>repl_widgets</name><operator>.</operator><name>find</name></name></expr></argument>, <argument><expr><name>nonempty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_set_sensitive</name><argument_list>(<argument><expr><name><name>repl_widgets</name><operator>.</operator><name>replace</name></name></expr></argument>, <argument><expr><name>nonempty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_widget_set_sensitive</name><argument_list>(<argument><expr><name><name>repl_widgets</name><operator>.</operator><name>all</name></name></expr></argument>, <argument><expr><name>nonempty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_helpfind</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier><name>eap</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"emenu ToolBar.FindHelp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>recent_func_log_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier><name>log_domain</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>GLogLevelFlags</name> <name>log_level</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier><name>message</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>gpointer</name> <name>user_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>


</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
