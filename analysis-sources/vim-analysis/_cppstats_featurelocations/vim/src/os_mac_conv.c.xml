<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\os_mac_conv.c">














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_X11_INCLUDES</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreServices/CoreServices.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_CONVERT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>int</name></type> <name>UniChar</name>;</typedef>
<typedef>typedef <type><name>int</name> <modifier>*</modifier></type><name>TECObjectRef</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>CFStringRef</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>mac_utf16_to_utf8</name><parameter_list>(<parameter><decl><type><name>UniChar</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>fromLen</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>actualLen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>UniChar</name> <modifier>*</modifier></type><name>mac_utf8_to_utf16</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>fromLen</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>actualLen</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <name>TECObjectRef</name></type> <name>gPathConverter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>TECObjectRef</name></type> <name>gUTF16ToUTF8Converter</name></decl>;</decl_stmt>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>mac_string_convert</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fail_on_error</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>from_enc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>to_enc</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>unconvlenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retval</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>cfstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buflen</name></decl>, <decl><type ref="prev"/><name>in</name></decl>, <decl><type ref="prev"/><name>out</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFStringEncoding</name></type> <name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFStringEncoding</name></type> <name>to</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>from_enc</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'l'</literal></expr>:</case> <expr_stmt><expr><name>from</name> <operator>=</operator> <name>kCFStringEncodingISOLatin1</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><name>from</name> <operator>=</operator> <name>kCFStringEncodingMacRoman</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case> <expr_stmt><expr><name>from</name> <operator>=</operator> <name>kCFStringEncodingUTF8</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
<switch>switch <condition>(<expr><name>to_enc</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'l'</literal></expr>:</case> <expr_stmt><expr><name>to</name> <operator>=</operator> <name>kCFStringEncodingISOLatin1</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><name>to</name> <operator>=</operator> <name>kCFStringEncodingMacRoman</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case> <expr_stmt><expr><name>to</name> <operator>=</operator> <name>kCFStringEncodingUTF8</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>unconvlenp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>unconvlenp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cfstr</name> <operator>=</operator> <call><name>CFStringCreateWithBytes</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cfstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Encoding failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<while>while <condition>(<expr><name>cfstr</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>unconvlenp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>unconvlenp</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>unconvlenp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cfstr</name> <operator>=</operator> <call><name>CFStringCreateWithBytes</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>cfstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>to</name> <operator>==</operator> <name>kCFStringEncodingUTF8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>len</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cfstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
CFRange convertRange = CFRangeMake(0, CFStringGetLength(cfstr));

CFStringGetBytes(cfstr, convertRange, to, NULL, FALSE, NULL, 0, (CFIndex *)&amp;buflen);
retval = (buflen &gt; 0) ? alloc(buflen) : NULL;
if (retval == NULL) {
CFRelease(cfstr);
return NULL;
}

if (lenp)
*lenp = buflen / sizeof(char_u);

if (!CFStringGetBytes(cfstr, convertRange, to, NULL, FALSE, retval, buflen, NULL))
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CFStringGetCString</name><argument_list>(<argument><expr><name>cfstr</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>retval</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cfstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fail_on_error</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Trying char-by-char conversion...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>retval</name></expr><operator>,</operator> <expr><name>in</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>in</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>out</name> <operator>&lt;</operator> <name>buflen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <name>kCFStringEncodingUTF8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>cfstr</name> <operator>=</operator> <call><name>CFStringCreateWithBytes</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>in</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cfstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CFStringGetCString</name><argument_list>(<argument><expr><name>cfstr</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>d</name></expr></argument>, <argument><expr><name>buflen</name> <operator>-</operator> <name>out</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cfstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lenp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cfstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lenp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>macroman2enc</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>sizep</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>real_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>cfstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFRange</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFIndex</name></type> <name>len</name> <init>= <expr><operator>*</operator><name>sizep</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>cfstr</name> <operator>=</operator> <call><name>CFStringCreateWithBytes</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name>kCFStringEncodingMacRoman</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>cfstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>location</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>CFStringGetLength</name><argument_list>(<argument><expr><name>cfstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <call><name>CFStringGetBytes</name><argument_list>(<argument><expr><name>cfstr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>enc_utf8</name><operator>)</operator></expr> ?</condition><then> <expr><name>kCFStringEncodingUTF8</name></expr> </then><else>: <expr><name>kCFStringEncodingISOLatin1</name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><name>ptr</name> <operator>+</operator> <operator>*</operator><name>sizep</name></expr></argument>, <argument><expr><name>real_size</name> <operator>-</operator> <operator>*</operator><name>sizep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cfstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cfstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <operator>*</operator><name>sizep</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sizep</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>enc2macroman</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>fromlen</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tolenp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>maxtolen</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rest</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>restlenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>cfstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFRange</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFIndex</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>restlenp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cfstr</name> <operator>=</operator> <call><name>CFStringCreateWithBytes</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>fromlen</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>enc_utf8</name><operator>)</operator></expr> ?</condition><then> <expr><name>kCFStringEncodingUTF8</name></expr> </then><else>: <expr><name>kCFStringEncodingISOLatin1</name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cfstr</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>restlenp</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>fromlen</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rest</name><index>[<expr><operator>*</operator><name>restlenp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>from</name><index>[<expr><operator>--</operator><name>fromlen</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cfstr</name> <operator>=</operator> <call><name>CFStringCreateWithBytes</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>fromlen</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>enc_utf8</name><operator>)</operator></expr> ?</condition><then> <expr><name>kCFStringEncodingUTF8</name></expr> </then><else>: <expr><name>kCFStringEncodingISOLatin1</name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>cfstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>.</operator><name>location</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>CFStringGetLength</name><argument_list>(<argument><expr><name>cfstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <call><name>CFStringGetBytes</name><argument_list>(<argument><expr><name>cfstr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name>kCFStringEncodingMacRoman</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><name>to</name></expr></argument>, <argument><expr><name>maxtolen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cfstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cfstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tolenp</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>mac_conv_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TextEncoding</name></type> <name>utf8_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TextEncoding</name></type> <name>utf8_hfsplus_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TextEncoding</name></type> <name>utf8_canon_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TextEncoding</name></type> <name>utf16_encoding</name></decl>;</decl_stmt>

<expr_stmt><expr><name>utf8_encoding</name> <operator>=</operator> <call><name>CreateTextEncoding</name><argument_list>(<argument><expr><name>kTextEncodingUnicodeDefault</name></expr></argument>,
<argument><expr><name>kTextEncodingDefaultVariant</name></expr></argument>, <argument><expr><name>kUnicodeUTF8Format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>utf8_hfsplus_encoding</name> <operator>=</operator> <call><name>CreateTextEncoding</name><argument_list>(<argument><expr><name>kTextEncodingUnicodeDefault</name></expr></argument>,
<argument><expr><name>kUnicodeHFSPlusCompVariant</name></expr></argument>, <argument><expr><name>kUnicodeUTF8Format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>utf8_canon_encoding</name> <operator>=</operator> <call><name>CreateTextEncoding</name><argument_list>(<argument><expr><name>kTextEncodingUnicodeDefault</name></expr></argument>,
<argument><expr><name>kUnicodeCanonicalCompVariant</name></expr></argument>, <argument><expr><name>kUnicodeUTF8Format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>utf16_encoding</name> <operator>=</operator> <call><name>CreateTextEncoding</name><argument_list>(<argument><expr><name>kTextEncodingUnicodeDefault</name></expr></argument>,
<argument><expr><name>kTextEncodingDefaultVariant</name></expr></argument>, <argument><expr><name>kUnicode16BitFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TECCreateConverter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gPathConverter</name></expr></argument>, <argument><expr><name>utf8_encoding</name></expr></argument>,
<argument><expr><name>utf8_hfsplus_encoding</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gPathConverter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TECCreateConverter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gUTF16ToUTF8Converter</name></expr></argument>, <argument><expr><name>utf16_encoding</name></expr></argument>,
<argument><expr><name>utf8_canon_encoding</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>TECCreateConverter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gUTF16ToUTF8Converter</name></expr></argument>, <argument><expr><name>utf16_encoding</name></expr></argument>,
<argument><expr><name>utf8_encoding</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gUTF16ToUTF8Converter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>mac_conv_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gUTF16ToUTF8Converter</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TECDisposeConverter</name><argument_list>(<argument><expr><name>gUTF16ToUTF8Converter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gUTF16ToUTF8Converter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gPathConverter</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TECDisposeConverter</name><argument_list>(<argument><expr><name>gPathConverter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gPathConverter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>mac_utf16_to_enc</name><parameter_list>(
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>from</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>fromLen</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>actualLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>vimconv_T</name></type> <name>conv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>utf8_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>utf8_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>utf8_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>utf8_str</name> <operator>=</operator> <call><name>mac_utf16_to_utf8</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>fromLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>utf8_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>utf8_str</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>conv</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>enc_canon_props</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ENC_UNICODE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"utf-8"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>p_enc</name></expr>?</condition><then> <expr><name>p_enc</name></expr></then><else>: <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"macroman"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conv</name><operator>.</operator><name>vc_type</name></name> <operator>==</operator> <name>CONV_NONE</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>utf8_str</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>utf8_str</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>utf8_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>utf8_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>actualLen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>actualLen</name> <operator>=</operator> <name>utf8_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>actualLen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>actualLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type>
<name>mac_enc_to_utf16</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>fromLen</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>actualLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>vimconv_T</name></type> <name>conv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>utf8_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>utf8_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UniChar</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Boolean</name></type> <name>should_free_utf8</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<do>do
<block>{<block_content>



<expr_stmt><expr><name><name>conv</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>enc_canon_props</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ENC_UNICODE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><ternary><condition><expr><name>p_enc</name></expr> ?</condition><then> <expr><name>p_enc</name></expr> </then><else>: <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"macroman"</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"utf-8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>utf8_len</name> <operator>=</operator> <name>fromLen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>utf8_str</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>utf8_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>should_free_utf8</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>utf8_str</name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
<expr_stmt><expr><name>utf8_len</name> <operator>=</operator> <name>fromLen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>utf8_str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>mac_utf8_to_utf16</name><argument_list>(<argument><expr><name>utf8_str</name></expr></argument>, <argument><expr><name>utf8_len</name></expr></argument>, <argument><expr><name>actualLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>should_free_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>utf8_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block>
while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>actualLen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>actualLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name> <modifier>*</modifier></type>
<name>mac_enc_to_cfstring</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>fromLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UniChar</name> <modifier>*</modifier></type><name>utf16_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>utf16_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>utf16_str</name> <operator>=</operator> <call><name>mac_enc_to_utf16</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>fromLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>utf16_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>utf16_str</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CFStringCreateWithCharacters</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>utf16_str</name></expr></argument>, <argument><expr><name>utf16_len</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>UniChar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>utf16_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>mac_precompose_path</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>decompPath</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>decompLen</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>precompLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>actualLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>gPathConverter</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>decompLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>TECConvertText</name><argument_list>(<argument><expr><name>gPathConverter</name></expr></argument>, <argument><expr><name>decompPath</name></expr></argument>,
<argument><expr><name>decompLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decompLen</name></expr></argument>, <argument><expr><name>result</name></expr></argument>,
<argument><expr><name>decompLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>precompLen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>precompLen</name> <operator>=</operator> <name>actualLen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>mac_utf16_to_utf8</name><parameter_list>(
<parameter><decl><type><name>UniChar</name> <modifier>*</modifier></type><name>from</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>fromLen</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>actualLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ByteCount</name></type> <name>utf8_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ByteCount</name></type> <name>inputRead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>gUTF16ToUTF8Converter</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>fromLen</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <call><name>TECConvertText</name><argument_list>(<argument><expr><name>gUTF16ToUTF8Converter</name></expr></argument>, <argument><expr><operator>(</operator><name>ConstTextPtr</name><operator>)</operator><name>from</name></expr></argument>,
<argument><expr><name>fromLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inputRead</name></expr></argument>, <argument><expr><name>result</name></expr></argument>,
<argument><expr><operator>(</operator><name>fromLen</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>utf8_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>noErr</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TECFlushText</name><argument_list>(<argument><expr><name>gUTF16ToUTF8Converter</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><operator>(</operator><name>fromLen</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>inputRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>utf8_len</name> <operator>+=</operator> <name>inputRead</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>actualLen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>actualLen</name> <operator>=</operator> <ternary><condition><expr><name>result</name></expr> ?</condition><then> <expr><name>utf8_len</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>UniChar</name> <modifier>*</modifier></type>
<name>mac_utf8_to_utf16</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>fromLen</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>actualLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>utf8_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFRange</name></type> <name>convertRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UniChar</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>utf8_str</name> <operator>=</operator> <call><name>CFStringCreateWithBytes</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>fromLen</name></expr></argument>,
<argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>utf8_str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>actualLen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>actualLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>convertRange</name> <operator>=</operator> <call><name>CFRangeMake</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>CFStringGetLength</name><argument_list>(<argument><expr><name>utf8_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>UniChar</name></expr></argument>, <argument><expr><name><name>convertRange</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFStringGetCharacters</name><argument_list>(<argument><expr><name>utf8_str</name></expr></argument>, <argument><expr><name>convertRange</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>utf8_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>actualLen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>actualLen</name> <operator>=</operator> <name><name>convertRange</name><operator>.</operator><name>length</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UniChar</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>mac_lang_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"LANG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LocaleRefGetPartString</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>kLocaleLanguageMask</name> <operator>|</operator> <name>kLocaleLanguageVariantMask</name> <operator>|</operator>
<name>kLocaleRegionMask</name> <operator>|</operator> <name>kLocaleRegionVariantMask</name></expr></argument>,
<argument><expr><sizeof>sizeof <name>buf</name></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>noErr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>buf</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_setenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"LANG"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
