<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\gui_at_fs.c">










































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FMT8BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FMT8BIT</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gui_at_sb.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Intrinsic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/StringDefs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xos.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/Text.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/AsciiText.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/Scrollbar.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/Text.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/AsciiText.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEL_FILE_CANCEL</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEL_FILE_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEL_FILE_NULL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEL_FILE_TEXT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_DO_SCROLL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_DO_NOT_SCROLL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>statDone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>real</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shown</name></decl>;</decl_stmt>
}</block></struct></type> <name>SFEntry</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SFEntry</name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nEntries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vOrigin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nChars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hOrigin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>beginSelection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>endSelection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>mtime</name></decl>;</decl_stmt>
}</block></struct></type> <name>SFDir</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>SFstartDir</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>,
<decl><type ref="prev"/><name><name>SFcurrentPath</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>,
<decl><type ref="prev"/><name><name>SFcurrentDir</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Widget</name></type> <name>selFile</name></decl>,
<decl><type ref="prev"/><name>selFileField</name></decl>,
<decl><type ref="prev"/><name>selFileForm</name></decl>,
<decl><type ref="prev"/><name>selFileHScroll</name></decl>,
<decl><type ref="prev"/><name><name>selFileHScrolls</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>,
<decl><type ref="prev"/><name><name>selFileLists</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>,
<decl><type ref="prev"/><name>selFileOK</name></decl>,
<decl><type ref="prev"/><name>selFileCancel</name></decl>,
<decl><type ref="prev"/><name>selFilePrompt</name></decl>,
<decl><type ref="prev"/><name><name>selFileVScrolls</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Display</name> <modifier>*</modifier></type><name>SFdisplay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFcharWidth</name></decl>, <decl><type ref="prev"/><name>SFcharAscent</name></decl>, <decl><type ref="prev"/><name>SFcharHeight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>SFDir</name> <modifier>*</modifier></type><name>SFdirs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFdirEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFdirPtr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Pixel</name></type> <name>SFfore</name></decl>, <decl><type ref="prev"/><name>SFback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Atom</name></type> <name>SFwmDeleteWindow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XSegment</name></type> <name><name>SFsegs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>SFcompletionSegs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XawTextPosition</name></type> <name>SFtextPos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFupperX</name></decl>, <decl><type ref="prev"/><name>SFlowerY</name></decl>, <decl><type ref="prev"/><name>SFupperY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFtextX</name></decl>, <decl><type ref="prev"/><name>SFtextYoffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFentryWidth</name></decl>, <decl><type ref="prev"/><name>SFentryHeight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFlineToTextH</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFlineToTextV</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFbesideText</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFaboveAndBelowText</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFcharsPerEntry</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFlistSize</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>SFcurrentInvert</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFworkProcAdded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtAppContext</name></type> <name>SFapp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFpathScrollWidth</name></decl>, <decl><type ref="prev"/><name>SFvScrollHeight</name></decl>, <decl><type ref="prev"/><name>SFhScrollWidth</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>SFtextBuffer</name><index>[<expr><name>MAXPATHL</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>SFtextBuffer</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFbuttonPressed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtIntervalId</name></type> <name>SFdirModTimerId</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>SFfunc</name>)<parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFstatus</name> <init>= <expr><name>SEL_FILE_NULL</name></expr></init></decl>;</decl_stmt>



<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SFsetText</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SFtextChanged</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SFgetDir</name><parameter_list>(<parameter><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SFdrawLists</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doScroll</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SFdrawList</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doScroll</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SFclearList</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doScroll</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name></type> <name>SFstatChar</name><parameter_list>(<parameter><decl><type><name>stat_T</name> <modifier>*</modifier></type><name>statBuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SFmotionList</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>XMotionEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SFvSliderMovedCallback</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Boolean</name></type> <name>SFworkProc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SFcompareEntries</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_IXUSR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IXUSR</name></cpp:macro> <cpp:value>0100</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_IXGRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IXGRP</name></cpp:macro> <cpp:value>0010</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_IXOTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IXOTH</name></cpp:macro> <cpp:value>0001</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISXXX</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((m) &amp; (S_IXUSR | S_IXGRP | S_IXOTH))</cpp:value></cpp:define>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
}</block></struct></type> <name>SFLogin</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFdoNotTouchDirPtr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFdoNotTouchVorigin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>SFDir</name></type> <name>SFrootDir</name></decl>, <decl><type ref="prev"/><name>SFhomeDir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>SFLogin</name> <modifier>*</modifier></type><name>SFlogins</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFtwiddle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>SFchdir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>SFcurrentDir</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>mch_chdir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>SFcurrentDir</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFfree</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>shown</name> <operator>!=</operator> <name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>real</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>shown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>dir</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFstrdup</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s1</name> <operator>=</operator> <call><name>strcpy</name><argument_list>(<argument><expr><call><name>XtMalloc</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFunreadableDir</name><parameter_list>(<parameter><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cannotOpen</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&lt;cannot open&gt; "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <operator>(</operator><name>SFEntry</name> <operator>*</operator><operator>)</operator> <call><name>XtMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>statDone</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFstrdup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>real</name></expr></argument>, <argument><expr><name>cannotOpen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>shown</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>real</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cannotOpen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFreplaceText</name><parameter_list>(<parameter><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>path</name></name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcat</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strncat</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>, <argument><expr><name>SFstartDir</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>SFstartDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFsetText</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFsetText</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>SFcurrentPath</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>SFstartDir</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>SFtextChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFexpand</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>growing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SFEntry</name> <modifier>*</modifier></type><name>entry</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>max</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><name>SFdirEnd</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SFstrdup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFreplaceText</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name> <operator>==</operator> <name><name>dir</name><operator>-&gt;</operator><name>endSelection</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SFreplaceText</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name></expr>]</index></name><operator>.</operator><name>shown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>endSelection</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name></expr>]</index></name><operator>.</operator><name>shown</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFstrdup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>growing</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name>cmp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>entry</name> <operator>&lt;</operator> <name>max</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmp</name> <operator>=</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>growing</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>shown</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>entry</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>




<expr_stmt><expr><name><name>growing</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>growing</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFreplaceText</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>growing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name>growing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>SFfindFile</name><parameter_list>(<parameter><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>last</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"/><name>save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SFEntry</name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SFexpand</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>str</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>entries</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>entries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>shown</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>save</name> <operator>=</operator> <name><name>name</name><index>[<expr><name>last</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>begin</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>shown</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>save</name> <operator>=</operator> <name><name>name</name><index>[<expr><name>last</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>begin</name> <operator>!=</operator> <name>end</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name> <operator>!=</operator> <name>begin</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>endSelection</name></name> <operator>!=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>endSelection</name></name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>endSelection</name></name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>endSelection</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>SFdoNotTouchVorigin</name>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>begin</name> <operator>&gt;</operator> <name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>end</name> <operator>&lt;</operator> <name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>+</operator> <name>SFlistSize</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>SFdoNotTouchVorigin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>begin</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>max</name> <operator>-</operator> <name>SFlistSize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>max</name> <operator>-</operator> <name>SFlistSize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>!=</operator> <name>i</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFunselect</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><name>SFdirEnd</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>endSelection</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>SFcompareLogins</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SFLogin</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SFLogin</name> <operator>*</operator><operator>)</operator><name>q</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFgetHomeDirs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>pw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SFEntry</name> <modifier>*</modifier></type><name>entries</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxChars</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Alloc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>entries</name> <operator>=</operator> <operator>(</operator><name>SFEntry</name> <operator>*</operator><operator>)</operator><call><name>XtMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SFlogins</name> <operator>=</operator> <operator>(</operator><name>SFLogin</name> <operator>*</operator><operator>)</operator><call><name>XtMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFLogin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>real</name> <operator>=</operator> <call><name>XtMalloc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>real</name></expr></argument>, <argument><expr><literal type="string">"~"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>shown</name> <operator>=</operator> <name><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>real</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>statDone</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFlogins</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pw</name> <operator>=</operator> <call><name>getpwuid</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>getuid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFstrdup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>SFlogins</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dir</name></expr></argument>, <argument><expr><ternary><condition><expr><name>pw</name></expr> ?</condition><then> <expr><name><name>pw</name><operator>-&gt;</operator><name>pw_dir</name></name></expr> </then><else>: <expr><literal type="string">"/"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxChars</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>setpwent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>pw</name> <operator>=</operator> <call><name>getpwent</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name><name>pw</name><operator>-&gt;</operator><name>pw_name</name></name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>Alloc</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Alloc</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>entries</name> <operator>=</operator> <operator>(</operator><name>SFEntry</name> <operator>*</operator><operator>)</operator> <call><name>XtRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>entries</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>Alloc</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFEntry</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SFlogins</name> <operator>=</operator> <operator>(</operator><name>SFLogin</name> <operator>*</operator><operator>)</operator> <call><name>XtRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>SFlogins</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>Alloc</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFLogin</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pw</name><operator>-&gt;</operator><name>pw_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>real</name> <operator>=</operator> <call><name>XtMalloc</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcat</name><argument_list>(<argument><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>real</name></expr></argument>, <argument><expr><literal type="string">"~"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pw</name><operator>-&gt;</operator><name>pw_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>shown</name> <operator>=</operator> <name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>real</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>statDone</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>maxChars</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxChars</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SFstrdup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>SFlogins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>pw</name><operator>-&gt;</operator><name>pw_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFstrdup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>SFlogins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dir</name></expr></argument>, <argument><expr><name><name>pw</name><operator>-&gt;</operator><name>pw_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>SFhomeDir</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <call><name>XtMalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFhomeDir</name><operator>.</operator><name>dir</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFhomeDir</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>SFcurrentPath</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFhomeDir</name><operator>.</operator><name>entries</name></name> <operator>=</operator> <name>entries</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFhomeDir</name><operator>.</operator><name>nEntries</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFhomeDir</name><operator>.</operator><name>vOrigin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>SFhomeDir</name><operator>.</operator><name>nChars</name></name> <operator>=</operator> <name>maxChars</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFhomeDir</name><operator>.</operator><name>hOrigin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFhomeDir</name><operator>.</operator><name>changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFhomeDir</name><operator>.</operator><name>beginSelection</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFhomeDir</name><operator>.</operator><name>endSelection</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>entries</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>SFcompareEntries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>SFlogins</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFLogin</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>SFcompareLogins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>--</operator></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strcat</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>real</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>SFfindHomeDir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>theRest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>save</name> <operator>=</operator> <operator>*</operator><name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>SFhomeDir</name><operator>.</operator><name>nEntries</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>SFhomeDir</name><operator>.</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>real</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFstrdup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>theRest</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcat</name><argument_list>(<argument><expr><call><name>strcat</name><argument_list>(<argument><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>,
<argument><expr><name><name>SFlogins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>theRest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name>theRest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFsetText</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFtextChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFupdatePath</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>Alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>wasTwiddle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>begin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prevChange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>SFdirPtrSave</name></decl>, <decl><type ref="prev"/><name>SFdirEndSave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SFdirs</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>SFdirs</name> <operator>=</operator> <operator>(</operator><name>SFDir</name> <operator>*</operator><operator>)</operator> <call><name>XtMalloc</name><argument_list>(<argument><expr><operator>(</operator><name>Alloc</name> <operator>=</operator> <literal type="number">10</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFDir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFstrdup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>SFchdir</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>SFgetDir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>Alloc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>SFdirs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>SFcurrentPath</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>hOrigin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>endSelection</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFhomeDir</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>SFdirEndSave</name> <operator>=</operator> <name>SFdirEnd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SFdirEnd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>SFdirPtrSave</name> <operator>=</operator> <name>SFdirPtr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SFdirPtr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>SFcurrentPath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SFtwiddle</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>SFtwiddle</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>SFrootDir</name> <operator>=</operator> <operator>*</operator><name>dir</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>SFhomeDir</name><operator>.</operator><name>dir</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFgetHomeDirs</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>dir</name> <operator>=</operator> <name>SFhomeDir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>SFcurrentPath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SFdoNotTouchDirPtr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wasTwiddle</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>SFtwiddle</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>SFtwiddle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dir</name> <operator>=</operator> <name>SFrootDir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>SFcurrentPath</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prevChange</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>end</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>end</name><operator>++</operator> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
<expr_stmt><expr><name>end</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>begin</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>end</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>end</name><operator>++</operator> <operator>!=</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>end</name> <operator>-</operator> <name>SFcurrentPath</name> <operator>&lt;=</operator> <name>SFtextPos</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>end</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>SFdirPtr</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>SFdirPtr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>SFdirPtr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>begin</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>end</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>save</name> <init>= <expr><operator>*</operator><name>end</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>SFtwiddle</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>SFfindHomeDir</name><argument_list>(<argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>SFdirEnd</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>Alloc</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>SFdirs</name> <operator>=</operator> <operator>(</operator><name>SFDir</name> <operator>*</operator><operator>)</operator> <call><name>XtRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>SFdirs</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>Alloc</name> <operator>*=</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFDir</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>Alloc</name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>Alloc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>SFdirs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>dir</name></name><operator>)</operator><operator>)</operator> <operator>||</operator> <name>prevChange</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFfree</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prevChange</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFstrdup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>hOrigin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>endSelection</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SFfindFile</name><argument_list>(<argument><expr><name>dir</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SFchdir</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>SFgetDir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SFunreadableDir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFunselect</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>SFfindFile</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><name>SFdirEnd</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFunselect</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>end</name> <operator>==</operator> <name>SFcurrentPath</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>SFtwiddle</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFunselect</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>SFdirEnd</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Alloc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>SFdirs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dir</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFfree</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>SFdoNotTouchDirPtr</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wasTwiddle</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>wasTwiddle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>SFdirPtr</name> <operator>=</operator> <name>SFdirEnd</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>SFdirPtr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>SFdirPtr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>SFdirPtr</name> <operator>=</operator> <name>SFdirPtrSave</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>SFdoNotTouchDirPtr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>SFdirPtr</name> <operator>!=</operator> <name>SFdirPtrSave</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>SFdirEnd</name> <operator>!=</operator> <name>SFdirEndSave</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XawScrollbarSetThumb</name><argument_list>( <argument><expr><name>selFileHScroll</name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>SFdirPtr</name><operator>)</operator> <operator>/</operator> <name>SFdirEnd</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>SFdirEnd</name> <operator>&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><name>SFdirEnd</name></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator>
<name>SFdirEnd</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vim_XawScrollbarSetThumb</name><argument_list>( <argument><expr><name>selFileHScroll</name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>SFdirPtr</name><operator>)</operator> <operator>/</operator> <name>SFdirEnd</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>SFdirEnd</name> <operator>&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><name>SFdirEnd</name></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator>
<name>SFdirEnd</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>SFdirEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>SFdirPtr</name> <operator>!=</operator> <name>SFdirPtrSave</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFdrawLists</name><argument_list>(<argument><expr><name>SF_DO_SCROLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>SFdirPtr</name> <operator>+</operator> <name>i</name> <operator>&lt;</operator> <name>SFdirEnd</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>SFdirs</name><index>[<expr><name>SFdirPtr</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>changed</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>SFdirs</name><index>[<expr><name>SFdirPtr</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>changed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFdrawList</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>SF_DO_SCROLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFclearList</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>SF_DO_SCROLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XtNinternational</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>WcsLen</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFsetText</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XawTextBlock</name></type> <name>text</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>text</name><operator>.</operator><name>firstPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>text</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>text</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>text</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>FMT8BIT</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XtNinternational</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>_XawTextFormat</name><argument_list>(<argument><expr><operator>(</operator><name>TextWidget</name><operator>)</operator><name>selFileField</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XawFmtWide</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XawTextReplace</name><argument_list>(<argument><expr><name>selFileField</name></expr></argument>, <argument><expr><operator>(</operator><name>XawTextPosition</name><operator>)</operator><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>XawTextPosition</name><operator>)</operator><call><name>WcsLen</name><argument_list>(<argument><expr><operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>SFtextBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XawTextSetInsertionPoint</name><argument_list>(<argument><expr><name>selFileField</name></expr></argument>,
<argument><expr><operator>(</operator><name>XawTextPosition</name><operator>)</operator><call><name>WcsLen</name><argument_list>(<argument><expr><operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>SFtextBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>XawTextReplace</name><argument_list>(<argument><expr><name>selFileField</name></expr></argument>, <argument><expr><operator>(</operator><name>XawTextPosition</name><operator>)</operator><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>XawTextPosition</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>SFtextBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XawTextSetInsertionPoint</name><argument_list>(<argument><expr><name>selFileField</name></expr></argument>,
<argument><expr><operator>(</operator><name>XawTextPosition</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>SFtextBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>XawTextReplace</name><argument_list>(<argument><expr><name>selFileField</name></expr></argument>, <argument><expr><operator>(</operator><name>XawTextPosition</name><operator>)</operator><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>XawTextPosition</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>SFtextBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XawTextSetInsertionPoint</name><argument_list>(<argument><expr><name>selFileField</name></expr></argument>,
<argument><expr><operator>(</operator><name>XawTextPosition</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>SFtextBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFbuttonPressList</name><parameter_list>(
<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>int</name> <name>n</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>XButtonPressedEvent</name> <modifier>*</modifier><name>event</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>SFbuttonPressed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFbuttonReleaseList</name><parameter_list>(
<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name>XButtonReleasedEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<expr_stmt><expr><name>SFbuttonPressed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>SFcurrentInvert</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>SFdoNotTouchDirPtr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>SFdoNotTouchVorigin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><name>SFdirPtr</name> <operator>+</operator> <name>n</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFreplaceText</name><argument_list>(<argument><expr><name>dir</name></expr></argument>,
<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>+</operator> <name><name>SFcurrentInvert</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>shown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFmotionList</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>XMotionEvent</name> <operator>*</operator><operator>)</operator> <name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>SFcheckDir</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stat_T</name></type> <name>statBuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>mch_stat</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>statBuf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>statBuf</name><operator>.</operator><name>st_mtime</name></name> <operator>!=</operator> <name><name>dir</name><operator>-&gt;</operator><name>mtime</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>SFcurrentInvert</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XWarpPointer</name><argument_list>(
<argument><expr><name>SFdisplay</name></expr></argument>,
<argument><expr><name>None</name></expr></argument>,
<argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name><name>selFileLists</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>shown</name> <operator>!=</operator> <name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>real</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>shown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>dir</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SFgetDir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFunreadableDir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>&gt;</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>-</operator> <name>SFlistSize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>-</operator> <name>SFlistSize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>hOrigin</name></name> <operator>&gt;</operator> <name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name> <operator>-</operator> <name>SFcharsPerEntry</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>hOrigin</name></name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name> <operator>-</operator> <name>SFcharsPerEntry</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>hOrigin</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>hOrigin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>endSelection</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>SFdoNotTouchVorigin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dir</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>dir</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>SFfindFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>(</operator><name>dir</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>SFfindFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SFworkProcAdded</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>XtAppAddWorkProc</name><argument_list>(<argument><expr><name>SFapp</name></expr></argument>, <argument><expr><operator>(</operator><name>XtWorkProc</name><operator>)</operator><name>SFworkProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SFworkProcAdded</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>SFcheckFiles</name><parameter_list>(<parameter><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>oldc</name></decl>, <decl><type ref="prev"/><name>newc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stat_T</name></type> <name>statBuf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>+</operator> <name>SFlistSize</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&gt;</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>from</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>to</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>real</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>oldc</name> <operator>=</operator> <name><name>str</name><index>[<expr><name>last</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statBuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newc</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>newc</name> <operator>=</operator> <call><name>SFstatChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>statBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <name>newc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newc</name> <operator>!=</operator> <name>oldc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFdirModTimer</name><parameter_list>(<parameter><decl><type><name>XtPointer</name> <name>cl</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>XtIntervalId</name> <modifier>*</modifier><name>id</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>n</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>SFtwiddle</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>SFdirPtr</name> <operator>&lt;</operator> <name>SFdirEnd</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>SFdirPtr</name> <operator>+</operator> <name>n</name> <operator>&gt;=</operator> <name>SFdirEnd</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>SFdirPtr</name> <operator>+</operator> <name>f</name> <operator>&gt;=</operator> <name>SFdirEnd</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><name>SFdirPtr</name> <operator>+</operator> <name>n</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>save</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>path</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>path</name></name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SFchdir</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>path</name></name><operator>)</operator> <operator>=</operator> <name>save</name></expr>;</expr_stmt>




<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>dir</name></name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SFupdatePath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>path</name></name><operator>)</operator> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SFcheckDir</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>(</operator><name>f</name> <operator>==</operator> <name>n</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>SFcheckFiles</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFdrawList</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>SF_DO_SCROLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>SFdirModTimerId</name> <operator>=</operator> <call><name>XtAppAddTimeOut</name><argument_list>(<argument><expr><name>SFapp</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <literal type="number">1000</literal></expr></argument>,
<argument><expr><name>SFdirModTimer</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>char</name></type>
<name>SFstatChar</name><parameter_list>(<parameter><decl><type><name>stat_T</name> <modifier>*</modifier></type><name>statBuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name> <argument_list>(<argument><expr><name><name>statBuf</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="char">'/'</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name> <argument_list>(<argument><expr><name><name>statBuf</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><call><name>S_ISXXX</name> <argument_list>(<argument><expr><name><name>statBuf</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'*'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>S_ISSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>S_ISSOCK</name> <argument_list>(<argument><expr><name><name>statBuf</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="char">'='</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<return>return <expr><literal type="char">' '</literal></expr>;</return>
</block_content>}</block></function>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/Cardinals.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/Cardinals.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_DEFAULT_FONT</name></cpp:macro> <cpp:value>"-misc-fixed-medium-r-normal--14-*"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_DEFAULT_FONT</name></cpp:macro> <cpp:value>"9x15"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ABS</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &lt; 0) ? (-(x)) : (x))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fontname</name></decl>;</decl_stmt>
}</block></struct></type> <name>TextData</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>GC</name></type> <name>SFlineGC</name></decl>, <decl><type ref="prev"/><name>SFscrollGC</name></decl>, <decl><type ref="prev"/><name>SFinvertGC</name></decl>, <decl><type ref="prev"/><name>SFtextGC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtResource</name></type> <name><name>textResources</name><index>[]</index></name> <init>=
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>XtNfontSet</name></expr>, <expr><name>XtCFontSet</name></expr>, <expr><name>XtRString</name></expr>, <expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,
<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>TextData</name></expr></argument>, <argument><expr><name>fontname</name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRString</name></expr>, <expr><name>SF_DEFAULT_FONT</name></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><name>XtNfont</name></expr>, <expr><name>XtCFont</name></expr>, <expr><name>XtRString</name></expr>, <expr><sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,
<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>TextData</name></expr></argument>, <argument><expr><name>fontname</name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRString</name></expr>, <expr><name>SF_DEFAULT_FONT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>XFontSet</name></type> <name>SFfont</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>XFontStruct</name> <modifier>*</modifier></type><name>SFfont</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFcurrentListY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtIntervalId</name></type> <name>SFscrollTimerId</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFinitFont</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TextData</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>XFontSetExtents</name> <modifier>*</modifier></type><name>extents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>missing</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>def_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_missing</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>XtNew</name><argument_list>(<argument><expr><name>TextData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtGetApplicationResources</name><argument_list>(<argument><expr><name>selFileForm</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>data</name></expr></argument>, <argument><expr><name>textResources</name></expr></argument>,
<argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>textResources</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>Arg</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>SFfont</name> <operator>=</operator> <call><name>XCreateFontSet</name><argument_list>(<argument><expr><name>SFdisplay</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fontname</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>missing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_missing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>def_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>SFfont</name> <operator>=</operator> <call><name>XLoadQueryFont</name><argument_list>(<argument><expr><name>SFdisplay</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fontname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SFfont</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>SFfont</name> <operator>=</operator> <call><name>XCreateFontSet</name><argument_list>(<argument><expr><name>SFdisplay</name></expr></argument>, <argument><expr><name>SF_DEFAULT_FONT</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>missing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_missing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>def_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>SFfont</name> <operator>=</operator> <call><name>XLoadQueryFont</name><argument_list>(<argument><expr><name>SFdisplay</name></expr></argument>, <argument><expr><name>SF_DEFAULT_FONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SFfont</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E616: vim_SelFile: can't get font %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SF_DEFAULT_FONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SFstatus</name> <operator>=</operator> <name>SEL_FILE_CANCEL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>extents</name> <operator>=</operator> <call><name>XExtentsOfFontSet</name><argument_list>(<argument><expr><name>SFfont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SFcharWidth</name> <operator>=</operator> <name><name>extents</name><operator>-&gt;</operator><name>max_logical_extent</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>SFcharAscent</name> <operator>=</operator> <operator>-</operator><name><name>extents</name><operator>-&gt;</operator><name>max_logical_extent</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>SFcharHeight</name> <operator>=</operator> <name><name>extents</name><operator>-&gt;</operator><name>max_logical_extent</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>SFcharWidth</name> <operator>=</operator> <operator>(</operator><name><name>SFfont</name><operator>-&gt;</operator><name>max_bounds</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name><name>SFfont</name><operator>-&gt;</operator><name>min_bounds</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>SFcharAscent</name> <operator>=</operator> <name><name>SFfont</name><operator>-&gt;</operator><name>max_bounds</name><operator>.</operator><name>ascent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>SFcharHeight</name> <operator>=</operator> <name>SFcharAscent</name> <operator>+</operator> <name><name>SFfont</name><operator>-&gt;</operator><name>max_bounds</name><operator>.</operator><name>descent</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFcreateGC</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XGCValues</name></type> <name>gcValues</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XRectangle</name></type> <name><name>rectangles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>gcValues</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name>SFfore</name></expr>;</expr_stmt>

<expr_stmt><expr><name>SFlineGC</name> <operator>=</operator> <call><name>XtGetGC</name><argument_list>(
<argument><expr><name><name>selFileLists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>XtGCMask</name><operator>)</operator><name>GCForeground</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>gcValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SFscrollGC</name> <operator>=</operator> <call><name>XtGetGC</name><argument_list>(
<argument><expr><name><name>selFileLists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>XtGCMask</name><operator>)</operator><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>gcValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gcValues</name><operator>.</operator><name>function</name></name> <operator>=</operator> <name>GXxor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gcValues</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name>SFfore</name> <operator>^</operator> <name>SFback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gcValues</name><operator>.</operator><name>background</name></name> <operator>=</operator> <name>SFfore</name> <operator>^</operator> <name>SFback</name></expr>;</expr_stmt>

<expr_stmt><expr><name>SFinvertGC</name> <operator>=</operator> <call><name>XtGetGC</name><argument_list>(
<argument><expr><name><name>selFileLists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>XtGCMask</name><operator>)</operator><name>GCFunction</name> <operator>|</operator> <name>GCForeground</name> <operator>|</operator> <name>GCBackground</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>gcValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gcValues</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name>SFfore</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gcValues</name><operator>.</operator><name>background</name></name> <operator>=</operator> <name>SFback</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gcValues</name><operator>.</operator><name>font</name></name> <operator>=</operator> <name><name>SFfont</name><operator>-&gt;</operator><name>fid</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>SFtextGC</name> <operator>=</operator> <call><name>XCreateGC</name><argument_list>(
<argument><expr><name>SFdisplay</name></expr></argument>,
<argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name><name>selFileLists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>GCForeground</name> <operator>|</operator> <name>GCBackground</name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>GCForeground</name> <operator>|</operator> <name>GCBackground</name> <operator>|</operator> <name>GCFont</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><operator>&amp;</operator><name>gcValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rectangles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>SFlineToTextH</name> <operator>+</operator> <name>SFbesideText</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rectangles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rectangles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>SFcharsPerEntry</name> <operator>*</operator> <name>SFcharWidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rectangles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name>SFupperY</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetClipRectangles</name><argument_list>(
<argument><expr><name>SFdisplay</name></expr></argument>,
<argument><expr><name>SFtextGC</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>rectangles</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>Unsorted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFclearList</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doScroll</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>SFcurrentInvert</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XClearWindow</name><argument_list>(<argument><expr><name>SFdisplay</name></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name><name>selFileLists</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XDrawSegments</name><argument_list>(<argument><expr><name>SFdisplay</name></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name><name>selFileLists</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SFlineGC</name></expr></argument>, <argument><expr><name>SFsegs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>doScroll</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><name>SFdirPtr</name> <operator>+</operator> <name>n</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>SFdirPtr</name> <operator>+</operator> <name>n</name> <operator>&lt;</operator> <name>SFdirEnd</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>&amp;&amp;</operator> <name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XawScrollbarSetThumb</name><argument_list>(
<argument><expr><name><name>selFileVScrolls</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name><operator>)</operator> <operator>/</operator>
<name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>&lt;</operator> <name>SFlistSize</name><operator>)</operator></expr>
?</condition><then> <expr><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr> </then><else>: <expr><name>SFlistSize</name></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator>
<name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vim_XawScrollbarSetThumb</name><argument_list>(
<argument><expr><name><name>selFileVScrolls</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name><operator>)</operator> <operator>/</operator>
<name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>&lt;</operator> <name>SFlistSize</name><operator>)</operator></expr>
?</condition><then> <expr><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr> </then><else>: <expr><name>SFlistSize</name></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator>
<name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XawScrollbarSetThumb</name><argument_list>(
<argument><expr><name><name>selFileHScrolls</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>dir</name><operator>-&gt;</operator><name>hOrigin</name></name><operator>)</operator> <operator>/</operator> <name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name> <operator>&lt;</operator>
<name>SFcharsPerEntry</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name></expr> </then><else>:
<expr><name>SFcharsPerEntry</name></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vim_XawScrollbarSetThumb</name><argument_list>(
<argument><expr><name><name>selFileHScrolls</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>dir</name><operator>-&gt;</operator><name>hOrigin</name></name><operator>)</operator> <operator>/</operator> <name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name> <operator>&lt;</operator>
<name>SFcharsPerEntry</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name></expr> </then><else>:
<expr><name>SFcharsPerEntry</name></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XawScrollbarSetThumb</name><argument_list>(<argument><expr><name><name>selFileVScrolls</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0.0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vim_XawScrollbarSetThumb</name><argument_list>(<argument><expr><name><name>selFileVScrolls</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0.0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XawScrollbarSetThumb</name><argument_list>(<argument><expr><name><name>selFileHScrolls</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0.0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vim_XawScrollbarSetThumb</name><argument_list>(<argument><expr><name><name>selFileHScrolls</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0.0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFdeleteEntry</name><parameter_list>(<parameter><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>SFEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SFEntry</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SFEntry</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>entry</name> <operator>-</operator> <name><name>dir</name><operator>-&gt;</operator><name>entries</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;=</operator> <name><name>dir</name><operator>-&gt;</operator><name>endSelection</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>endSelection</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name> <operator>&gt;</operator> <name><name>dir</name><operator>-&gt;</operator><name>endSelection</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>endSelection</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <name>entry</name></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>e</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>--</operator><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>dir</name> <operator>-</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><name>SFdirPtr</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XawScrollbarSetThumb</name><argument_list>(
<argument><expr><name><name>selFileVScrolls</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name><operator>)</operator> <operator>/</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>&lt;</operator> <name>SFlistSize</name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr> </then><else>: <expr><name>SFlistSize</name></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vim_XawScrollbarSetThumb</name><argument_list>(
<argument><expr><name><name>selFileVScrolls</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name><operator>)</operator> <operator>/</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>&lt;</operator> <name>SFlistSize</name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr> </then><else>: <expr><name>SFlistSize</name></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFwriteStatChar</name><parameter_list>(
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter>,
<parameter><decl><type><name>stat_T</name> <modifier>*</modifier></type><name>statBuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <call><name>SFstatChar</name><argument_list>(<argument><expr><name>statBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>SFstatAndCheck</name><parameter_list>(<parameter><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>SFEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stat_T</name></type> <name>statBuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>




<expr_stmt><expr><name>save</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>path</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>path</name></name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SFchdir</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>real</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>real</name><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>statDone</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>mch_stat</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statBuf</name></expr></argument>)</argument_list></call><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>S_IFLNK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><operator>!</operator><call><name>mch_lstat</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statBuf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>SFfunc</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shown</name></decl>;</decl_stmt>

<expr_stmt><expr><name>shown</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SFfunc</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shown</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statBuf</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shown</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>shown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>shown</name></name> <operator>=</operator> <call><name>XtMalloc</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>shown</name></name></expr></argument>, <argument><expr><name>shown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFwriteStatChar</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>shown</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>shown</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>SFdeleteEntry</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>path</name></name><operator>)</operator> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SFwriteStatChar</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>real</name></name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>real</name><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>path</name></name><operator>)</operator> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFdrawStrings</name><parameter_list>(
<parameter><decl><type><name>Window</name></type> <name>w</name></decl></parameter>,
<parameter><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SFEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>SFtextX</name> <operator>-</operator> <name><name>dir</name><operator>-&gt;</operator><name>hOrigin</name></name> <operator>*</operator> <name>SFcharWidth</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>+</operator> <name>to</name> <operator>&gt;=</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>-</operator> <name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>from</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>to</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>statDone</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>SFstatAndCheck</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>+</operator> <name>to</name> <operator>&gt;=</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>-</operator> <name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XmbDrawImageString</name><argument_list>(
<argument><expr><name>SFdisplay</name></expr></argument>,
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>SFfont</name></expr></argument>,
<argument><expr><name>SFtextGC</name></expr></argument>,
<argument><expr><name>x</name></expr></argument>,
<argument><expr><name>SFtextYoffset</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>SFentryHeight</name></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>shown</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>shown</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>XDrawImageString</name><argument_list>(
<argument><expr><name>SFdisplay</name></expr></argument>,
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>SFtextGC</name></expr></argument>,
<argument><expr><name>x</name></expr></argument>,
<argument><expr><name>SFtextYoffset</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>SFentryHeight</name></expr></argument>,
<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>shown</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>shown</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>+</operator> <name>i</name> <operator>==</operator> <name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XDrawLine</name><argument_list>(
<argument><expr><name>SFdisplay</name></expr></argument>,
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>SFlineGC</name></expr></argument>,
<argument><expr><name>SFlineToTextH</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>SFlowerY</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>SFentryHeight</name></expr></argument>,
<argument><expr><name>SFlineToTextH</name> <operator>+</operator> <name>SFentryWidth</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>SFlowerY</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>SFentryHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>+</operator> <name>i</name> <operator>&gt;=</operator> <name><name>dir</name><operator>-&gt;</operator><name>beginSelection</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>+</operator> <name>i</name> <operator>&lt;=</operator> <name><name>dir</name><operator>-&gt;</operator><name>endSelection</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>SFcompletionSegs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y1</name> <operator>=</operator> <name><name>SFcompletionSegs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y1</name> <operator>=</operator>
<name>SFlowerY</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>SFentryHeight</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFcompletionSegs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y2</name> <operator>=</operator> <name><name>SFcompletionSegs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y2</name> <operator>=</operator>
<name>SFlowerY</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>SFentryHeight</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XDrawSegments</name><argument_list>(
<argument><expr><name>SFdisplay</name></expr></argument>,
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>SFlineGC</name></expr></argument>,
<argument><expr><name>SFcompletionSegs</name></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>+</operator> <name>i</name> <operator>==</operator> <name><name>dir</name><operator>-&gt;</operator><name>endSelection</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XDrawLine</name><argument_list>(
<argument><expr><name>SFdisplay</name></expr></argument>,
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>SFlineGC</name></expr></argument>,
<argument><expr><name>SFlineToTextH</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>SFlowerY</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>SFentryHeight</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>SFlineToTextH</name> <operator>+</operator> <name>SFentryWidth</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>SFlowerY</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>SFentryHeight</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFdrawList</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>doScroll</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SFclearList</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>doScroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>SFdirPtr</name> <operator>+</operator> <name>n</name> <operator>&lt;</operator> <name>SFdirEnd</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><name>SFdirPtr</name> <operator>+</operator> <name>n</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>XtWindow</name><argument_list>(<argument><expr><name><name>selFileLists</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XmbDrawImageString</name><argument_list>(
<argument><expr><name>SFdisplay</name></expr></argument>,
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>SFfont</name></expr></argument>,
<argument><expr><name>SFtextGC</name></expr></argument>,
<argument><expr><name>SFtextX</name> <operator>-</operator> <name><name>dir</name><operator>-&gt;</operator><name>hOrigin</name></name> <operator>*</operator> <name>SFcharWidth</name></expr></argument>,
<argument><expr><name>SFlineToTextV</name> <operator>+</operator> <name>SFaboveAndBelowText</name> <operator>+</operator> <name>SFcharAscent</name></expr></argument>,
<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>XDrawImageString</name><argument_list>(
<argument><expr><name>SFdisplay</name></expr></argument>,
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>SFtextGC</name></expr></argument>,
<argument><expr><name>SFtextX</name> <operator>-</operator> <name><name>dir</name><operator>-&gt;</operator><name>hOrigin</name></name> <operator>*</operator> <name>SFcharWidth</name></expr></argument>,
<argument><expr><name>SFlineToTextV</name> <operator>+</operator> <name>SFaboveAndBelowText</name> <operator>+</operator> <name>SFcharAscent</name></expr></argument>,
<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SFdrawStrings</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SFlistSize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFdrawLists</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doScroll</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFdrawList</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>doScroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFinvertEntry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(
<argument><expr><name>SFdisplay</name></expr></argument>,
<argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name><name>selFileLists</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SFinvertGC</name></expr></argument>,
<argument><expr><name>SFlineToTextH</name></expr></argument>,
<argument><expr><name><name>SFcurrentInvert</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>SFentryHeight</name> <operator>+</operator> <name>SFlowerY</name></expr></argument>,
<argument><expr><name>SFentryWidth</name></expr></argument>,
<argument><expr><name>SFentryHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type>
<name>SFscrollTimerInterval</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>maxVal</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>varyDist</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>minDist</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dist</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>SFcurrentListY</name> <operator>&lt;</operator> <name>SFlowerY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dist</name> <operator>=</operator> <name>SFlowerY</name> <operator>-</operator> <name>SFcurrentListY</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>SFcurrentListY</name> <operator>&gt;</operator> <name>SFupperY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dist</name> <operator>=</operator> <name>SFcurrentListY</name> <operator>-</operator> <name>SFupperY</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>maxVal</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>maxVal</name> <operator>/</operator> <name>varyDist</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>dist</name> <operator>-</operator> <name>minDist</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <name>maxVal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>maxVal</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>t</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFscrollTimer</name><parameter_list>(<parameter><decl><type><name>XtPointer</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>XtIntervalId</name> <modifier>*</modifier><name>id</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><name>SFdirPtr</name> <operator>+</operator> <name>n</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>save</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>SFcurrentListY</name> <operator>&lt;</operator> <name>SFlowerY</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFvSliderMovedCallback</name><argument_list>(<argument><expr><name><name>selFileVScrolls</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>SFcurrentListY</name> <operator>&gt;</operator> <name>SFupperY</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>&lt;</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>-</operator> <name>SFlistSize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFvSliderMovedCallback</name><argument_list>(<argument><expr><name><name>selFileVScrolls</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>!=</operator> <name>save</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XawScrollbarSetThumb</name><argument_list>(
<argument><expr><name><name>selFileVScrolls</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name><operator>)</operator> <operator>/</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>&lt;</operator> <name>SFlistSize</name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr> </then><else>: <expr><name>SFlistSize</name></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vim_XawScrollbarSetThumb</name><argument_list>(
<argument><expr><name><name>selFileVScrolls</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name><operator>)</operator> <operator>/</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>&lt;</operator> <name>SFlistSize</name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr> </then><else>: <expr><name>SFlistSize</name></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>SFbuttonPressed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>SFscrollTimerId</name> <operator>=</operator> <call><name>XtAppAddTimeOut</name><argument_list>(<argument><expr><name>SFapp</name></expr></argument>,
<argument><expr><call><name>SFscrollTimerInterval</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SFscrollTimer</name></expr></argument>,
<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>long_u</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>SFnewInvertEntry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>XMotionEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>SFscrollTimerAdded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>SFdirPtr</name> <operator>+</operator> <name>n</name> <operator>&gt;=</operator> <name>SFdirEnd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;=</operator> <name>SFupperX</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>&gt;=</operator> <name>SFlowerY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>&lt;=</operator> <name>SFupperY</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><name>SFdirPtr</name> <operator>+</operator> <name>n</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>SFscrollTimerAdded</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>SFscrollTimerAdded</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtRemoveTimeOut</name><argument_list>(<argument><expr><name>SFscrollTimerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nw</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>-</operator> <name>SFlowerY</name><operator>)</operator> <operator>/</operator> <name>SFentryHeight</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>+</operator> <name>nw</name> <operator>&gt;=</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>nw</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>SFbuttonPressed</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>SFcurrentListY</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SFscrollTimerAdded</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>SFscrollTimerAdded</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>SFscrollTimerId</name> <operator>=</operator> <call><name>XtAppAddTimeOut</name><argument_list>(<argument><expr><name>SFapp</name></expr></argument>,
<argument><expr><call><name>SFscrollTimerInterval</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SFscrollTimer</name></expr></argument>,
<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>long_u</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFenterList</name><parameter_list>(<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>XEnterWindowEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nw</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>SFcurrentInvert</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SFinvertEntry</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFcurrentInvert</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nw</name> <operator>=</operator> <call><name>SFnewInvertEntry</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>XMotionEvent</name> <operator>*</operator><operator>)</operator> <name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>SFcurrentInvert</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>nw</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFinvertEntry</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFleaveList</name><parameter_list>(<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier><name>event</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>SFcurrentInvert</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SFinvertEntry</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFcurrentInvert</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFmotionList</name><parameter_list>(<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>XMotionEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nw</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nw</name> <operator>=</operator> <call><name>SFnewInvertEntry</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>!=</operator> <name><name>SFcurrentInvert</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>SFcurrentInvert</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFinvertEntry</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>SFcurrentInvert</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>nw</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFinvertEntry</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFvFloatSliderMovedCallback</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type> <name>fnew</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nw</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nw</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>fnew</name><operator>)</operator> <operator>*</operator> <name><name>SFdirs</name><index>[<expr><name>SFdirPtr</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>n</name></expr>]</index></name><operator>.</operator><name>nEntries</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFvSliderMovedCallback</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>nw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFvSliderMovedCallback</name><parameter_list>(<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><name>SFdirPtr</name> <operator>+</operator> <name>n</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>old</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name> <operator>=</operator> <name>nw</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <name>nw</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>win</name> <operator>=</operator> <call><name>XtWindow</name><argument_list>(<argument><expr><name><name>selFileLists</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ABS</name><argument_list>(<argument><expr><name>nw</name> <operator>-</operator> <name>old</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>SFlistSize</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>&gt;</operator> <name>old</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XCopyArea</name><argument_list>(
<argument><expr><name>SFdisplay</name></expr></argument>,
<argument><expr><name>win</name></expr></argument>,
<argument><expr><name>win</name></expr></argument>,
<argument><expr><name>SFscrollGC</name></expr></argument>,
<argument><expr><name>SFlineToTextH</name></expr></argument>,
<argument><expr><name>SFlowerY</name> <operator>+</operator> <operator>(</operator><name>nw</name> <operator>-</operator> <name>old</name><operator>)</operator> <operator>*</operator> <name>SFentryHeight</name></expr></argument>,
<argument><expr><name>SFentryWidth</name> <operator>+</operator> <name>SFlineToTextH</name></expr></argument>,
<argument><expr><operator>(</operator><name>SFlistSize</name> <operator>-</operator> <operator>(</operator><name>nw</name> <operator>-</operator> <name>old</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>SFentryHeight</name></expr></argument>,
<argument><expr><name>SFlineToTextH</name></expr></argument>,
<argument><expr><name>SFlowerY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XClearArea</name><argument_list>(
<argument><expr><name>SFdisplay</name></expr></argument>,
<argument><expr><name>win</name></expr></argument>,
<argument><expr><name>SFlineToTextH</name></expr></argument>,
<argument><expr><name>SFlowerY</name> <operator>+</operator> <operator>(</operator><name>SFlistSize</name> <operator>-</operator> <operator>(</operator><name>nw</name> <operator>-</operator> <name>old</name><operator>)</operator><operator>)</operator> <operator>*</operator>
<name>SFentryHeight</name></expr></argument>,
<argument><expr><name>SFentryWidth</name> <operator>+</operator> <name>SFlineToTextH</name></expr></argument>,
<argument><expr><operator>(</operator><name>nw</name> <operator>-</operator> <name>old</name><operator>)</operator> <operator>*</operator> <name>SFentryHeight</name></expr></argument>,
<argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFdrawStrings</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>SFlistSize</name> <operator>-</operator> <operator>(</operator><name>nw</name> <operator>-</operator> <name>old</name><operator>)</operator></expr></argument>,
<argument><expr><name>SFlistSize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>XCopyArea</name><argument_list>(
<argument><expr><name>SFdisplay</name></expr></argument>,
<argument><expr><name>win</name></expr></argument>,
<argument><expr><name>win</name></expr></argument>,
<argument><expr><name>SFscrollGC</name></expr></argument>,
<argument><expr><name>SFlineToTextH</name></expr></argument>,
<argument><expr><name>SFlowerY</name></expr></argument>,
<argument><expr><name>SFentryWidth</name> <operator>+</operator> <name>SFlineToTextH</name></expr></argument>,
<argument><expr><operator>(</operator><name>SFlistSize</name> <operator>-</operator> <operator>(</operator><name>old</name> <operator>-</operator> <name>nw</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>SFentryHeight</name></expr></argument>,
<argument><expr><name>SFlineToTextH</name></expr></argument>,
<argument><expr><name>SFlowerY</name> <operator>+</operator> <operator>(</operator><name>old</name> <operator>-</operator> <name>nw</name><operator>)</operator> <operator>*</operator> <name>SFentryHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XClearArea</name><argument_list>(
<argument><expr><name>SFdisplay</name></expr></argument>,
<argument><expr><name>win</name></expr></argument>,
<argument><expr><name>SFlineToTextH</name></expr></argument>,
<argument><expr><name>SFlowerY</name></expr></argument>,
<argument><expr><name>SFentryWidth</name> <operator>+</operator> <name>SFlineToTextH</name></expr></argument>,
<argument><expr><operator>(</operator><name>old</name> <operator>-</operator> <name>nw</name><operator>)</operator> <operator>*</operator> <name>SFentryHeight</name></expr></argument>,
<argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFdrawStrings</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>old</name> <operator>-</operator> <name>nw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>XClearArea</name><argument_list>(
<argument><expr><name>SFdisplay</name></expr></argument>,
<argument><expr><name>win</name></expr></argument>,
<argument><expr><name>SFlineToTextH</name></expr></argument>,
<argument><expr><name>SFlowerY</name></expr></argument>,
<argument><expr><name>SFentryWidth</name> <operator>+</operator> <name>SFlineToTextH</name></expr></argument>,
<argument><expr><name>SFlistSize</name> <operator>*</operator> <name>SFentryHeight</name></expr></argument>,
<argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFdrawStrings</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SFlistSize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFvAreaSelectedCallback</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type> <name>pnew</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nw</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>pnew</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><name>SFdirPtr</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>n</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>&gt;</operator> <operator>-</operator><name>SFvScrollHeight</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <operator>-</operator><name>SFlistSize</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>nw</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>&lt;</operator> <name>SFvScrollHeight</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <name>SFlistSize</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>nw</name> <operator>+=</operator> <name><name>dir</name><operator>-&gt;</operator><name>vOrigin</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>&gt;</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>-</operator> <name>SFlistSize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>-</operator> <name>SFlistSize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>nw</name><operator>)</operator> <operator>/</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XawScrollbarSetThumb</name><argument_list>(
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>f</name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>&lt;</operator> <name>SFlistSize</name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr> </then><else>: <expr><name>SFlistSize</name></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vim_XawScrollbarSetThumb</name><argument_list>(
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>f</name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>&lt;</operator> <name>SFlistSize</name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr> </then><else>: <expr><name>SFlistSize</name></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SFvSliderMovedCallback</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>nw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFhSliderMovedCallback</name><parameter_list>(<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type> <name>nw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><name>SFdirPtr</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>n</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>save</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>hOrigin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>hOrigin</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>nw</name><operator>)</operator> <operator>*</operator> <name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>hOrigin</name></name> <operator>==</operator> <name>save</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SFdrawList</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>SF_DO_NOT_SCROLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFhAreaSelectedCallback</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type> <name>pnew</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nw</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>pnew</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><name>SFdirPtr</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>n</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>&gt;</operator> <operator>-</operator><name>SFhScrollWidth</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <operator>-</operator><name>SFcharsPerEntry</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>nw</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>&lt;</operator> <name>SFhScrollWidth</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <name>SFcharsPerEntry</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>nw</name> <operator>+=</operator> <name><name>dir</name><operator>-&gt;</operator><name>hOrigin</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>&gt;</operator> <name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name> <operator>-</operator> <name>SFcharsPerEntry</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name> <operator>-</operator> <name>SFcharsPerEntry</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>nw</name><operator>)</operator> <operator>/</operator> <name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XawScrollbarSetThumb</name><argument_list>(
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>f</name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name> <operator>&lt;</operator> <name>SFcharsPerEntry</name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name></expr> </then><else>: <expr><name>SFcharsPerEntry</name></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vim_XawScrollbarSetThumb</name><argument_list>(
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>f</name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name> <operator>&lt;</operator> <name>SFcharsPerEntry</name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name></expr> </then><else>: <expr><name>SFcharsPerEntry</name></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>SFhSliderMovedCallback</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFpathSliderMovedCallback</name><parameter_list>(
<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>XtPointer</name> <name>client_data</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>XtPointer</name></type> <name>nw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XawTextPosition</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>SFdirPtrSave</name></decl>;</decl_stmt>

<expr_stmt><expr><name>SFdirPtrSave</name> <operator>=</operator> <name>SFdirPtr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SFdirPtr</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>nw</name><operator>)</operator> <operator>*</operator> <name>SFdirEnd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>SFdirPtr</name> <operator>==</operator> <name>SFdirPtrSave</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SFdrawLists</name><argument_list>(<argument><expr><name>SF_DO_SCROLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>SFdirPtr</name> <operator>+</operator> <name>n</name> <operator>&gt;=</operator> <name>SFdirEnd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><name>SFdirPtr</name> <operator>+</operator> <name>n</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>path</name></name> <operator>-</operator> <name>SFcurrentPath</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>, <argument><expr><name>SFstartDir</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>SFstartDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>-=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>SFstartDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XawTextSetInsertionPoint</name><argument_list>(<argument><expr><name>selFileField</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFpathAreaSelectedCallback</name><parameter_list>(
<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,
<parameter><decl><type><name>XtPointer</name> <name>client_data</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>XtPointer</name></type> <name>pnew</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nw</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>pnew</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>&gt;</operator> <operator>-</operator><name>SFpathScrollWidth</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>nw</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>&lt;</operator> <name>SFpathScrollWidth</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>nw</name> <operator>+=</operator> <name>SFdirPtr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>&gt;</operator> <name>SFdirEnd</name> <operator>-</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <name>SFdirEnd</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nw</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>nw</name><operator>)</operator> <operator>/</operator> <name>SFdirEnd</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XawScrollbarSetThumb</name><argument_list>(
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>f</name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>SFdirEnd</name> <operator>&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><name>SFdirEnd</name></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator> <name>SFdirEnd</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vim_XawScrollbarSetThumb</name><argument_list>(
<argument><expr><name>w</name></expr></argument>,
<argument><expr><name>f</name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>SFdirEnd</name> <operator>&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><name>SFdirEnd</name></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator> <name>SFdirEnd</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>SFdirEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>SFpathSliderMovedCallback</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Boolean</name></type>
<name>SFworkProc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SFEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>SFdirs</name><index>[<expr><name>SFdirEnd</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</init> <condition><expr><name>dir</name> <operator>&gt;=</operator> <name>SFdirs</name></expr>;</condition> <incr><expr><name>dir</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>entry</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</init>
<condition><expr><name>entry</name> <operator>&gt;=</operator> <name><name>dir</name><operator>-&gt;</operator><name>entries</name></name></expr>;</condition>
<incr><expr><name>entry</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>statDone</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SFstatAndCheck</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>False</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>SFworkProcAdded</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>True</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>SFcompareEntries</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SFEntry</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>real</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SFEntry</name> <operator>*</operator><operator>)</operator><name>q</name><operator>)</operator><operator>-&gt;</operator><name>real</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>SFgetDir</name><parameter_list>(
<parameter><decl><type><name>SFDir</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SFEntry</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Alloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dirp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxChars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stat_T</name></type> <name>statBuf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>maxChars</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dirp</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dirp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mch_stat</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>statBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <name><name>statBuf</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>dp</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>Alloc</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>Alloc</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>Alloc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>SFEntry</name> <operator>*</operator><operator>)</operator> <call><name>XtRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>result</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name>Alloc</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFEntry</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>statDone</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>real</name> <operator>=</operator> <call><name>XtMalloc</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcat</name><argument_list>(<argument><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>real</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>maxChars</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxChars</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>shown</name> <operator>=</operator> <name><name>result</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>real</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>result</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>SFcompareEntries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>nEntries</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>nChars</name></name> <operator>=</operator> <name>maxChars</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/cursorfont.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Composite.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Shell.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/Form.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/Command.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/Label.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/Form.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/Command.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/Label.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>oneLineTextEditTranslations</name> <init>= <expr><literal type="string">"\
&lt;Key&gt;Return: redraw-display()\n\
Ctrl&lt;Key&gt;M: redraw-display()\n\
"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFexposeList</name><parameter_list>(
<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>XtPointer</name></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>cont</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NoExpose</name><operator>)</operator> <operator>||</operator> <name><name>event</name><operator>-&gt;</operator><name>xexpose</name><operator>.</operator><name>count</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SFdrawList</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>SF_DO_NOT_SCROLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFmodVerifyCallback</name><parameter_list>(
<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>XtPointer</name> <name>client_data</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>cont</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>XLookupString</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>xkey</name></name><operator>)</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>SFstatus</name> <operator>=</operator> <name>SEL_FILE_OK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>SFstatus</name> <operator>=</operator> <name>SEL_FILE_TEXT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFokCallback</name><parameter_list>(<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>XtPointer</name> <name>cl</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>XtPointer</name> <name>cd</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>SFstatus</name> <operator>=</operator> <name>SEL_FILE_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtCallbackRec</name></type> <name><name>SFokSelect</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><name>SFokCallback</name></expr>, <expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFcancelCallback</name><parameter_list>(<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>XtPointer</name> <name>cl</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>XtPointer</name> <name>cd</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>SFstatus</name> <operator>=</operator> <name>SEL_FILE_CANCEL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtCallbackRec</name></type> <name><name>SFcancelSelect</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><name>SFcancelCallback</name></expr>, <expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFdismissAction</name><parameter_list>(
<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>String</name> <modifier>*</modifier><name>params</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>Cardinal</name> <modifier>*</modifier><name>num_params</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ClientMessage</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>Atom</name><operator>)</operator><name><name>event</name><operator>-&gt;</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>SFwmDeleteWindow</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>SFstatus</name> <operator>=</operator> <name>SEL_FILE_CANCEL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>wmDeleteWindowTranslation</name> <init>= <expr><literal type="string">"\
&lt;Message&gt;WM_PROTOCOLS: SelFileDismiss()\n\
"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtActionsRec</name></type> <name><name>actions</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="string">"SelFileDismiss"</literal></expr>, <expr><name>SFdismissAction</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFsetColors</name><parameter_list>(
<parameter><decl><type><name>guicolor_T</name></type> <name>bg</name></decl></parameter>,
<parameter><decl><type><name>guicolor_T</name></type> <name>fg</name></decl></parameter>,
<parameter><decl><type><name>guicolor_T</name></type> <name>scroll_bg</name></decl></parameter>,
<parameter><decl><type><name>guicolor_T</name></type> <name>scroll_fg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>selFileForm</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>selFileForm</name></expr></argument>, <argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>,
<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>,
<argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>selFileLists</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>selFileLists</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>,
<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>,
<argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>selFileOK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>selFileOK</name></expr></argument>, <argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>,
<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>,
<argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>selFileCancel</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>selFileCancel</name></expr></argument>, <argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>,
<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>,
<argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>selFilePrompt</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>selFilePrompt</name></expr></argument>, <argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>,
<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XSetBackground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>SFtextGC</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>SFtextGC</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>SFlineGC</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>XSetBackground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>SFinvertGC</name></expr></argument>, <argument><expr><name>fg</name> <operator>^</operator> <name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>SFinvertGC</name></expr></argument>, <argument><expr><name>fg</name> <operator>^</operator> <name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>selFileHScroll</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>selFileHScroll</name></expr></argument>, <argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name>scroll_bg</name></expr></argument>,
<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name>scroll_fg</name></expr></argument>,
<argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>selFileVScrolls</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name>scroll_bg</name></expr></argument>,
<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name>scroll_fg</name></expr></argument>,
<argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>selFileHScrolls</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name>scroll_bg</name></expr></argument>,
<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name>scroll_fg</name></expr></argument>,
<argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFcreateWidgets</name><parameter_list>(
<parameter><decl><type><name>Widget</name></type> <name>toplevel</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ok</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cancel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Cardinal</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>listWidth</name></decl>, <decl><type ref="prev"/><name>listHeight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>listSpacing</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scrollThickness</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hScrollX</name></decl>, <decl><type ref="prev"/><name>hScrollY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vScrollX</name></decl>, <decl><type ref="prev"/><name>vScrollY</name></decl>;</decl_stmt>

<expr_stmt><expr><name>selFile</name> <operator>=</operator> <call><name>XtVaAppCreateShell</name><argument_list>(<argument><expr><literal type="string">"selFile"</literal></expr></argument>, <argument><expr><literal type="string">"SelFile"</literal></expr></argument>,
<argument><expr><name>transientShellWidgetClass</name></expr></argument>, <argument><expr><name>SFdisplay</name></expr></argument>,
<argument><expr><name>XtNtransientFor</name></expr></argument>, <argument><expr><name>toplevel</name></expr></argument>,
<argument><expr><name>XtNtitle</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>XtAppAddActions</name><argument_list>(<argument><expr><call><name>XtWidgetToApplicationContext</name><argument_list>(<argument><expr><name>selFile</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>actions</name></expr></argument>, <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>actions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtOverrideTranslations</name><argument_list>(<argument><expr><name>selFile</name></expr></argument>,
<argument><expr><call><name>XtParseTranslationTable</name><argument_list>(<argument><expr><name>wmDeleteWindowTranslation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>selFileForm</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"selFileForm"</literal></expr></argument>,
<argument><expr><name>formWidgetClass</name></expr></argument>, <argument><expr><name>selFile</name></expr></argument>,
<argument><expr><name>XtNdefaultDistance</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>,
<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name>SFfore</name></expr></argument>,
<argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name>SFback</name></expr></argument>,
<argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name>SFback</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>selFilePrompt</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"selFilePrompt"</literal></expr></argument>,
<argument><expr><name>labelWidgetClass</name></expr></argument>, <argument><expr><name>selFileForm</name></expr></argument>,
<argument><expr><name>XtNlabel</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>,
<argument><expr><name>XtNresizable</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,
<argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,
<argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,
<argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,
<argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,
<argument><expr><name>XtNborderWidth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name>SFfore</name></expr></argument>,
<argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name>SFback</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><call><name>SFinitFont</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SFentryWidth</name> <operator>=</operator> <name>SFbesideText</name> <operator>+</operator> <name>SFcharsPerEntry</name> <operator>*</operator> <name>SFcharWidth</name> <operator>+</operator>
<name>SFbesideText</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SFentryHeight</name> <operator>=</operator> <name>SFaboveAndBelowText</name> <operator>+</operator> <name>SFcharHeight</name> <operator>+</operator>
<name>SFaboveAndBelowText</name></expr>;</expr_stmt>

<expr_stmt><expr><name>listWidth</name> <operator>=</operator> <name>SFlineToTextH</name> <operator>+</operator> <name>SFentryWidth</name> <operator>+</operator> <name>SFlineToTextH</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>
<name>scrollThickness</name></expr>;</expr_stmt>
<expr_stmt><expr><name>listHeight</name> <operator>=</operator> <name>SFlineToTextV</name> <operator>+</operator> <name>SFentryHeight</name> <operator>+</operator> <name>SFlineToTextV</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>
<name>SFlineToTextV</name> <operator>+</operator> <name>SFlistSize</name> <operator>*</operator> <name>SFentryHeight</name> <operator>+</operator>
<name>SFlineToTextV</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>scrollThickness</name></expr>;</expr_stmt>

<expr_stmt><expr><name>SFpathScrollWidth</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>listWidth</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>listSpacing</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hScrollX</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hScrollY</name> <operator>=</operator> <name>SFlineToTextV</name> <operator>+</operator> <name>SFentryHeight</name> <operator>+</operator> <name>SFlineToTextV</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>
<name>SFlineToTextV</name> <operator>+</operator> <name>SFlistSize</name> <operator>*</operator> <name>SFentryHeight</name> <operator>+</operator>
<name>SFlineToTextV</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SFhScrollWidth</name> <operator>=</operator> <name>SFlineToTextH</name> <operator>+</operator> <name>SFentryWidth</name> <operator>+</operator> <name>SFlineToTextH</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vScrollX</name> <operator>=</operator> <name>SFlineToTextH</name> <operator>+</operator> <name>SFentryWidth</name> <operator>+</operator> <name>SFlineToTextH</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vScrollY</name> <operator>=</operator> <name>SFlineToTextV</name> <operator>+</operator> <name>SFentryHeight</name> <operator>+</operator> <name>SFlineToTextV</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SFvScrollHeight</name> <operator>=</operator> <name>SFlineToTextV</name> <operator>+</operator> <name>SFlistSize</name> <operator>*</operator> <name>SFentryHeight</name> <operator>+</operator>
<name>SFlineToTextV</name></expr>;</expr_stmt>

<expr_stmt><expr><name>SFupperX</name> <operator>=</operator> <name>SFlineToTextH</name> <operator>+</operator> <name>SFentryWidth</name> <operator>+</operator> <name>SFlineToTextH</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>SFlowerY</name> <operator>=</operator> <name>SFlineToTextV</name> <operator>+</operator> <name>SFentryHeight</name> <operator>+</operator> <name>SFlineToTextV</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>
<name>SFlineToTextV</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SFupperY</name> <operator>=</operator> <name>SFlineToTextV</name> <operator>+</operator> <name>SFentryHeight</name> <operator>+</operator> <name>SFlineToTextV</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>
<name>SFlineToTextV</name> <operator>+</operator> <name>SFlistSize</name> <operator>*</operator> <name>SFentryHeight</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>SFtextX</name> <operator>=</operator> <name>SFlineToTextH</name> <operator>+</operator> <name>SFbesideText</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SFtextYoffset</name> <operator>=</operator> <name>SFlowerY</name> <operator>+</operator> <name>SFaboveAndBelowText</name> <operator>+</operator> <name>SFcharAscent</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>SFsegs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFsegs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y1</name> <operator>=</operator> <name>vScrollY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFsegs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x2</name> <operator>=</operator> <name>vScrollX</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFsegs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y2</name> <operator>=</operator> <name>vScrollY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFsegs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x1</name> <operator>=</operator> <name>vScrollX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFsegs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFsegs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x2</name> <operator>=</operator> <name>vScrollX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFsegs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y2</name> <operator>=</operator> <name>vScrollY</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>SFcompletionSegs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x1</name> <operator>=</operator> <name><name>SFcompletionSegs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x2</name> <operator>=</operator> <name>SFlineToTextH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SFcompletionSegs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x1</name> <operator>=</operator> <name><name>SFcompletionSegs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x2</name> <operator>=</operator>
<name>SFlineToTextH</name> <operator>+</operator> <name>SFentryWidth</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>selFileField</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"selFileField"</literal></expr></argument>,
<argument><expr><name>asciiTextWidgetClass</name></expr></argument>, <argument><expr><name>selFileForm</name></expr></argument>,
<argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>listWidth</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>listSpacing</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name>SFfore</name></expr></argument>,
<argument><expr><name>XtNfromVert</name></expr></argument>, <argument><expr><name>selFilePrompt</name></expr></argument>,
<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>,
<argument><expr><name>XtNresizable</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,
<argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,
<argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,
<argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,
<argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,
<argument><expr><name>XtNstring</name></expr></argument>, <argument><expr><name>SFtextBuffer</name></expr></argument>,
<argument><expr><name>XtNlength</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>,
<argument><expr><name>XtNeditType</name></expr></argument>, <argument><expr><name>XawtextEdit</name></expr></argument>,
<argument><expr><name>XtNwrap</name></expr></argument>, <argument><expr><name>XawtextWrapWord</name></expr></argument>,
<argument><expr><name>XtNresize</name></expr></argument>, <argument><expr><name>XawtextResizeHeight</name></expr></argument>,
<argument><expr><name>XtNuseStringInPlace</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtOverrideTranslations</name><argument_list>(<argument><expr><name>selFileField</name></expr></argument>,
<argument><expr><call><name>XtParseTranslationTable</name><argument_list>(<argument><expr><name>oneLineTextEditTranslations</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtSetKeyboardFocus</name><argument_list>(<argument><expr><name>selFileForm</name></expr></argument>, <argument><expr><name>selFileField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>selFileHScroll</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"selFileHScroll"</literal></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>scrollbarWidgetClass</name></expr></argument>, <argument><expr><name>selFileForm</name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr><name>vim_scrollbarWidgetClass</name></expr></argument>, <argument><expr><name>selFileForm</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><name>XtNorientation</name></expr></argument>, <argument><expr><name>XtorientHorizontal</name></expr></argument>,
<argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><name>SFpathScrollWidth</name></expr></argument>,
<argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><name>scrollThickness</name></expr></argument>,
<argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name>SFfore</name></expr></argument>,
<argument><expr><name>XtNfromVert</name></expr></argument>, <argument><expr><name>selFileField</name></expr></argument>,
<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>,
<argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,
<argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,
<argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,
<argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,
<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name></expr></argument>,
<argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>XtNlimitThumb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name>selFileHScroll</name></expr></argument>, <argument><expr><name>XtNjumpProc</name></expr></argument>,
<argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator> <name>SFpathSliderMovedCallback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name>selFileHScroll</name></expr></argument>, <argument><expr><name>XtNscrollProc</name></expr></argument>,
<argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator> <name>SFpathAreaSelectedCallback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>selFileLists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"selFileList1"</literal></expr></argument>,
<argument><expr><name>compositeWidgetClass</name></expr></argument>, <argument><expr><name>selFileForm</name></expr></argument>,
<argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><name>listWidth</name></expr></argument>,
<argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><name>listHeight</name></expr></argument>,
<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name>SFfore</name></expr></argument>,
<argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name>SFback</name></expr></argument>,
<argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name>SFfore</name></expr></argument>,
<argument><expr><name>XtNfromVert</name></expr></argument>, <argument><expr><name>selFileHScroll</name></expr></argument>,
<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>,
<argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,
<argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,
<argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,
<argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>selFileLists</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"selFileList2"</literal></expr></argument>,
<argument><expr><name>compositeWidgetClass</name></expr></argument>, <argument><expr><name>selFileForm</name></expr></argument>,
<argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><name>listWidth</name></expr></argument>,
<argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><name>listHeight</name></expr></argument>,
<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name>SFfore</name></expr></argument>,
<argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name>SFback</name></expr></argument>,
<argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name>SFfore</name></expr></argument>,
<argument><expr><name>XtNfromHoriz</name></expr></argument>, <argument><expr><name><name>selFileLists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>XtNfromVert</name></expr></argument>, <argument><expr><name>selFileHScroll</name></expr></argument>,
<argument><expr><name>XtNhorizDistance</name></expr></argument>, <argument><expr><name>listSpacing</name></expr></argument>,
<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>,
<argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,
<argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,
<argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,
<argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>selFileLists</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"selFileList3"</literal></expr></argument>,
<argument><expr><name>compositeWidgetClass</name></expr></argument>, <argument><expr><name>selFileForm</name></expr></argument>,
<argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><name>listWidth</name></expr></argument>,
<argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><name>listHeight</name></expr></argument>,
<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name>SFfore</name></expr></argument>,
<argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name>SFback</name></expr></argument>,
<argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name>SFfore</name></expr></argument>,
<argument><expr><name>XtNfromHoriz</name></expr></argument>, <argument><expr><name><name>selFileLists</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>XtNfromVert</name></expr></argument>, <argument><expr><name>selFileHScroll</name></expr></argument>,
<argument><expr><name>XtNhorizDistance</name></expr></argument>, <argument><expr><name>listSpacing</name></expr></argument>,
<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>,
<argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,
<argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,
<argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,
<argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>selFileVScrolls</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"selFileVScroll"</literal></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>scrollbarWidgetClass</name></expr></argument>, <argument><expr><name><name>selFileLists</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr><name>vim_scrollbarWidgetClass</name></expr></argument>, <argument><expr><name><name>selFileLists</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><name>XtNx</name></expr></argument>, <argument><expr><name>vScrollX</name></expr></argument>,
<argument><expr><name>XtNy</name></expr></argument>, <argument><expr><name>vScrollY</name></expr></argument>,
<argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><name>scrollThickness</name></expr></argument>,
<argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><name>SFvScrollHeight</name></expr></argument>,
<argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name>SFfore</name></expr></argument>,
<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name></expr></argument>,
<argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>XtNlimitThumb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>selFileVScrolls</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNjumpProc</name></expr></argument>,
<argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator><name>SFvFloatSliderMovedCallback</name></expr></argument>,
<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>long_u</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>selFileVScrolls</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNscrollProc</name></expr></argument>,
<argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator><name>SFvAreaSelectedCallback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>long_u</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>selFileHScrolls</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"selFileHScroll"</literal></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>scrollbarWidgetClass</name></expr></argument>, <argument><expr><name><name>selFileLists</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr><name>vim_scrollbarWidgetClass</name></expr></argument>, <argument><expr><name><name>selFileLists</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><name>XtNorientation</name></expr></argument>, <argument><expr><name>XtorientHorizontal</name></expr></argument>,
<argument><expr><name>XtNx</name></expr></argument>, <argument><expr><name>hScrollX</name></expr></argument>,
<argument><expr><name>XtNy</name></expr></argument>, <argument><expr><name>hScrollY</name></expr></argument>,
<argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><name>SFhScrollWidth</name></expr></argument>,
<argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><name>scrollThickness</name></expr></argument>,
<argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name>SFfore</name></expr></argument>,
<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name></expr></argument>,
<argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>XtNlimitThumb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>selFileHScrolls</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNjumpProc</name></expr></argument>,
<argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator><name>SFhSliderMovedCallback</name></expr></argument>,
<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>long_u</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>selFileHScrolls</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNscrollProc</name></expr></argument>,
<argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator><name>SFhAreaSelectedCallback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>long_u</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>selFileOK</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"selFileOK"</literal></expr></argument>,
<argument><expr><name>commandWidgetClass</name></expr></argument>, <argument><expr><name>selFileForm</name></expr></argument>,
<argument><expr><name>XtNlabel</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>,
<argument><expr><name>XtNresizable</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,
<argument><expr><name>XtNcallback</name></expr></argument>, <argument><expr><name>SFokSelect</name></expr></argument>,
<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name>SFfore</name></expr></argument>,
<argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name>SFback</name></expr></argument>,
<argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name>SFfore</name></expr></argument>,
<argument><expr><name>XtNfromHoriz</name></expr></argument>, <argument><expr><name><name>selFileLists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>XtNfromVert</name></expr></argument>, <argument><expr><name><name>selFileLists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>,
<argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,
<argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,
<argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,
<argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>selFileCancel</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"selFileCancel"</literal></expr></argument>,
<argument><expr><name>commandWidgetClass</name></expr></argument>, <argument><expr><name>selFileForm</name></expr></argument>,
<argument><expr><name>XtNlabel</name></expr></argument>, <argument><expr><name>cancel</name></expr></argument>,
<argument><expr><name>XtNresizable</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,
<argument><expr><name>XtNcallback</name></expr></argument>, <argument><expr><name>SFcancelSelect</name></expr></argument>,
<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name>SFfore</name></expr></argument>,
<argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name>SFback</name></expr></argument>,
<argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name>SFfore</name></expr></argument>,
<argument><expr><name>XtNfromHoriz</name></expr></argument>, <argument><expr><name>selFileOK</name></expr></argument>,
<argument><expr><name>XtNfromVert</name></expr></argument>, <argument><expr><name><name>selFileLists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>XtNhorizDistance</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>,
<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>,
<argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,
<argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,
<argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,
<argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetMappedWhenManaged</name><argument_list>(<argument><expr><name>selFile</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtRealizeWidget</name><argument_list>(<argument><expr><name>selFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>SFwmDeleteWindow</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name>SFdisplay</name></expr></argument>, <argument><expr><literal type="string">"WM_DELETE_WINDOW"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XSetWMProtocols</name><argument_list>(<argument><expr><name>SFdisplay</name></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>selFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>SFwmDeleteWindow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SFcreateGC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name><name>selFileLists</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>ExposureMask</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,
<argument><expr><operator>(</operator><name>XtEventHandler</name><operator>)</operator><name>SFexposeList</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>long_u</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name><name>selFileLists</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>EnterWindowMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,
<argument><expr><operator>(</operator><name>XtEventHandler</name><operator>)</operator><name>SFenterList</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>long_u</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name><name>selFileLists</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>LeaveWindowMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,
<argument><expr><operator>(</operator><name>XtEventHandler</name><operator>)</operator><name>SFleaveList</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>long_u</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name><name>selFileLists</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>PointerMotionMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,
<argument><expr><operator>(</operator><name>XtEventHandler</name><operator>)</operator><name>SFmotionList</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>long_u</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name><name>selFileLists</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>ButtonPressMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,
<argument><expr><operator>(</operator><name>XtEventHandler</name><operator>)</operator><name>SFbuttonPressList</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>long_u</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name><name>selFileLists</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>ButtonReleaseMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,
<argument><expr><operator>(</operator><name>XtEventHandler</name><operator>)</operator><name>SFbuttonReleaseList</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>long_u</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>selFileField</name></expr></argument>, <argument><expr><name>KeyPressMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,
<argument><expr><name>SFmodVerifyCallback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SFapp</name> <operator>=</operator> <call><name>XtWidgetToApplicationContext</name><argument_list>(<argument><expr><name>selFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFtextChanged</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>XtNinternational</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>_XawTextFormat</name><argument_list>(<argument><expr><operator>(</operator><name>TextWidget</name><operator>)</operator><name>selFileField</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XawFmtWide</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wcbuf</name><init>=<expr><operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><name>SFtextBuffer</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wcbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'/'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>wcbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'~'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wcstombs</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>, <argument><expr><name>wcbuf</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SFtextPos</name> <operator>=</operator> <call><name>XawTextGetInsertionPoint</name><argument_list>(<argument><expr><name>selFileField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>, <argument><expr><name>SFstartDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>wcstombs</name><argument_list>(<argument><expr><name>SFcurrentPath</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wcbuf</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SFtextPos</name> <operator>=</operator> <call><name>XawTextGetInsertionPoint</name><argument_list>(<argument><expr><name>selFileField</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>SFstartDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><operator>(</operator><name><name>SFtextBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>SFtextBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>, <argument><expr><name>SFtextBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SFtextPos</name> <operator>=</operator> <call><name>XawTextGetInsertionPoint</name><argument_list>(<argument><expr><name>selFileField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcat</name><argument_list>(<argument><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>, <argument><expr><name>SFstartDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SFtextBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SFtextPos</name> <operator>=</operator> <call><name>XawTextGetInsertionPoint</name><argument_list>(<argument><expr><name>selFileField</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>SFstartDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SFworkProcAdded</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>XtAppAddWorkProc</name><argument_list>(<argument><expr><name>SFapp</name></expr></argument>, <argument><expr><operator>(</operator><name>XtWorkProc</name><operator>)</operator><name>SFworkProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SFworkProcAdded</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SFupdatePath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>SFgetText</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>XtNinternational</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>_XawTextFormat</name><argument_list>(<argument><expr><operator>(</operator><name>TextWidget</name><operator>)</operator><name>selFileField</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>XawFmtWide</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wcbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mbslength</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>selFileField</name></expr></argument>,
<argument><expr><name>XtNstring</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wcbuf</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mbslength</name> <operator>=</operator> <call><name>wcstombs</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>wcbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mbslength</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wcbuf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>wcbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mbslength</name> <operator>=</operator> <name>MAXPATHL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name><operator>=</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>XtMalloc</name><argument_list>(<argument><expr><name>mbslength</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wcstombs</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>wcbuf</name></expr></argument>, <argument><expr><name>mbslength</name> <operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>SFtextBuffer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SFprepareToReturn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>SFstatus</name> <operator>=</operator> <name>SEL_FILE_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtRemoveGrab</name><argument_list>(<argument><expr><name>selFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtUnmapWidget</name><argument_list>(<argument><expr><name>selFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtRemoveTimeOut</name><argument_list>(<argument><expr><name>SFdirModTimerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SFchdir</name><argument_list>(<argument><expr><name>SFstartDir</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E614: vim_SelFile: can't return to current directory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SFstatus</name> <operator>=</operator> <name>SEL_FILE_CANCEL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>vim_SelFile</name><parameter_list>(
<parameter><decl><type><name>Widget</name></type> <name>toplevel</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>init_path</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>show_entry</name>)<parameter_list>()</parameter_list></function_decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>guicolor_T</name></type> <name>fg</name></decl></parameter>,
<parameter><decl><type><name>guicolor_T</name></type> <name>bg</name></decl></parameter>,
<parameter><decl><type><name>guicolor_T</name></type> <name>scroll_fg</name></decl></parameter>,
<parameter><decl><type><name>guicolor_T</name></type> <name>scroll_bg</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>firstTime</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XEvent</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name_return</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prompt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prompt</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Pathname:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>SFfore</name> <operator>=</operator> <name>fg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SFback</name> <operator>=</operator> <name>bg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_dirname</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>SFstartDir</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E615: vim_SelFile: can't get current directory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>firstTime</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>firstTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>SFdisplay</name> <operator>=</operator> <call><name>XtDisplay</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFcreateWidgets</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cancel"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>selFilePrompt</name></expr></argument>, <argument><expr><name>XtNlabel</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>selFile</name></expr></argument>, <argument><expr><name>XtNtitle</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFsetColors</name><argument_list>(<argument><expr><name>bg</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>scroll_bg</name></expr></argument>, <argument><expr><name>scroll_fg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>selFile</name></expr></argument>, <argument><expr><name>XtNx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>XtNy</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtMapWidget</name><argument_list>(<argument><expr><name>selFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strcat</name><argument_list>(<argument><expr><name>SFstartDir</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strcpy</name><argument_list>(<argument><expr><name>SFcurrentDir</name></expr></argument>, <argument><expr><name>SFstartDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>init_path</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>init_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strcpy</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>, <argument><expr><name>init_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>, <argument><expr><name>SFstartDir</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>SFstartDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFsetText</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SFsetText</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>SFcurrentPath</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>SFstartDir</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strcat</name><argument_list>(<argument><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>, <argument><expr><name>SFstartDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>init_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFsetText</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>SFcurrentPath</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>SFstartDir</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strcpy</name><argument_list>(<argument><expr><name>SFcurrentPath</name></expr></argument>, <argument><expr><name>SFstartDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>SFfunc</name> <operator>=</operator> <name>show_entry</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SFtextChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddGrab</name><argument_list>(<argument><expr><name>selFile</name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SFdirModTimerId</name> <operator>=</operator> <call><name>XtAppAddTimeOut</name><argument_list>(<argument><expr><name>SFapp</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <literal type="number">1000</literal></expr></argument>,
<argument><expr><name>SFdirModTimer</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>XtAppNextEvent</name><argument_list>(<argument><expr><name>SFapp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtDispatchEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>SFstatus</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SEL_FILE_TEXT</name></expr>:</case>
<expr_stmt><expr><name>SFstatus</name> <operator>=</operator> <name>SEL_FILE_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFtextChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SEL_FILE_OK</name></expr>:</case>
<expr_stmt><expr><name>name_return</name> <operator>=</operator> <call><name>SFgetText</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SFprepareToReturn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>name_return</name></expr>;</return>
<case>case <expr><name>SEL_FILE_CANCEL</name></expr>:</case>
<expr_stmt><expr><call><name>SFprepareToReturn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<case>case <expr><name>SEL_FILE_NULL</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
