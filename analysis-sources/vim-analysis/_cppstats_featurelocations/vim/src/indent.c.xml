<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\indent.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>int</name></type>
<name>tabstop_set</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>valcount</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><name><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>var</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>array</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>var</name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>cp</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>var</name> <operator>||</operator> <name><name>cp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strtol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cp</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>!=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_positive</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <name>cp</name> <operator>&gt;</operator> <name>var</name> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>valcount</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>array</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>valcount</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>array</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>array</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name>valcount</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>var</name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name> <operator>!=</operator> <name>NUL</name></expr>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>array</name><operator>)</operator><index>[<expr><name>t</name><operator>++</operator></expr>]</index> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>cp</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>cp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>tabstop_padding</name><parameter_list>(<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ts_arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ts</name> <init>= <expr><ternary><condition><expr><name>ts_arg</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><name>ts_arg</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tabcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>tabcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>padding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vts</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>vts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ts</name> <operator>-</operator> <operator>(</operator><name>col</name> <operator>%</operator> <name>ts</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tabcount</name> <operator>=</operator> <name><name>vts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <name>tabcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>tabcol</name> <operator>+=</operator> <name><name>vts</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tabcol</name> <operator>&gt;</operator> <name>col</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>tabcol</name> <operator>-</operator> <name>col</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <name>tabcount</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <name><name>vts</name><index>[<expr><name>tabcount</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>col</name> <operator>-</operator> <name>tabcol</name><operator>)</operator> <operator>%</operator> <name><name>vts</name><index>[<expr><name>tabcount</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>padding</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>tabstop_at</name><parameter_list>(<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tabcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>tabcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tab_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vts</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>vts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ts</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tabcount</name> <operator>=</operator> <name><name>vts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <name>tabcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>tabcol</name> <operator>+=</operator> <name><name>vts</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tabcol</name> <operator>&gt;</operator> <name>col</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tab_size</name> <operator>=</operator> <name><name>vts</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <name>tabcount</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tab_size</name> <operator>=</operator> <name><name>vts</name><index>[<expr><name>tabcount</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>tab_size</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>colnr_T</name></type>
<name>tabstop_start</name><parameter_list>(<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tabcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>tabcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>excess</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vts</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>vts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>col</name> <operator>/</operator> <name>ts</name><operator>)</operator> <operator>*</operator> <name>ts</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tabcount</name> <operator>=</operator> <name><name>vts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <name>tabcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>tabcol</name> <operator>+=</operator> <name><name>vts</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tabcol</name> <operator>&gt;</operator> <name>col</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>tabcol</name> <operator>-</operator> <name><name>vts</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>excess</name> <operator>=</operator> <name>tabcol</name> <operator>%</operator> <name><name>vts</name><index>[<expr><name>tabcount</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>excess</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>col</name> <operator>-</operator> <name>excess</name><operator>)</operator> <operator>/</operator> <name><name>vts</name><index>[<expr><name>tabcount</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name><name>vts</name><index>[<expr><name>tabcount</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>tabstop_fromto</name><parameter_list>(
<parameter><decl><type><name>colnr_T</name></type> <name>start_col</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name></type> <name>end_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ts_arg</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vts</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ntabs</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nspcs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>spaces</name> <init>= <expr><name>end_col</name> <operator>-</operator> <name>start_col</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>tabcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>padding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tabcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ts</name> <init>= <expr><ternary><condition><expr><name>ts_arg</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr> </then><else>: <expr><name>ts_arg</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vts</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>vts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tabs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>initspc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>initspc</name> <operator>=</operator> <name>ts</name> <operator>-</operator> <operator>(</operator><name>start_col</name> <operator>%</operator> <name>ts</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>spaces</name> <operator>&gt;=</operator> <name>initspc</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>spaces</name> <operator>-=</operator> <name>initspc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tabs</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tabs</name> <operator>+=</operator> <name>spaces</name> <operator>/</operator> <name>ts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>spaces</name> <operator>-=</operator> <operator>(</operator><name>spaces</name> <operator>/</operator> <name>ts</name><operator>)</operator> <operator>*</operator> <name>ts</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ntabs</name> <operator>=</operator> <name>tabs</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nspcs</name> <operator>=</operator> <name>spaces</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>tabcount</name> <operator>=</operator> <name><name>vts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <name>tabcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>tabcol</name> <operator>+=</operator> <name><name>vts</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tabcol</name> <operator>&gt;</operator> <name>start_col</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>tabcol</name> <operator>-</operator> <name>start_col</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <name>tabcount</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <name><name>vts</name><index>[<expr><name>tabcount</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>start_col</name> <operator>-</operator> <name>tabcol</name><operator>)</operator> <operator>%</operator> <name><name>vts</name><index>[<expr><name>tabcount</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>spaces</name> <operator>&lt;</operator> <name>padding</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ntabs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nspcs</name> <operator>=</operator> <name>spaces</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ntabs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>spaces</name> <operator>-=</operator> <name>padding</name></expr>;</expr_stmt>


<while>while <condition>(<expr><name>spaces</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>++</operator><name>t</name> <operator>&lt;=</operator> <name>tabcount</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <name><name>vts</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>spaces</name> <operator>&lt;</operator> <name>padding</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nspcs</name> <operator>=</operator> <name>spaces</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>ntabs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>spaces</name> <operator>-=</operator> <name>padding</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>ntabs</name> <operator>+=</operator> <name>spaces</name> <operator>/</operator> <name><name>vts</name><index>[<expr><name>tabcount</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nspcs</name> <operator>=</operator> <name>spaces</name> <operator>%</operator> <name><name>vts</name><index>[<expr><name>tabcount</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>tabstop_eq</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ts1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ts2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ts1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ts2</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ts1</name> <operator>&amp;&amp;</operator> <name>ts2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ts1</name> <operator>==</operator> <name>ts2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>ts2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <name><name>ts1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts1</name><index>[<expr><name>t</name></expr>]</index></name> <operator>!=</operator> <name><name>ts2</name><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>int</name> <modifier>*</modifier></type>
<name>tabstop_copy</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>oldts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>newts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>oldts</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>newts</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>oldts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newts</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <name><name>oldts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>newts</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name><name>oldts</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<return>return <expr><name>newts</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>int</name></type>
<name>tabstop_count</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>ts</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>ts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>tabstop_first</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>ts</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>ts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>long</name></type>
<name>get_sw_value</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_sw_value_col</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>long</name></type>
<name>get_sw_value_pos</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pos_T</name></type> <name>save_cursor</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>sw_value</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sw_value</name> <operator>=</operator> <call><name>get_sw_value_col</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>get_nolist_virtcol</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>save_cursor</name></expr>;</expr_stmt>
<return>return <expr><name>sw_value</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>long</name></type>
<name>get_sw_value_indent</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <call><name>getwhitecols_curline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>get_sw_value_pos</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>long</name></type>
<name>get_sw_value_col</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name> <name>col</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sw</name></name></expr> ?</condition><then> <expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_sw</name></name></expr> </then><else>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>tabstop_at</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>long</name></type>
<name>get_sts_value</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sts</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>get_sw_value</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_sts</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>get_indent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>get_indent_str_vtab</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>,
<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>get_indent_str</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>get_indent_lnum</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>get_indent_str_vtab</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>,
<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>get_indent_str</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>int</name></type>
<name>get_indent_buf</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>get_indent_str_vtab</name><argument_list>(<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>get_indent_str</name><argument_list>(<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>int</name></type>
<name>get_indent_str</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ts</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition> <incr><expr><operator>++</operator><name>ptr</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>TAB</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name> <operator>||</operator> <name>lcs_tab1</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>ts</name> <operator>-</operator> <operator>(</operator><name>count</name> <operator>%</operator> <name>ts</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>


<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>int</name></type>
<name>get_indent_str_vtab</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition> <incr><expr><operator>++</operator><name>ptr</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>TAB</name></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name> <operator>||</operator> <name>lcs_tab1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>tabstop_padding</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>vts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>


<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<function><type><name>int</name></type>
<name>set_indent</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ind_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>line_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>doit</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ind_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ind_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>tab_pad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>orig_char_len</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 




<expr_stmt><expr><name>todo</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>oldline</name> <operator>=</operator> <call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SIN_INSERT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_pi</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SIN_INSERT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_pi</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ind_done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<while>while <condition>(<expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>TAB</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tab_pad</name> <operator>=</operator> <call><name>tabstop_padding</name><argument_list>(<argument><expr><name>ind_done</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>,
<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>tab_pad</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name>
<operator>-</operator> <operator>(</operator><name>ind_done</name> <operator>%</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>todo</name> <operator>&lt;</operator> <name>tab_pad</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>todo</name> <operator>-=</operator> <name>tab_pad</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_done</name> <operator>+=</operator> <name>tab_pad</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_done</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>ind_col</name> <operator>=</operator> <name>ind_done</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>orig_char_len</name> <operator>=</operator> <name>ind_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tab_pad</name> <operator>=</operator> <call><name>tabstop_padding</name><argument_list>(<argument><expr><name>ind_done</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>,
<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>tab_pad</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>-</operator> <operator>(</operator><name>ind_done</name> <operator>%</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>todo</name> <operator>&gt;=</operator> <name>tab_pad</name> <operator>&amp;&amp;</operator> <name>orig_char_len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>doit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>todo</name> <operator>-=</operator> <name>tab_pad</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_len</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ind_col</name> <operator>+=</operator> <name>tab_pad</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>tab_pad</name> <operator>=</operator> <call><name>tabstop_padding</name><argument_list>(<argument><expr><name>ind_col</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>,
<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>todo</name> <operator>&lt;</operator> <name>tab_pad</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>TAB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>doit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>todo</name> <operator>-=</operator> <name>tab_pad</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_col</name> <operator>+=</operator> <name>tab_pad</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name>todo</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>TAB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>doit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>todo</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_len</name></expr>;</expr_stmt>

</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>doit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_len</name></expr>;</expr_stmt>

</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>doit</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SIN_INSERT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SIN_INSERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>oldline</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>line_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>orig_char_len</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>newline</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>orig_char_len</name> <operator>+</operator> <name>size</name> <operator>-</operator> <name>ind_done</name> <operator>+</operator> <name>line_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newline</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>todo</name> <operator>=</operator> <name>size</name> <operator>-</operator> <name>ind_done</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_len</name> <operator>=</operator> <name>orig_char_len</name> <operator>+</operator> <name>todo</name></expr>;</expr_stmt> 


<expr_stmt><expr><name>p</name> <operator>=</operator> <name>oldline</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>newline</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>orig_char_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>orig_char_len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>



<while>while <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>todo</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>newline</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>ind_len</name> <operator>+</operator> <name>line_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newline</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>newline</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SIN_INSERT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_pi</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>oldline</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>TAB</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tab_pad</name> <operator>=</operator> <call><name>tabstop_padding</name><argument_list>(<argument><expr><name>ind_done</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>,
<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>tab_pad</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name>
<operator>-</operator> <operator>(</operator><name>ind_done</name> <operator>%</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>todo</name> <operator>&lt;</operator> <name>tab_pad</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>todo</name> <operator>-=</operator> <name>tab_pad</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_done</name> <operator>+=</operator> <name>tab_pad</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_done</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tab_pad</name> <operator>=</operator> <call><name>tabstop_padding</name><argument_list>(<argument><expr><name>ind_done</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>,
<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>tab_pad</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>-</operator> <operator>(</operator><name>ind_done</name> <operator>%</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>todo</name> <operator>&gt;=</operator> <name>tab_pad</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>TAB</name></expr>;</expr_stmt>
<expr_stmt><expr><name>todo</name> <operator>-=</operator> <name>tab_pad</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ind_done</name> <operator>+=</operator> <name>tab_pad</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>tab_pad</name> <operator>=</operator> <call><name>tabstop_padding</name><argument_list>(<argument><expr><name>ind_done</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>,
<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>todo</name> <operator>&lt;</operator> <name>tab_pad</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>TAB</name></expr>;</expr_stmt>
<expr_stmt><expr><name>todo</name> <operator>-=</operator> <name>tab_pad</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_done</name> <operator>+=</operator> <name>tab_pad</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name>todo</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>TAB</name></expr>;</expr_stmt>
<expr_stmt><expr><name>todo</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>line_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SIN_UNDO</name><operator>)</operator> <operator>||</operator> <call><name>u_savesub</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>newline</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SIN_CHANGED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>changed_bytes</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>saved_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>saved_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>oldline</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name><name>saved_cursor</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name>ind_len</name> <operator>-</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>oldline</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>saved_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>newline</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name><name>saved_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>newline</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>added</name> <init>= <expr><name>ind_len</name> <operator>-</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>oldline</name><operator>)</operator></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>adjust_prop_columns</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>added</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>p</name> <operator>-</operator> <name>oldline</name><operator>)</operator></expr> </then><else>: <expr><name>ind_len</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>added</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>newline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>ind_len</name></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>get_number_indent</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lead_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>||</operator> <call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_Q_COMS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lead_len</name> <operator>=</operator> <call><name>get_leader_len</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_flp</name></name></expr></argument>, <argument><expr><name>RE_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>lead_len</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><operator>*</operator><name><name>regmatch</name><operator>.</operator><name>endp</name></name> <operator>-</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><call><name>ml_get_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>col</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>int</name></type>
<name>briopt_check</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bri_shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bri_min</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bri_sbr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_briopt</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"shift:"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bri_shift</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"min:"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bri_min</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"sbr"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bri_sbr</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_briopt_shift</name></name> <operator>=</operator> <name>bri_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_briopt_min</name></name> <operator>=</operator> <name>bri_min</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_briopt_sbr</name></name> <operator>=</operator> <name>bri_sbr</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>get_breakindent_win</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_indent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>prev_ts</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>prev_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>varnumber_T</name></type> <name>prev_tick</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>prev_vts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>bri</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>eff_wwidth</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name>
<operator>-</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_NUMCOL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>
?</condition><then> <expr><call><name>number_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>prev_line</name> <operator>!=</operator> <name>line</name> <operator>||</operator> <name>prev_ts</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name>
<operator>||</operator> <name>prev_tick</name> <operator>!=</operator> <call><name>CHANGEDTICK</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>prev_vts</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<expr_stmt><expr><name>prev_line</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_ts</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_tick</name> <operator>=</operator> <call><name>CHANGEDTICK</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>prev_vts</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_indent</name> <operator>=</operator> <call><name>get_indent_str_vtab</name><argument_list>(<argument><expr><name>line</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>prev_indent</name> <operator>=</operator> <call><name>get_indent_str</name><argument_list>(<argument><expr><name>line</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bri</name> <operator>=</operator> <name>prev_indent</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_briopt_shift</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_briopt_sbr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bri</name> <operator>-=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><call><name>get_showbreak_value</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>bri</name> <operator>+=</operator> <call><name>win_col_off2</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>bri</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bri</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>


<if type="elseif">else if <condition>(<expr><name>bri</name> <operator>&gt;</operator> <name>eff_wwidth</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_briopt_min</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bri</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>eff_wwidth</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_briopt_min</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>eff_wwidth</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_briopt_min</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>bri</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><name>int</name></type>
<name>inindent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>extra</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>op_reindent</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>how</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>amount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>first_changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>last_changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>start_lnum</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_modifiable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">50</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&gt;</operator> <name>p_report</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%ld lines to indent... "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>==</operator> <literal type="number">1</literal>
<operator>||</operator> <name>how</name> <operator>!=</operator> <name>get_lisp_indent</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>amount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>amount</name> <operator>=</operator> <call><name>how</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>amount</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>set_indent</name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><name>SIN_UNDO</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first_changed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_changed</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last_changed</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></for>


<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_SOL</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>last_changed</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name>first_changed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr> ?</condition><then> <expr><name>start_lnum</name> <operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr> </then><else>:
<expr><name>last_changed</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&gt;</operator> <name>p_report</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>NGETTEXT</name><argument_list>(<argument><expr><literal type="string">"%ld line indented "</literal></expr></argument>,
<argument><expr><literal type="string">"%ld lines indented "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMARTINDENT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>int</name></type>
<name>preprocs_left</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMARTINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_si</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cin</name></name><operator>)</operator> <operator>||</operator>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<call><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_si</name></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cin</name></name> <operator>&amp;&amp;</operator> <call><name>in_cinkeys</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ind_hash_comment</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMARTINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>void</name></type>
<name>ins_try_si</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl>, <decl><type ref="prev"/><name>old_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>did_si</name> <operator>||</operator> <name>can_si_back</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'{'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>can_si</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'}'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'}'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>pos</name> <operator>=</operator> <call><name>findmatch</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>old_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>





<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<while>while <condition>(<expr><operator>--</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>pos</name> <operator>=</operator> <call><name>findmatch</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>get_indent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>old_pos</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>VREPLACE_FLAG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>change_indent</name><argument_list>(<argument><expr><name>INDENT_SET</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>set_indent</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>SIN_CHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'{'</literal> <operator>&amp;&amp;</operator> <name>can_si_back</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>old_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>get_indent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><operator>--</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>get_indent</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>old_pos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>temp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>shift_line</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>can_si</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>old_indent</name> <operator>=</operator> <call><name>get_indent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>set_indent</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIN_CHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>ai_col</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ai_col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function><type><name>void</name></type>
<name>change_indent</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>amount</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>round</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>replaced</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>call_changed_bytes</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>vcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_vcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>insstart_less</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>new_cursor_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_p_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>vc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>orig_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_line</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>orig_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 


<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>VREPLACE_FLAG</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>orig_line</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>orig_col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>save_p_list</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vc</name> <operator>=</operator> <call><name>getvcol_nolist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vcol</name> <operator>=</operator> <name>vc</name></expr>;</expr_stmt>




<expr_stmt><expr><name>start_col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>new_cursor_col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_cursor_col</name> <operator>-=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>insstart_less</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>new_cursor_col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vcol</name> <operator>=</operator> <call><name>get_indent</name><argument_list>()</argument_list></call> <operator>-</operator> <name>vcol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_cursor_col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>start_col</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>INDENT_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>set_indent</name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><ternary><condition><expr><name>call_changed_bytes</name></expr> ?</condition><then> <expr><name>SIN_CHANGED</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_State</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>VREPLACE_FLAG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>State</name> <operator>=</operator> <name>INSERT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>shift_line</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>INDENT_DEC</name></expr></argument>, <argument><expr><name>round</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>call_changed_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_State</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>insstart_less</name> <operator>-=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><name>new_cursor_col</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>new_cursor_col</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>insstart_less</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>new_cursor_col</name> <operator>+=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_cursor_col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name>vcol</name> <operator>=</operator> <call><name>get_indent</name><argument_list>()</argument_list></call> <operator>-</operator> <name>vcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>vcol</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>vcol</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>vcol</name> <operator>=</operator> <name>last_vcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_cursor_col</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>vcol</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>last_vcol</name> <operator>=</operator> <name>vcol</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <name>new_cursor_col</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_cursor_col</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>new_cursor_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>new_cursor_col</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <call><name>lbr_chartabsize</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>new_cursor_col</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>vcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>vcol</name> <operator>=</operator> <name>last_vcol</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>vcol</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>new_cursor_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>-</operator> <name>vcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_cursor_col</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>ins_str</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>insstart_less</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>=</operator> <name>save_p_list</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_cursor_col</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>new_cursor_col</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>changed_cline_bef_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>Insstart</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name><name>Insstart</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>Insstart</name><operator>.</operator><name>col</name></name> <operator>&lt;=</operator> <name>insstart_less</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Insstart</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Insstart</name><operator>.</operator><name>col</name></name> <operator>-=</operator> <name>insstart_less</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>ai_col</name> <operator>&lt;=</operator> <name>insstart_less</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ai_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ai_col</name> <operator>-=</operator> <name>insstart_less</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>REPLACE_NORMAL</name><argument_list>(<argument><expr><name>State</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>start_col</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name>start_col</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>replace_join</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>--</operator><name>start_col</name></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>start_col</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>||</operator> <name>replaced</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>replace_push</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>replaced</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>replace_push</name><argument_list>(<argument><expr><name>replaced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>replaced</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>start_col</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>VREPLACE_FLAG</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>orig_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>new_line</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>new_line</name><index>[<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>orig_line</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>orig_col</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>backspace_until_column</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ins_bytes</name><argument_list>(<argument><expr><name>new_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>copy_indent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ind_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tab_pad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ind_done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ind_col</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>round</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>todo</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ind_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>


<while>while <condition>(<expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>TAB</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tab_pad</name> <operator>=</operator> <call><name>tabstop_padding</name><argument_list>(<argument><expr><name>ind_done</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>,
<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>tab_pad</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name>
<operator>-</operator> <operator>(</operator><name>ind_done</name> <operator>%</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>todo</name> <operator>&lt;</operator> <name>tab_pad</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>todo</name> <operator>-=</operator> <name>tab_pad</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_done</name> <operator>+=</operator> <name>tab_pad</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ind_col</name> <operator>+=</operator> <name>tab_pad</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_done</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>++</operator><name>ind_col</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></while>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tab_pad</name> <operator>=</operator> <call><name>tabstop_padding</name><argument_list>(<argument><expr><name>ind_done</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>,
<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>tab_pad</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>-</operator> <operator>(</operator><name>ind_done</name> <operator>%</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>todo</name> <operator>&gt;=</operator> <name>tab_pad</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>todo</name> <operator>-=</operator> <name>tab_pad</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_len</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ind_col</name> <operator>+=</operator> <name>tab_pad</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>TAB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>tab_pad</name> <operator>=</operator> <call><name>tabstop_padding</name><argument_list>(<argument><expr><name>ind_col</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>,
<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>todo</name> <operator>&lt;</operator> <name>tab_pad</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>todo</name> <operator>-=</operator> <name>tab_pad</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_col</name> <operator>+=</operator> <name>tab_pad</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>TAB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name>todo</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>todo</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>TAB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>line_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>ind_len</name> <operator>+</operator> <name>line_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>line_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>ind_len</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_retab</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_tab</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>num_spaces</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>num_tabs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>vcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>start_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>start_vcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>old_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_line</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>did_undo</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>new_vts_array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_ts_str</name></decl>;</decl_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_ts</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>save_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>first_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>linenr_T</name></type> <name>last_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>save_list</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>new_ts_str</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tabstop_set</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_vts_array</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>vim_isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name><operator>)</operator> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>




<if_stmt><if>if <condition>(<expr><name>new_vts_array</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_vts_array</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_ts_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_ts_str</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>new_ts_str</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>-</operator> <name>new_ts_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>new_ts</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_ts</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_positive</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_ts</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_ts</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</init> <condition><expr><operator>!</operator><name>got_int</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>did_undo</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_tab</name> <operator>&amp;&amp;</operator> <name>num_spaces</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>start_vcol</name> <operator>=</operator> <name>vcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>start_col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_spaces</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>got_tab</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>got_tab</name> <operator>||</operator> <operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name> <operator>&amp;&amp;</operator> <name>num_spaces</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>len</name> <operator>=</operator> <name>num_spaces</name> <operator>=</operator> <name>vcol</name> <operator>-</operator> <name>start_vcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_tabs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tabstop_fromto</name><argument_list>(<argument><expr><name>start_vcol</name></expr></argument>, <argument><expr><name>vcol</name></expr></argument>,
<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></argument>, <argument><expr><name>new_vts_array</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num_tabs</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_spaces</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>new_ts</name> <operator>-</operator> <operator>(</operator><name>start_vcol</name> <operator>%</operator> <name>new_ts</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num_spaces</name> <operator>&gt;=</operator> <name>temp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>num_spaces</name> <operator>-=</operator> <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_tabs</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num_tabs</name> <operator>+=</operator> <name>num_spaces</name> <operator>/</operator> <name>new_ts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_spaces</name> <operator>-=</operator> <operator>(</operator><name>num_spaces</name> <operator>/</operator> <name>new_ts</name><operator>)</operator> <operator>*</operator> <name>new_ts</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name> <operator>||</operator> <name>got_tab</name> <operator>||</operator>
<operator>(</operator><name>num_spaces</name> <operator>+</operator> <name>num_tabs</name> <operator>&lt;</operator> <name>len</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>did_undo</name> <operator>==</operator> <name>FALSE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>did_undo</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>lnum</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>lnum</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_line</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <name>num_spaces</name> <operator>+</operator> <name>num_tabs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_len</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_line</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>old_len</name> <operator>-</operator> <name>col</name> <operator>+</operator> <name>start_col</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start_col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>new_line</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>start_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>new_line</name> <operator>+</operator> <name>start_col</name> <operator>+</operator> <name>len</name></expr></argument>,
<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>old_len</name> <operator>-</operator> <name>col</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>new_line</name> <operator>+</operator> <name>start_col</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>col</name> <operator>&lt;</operator> <name>num_tabs</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'\t'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>new_line</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>first_line</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_line</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last_line</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>new_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name>start_col</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>got_tab</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_spaces</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <call><name>chartabsize</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>vcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>new_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_interr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>tabstop_count</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>tabstop_count</name><argument_list>(<argument><expr><name>new_vts_array</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>==</operator> <call><name>tabstop_first</name><argument_list>(<argument><expr><name>new_vts_array</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><call><name>tabstop_count</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>tabstop_eq</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>, <argument><expr><name>new_vts_array</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>!=</operator> <name>new_ts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>first_line</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name>first_line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>last_line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>=</operator> <name>save_list</name></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>new_ts_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 
<block>{<block_content>


<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>old_vts_ary</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tabstop_count</name><argument_list>(<argument><expr><name>old_vts_ary</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>tabstop_count</name><argument_list>(<argument><expr><name>new_vts_array</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"vts"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>new_ts_str</name></expr></argument>,
<argument><expr><name>OPT_FREE</name><operator>|</operator><name>OPT_LOCAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name> <operator>=</operator> <name>new_vts_array</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>old_vts_ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>=</operator> <call><name>tabstop_first</name><argument_list>(<argument><expr><name>new_vts_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_vts_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_ts_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>=</operator> <name>new_ts</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u_clearline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>int</name></type>
<name>get_expr_indent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>indent</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>inde_copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>save_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>save_curswant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_set_curswant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_State</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_sandbox</name> <init>= <expr><call><name>was_set_insecurely</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"indentexpr"</literal></expr></argument>,
<argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>save_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_curswant</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_set_curswant</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_LNUM</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>use_sandbox</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>sandbox</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>textlock</name></expr>;</expr_stmt>



<expr_stmt><expr><name>inde_copy</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inde</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>inde_copy</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>indent</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>eval_to_number</name><argument_list>(<argument><expr><name>inde_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>inde_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sandbox</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>sandbox</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>textlock</name></expr>;</expr_stmt>




<expr_stmt><expr><name>save_State</name> <operator>=</operator> <name>State</name></expr>;</expr_stmt>
<expr_stmt><expr><name>State</name> <operator>=</operator> <name>INSERT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>save_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>save_curswant</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>save_set_curswant</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_State</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>indent</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>indent</name> <operator>=</operator> <call><name>get_indent</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>indent</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>lisp_match</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>LSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>word</name> <init>= <expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_lw</name></name> <operator>!=</operator> <name>NUL</name></expr> ?</condition><then> <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_lw</name></name></expr> </then><else>: <expr><name>p_lispwords</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>word</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>word</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>LSIZE</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

















<function><type><name>int</name></type>
<name>get_lisp_indent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl>, <decl><type ref="prev"/><name>realpos</name></decl>, <decl><type ref="prev"/><name>paren</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>amount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>that</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>firsttry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>parencount</name></decl>, <decl><type ref="prev"/><name>quotecount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vi_lisp</name></decl>;</decl_stmt>


<expr_stmt><expr><name>vi_lisp</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_LISP</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>realpos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name>findmatch</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>findmatch</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>paren</name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>findmatch</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>LT_POSP</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>paren</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>&amp;</operator><name>paren</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>amount</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>parencount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>linewhite</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>that</name> <operator>=</operator> <call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><operator>*</operator><name>that</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>that</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><operator>(</operator><name>that</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>that</name></expr>;</expr_stmt></block_content></block></while>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>that</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>that</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>that</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><operator>++</operator><name>that</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>that</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>that</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>that</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>that</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">'('</literal> <operator>||</operator> <operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>parencount</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">')'</literal> <operator>||</operator> <operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>parencount</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>parencount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>amount</name> <operator>=</operator> <call><name>get_indent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>amount</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>that</name> <operator>=</operator> <call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vi_lisp</name> <operator>&amp;&amp;</operator> <call><name>get_indent</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>amount</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>that</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>amount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>that</name> <operator>&amp;&amp;</operator> <name>col</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>amount</name> <operator>+=</operator> <call><name>lbr_chartabsize_adv</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>that</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>







<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vi_lisp</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">'('</literal> <operator>||</operator> <operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">'['</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>lisp_match</name><argument_list>(<argument><expr><name>that</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>amount</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>that</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>amount</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>firsttry</name> <operator>=</operator> <name>amount</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>that</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>amount</name> <operator>+=</operator> <call><name>lbr_chartabsize</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>that</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>that</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>that</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>that</name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition> 
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vi_lisp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>that</name> <operator>!=</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>that</name> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>firsttry</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>parencount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>quotecount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vi_lisp</name>
<operator>||</operator> <operator>(</operator><operator>*</operator><name>that</name> <operator>!=</operator> <literal type="char">'"'</literal>
<operator>&amp;&amp;</operator> <operator>*</operator><name>that</name> <operator>!=</operator> <literal type="char">'\''</literal>
<operator>&amp;&amp;</operator> <operator>*</operator><name>that</name> <operator>!=</operator> <literal type="char">'#'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name><name>that</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>that</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>that</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>that</name></expr></argument>)</argument_list></call>
<operator>||</operator> <name>quotecount</name>
<operator>||</operator> <name>parencount</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">'('</literal> <operator>||</operator> <operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">'['</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><name>quotecount</name>
<operator>&amp;&amp;</operator> <operator>!</operator><name>parencount</name>
<operator>&amp;&amp;</operator> <name>vi_lisp</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quotecount</name> <operator>=</operator> <operator>!</operator><name>quotecount</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">'('</literal> <operator>||</operator> <operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">'['</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><name>quotecount</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>parencount</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">')'</literal> <operator>||</operator> <operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">']'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><name>quotecount</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>parencount</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>that</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>amount</name> <operator>+=</operator> <call><name>lbr_chartabsize_adv</name><argument_list>(
<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>that</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>amount</name> <operator>+=</operator> <call><name>lbr_chartabsize_adv</name><argument_list>(
<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>that</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>that</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>amount</name> <operator>+=</operator> <call><name>lbr_chartabsize</name><argument_list>(
<argument><expr><name>line</name></expr></argument>, <argument><expr><name>that</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>that</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>that</name> <operator>||</operator> <operator>*</operator><name>that</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>amount</name> <operator>=</operator> <name>firsttry</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>amount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>realpos</name></expr>;</expr_stmt>

<return>return <expr><name>amount</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>







<function><type><name>void</name></type>
<name>fixthisline</name><parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>get_the_indent</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>amount</name> <init>= <expr><call><name>get_the_indent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>amount</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>change_indent</name><argument_list>(<argument><expr><name>INDENT_SET</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>linewhite</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>did_ai</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>fix_indent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_paste</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_lisp</name></name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ai</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fixthisline</name><argument_list>(<argument><expr><name>get_lisp_indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><call><name>cindent_on</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_c_expr_indent</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type>
<name>f_indent</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <call><name>tv_get_lnum</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>get_indent_lnum</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>f_lispindent</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <call><name>tv_get_lnum</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>get_lisp_indent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
