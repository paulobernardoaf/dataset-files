<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\os_vms.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gen64def.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><struct>struct <name>_generic_64</name> <block>{
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>__nomember_alignment</name></cpp:pragma>
<macro><name>__union</name></macro> <block>{<block_content> 



<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>gen64$l_longword</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <name>int</name></type> <name><name>gen64$w_word</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
</block_content>}</block> <expr_stmt><expr><name>gen64$r_quad_overlay</name></expr>;</expr_stmt>
}</block></struct></type> <name>GENERIC_64</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>char</name></type> <name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>width</name></decl>;</decl_stmt>
<union>union
<block>{
<struct>struct
<block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>_basic</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>length</name></decl>;</decl_stmt>
}</block> <decl><name>y</name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>basic</name></decl>;</decl_stmt>
}</block> <decl><name>x</name></decl>;</union>
<decl_stmt><decl><type><name>int</name></type> <name>extended</name></decl>;</decl_stmt>
}</block></struct></type> <name>TT_MODE</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>short</name></type> <name>buflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>itemcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufadrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>retlen</name></decl>;</decl_stmt>
}</block></struct></type> <name>ITEM</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>ITEM</name></type> <name>equ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nul</name></decl>;</decl_stmt>
}</block></struct></type> <name>ITMLST1</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>ITEM</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ITEM</name></type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nul</name></decl>;</decl_stmt>
}</block></struct></type> <name>ITMLST2</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>TT_MODE</name></type> <name>orgmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>short</name></type> <name>iochan</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>short</name></type> <name><name>iosb</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>vms_match_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>vms_match_free</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>vms_fmatch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>Fspec_Rms</name></decl>;</decl_stmt> 



<function_decl><type><specifier>static</specifier> <name>TT_MODE</name></type> <name>get_tty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_tty</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPL_ALLOC_INC</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EQN</name><parameter_list>(<parameter><type><name>S1</name></type></parameter>,<parameter><type><name>S2</name></type></parameter>,<parameter><type><name>LN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(strncmp(S1,S2,LN) == 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_FOLLOWING_SLASHES</name><parameter_list>(<parameter><type><name>Str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { while (Str[1] == '/') ++Str; } while (0)</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>vul_desc</name><parameter_list>(<parameter><decl><type><name>DESC</name> <modifier>*</modifier></type><name>des</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>des</name><operator>-&gt;</operator><name>dsc$b_dtype</name></name> <operator>=</operator> <name>DSC$K_DTYPE_T</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>des</name><operator>-&gt;</operator><name>dsc$b_class</name></name> <operator>=</operator> <name>DSC$K_CLASS_S</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>des</name><operator>-&gt;</operator><name>dsc$a_pointer</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>des</name><operator>-&gt;</operator><name>dsc$w_length</name></name> <operator>=</operator> <ternary><condition><expr><name>str</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>vul_item</name><parameter_list>(<parameter><decl><type><name>ITEM</name> <modifier>*</modifier></type><name>itm</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>cod</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>adr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>itm</name><operator>-&gt;</operator><name>buflen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itm</name><operator>-&gt;</operator><name>itemcode</name></name> <operator>=</operator> <name>cod</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itm</name><operator>-&gt;</operator><name>bufadrs</name></name> <operator>=</operator> <name>adr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itm</name><operator>-&gt;</operator><name>retlen</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>mch_settmode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tmode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>tmode</name> <operator>==</operator> <name>TMODE_RAW</name></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_tty</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block>{<block_content>
<switch>switch <condition>(<expr><name><name>orgmode</name><operator>.</operator><name>width</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">132</literal></expr>:</case> <expr_stmt><expr><call><name>OUT_STR_NF</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\033[?3h\033&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">80</literal></expr>:</case> <expr_stmt><expr><call><name>OUT_STR_NF</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\033[?3l\033&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>sys$qiow</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iochan</name></expr></argument>, <argument><expr><name>IO$_SETMODE</name></expr></argument>, <argument><expr><name>iosb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>orgmode</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TT_MODE</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name><operator>!=</operator><name>SS$_NORMAL</name> <operator>||</operator> <operator>(</operator><name><name>iosb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xFFFF</literal><operator>)</operator><operator>!=</operator><name>SS$_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sys$dassgn</name><argument_list>(<argument><expr><name>iochan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iochan</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_tty</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TT_MODE</name></type> <name>newmode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>short</name></type> <name>first_time</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first_time</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>orgmode</name> <operator>=</operator> <call><name>get_tty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first_time</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>newmode</name> <operator>=</operator> <call><name>get_tty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>newmode</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>row</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>newmode</name><operator>.</operator><name>x</name><operator>.</operator><name>y</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>newmode</name><operator>.</operator><name>x</name><operator>.</operator><name>basic</name></name> <operator>|=</operator> <operator>(</operator><name>TT$M_NOECHO</name> <operator>|</operator> <name>TT$M_HOSTSYNC</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newmode</name><operator>.</operator><name>x</name><operator>.</operator><name>basic</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TT$M_TTSYNC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newmode</name><operator>.</operator><name>extended</name></name> <operator>|=</operator> <name>TT2$M_PASTHRU</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>sys$qiow</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iochan</name></expr></argument>, <argument><expr><name>IO$_SETMODE</name></expr></argument>, <argument><expr><name>iosb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>newmode</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newmode</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name><operator>!=</operator><name>SS$_NORMAL</name> <operator>||</operator> <operator>(</operator><name><name>iosb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xFFFF</literal><operator>)</operator><operator>!=</operator><name>SS$_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TT_MODE</name></type>
<name>get_tty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><specifier>static</specifier> <call><name>$DESCRIPTOR</name><argument_list>(<argument><expr><name>odsc</name></expr></argument>,<argument><expr><literal type="string">"SYS$OUTPUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TT_MODE</name></type> <name>tt_mode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iochan</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>sys$assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>odsc</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iochan</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>sys$qiow</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iochan</name></expr></argument>, <argument><expr><name>IO$_SENSEMODE</name></expr></argument>, <argument><expr><name>iosb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>tt_mode</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tt_mode</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>SS$_NORMAL</name> <operator>||</operator> <operator>(</operator><name><name>iosb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>!=</operator> <name>SS$_NORMAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tt_mode</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tt_mode</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tt_mode</name><operator>.</operator><name>class</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tt_mode</name><operator>.</operator><name>x</name><operator>.</operator><name>basic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tt_mode</name><operator>.</operator><name>x</name><operator>.</operator><name>y</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tt_mode</name><operator>.</operator><name>extended</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return<expr><operator>(</operator><name>tt_mode</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>mch_get_shellsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TT_MODE</name></type> <name>tmode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmode</name> <operator>=</operator> <call><name>get_tty</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>Columns</name> <operator>=</operator> <name><name>tmode</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Rows</name> <operator>=</operator> <name><name>tmode</name><operator>.</operator><name>x</name><operator>.</operator><name>y</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>mch_set_shellsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>set_tty</name><argument_list>(<argument><expr><name>Rows</name></expr></argument>, <argument><expr><name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>Columns</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">132</literal></expr>:</case> <expr_stmt><expr><call><name>OUT_STR_NF</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\033[?3h\033&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">80</literal></expr>:</case> <expr_stmt><expr><call><name>OUT_STR_NF</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\033[?3l\033&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>mch_getenv</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lognam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DESC</name></type> <name>d_file_dev</name></decl>, <decl><type ref="prev"/><name>d_lognam</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buffer</name><index>[<expr><name>LNM$C_NAMLENGTH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>attrib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lengte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ITMLST2</name></type> <name>itmlst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vul_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d_lognam</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>lognam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vul_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d_file_dev</name></expr></argument>, <argument><expr><literal type="string">"LNM$FILE_DEV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>attrib</name> <operator>=</operator> <name>LNM$M_CASE_BLIND</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vul_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>itmlst</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>LNM$_INDEX</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vul_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>itmlst</name><operator>.</operator><name>string</name></name></expr></argument>, <argument><expr><name>LNM$C_NAMLENGTH</name></expr></argument>, <argument><expr><name>LNM$_STRING</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lengte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itmlst</name><operator>.</operator><name>nul</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sys$trnlnm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attrib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d_file_dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d_lognam</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>itmlst</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SS$_NORMAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>lengte</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>lengte</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cp</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><name>cp</name><operator>)</operator></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>sbuf</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>lognam</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>lengte</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>lengte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cp</name></expr></argument>, <argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>cp</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>mch_setenv</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>dum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>attrib</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>acmode</name> <init>= <expr><name>PSL$C_SUPER</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>DESC</name></type> <name>tabnam</name></decl>, <decl><type ref="prev"/><name>lognam</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ITMLST1</name></type> <name>itmlst</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vul_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tabnam</name></expr></argument>, <argument><expr><literal type="string">"LNM$JOB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vul_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lognam</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vul_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>itmlst</name><operator>.</operator><name>equ</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>LNM$_STRING</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itmlst</name><operator>.</operator><name>nul</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sys$crelnm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attrib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tabnam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lognam</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acmode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itmlst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>res</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>vms_sys</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DESC</name></type> <name>cdsc</name></decl>, <decl><type ref="prev"/><name>odsc</name></decl>, <decl><type ref="prev"/><name>idsc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vul_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cdsc</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vul_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>odsc</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>inp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vul_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>idsc</name></expr></argument>, <argument><expr><name>inp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lib$spawn</name><argument_list>(<argument><expr><ternary><condition><expr><name>cmd</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>cdsc</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, 
<argument><expr><ternary><condition><expr><name>inp</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>idsc</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, 
<argument><expr><ternary><condition><expr><name>out</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>odsc</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, 
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>char</name> <modifier>*</modifier></type>
<name>vms_tolower</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>nlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>vms_sys_status</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>SS$_NORMAL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>status</name> <operator>&amp;</operator> <name>STS$M_SUCCESS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>vms_read</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>inbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>function</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TT_MODE</name></type> <name>tt_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ITEM</name></type> <name><name>itmlst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name><name>trm_mask</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iochan</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tt_mode</name> <operator>=</operator> <call><name>get_tty</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vul_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>itmlst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRM$_MODIFIERS</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator> <name>TRM$M_TM_NOECHO</name> <operator>|</operator> <name>TRM$M_TM_NOEDIT</name> <operator>|</operator>
<name>TRM$M_TM_NOFILTR</name> <operator>|</operator> <name>TRM$M_TM_TRMNOECHO</name> <operator>|</operator>
<name>TRM$M_TM_NORECALL</name><operator>)</operator></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vul_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>itmlst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>trm_mask</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>TRM$_TERM</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>trm_mask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>function</name> <operator>=</operator> <operator>(</operator><name>IO$_READLBLK</name> <operator>|</operator> <name>IO$M_EXTEND</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>sys$qiow</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iochan</name></expr></argument>, <argument><expr><name>function</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iosb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>nbytes</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>itmlst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>itmlst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name>function</name> <operator>=</operator> <operator>(</operator><name>IO$_READLBLK</name> <operator>|</operator> <name>IO$M_TIMED</name> <operator>|</operator> <name>IO$M_ESCAPE</name> <operator>|</operator> <name>IO$M_NOECHO</name> <operator>|</operator> <name>IO$M_NOFILTR</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>sys$qiow</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iochan</name></expr></argument>, <argument><expr><name>function</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iosb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>inbuf</name><operator>+</operator><name>len</name></expr></argument>, <argument><expr><name>nbytes</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>vms_wproc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>vms_match_alloced</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>DECC$K_FOREIGN</name></expr> )</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>vms_match_num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>vms_fmatch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vms_fmatch</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>, <argument><expr><name>EXPL_ALLOC_INC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vms_fmatch</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vms_match_alloced</name> <operator>=</operator> <name>EXPL_ALLOC_INC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vms_match_free</name> <operator>=</operator> <name>EXPL_ALLOC_INC</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>vms_match_free</name> <operator>=</operator> <name>vms_match_alloced</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>vms_remove_version</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name><operator>=</operator><call><name>vms_tolower</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>vms_match_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>,<argument><expr><name><name>vms_fmatch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>vms_match_free</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>old_vms_fmatch</name> <init>= <expr><name>vms_fmatch</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>vms_match_alloced</name> <operator>+=</operator> <name>EXPL_ALLOC_INC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vms_fmatch</name> <operator>=</operator> <call><name>vim_realloc</name><argument_list>(<argument><expr><name>old_vms_fmatch</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>vms_match_alloced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vms_fmatch</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>old_vms_fmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vms_match_free</name> <operator>=</operator> <name>EXPL_ALLOC_INC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>vms_fmatch</name><index>[<expr><name>vms_match_num</name></expr>]</index></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>vms_match_num</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>














<function><type><name>int</name></type>
<name>mch_expand_wildcards</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num_pat</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pat</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_file</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>files_alloced</name></decl>, <decl><type ref="prev"/><name>files_free</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>files_alloced</name> <operator>=</operator> <name>EXPL_ALLOC_INC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>files_free</name> <operator>=</operator> <name>EXPL_ALLOC_INC</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>, <argument><expr><name>files_alloced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pat</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>pat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>pat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="char">'~'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>expand_env</name><argument_list>(<argument><expr><name><name>pat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name><name>pat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>vms_match_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>decc$translate_vms</name><argument_list>(<argument><expr><call><name>vms_fixfilename</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>int</name><operator>)</operator> <name>result</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>decc$to_vms</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>vms_wproc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><operator>(</operator><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>EW_DIR</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary> <operator>)</operator></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>vms_match_num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EW_NOTFOUND</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>mch_getperm</name><argument_list>(<argument><expr><name><name>vms_fmatch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>(</operator><call><name>mch_isdir</name><argument_list>(<argument><expr><name><name>vms_fmatch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator> <name>dir</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EW_DIR</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>dir</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EW_FILE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EW_EXEC</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>mch_can_exe</name><argument_list>(<argument><expr><name><name>vms_fmatch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>EW_SHELLCMD</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>--</operator><name>files_free</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>old_file</name> <init>= <expr><operator>*</operator><name>file</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>files_alloced</name> <operator>+=</operator> <name>EXPL_ALLOC_INC</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <call><name>vim_realloc</name><argument_list>(<argument><expr><name>old_file</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>files_alloced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>old_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>FAIL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>files_free</name> <operator>=</operator> <name>EXPL_ALLOC_INC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>file</name><operator>)</operator><index>[<expr><operator>*</operator><name>num_file</name><operator>++</operator></expr>]</index> <operator>=</operator> <name><name>vms_fmatch</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>mch_expandpath</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vms_match_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>decc$translate_vms</name><argument_list>(<argument><expr><call><name>vms_fixfilename</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>int</name><operator>)</operator> <name>result</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>decc$to_vms</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>vms_wproc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><operator>(</operator><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>EW_DIR</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>vms_match_num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mch_getperm</name><argument_list>(<argument><expr><name><name>vms_fmatch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>addfile</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name><name>vms_fmatch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>cnt</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>vms_unix_mixed_filespec</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lastcolon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end_of_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out_str</name><init>=<expr><name>out</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>lastcolon</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>lastcolon</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>lastcolon</name> <operator>-</operator> <name>in</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end_of_dir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 


<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>in</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'['</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'&lt;'</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_FOLLOWING_SLASHES</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>EQN</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"../"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end_of_dir</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_FOLLOWING_SLASHES</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<while>while <condition>(<expr><call><name>EQN</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"./"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_FOLLOWING_SLASHES</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>in</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>in</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>in</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>in</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">']'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'&gt;'</literal><operator>)</operator></expr> )</condition> <block>{<block_content> 
<expr_stmt><expr><name>end_of_dir</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_FOLLOWING_SLASHES</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>EQN</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"../"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end_of_dir</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_FOLLOWING_SLASHES</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<while>while <condition>(<expr><call><name>EQN</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"./"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>end_of_dir</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_FOLLOWING_SLASHES</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>in</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>in</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>end_of_dir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>*</operator><name>end_of_dir</name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>vms_fspec_proc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fil</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>Fspec_Rms</name></expr></argument>,<argument><expr><name>fil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name> <modifier>*</modifier></type>
<name>vms_fixfilename</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>instring</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>buflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>instring</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>buflen</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>vim_realloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tmpbuf</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><name>instring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>Fspec_Rms</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>instring</name></expr></argument>,<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>instring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>instring</name></expr></argument>,<argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> 
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>decc$to_vms</name><argument_list>(<argument><expr><name>instring</name></expr></argument>, <argument><expr><name>vms_fspec_proc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vms_unix_mixed_filespec</name><argument_list>(<argument><expr><name>instring</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>



<expr_stmt><expr><call><name>vms_unix_mixed_filespec</name><argument_list>(<argument><expr><name>instring</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>vms_remove_version</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cp</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>( <argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>cp</name> <operator>=</operator> <call><name>vim_strrchr</name><argument_list>( <argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>vim_strrchr</name><argument_list>( <argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition> <block>{<block_content><empty_stmt>;</empty_stmt></block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>vim_strrchr</name><argument_list>( <argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition> <block>{<block_content><empty_stmt>;</empty_stmt></block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>fp</name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>( <expr><operator>*</operator><name>fp</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>fp</name> <operator>&lt;</operator> <name>cp</name></expr> )</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><operator>*</operator><name>fp</name><operator>++</operator> <operator>==</operator> <literal type="char">'.'</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<return>return ;</return>
</block_content>}</block></function>

<struct>struct <name>typeahead_st</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>numchars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>firstchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>reserved0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>reserved1</name></decl>;</decl_stmt>
}</block> <decl><name>typeahead</name></decl>;</struct>






<function><type><name>int</name></type>
<name>RealWaitForChar</name><parameter_list>(
<parameter><decl><type><name>int</name> <name>fd</name></type> <name>UNUSED</name></decl></parameter>, 
<parameter><decl><type><name>long</name></type> <name>msec</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier><name>check_for_gpm</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>interrupted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_generic_64</name></name></type> <name>time_curr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_generic_64</name></name></type> <name>time_diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>_generic_64</name></name></type> <name>time_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>convert_operation</name> <init>= <expr><name>LIB$K_DELTA_SECONDS_F</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sec</name> <init>=<expr><operator>(</operator><name>float</name><operator>)</operator> <name>msec</name><operator>/</operator><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iochan</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_tty</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>sys$gettim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>SS$_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__G_FLOAT</name><operator>==</operator><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>lib$cvts_to_internal_time</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>convert_operation</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>lib$cvtf_to_internal_time</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>convert_operation</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>time_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LIB$_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>lib$add_times</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>time_curr</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>time_diff</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>time_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LIB$_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>TRUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>sys$qiow</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iochan</name></expr></argument>, <argument><expr><name>IO$_SENSEMODE</name> <operator>|</operator> <name>IO$M_TYPEAHDCNT</name></expr></argument>, <argument><expr><name>iosb</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>typeahead</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>SS$_NORMAL</name> <operator>||</operator> <operator>(</operator><name><name>iosb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>!=</operator> <name>SS$_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>typeahead</name><operator>.</operator><name>numchars</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 


<if_stmt><if>if <condition>(<expr><name>msec</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>msec</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>sys$gettim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>SS$_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>lib$sub_times</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>time_out</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>time_curr</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>time_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LIB$_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 


</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
</unit>
