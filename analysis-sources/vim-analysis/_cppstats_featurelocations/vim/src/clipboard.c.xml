<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\clipboard.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CYGWIN_WIN32_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"winclip.pro"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>












<function><type><name>void</name></type>
<name>clip_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>can_use</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <operator>&amp;</operator><name>clip_star</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>available</name></name> <operator>=</operator> <name>can_use</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>owned</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>SELECT_CLEARED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <operator>&amp;</operator><name>clip_plus</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <operator>&amp;</operator><name>clip_plus</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>clip_update_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>clip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pos_T</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>redo_VIsual_busy</name> <operator>&amp;&amp;</operator> <name>VIsual_active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>NORMAL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LT_POS</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>end</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EQUAL_POS</name><argument_list>(<argument><expr><name><name>clip</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>EQUAL_POS</name><argument_list>(<argument><expr><name><name>clip</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call>
<operator>||</operator> <name><name>clip</name><operator>-&gt;</operator><name>vmode</name></name> <operator>!=</operator> <name>VIsual_mode</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clip_clear_selection</name><argument_list>(<argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clip</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clip</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clip</name><operator>-&gt;</operator><name>vmode</name></name> <operator>=</operator> <name>VIsual_mode</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clip_free_selection</name><argument_list>(<argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clip_own_selection</name><argument_list>(<argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clip_gen_set_selection</name><argument_list>(<argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>clip_gen_own_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>clip_mch_own_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>clip_xterm_own_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>clip_mch_own_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>clip_own_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name><name>cbd</name><operator>-&gt;</operator><name>available</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>was_owned</name> <init>= <expr><name><name>cbd</name><operator>-&gt;</operator><name>owned</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cbd</name><operator>-&gt;</operator><name>owned</name></name> <operator>=</operator> <operator>(</operator><call><name>clip_gen_own_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>was_owned</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>cbd</name> <operator>==</operator> <operator>&amp;</operator><name>clip_star</name> <operator>||</operator> <name>cbd</name> <operator>==</operator> <operator>&amp;</operator><name>clip_plus</name><operator>)</operator></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>cbd</name><operator>-&gt;</operator><name>owned</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>get_real_state</name><argument_list>()</argument_list></call> <operator>==</operator> <name>VISUAL</name>
<operator>||</operator> <call><name>get_real_state</name><argument_list>()</argument_list></call> <operator>==</operator> <name>SELECTMODE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>cbd</name> <operator>==</operator> <operator>&amp;</operator><name>clip_star</name></expr> ?</condition><then> <expr><call><name>clip_isautosel_star</name><argument_list>()</argument_list></call></expr>
</then><else>: <expr><call><name>clip_isautosel_plus</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_V</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_VNC</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cbd</name><operator>-&gt;</operator><name>owned</name></name> <operator>&amp;&amp;</operator> <name><name>cbd</name><operator>-&gt;</operator><name>available</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cbd</name><operator>-&gt;</operator><name>owned</name></name> <operator>=</operator> <operator>(</operator><call><name>clip_gen_own_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>clip_gen_lose_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_mch_lose_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>clip_xterm_lose_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>clip_mch_lose_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>clip_lose_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>was_owned</name> <init>= <expr><name><name>cbd</name><operator>-&gt;</operator><name>owned</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>visual_selection</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cbd</name> <operator>==</operator> <operator>&amp;</operator><name>clip_star</name> <operator>||</operator> <name>cbd</name> <operator>==</operator> <operator>&amp;</operator><name>clip_plus</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>visual_selection</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>clip_free_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbd</name><operator>-&gt;</operator><name>owned</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>visual_selection</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_clear_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clip_gen_lose_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>visual_selection</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>was_owned</name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>get_real_state</name><argument_list>()</argument_list></call> <operator>==</operator> <name>VISUAL</name>
<operator>||</operator> <call><name>get_real_state</name><argument_list>()</argument_list></call> <operator>==</operator> <name>SELECTMODE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>cbd</name> <operator>==</operator> <operator>&amp;</operator><name>clip_star</name></expr> ?</condition><then>
<expr><call><name>clip_isautosel_star</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>clip_isautosel_plus</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_V</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_VNC</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>update_curbuf</name><argument_list>(<argument><expr><name>INVERTED_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cursor_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_flush_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>clip_copy_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>clip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>clip</name><operator>-&gt;</operator><name>available</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clip_update_selection</name><argument_list>(<argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clip_free_selection</name><argument_list>(<argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clip_own_selection</name><argument_list>(<argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>clip</name><operator>-&gt;</operator><name>owned</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_get_selection</name><argument_list>(<argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clip_gen_set_selection</name><argument_list>(<argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>global_change_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>clipboard_needs_update</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>clip_did_set_selection</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>




<function><type><name>void</name></type>
<name>start_global_changes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>global_change_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>clip_unnamed_saved</name> <operator>=</operator> <name>clip_unnamed</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clipboard_needs_update</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clip_did_set_selection</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>clip_unnamed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clip_did_set_selection</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_clipboard_needs_update</name><parameter_list>()</parameter_list>
<block>{<block_content>
<return>return <expr><name>clipboard_needs_update</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>end_global_changes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>global_change_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clip_did_set_selection</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>clip_did_set_selection</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clip_unnamed</name> <operator>=</operator> <name>clip_unnamed_saved</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clip_unnamed_saved</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>clipboard_needs_update</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>clip_unnamed</name> <operator>&amp;</operator> <name>CLIP_UNNAMED</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clip_own_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clip_gen_set_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>clip_unnamed</name> <operator>&amp;</operator> <name>CLIP_UNNAMED_PLUS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clip_own_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clip_gen_set_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>clipboard_needs_update</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>clip_auto_select</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>clip_isautosel_star</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_copy_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>clip_isautosel_plus</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_copy_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>clip_isautosel_star</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr> ?</condition><then> <expr><operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_ASEL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>clip_autoselect_star</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>clip_isautosel_plus</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr> ?</condition><then> <expr><operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_ASELPLUS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>clip_autoselect_plus</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>clip_compare_pos</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>row1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>col1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>row2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>col2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>row1</name> <operator>&gt;</operator> <name>row2</name></expr>)</condition><block type="pseudo"><block_content> <return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>row1</name> <operator>&lt;</operator> <name>row2</name></expr>)</condition><block type="pseudo"><block_content> <return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>col1</name> <operator>&gt;</operator> <name>col2</name></expr>)</condition><block type="pseudo"><block_content> <return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>col1</name> <operator>&lt;</operator> <name>col2</name></expr>)</condition><block type="pseudo"><block_content> <return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP_CLEAR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP_SET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP_TOGGLE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>clip_invert_rectangle</name><parameter_list>(
<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier><name>cbd</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>row_arg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>col_arg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>height_arg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width_arg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>invert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>row_arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>col_arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name>height_arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name>width_arg</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>screen_zindex</name> <operator>=</operator> <name>CLIP_ZINDEX</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <name><name>cbd</name><operator>-&gt;</operator><name>min_col</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>-=</operator> <name><name>cbd</name><operator>-&gt;</operator><name>min_col</name></name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>cbd</name><operator>-&gt;</operator><name>min_col</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <name><name>cbd</name><operator>-&gt;</operator><name>max_col</name></name> <operator>-</operator> <name>col</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>cbd</name><operator>-&gt;</operator><name>max_col</name></name> <operator>-</operator> <name>col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <name><name>cbd</name><operator>-&gt;</operator><name>min_row</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>height</name> <operator>-=</operator> <name><name>cbd</name><operator>-&gt;</operator><name>min_row</name></name> <operator>-</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>cbd</name><operator>-&gt;</operator><name>min_row</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&gt;</operator> <name><name>cbd</name><operator>-&gt;</operator><name>max_row</name></name> <operator>-</operator> <name>row</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>cbd</name><operator>-&gt;</operator><name>max_row</name></name> <operator>-</operator> <name>row</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_mch_invert_rectangle</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>screen_draw_rectangle</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>invert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>screen_zindex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type>
<name>clip_invert_area</name><parameter_list>(
<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>row1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>col1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>row2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>col2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>how</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>invert</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_col</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>max_col</name> <operator>=</operator> <name><name>cbd</name><operator>-&gt;</operator><name>max_col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>max_col</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>how</name> <operator>==</operator> <name>CLIP_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>invert</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>clip_compare_pos</name><argument_list>(<argument><expr><name>row1</name></expr></argument>, <argument><expr><name>col1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>col2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_row</name></decl>, <decl><type ref="prev"/><name>tmp_col</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_row</name> <operator>=</operator> <name>row1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_col</name> <operator>=</operator> <name>col1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>row1</name> <operator>=</operator> <name>row2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col1</name> <operator>=</operator> <name>col2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>row2</name> <operator>=</operator> <name>tmp_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col2</name> <operator>=</operator> <name>tmp_col</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>how</name> <operator>==</operator> <name>CLIP_TOGGLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>invert</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>row1</name> <operator>==</operator> <name>row2</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clip_invert_rectangle</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>col1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>col2</name> <operator>-</operator> <name>col1</name></expr></argument>, <argument><expr><name>invert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>col1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clip_invert_rectangle</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>col1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name> <operator>-</operator> <name>col1</name></expr></argument>, <argument><expr><name>invert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row1</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>col2</name> <operator>&lt;</operator> <name>max_col</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clip_invert_rectangle</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>col2</name></expr></argument>, <argument><expr><name>invert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row2</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>row2</name> <operator>&gt;=</operator> <name>row1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_invert_rectangle</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>row2</name> <operator>-</operator> <name>row1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>, <argument><expr><name>invert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>clip_modeless</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_click</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_drag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>repeat</name></decl>;</decl_stmt>

<expr_stmt><expr><name>repeat</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>clip_star</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>SELECT_MODE_CHAR</name>
<operator>||</operator> <name><name>clip_star</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>SELECT_MODE_LINE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_2CLICK</name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>clip_star</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>SELECT_MODE_WORD</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_3CLICK</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_click</name> <operator>&amp;&amp;</operator> <name>button</name> <operator>==</operator> <name>MOUSE_RIGHT</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>SELECT_CLEARED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_start_selection</name><argument_list>(<argument><expr><name>mouse_col</name></expr></argument>, <argument><expr><name>mouse_row</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clip_process_selection</name><argument_list>(<argument><expr><name>button</name></expr></argument>, <argument><expr><name>mouse_col</name></expr></argument>, <argument><expr><name>mouse_row</name></expr></argument>, <argument><expr><name>repeat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>is_click</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_start_selection</name><argument_list>(<argument><expr><name>mouse_col</name></expr></argument>, <argument><expr><name>mouse_row</name></expr></argument>, <argument><expr><name>repeat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>is_drag</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>SELECT_CLEARED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_process_selection</name><argument_list>(<argument><expr><name>button</name></expr></argument>, <argument><expr><name>mouse_col</name></expr></argument>, <argument><expr><name>mouse_row</name></expr></argument>, <argument><expr><name>repeat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>clip_process_selection</name><argument_list>(<argument><expr><name>MOUSE_RELEASE</name></expr></argument>, <argument><expr><name>mouse_col</name></expr></argument>, <argument><expr><name>mouse_row</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>clip_update_modeless_selection</name><parameter_list>(
<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>row1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>col1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>row2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>col2</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>row1</name> <operator>!=</operator> <name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>||</operator> <name>col1</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clip_invert_area</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>row1</name></expr></argument>, <argument><expr><name>col1</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr></argument>,
<argument><expr><name>CLIP_TOGGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>row1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>row2</name> <operator>!=</operator> <name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>||</operator> <name>col2</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clip_invert_area</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>col2</name></expr></argument>,
<argument><expr><name>CLIP_TOGGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>row2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR_CLASS</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt;= ' ' ? ' ' : vim_iswordc(c))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>clip_get_word_boundaries</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>start_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mboff</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name>screen_Rows</name> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name>screen_Columns</name> <operator>||</operator> <name>ScreenLines</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>ScreenLines</name> <operator>+</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <call><name>dbcs_screen_head_off</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>start_class</name> <operator>=</operator> <call><name>CHAR_CLASS</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<for>for <control>( <init>;</init> <condition><expr><name>temp_col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>temp_col</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>mboff</name> <operator>=</operator> <call><name>dbcs_screen_head_off</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>temp_col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>temp_col</name> <operator>-=</operator> <name>mboff</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>CHAR_CLASS</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>temp_col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>start_class</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>temp_col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>word_start_col</name></name> <operator>=</operator> <name>temp_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<for>for <control>( <init>;</init> <condition><expr><name>temp_col</name> <operator>&lt;</operator> <name>screen_Columns</name></expr>;</condition> <incr><expr><name>temp_col</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>dbcs_ptr2cells</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>temp_col</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>temp_col</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>CHAR_CLASS</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>temp_col</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>start_class</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>temp_col</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>word_end_col</name></name> <operator>=</operator> <name>temp_col</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>clip_get_line_end</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier><name>cbd</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name>screen_Rows</name> <operator>||</operator> <name>ScreenLines</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name><name>cbd</name><operator>-&gt;</operator><name>max_col</name></name></expr>;</init>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<condition><expr><name>screen_Columns</name></expr>;</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<incr><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</incr> i--)</control>
<if_stmt><if>if <condition>(<expr><name><name>ScreenLines</name><index>[<expr><name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>clip_start_selection</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repeated_click</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><operator>&amp;</operator><name>clip_star</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row_cp</name> <init>= <expr><name>row</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col_cp</name> <init>= <expr><name>col</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row_cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col_cp</name></expr></argument>, <argument><expr><name>FIND_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>popup_is_in_scrollbar</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>row_cp</name></expr></argument>, <argument><expr><name>col_cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>SELECT_DONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_clear_selection</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>check_row</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>check_col</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>mb_fix_col</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_row</name></name> <operator>=</operator> <operator>(</operator><name>short_u</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>SELECT_IN_PROGRESS</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>min_col</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>max_col</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <call><name>popup_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>
<operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_has_scrollbar</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>max_col</name></name> <operator>&gt;</operator> <name>screen_Columns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>max_col</name></name> <operator>=</operator> <name>screen_Columns</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>min_row</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>max_row</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <call><name>popup_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal>
<operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_popup_border</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>min_col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>max_col</name></name> <operator>=</operator> <name>screen_Columns</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>min_row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>max_row</name></name> <operator>=</operator> <name>screen_Rows</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>repeated_click</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>cb</name><operator>-&gt;</operator><name>mode</name></name> <operator>&gt;</operator> <name>SELECT_MODE_LINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>SELECT_MODE_CHAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>SELECT_MODE_CHAR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_undraw_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SELECT_MODE_CHAR</name></expr>:</case>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_start_col</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>word_end_col</name></name> <operator>=</operator> <call><name>clip_get_line_end</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SELECT_MODE_WORD</name></expr>:</case>
<expr_stmt><expr><call><name>clip_get_word_boundaries</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_start_col</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>word_start_col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_end_col</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>word_end_col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clip_invert_area</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>word_start_col</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>word_end_col</name></name></expr></argument>, <argument><expr><name>CLIP_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>word_start_col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>word_end_col</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SELECT_MODE_LINE</name></expr>:</case>
<expr_stmt><expr><call><name>clip_invert_area</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>, <argument><expr><name>CLIP_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_SELECTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Selection started at (%ld,%d)\n"</literal></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>clip_process_selection</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,
<parameter><decl><type><name>int_u</name></type> <name>repeated_click</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><operator>&amp;</operator><name>clip_star</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slen</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <name>MOUSE_RELEASE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>SELECT_IN_PROGRESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>SELECT_CLEARED</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_SELECTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Selection ended: (%ld,%d) to (%ld,%d)\n"</literal></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>,
<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>clip_isautosel_star</name><argument_list>()</argument_list></call>
<operator>||</operator> <operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr> ?</condition><then> <expr><operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_ASELML</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>clip_autoselectml</name></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_copy_modeless_selection</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>SELECT_DONE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>check_row</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>check_col</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>mb_fix_col</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>col</name></name> <operator>&amp;&amp;</operator> <name>row</name> <operator>==</operator> <name><name>cb</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>repeated_click</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>SELECT_DONE</name> <operator>&amp;&amp;</operator> <name>button</name> <operator>==</operator> <name>MOUSE_RIGHT</name></expr>)</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>clip_compare_pos</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><call><name>clip_compare_pos</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name>col</name> <operator>&gt;</operator> <name>col</name> <operator>-</operator> <name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>diff</name> <operator>=</operator> <operator>(</operator><name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <name>row</name><operator>)</operator> <operator>-</operator>
<operator>(</operator><name>row</name> <operator>-</operator> <name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name>diff</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>+</operator>
<name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_row</name></name> <operator>=</operator> <operator>(</operator><name>short_u</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_start_col</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_end_col</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_row</name></name> <operator>=</operator> <operator>(</operator><name>short_u</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_start_col</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_end_col</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>SELECT_MODE_WORD</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>repeated_click</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>SELECT_MODE_CHAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>SELECT_IN_PROGRESS</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_SELECTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Selection extending to (%d,%d)\n"</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>repeated_click</name> <operator>&amp;&amp;</operator> <operator>++</operator><name><name>cb</name><operator>-&gt;</operator><name>mode</name></name> <operator>&gt;</operator> <name>SELECT_MODE_LINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>SELECT_MODE_CHAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SELECT_MODE_CHAR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>!=</operator> <name><name>cb</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>word_end_col</name></name> <operator>=</operator> <call><name>clip_get_line_end</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>clip_compare_pos</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_row</name></name></expr></argument>,
<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_start_col</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>word_end_col</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_update_modeless_selection</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_row</name></name></expr></argument>,
<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_start_col</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <call><name>mb_lefthalve</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clip_update_modeless_selection</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_row</name></name></expr></argument>,
<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_start_col</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name>
<operator>&amp;&amp;</operator> <call><name>mb_lefthalve</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_row</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_start_col</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>word_end_col</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_update_modeless_selection</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>word_end_col</name></name></expr></argument>,
<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_row</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_start_col</name></name> <operator>+</operator> <name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_update_modeless_selection</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>,
<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_row</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_start_col</name></name> <operator>+</operator> <name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>SELECT_MODE_WORD</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name><name>cb</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>word_start_col</name></name>
<operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>cb</name><operator>-&gt;</operator><name>word_end_col</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>repeated_click</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>clip_get_word_boundaries</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>clip_compare_pos</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_row</name></name></expr></argument>,
<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_start_col</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_update_modeless_selection</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_row</name></name></expr></argument>,
<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_start_col</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>word_end_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_update_modeless_selection</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>word_start_col</name></name></expr></argument>,
<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_row</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_end_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>SELECT_MODE_LINE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name><name>cb</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>repeated_click</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>clip_compare_pos</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_row</name></name></expr></argument>,
<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_start_col</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_update_modeless_selection</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_row</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_update_modeless_selection</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>origin_row</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_SELECTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Selection is: (%ld,%d) to (%ld,%d)\n"</literal></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>,
<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>void</name></type>
<name>clip_may_redraw_selection</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name>col</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><name>col</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>SELECT_CLEARED</name>
<operator>&amp;&amp;</operator> <name>row</name> <operator>&gt;=</operator> <name><name>clip_star</name><operator>.</operator><name>start</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;=</operator> <name><name>clip_star</name><operator>.</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name><name>clip_star</name><operator>.</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>start</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>clip_star</name><operator>.</operator><name>start</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>clip_star</name><operator>.</operator><name>start</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name><name>clip_star</name><operator>.</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>end</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>clip_star</name><operator>.</operator><name>end</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>clip_star</name><operator>.</operator><name>end</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_invert_area</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>clip_clear_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cbd</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>SELECT_CLEARED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>clip_invert_area</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cbd</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>cbd</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cbd</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>cbd</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name>CLIP_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbd</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>SELECT_CLEARED</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>clip_may_clear_selection</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>SELECT_DONE</name>
<operator>&amp;&amp;</operator> <name>row2</name> <operator>&gt;=</operator> <name><name>clip_star</name><operator>.</operator><name>start</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name>row1</name> <operator>&lt;=</operator> <name><name>clip_star</name><operator>.</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_clear_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>clip_scroll_selection</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lnum</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>SELECT_CLEARED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>clip_star</name><operator>.</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <name>rows</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>clip_star</name><operator>.</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <name>screen_Rows</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>clip_star</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>SELECT_CLEARED</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>clip_star</name><operator>.</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>clip_star</name><operator>.</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <name>rows</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>clip_star</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>SELECT_CLEARED</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <name>screen_Rows</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>clip_star</name><operator>.</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>screen_Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>clip_star</name><operator>.</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>clip_copy_modeless_selection</name><parameter_list>(<parameter><decl><type><name>int</name> <name>both</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>bufp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_end_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>add_newline_flag</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row1</name> <init>= <expr><name><name>clip_star</name><operator>.</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col1</name> <init>= <expr><name><name>clip_star</name><operator>.</operator><name>start</name><operator>.</operator><name>col</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row2</name> <init>= <expr><name><name>clip_star</name><operator>.</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col2</name> <init>= <expr><name><name>clip_star</name><operator>.</operator><name>end</name><operator>.</operator><name>col</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>ScreenLines</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>row1</name> <operator>&gt;</operator> <name>row2</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name>row1</name></expr>;</expr_stmt> <expr_stmt><expr><name>row1</name> <operator>=</operator> <name>row2</name></expr>;</expr_stmt> <expr_stmt><expr><name>row2</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name>col1</name></expr>;</expr_stmt> <expr_stmt><expr><name>col1</name> <operator>=</operator> <name>col2</name></expr>;</expr_stmt> <expr_stmt><expr><name>col2</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>row1</name> <operator>==</operator> <name>row2</name> <operator>&amp;&amp;</operator> <name>col1</name> <operator>&gt;</operator> <name>col2</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name>col1</name></expr>;</expr_stmt> <expr_stmt><expr><name>col1</name> <operator>=</operator> <name>col2</name></expr>;</expr_stmt> <expr_stmt><expr><name>col2</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>col1</name> <operator>&lt;</operator> <name><name>clip_star</name><operator>.</operator><name>min_col</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col1</name> <operator>=</operator> <name><name>clip_star</name><operator>.</operator><name>min_col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>col2</name> <operator>&gt;</operator> <name><name>clip_star</name><operator>.</operator><name>max_col</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col2</name> <operator>=</operator> <name><name>clip_star</name><operator>.</operator><name>max_col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>row1</name> <operator>&gt;</operator> <name><name>clip_star</name><operator>.</operator><name>max_row</name></name> <operator>||</operator> <name>row2</name> <operator>&lt;</operator> <name><name>clip_star</name><operator>.</operator><name>min_row</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>row1</name> <operator>&lt;</operator> <name><name>clip_star</name><operator>.</operator><name>min_row</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>row1</name> <operator>=</operator> <name><name>clip_star</name><operator>.</operator><name>min_row</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>row2</name> <operator>&gt;</operator> <name><name>clip_star</name><operator>.</operator><name>max_row</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>row2</name> <operator>=</operator> <name><name>clip_star</name><operator>.</operator><name>max_row</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>ScreenLines</name> <operator>+</operator> <name><name>LineOffset</name><index>[<expr><name>row1</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col1</name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>col1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>col1</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>col1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>row2</name> <operator>-</operator> <name>row1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>Columns</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>*=</operator> <name>MB_MAXBYTES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>bufp</name> <operator>=</operator> <name>buffer</name></expr><operator>,</operator> <expr><name>row</name> <operator>=</operator> <name>row1</name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <name>row2</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>row1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start_col</name> <operator>=</operator> <name>col1</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>start_col</name> <operator>=</operator> <name><name>clip_star</name><operator>.</operator><name>min_col</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>start_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>row2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end_col</name> <operator>=</operator> <name>col2</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>end_col</name> <operator>=</operator> <name><name>clip_star</name><operator>.</operator><name>max_col</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>end_col</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>line_end_col</name> <operator>=</operator> <call><name>clip_get_line_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>end_col</name> <operator>&gt;=</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name><name>clip_star</name><operator>.</operator><name>max_col</name></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>Columns</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>row</name> <argument_list type="generic">&lt; <argument><expr><name>row2</name> <operator>||</operator> <name>end_col</name></expr></argument> &gt;</argument_list></name> <name>line_end_col</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>end_col</name> <operator>=</operator> <name>line_end_col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end_col</name> <operator>&lt;</operator> <name>start_col</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end_col</name> <operator>=</operator> <name>start_col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>row2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>add_newline_flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;</operator> <name>row1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>LineWraps</name><index>[<expr><name>row</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bufp</name><operator>++</operator> <operator>=</operator> <name>NL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <name>screen_Rows</name> <operator>&amp;&amp;</operator> <name>end_col</name> <operator>&lt;=</operator> <name>screen_Columns</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>ScreenLines</name> <operator>+</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_col</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end_col</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x8e</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bufp</name><operator>++</operator> <operator>=</operator> <literal type="number">0x8e</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bufp</name><operator>++</operator> <operator>=</operator> <name><name>ScreenLines2</name><index>[<expr><name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bufp</name><operator>++</operator> <operator>=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bufp</name><operator>++</operator> <operator>=</operator> <name><name>p</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt></block_content></block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>enc_utf8</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ci</name></decl>;</decl_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_col</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end_col</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bufp</name><operator>++</operator> <operator>=</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>bufp</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ci</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ci</name> <operator>&lt;</operator> <name>Screen_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>ci</name></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ScreenLinesC</name><index>[<expr><name>ci</name></expr>]</index><index>[<expr><name>off</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bufp</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name><name>ScreenLinesC</name><index>[<expr><name>ci</name></expr>]</index><index>[<expr><name>off</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>bufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name>bufp</name></expr></argument>, <argument><expr><name>ScreenLines</name> <operator>+</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>start_col</name></expr></argument>,
<argument><expr><name>end_col</name> <operator>-</operator> <name>start_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bufp</name> <operator>+=</operator> <name>end_col</name> <operator>-</operator> <name>start_col</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>add_newline_flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bufp</name><operator>++</operator> <operator>=</operator> <name>NL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>clip_free_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clip_own_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>clip_yank_selection</name><argument_list>(<argument><expr><name>MCHAR</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>bufp</name> <operator>-</operator> <name>buffer</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>clip_gen_set_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>both</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>clip_free_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clip_own_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clip_yank_selection</name><argument_list>(<argument><expr><name>MCHAR</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>bufp</name> <operator>-</operator> <name>buffer</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>clip_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clip_gen_set_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>clip_gen_set_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clip_did_set_selection</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cbd</name> <operator>==</operator> <operator>&amp;</operator><name>clip_plus</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>clip_unnamed_saved</name> <operator>&amp;</operator> <name>CLIP_UNNAMED_PLUS</name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>cbd</name> <operator>==</operator> <operator>&amp;</operator><name>clip_star</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>clip_unnamed_saved</name> <operator>&amp;</operator> <name>CLIP_UNNAMED</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>clipboard_needs_update</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_mch_set_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>clip_xterm_set_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>clip_mch_set_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>clip_gen_request_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_mch_request_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>clip_xterm_request_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>clip_mch_request_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSTEM</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>clip_x11_owner_exists</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>XGetSelectionOwner</name><argument_list>(<argument><expr><name>X_DISPLAY</name></expr></argument>, <argument><expr><name><name>cbd</name><operator>-&gt;</operator><name>sel_atom</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>None</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSTEM</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>clip_gen_owner_exists</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier><name>cbd</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>clip_gtk_owner_exists</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>clip_x11_owner_exists</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>TRUE</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>char</name> <modifier>*</modifier></type>
<name>check_clipboard_option</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>new_unnamed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_autoselect_star</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_autoselect_plus</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_autoselectml</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_html</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>new_exclude_prog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>p_cb</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"unnamed"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_unnamed</name> <operator>|=</operator> <name>CLIP_UNNAMED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"unnamedplus"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_unnamed</name> <operator>|=</operator> <name>CLIP_UNNAMED_PLUS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"autoselect"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_autoselect_star</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"autoselectplus"</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_autoselect_plus</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">14</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"autoselectml"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_autoselectml</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"html"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_html</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"exclude:"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>new_exclude_prog</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_exclude_prog</name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>RE_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_exclude_prog</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>e_invarg</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>errmsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>clip_unnamed</name> <operator>=</operator> <name>new_unnamed</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clip_autoselect_star</name> <operator>=</operator> <name>new_autoselect_star</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clip_autoselect_plus</name> <operator>=</operator> <name>new_autoselect_plus</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clip_autoselectml</name> <operator>=</operator> <name>new_autoselectml</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clip_html</name> <operator>=</operator> <name>new_html</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name>clip_exclude_prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clip_exclude_prog</name> <operator>=</operator> <name>new_exclude_prog</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>gui_gtk_set_selection_targets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gui_gtk_set_dnd_targets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name>new_exclude_prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>errmsg</name></expr>;</return>
</block_content>}</block></function>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xatom.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Intrinsic.h&gt;</cpp:file></cpp:include>





<function><type><name>void</name></type>
<name>open_app_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>app_context</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XtToolkitInitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>app_context</name> <operator>=</operator> <call><name>XtCreateApplicationContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Atom</name></type> <name>vim_atom</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>Atom</name></type> <name>vimenc_atom</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>Atom</name></type> <name>utf8_atom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Atom</name></type> <name>compound_text_atom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Atom</name></type> <name>text_atom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Atom</name></type> <name>targets_atom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Atom</name></type> <name>timestamp_atom</name></decl>;</decl_stmt> 

<function><type><name>void</name></type>
<name>x11_setup_atoms</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>vim_atom</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>VIM_ATOM_NAME</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vimenc_atom</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>VIMENC_ATOM_NAME</name></expr></argument>,<argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>utf8_atom</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><literal type="string">"UTF8_STRING"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>compound_text_atom</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><literal type="string">"COMPOUND_TEXT"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>text_atom</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><literal type="string">"TEXT"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>targets_atom</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><literal type="string">"TARGETS"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clip_star</name><operator>.</operator><name>sel_atom</name></name> <operator>=</operator> <name>XA_PRIMARY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clip_plus</name><operator>.</operator><name>sel_atom</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><literal type="string">"CLIPBOARD"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timestamp_atom</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><literal type="string">"TIMESTAMP"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>Boolean</name></type>
<name>clip_x11_convert_selection_cb</name><parameter_list>(
<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>Atom</name> <modifier>*</modifier></type><name>sel_atom</name></decl></parameter>,
<parameter><decl><type><name>Atom</name> <modifier>*</modifier></type><name>target</name></decl></parameter>,
<parameter><decl><type><name>Atom</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><name>XtPointer</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
<parameter><decl><type><name>long_u</name> <modifier>*</modifier></type><name>length</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>save_result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long_u</name></type> <name>save_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>motion_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sel_atom</name> <operator>==</operator> <name><name>clip_plus</name><operator>.</operator><name>sel_atom</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cbd</name> <operator>=</operator> <operator>&amp;</operator><name>clip_plus</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cbd</name> <operator>=</operator> <operator>&amp;</operator><name>clip_star</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cbd</name><operator>-&gt;</operator><name>owned</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>False</name></expr>;</return></block_content></block></if></if_stmt> 


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>target</name> <operator>==</operator> <name>targets_atom</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>Atom</name></type> <name><name>array</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>XtPointer</name><operator>)</operator><name>array</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>targets_atom</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>vimenc_atom</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>vim_atom</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>utf8_atom</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>XA_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>text_atom</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>compound_text_atom</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>XA_ATOM</name></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>True</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>*</operator><name>target</name> <operator>!=</operator> <name>XA_STRING</name>
<operator>&amp;&amp;</operator> <operator>*</operator><name>target</name> <operator>!=</operator> <name>vimenc_atom</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>target</name> <operator>!=</operator> <name>utf8_atom</name> <operator>||</operator> <operator>!</operator><name>enc_utf8</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>*</operator><name>target</name> <operator>!=</operator> <name>vim_atom</name>
<operator>&amp;&amp;</operator> <operator>*</operator><name>target</name> <operator>!=</operator> <name>text_atom</name>
<operator>&amp;&amp;</operator> <operator>*</operator><name>target</name> <operator>!=</operator> <name>compound_text_atom</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>False</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>clip_get_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>motion_type</name> <operator>=</operator> <call><name>clip_convert_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>string</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>motion_type</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>False</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>target</name> <operator>==</operator> <name>vim_atom</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>length</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>target</name> <operator>==</operator> <name>vimenc_atom</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>length</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>save_length</name> <operator>&lt;</operator> <operator>*</operator><name>length</name> <operator>||</operator> <name>save_length</name> <operator>/</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <operator>*</operator><name>length</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>XtRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>save_result</name></expr></argument>, <argument><expr><operator>(</operator><name>Cardinal</name><operator>)</operator><operator>*</operator><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>save_result</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>False</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>save_result</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_length</name> <operator>=</operator> <operator>*</operator><name>length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>target</name> <operator>==</operator> <name>XA_STRING</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>target</name> <operator>==</operator> <name>utf8_atom</name> <operator>&amp;&amp;</operator> <name>enc_utf8</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>save_result</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>length</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <operator>*</operator><name>target</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>target</name> <operator>==</operator> <name>compound_text_atom</name> <operator>||</operator> <operator>*</operator><name>target</name> <operator>==</operator> <name>text_atom</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>XTextProperty</name></type> <name>text_prop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string_nt</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>save_result</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>conv_result</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>string_nt</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>*</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>string_nt</name><index>[<expr><operator>*</operator><name>length</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>conv_result</name> <operator>=</operator> <call><name>XmbTextListToTextProperty</name><argument_list>(<argument><expr><name>X_DISPLAY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>string_nt</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>XCompoundTextStyle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>text_prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>conv_result</name> <operator>!=</operator> <name>Success</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>False</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name><name>text_prop</name><operator>.</operator><name>value</name></name><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name><name>text_prop</name><operator>.</operator><name>nitems</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>compound_text_atom</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>save_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>save_result</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_length</name> <operator>=</operator> <operator>*</operator><name>length</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>target</name> <operator>==</operator> <name>vimenc_atom</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>save_result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>motion_type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>save_result</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>save_result</name> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>length</name> <operator>-</operator> <name>l</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>vimenc_atom</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>save_result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>motion_type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>save_result</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>vim_atom</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>True</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>clip_x11_lose_ownership_cb</name><parameter_list>(<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>Atom</name> <modifier>*</modifier></type><name>sel_atom</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sel_atom</name> <operator>==</operator> <name><name>clip_plus</name><operator>.</operator><name>sel_atom</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_lose_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_lose_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>clip_x11_notify_cb</name><parameter_list>(<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>Atom</name> <modifier>*</modifier><name>sel_atom</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>Atom</name> <modifier>*</modifier><name>target</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>clip_x11_timestamp_cb</name><parameter_list>(
<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,
<parameter><decl><type><name>XtPointer</name> <name>n</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>cont</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Atom</name></type> <name>actual_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>nitems</name></decl>, <decl><type ref="prev"/><name>bytes_after</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>prop</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XPropertyEvent</name> <modifier>*</modifier></type><name>xproperty</name><init>=<expr><operator>&amp;</operator><name><name>event</name><operator>-&gt;</operator><name>xproperty</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PropertyNotify</name> <operator>||</operator> <name><name>xproperty</name><operator>-&gt;</operator><name>state</name></name>
<operator>||</operator> <operator>(</operator><name><name>xproperty</name><operator>-&gt;</operator><name>atom</name></name> <operator>!=</operator> <name><name>clip_star</name><operator>.</operator><name>sel_atom</name></name>
<operator>&amp;&amp;</operator> <name><name>xproperty</name><operator>-&gt;</operator><name>atom</name></name> <operator>!=</operator> <name><name>clip_plus</name><operator>.</operator><name>sel_atom</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XGetWindowProperty</name><argument_list>(<argument><expr><name><name>xproperty</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>xproperty</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,
<argument><expr><name><name>xproperty</name><operator>-&gt;</operator><name>atom</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>, <argument><expr><name>timestamp_atom</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actual_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nitems</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_after</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prop</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>actual_type</name> <operator>!=</operator> <name>timestamp_atom</name> <operator>||</operator> <name>format</name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>XtOwnSelection</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>xproperty</name><operator>-&gt;</operator><name>atom</name></name></expr></argument>, <argument><expr><name><name>xproperty</name><operator>-&gt;</operator><name>time</name></name></expr></argument>,
<argument><expr><name>clip_x11_convert_selection_cb</name></expr></argument>, <argument><expr><name>clip_x11_lose_ownership_cb</name></expr></argument>,
<argument><expr><name>clip_x11_notify_cb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>xproperty</name><operator>-&gt;</operator><name>atom</name></name> <operator>==</operator> <name><name>clip_plus</name><operator>.</operator><name>sel_atom</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>clip_plus</name><operator>.</operator><name>owned</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>clip_star</name><operator>.</operator><name>owned</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>x11_setup_selection</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>PropertyChangeMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,
<argument><expr><name>clip_x11_timestamp_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>clip_x11_request_selection_cb</name><parameter_list>(
<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>XtPointer</name></type> <name>success</name></decl></parameter>,
<parameter><decl><type><name>Atom</name> <modifier>*</modifier></type><name>sel_atom</name></decl></parameter>,
<parameter><decl><type><name>Atom</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><name>XtPointer</name></type> <name>value</name></decl></parameter>,
<parameter><decl><type><name>long_u</name> <modifier>*</modifier></type><name>length</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>motion_type</name> <init>= <expr><name>MAUTO</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long_u</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>text_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tmpbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sel_atom</name> <operator>==</operator> <name><name>clip_plus</name><operator>.</operator><name>sel_atom</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cbd</name> <operator>=</operator> <operator>&amp;</operator><name>clip_plus</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cbd</name> <operator>=</operator> <operator>&amp;</operator><name>clip_star</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clip_free_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>success</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>length</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>type</name> <operator>==</operator> <name>vim_atom</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>motion_type</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>type</name> <operator>==</operator> <name>vimenc_atom</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vimconv_T</name></type> <name>conv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>convlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>motion_type</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>p</name> <operator>-</operator> <name>enc</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>conv</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>convlen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmpbuf</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>convlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>convlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmpbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tmpbuf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>type</name> <operator>==</operator> <name>compound_text_atom</name>
<operator>||</operator> <operator>*</operator><name>type</name> <operator>==</operator> <name>utf8_atom</name>
<operator>||</operator> <operator>(</operator><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>type</name> <operator>==</operator> <name>text_atom</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>XTextProperty</name></type> <name>text_prop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_text</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>text_prop</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>text_prop</name><operator>.</operator><name>encoding</name></name> <operator>=</operator> <operator>*</operator><name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>text_prop</name><operator>.</operator><name>format</name></name> <operator>=</operator> <operator>*</operator><name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>text_prop</name><operator>.</operator><name>nitems</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X_HAVE_UTF8_STRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>type</name> <operator>==</operator> <name>utf8_atom</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>Xutf8TextPropertyToTextList</name><argument_list>(<argument><expr><name>X_DISPLAY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>text_prop</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>text_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>XmbTextPropertyToTextList</name><argument_list>(<argument><expr><name>X_DISPLAY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>text_prop</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>text_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>Success</name> <operator>||</operator> <name>n_text</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>success</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>text_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clip_yank_selection</name><argument_list>(<argument><expr><name>motion_type</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>text_list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XFreeStringList</name><argument_list>(<argument><expr><name>text_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>success</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>clip_x11_request_selection</name><parameter_list>(
<parameter><decl><type><name>Widget</name></type> <name>myShell</name></decl></parameter>,
<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>,
<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XEvent</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Atom</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>success</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>start_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timed_out</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<switch>switch <condition>(<expr><name>i</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>vimenc_atom</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>vim_atom</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>utf8_atom</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>compound_text_atom</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>text_atom</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>XA_STRING</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>utf8_atom</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X_HAVE_UTF8_STRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name>enc_utf8</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>


<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>MAYBE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XtGetSelectionValue</name><argument_list>(<argument><expr><name>myShell</name></expr></argument>, <argument><expr><name><name>cbd</name><operator>-&gt;</operator><name>sel_atom</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><name>clip_x11_request_selection_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>&amp;</operator><name>success</name></expr></argument>, <argument><expr><name>CurrentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>start_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>success</name> <operator>==</operator> <name>MAYBE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>XCheckTypedEvent</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>PropertyNotify</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>XCheckTypedEvent</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>SelectionNotify</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>XCheckTypedEvent</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>SelectionRequest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>






<expr_stmt><expr><call><name>XtDispatchEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>start_time</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>timed_out</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>XSync</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ui_delay</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>success</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>timed_out</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>yank_cut_buffer0</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>clip_x11_lose_selection</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>myShell</name></decl></parameter>, <parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>XtDisownSelection</name><argument_list>(<argument><expr><name>myShell</name></expr></argument>, <argument><expr><name><name>cbd</name><operator>-&gt;</operator><name>sel_atom</name></name></expr></argument>,
<argument><expr><call><name>XtLastTimestampProcessed</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>myShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>clip_x11_own_selection</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>myShell</name></decl></parameter>, <parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>XtOwnSelection</name><argument_list>(<argument><expr><name>myShell</name></expr></argument>, <argument><expr><name><name>cbd</name><operator>-&gt;</operator><name>sel_atom</name></name></expr></argument>,
<argument><expr><call><name>XtLastTimestampProcessed</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>myShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>clip_x11_convert_selection_cb</name></expr></argument>, <argument><expr><name>clip_x11_lose_ownership_cb</name></expr></argument>,
<argument><expr><name>clip_x11_notify_cb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>False</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XChangeProperty</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>myShell</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>myShell</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>cbd</name><operator>-&gt;</operator><name>sel_atom</name></name></expr></argument>, <argument><expr><name>timestamp_atom</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>PropModeAppend</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>myShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>clip_x11_set_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier><name>cbd</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>void</name></type>
<name>yank_cut_buffer0</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nbytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>XFetchBuffer</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>conv_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vimconv_T</name></type> <name>vc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vc</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vc</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"latin1"</literal></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>conv_buf</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vc</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>conv_buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clip_yank_selection</name><argument_list>(<argument><expr><name>MCHAR</name></expr></argument>, <argument><expr><name>conv_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>nbytes</name></expr></argument>, <argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>conv_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>clip_yank_selection</name><argument_list>(<argument><expr><name>MCHAR</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>nbytes</name></expr></argument>, <argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verb_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Used CUT_BUFFER0 instead of empty selection"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>x11_export_final_selection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long_u</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>motion_type</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dpy</name> <operator>=</operator> <name>X_DISPLAY</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dpy</name> <operator>=</operator> <name>xterm_dpy</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name><name>clip_plus</name><operator>.</operator><name>owned</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>motion_type</name> <operator>=</operator> <call><name>clip_convert_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clip_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>owned</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>motion_type</name> <operator>=</operator> <call><name>clip_convert_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>dpy</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>str</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>motion_type</name> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal> <operator>&amp;&amp;</operator> <name>len</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>vimconv_T</name></type> <name>vc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vc</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vc</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"latin1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>intlen</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>conv_str</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vc</name><operator>.</operator><name>vc_fail</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>conv_str</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vc</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>intlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>intlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>conv_str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>conv_str</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>XStoreBuffer</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>clip_free_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>y_ptr</name> <init>= <expr><call><name>get_y_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cbd</name> <operator>==</operator> <operator>&amp;</operator><name>clip_plus</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_y_current</name><argument_list>(<argument><expr><call><name>get_y_register</name><argument_list>(<argument><expr><name>PLUS_REGISTER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_y_current</name><argument_list>(<argument><expr><call><name>get_y_register</name><argument_list>(<argument><expr><name>STAR_REGISTER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>free_yank_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_y_current</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>y_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_y_current</name><argument_list>(<argument><expr><name>y_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>clip_get_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>old_y_previous</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>old_y_current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>old_cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>old_visual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_visual_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>old_curswant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_set_curswant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>old_op_start</name></decl>, <decl><type ref="prev"/><name>old_op_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>oparg_T</name></type> <name>oa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cmdarg_T</name></type> <name>ca</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cbd</name><operator>-&gt;</operator><name>owned</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cbd</name> <operator>==</operator> <operator>&amp;</operator><name>clip_plus</name>
<operator>&amp;&amp;</operator> <call><name>get_y_register</name><argument_list>(<argument><expr><name>PLUS_REGISTER</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>y_array</name> <operator>!=</operator> <name>NULL</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>cbd</name> <operator>==</operator> <operator>&amp;</operator><name>clip_star</name>
<operator>&amp;&amp;</operator> <call><name>get_y_register</name><argument_list>(<argument><expr><name>STAR_REGISTER</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>y_array</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>old_y_previous</name> <operator>=</operator> <call><name>get_y_previous</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_y_current</name> <operator>=</operator> <call><name>get_y_current</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_cursor</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_curswant</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_set_curswant</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_op_start</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_op_end</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_visual</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_visual_mode</name> <operator>=</operator> <name>VIsual_mode</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_oparg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oa</name><operator>.</operator><name>regname</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>cbd</name> <operator>==</operator> <operator>&amp;</operator><name>clip_plus</name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'*'</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oa</name><operator>.</operator><name>op_type</name></name> <operator>=</operator> <name>OP_YANK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ca</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>oap</name></name> <operator>=</operator> <operator>&amp;</operator><name>oa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">'y'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>count1</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>retval</name></name> <operator>=</operator> <name>CA_NO_ADJ_OP_END</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_pending_operator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_y_previous</name><argument_list>(<argument><expr><name>old_y_previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_y_current</name><argument_list>(<argument><expr><name>old_y_current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>old_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>changed_cline_bef_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>old_curswant</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>old_set_curswant</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name>old_op_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name>old_op_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>old_visual</name></expr>;</expr_stmt>
<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <name>old_visual_mode</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>is_clipboard_needs_update</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clip_free_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>clip_gen_request_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>clip_yank_selection</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>y_ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cbd</name> <operator>==</operator> <operator>&amp;</operator><name>clip_plus</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <call><name>get_y_register</name><argument_list>(<argument><expr><name>PLUS_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <call><name>get_y_register</name><argument_list>(<argument><expr><name>STAR_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>clip_free_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>str_to_reg</name><argument_list>(<argument><expr><name>y_ptr</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>clip_convert_selection</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>long_u</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_u</name></type> <name>eolsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>y_ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cbd</name> <operator>==</operator> <operator>&amp;</operator><name>clip_plus</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <call><name>get_y_register</name><argument_list>(<argument><expr><name>PLUS_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <call><name>get_y_register</name><argument_list>(<argument><expr><name>STAR_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CRNL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>eolsize</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>eolsize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>y_ptr</name><operator>-&gt;</operator><name>y_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <operator>(</operator><name>long_u</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>eolsize</name></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>MCHAR</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>len</name> <operator>&gt;=</operator> <name>eolsize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>-=</operator> <name>eolsize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>str</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><operator>*</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>lnum</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>lnum</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CRNL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lnum</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>lnum</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_type</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>may_get_selection</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>clip_star</name><operator>.</operator><name>available</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>regname</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_get_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>clip_plus</name><operator>.</operator><name>available</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>regname</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clip_get_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>regname</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>may_set_selection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>get_y_current</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>get_y_register</name><argument_list>(<argument><expr><name>STAR_REGISTER</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>clip_star</name><operator>.</operator><name>available</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clip_own_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clip_gen_set_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>get_y_current</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>get_y_register</name><argument_list>(<argument><expr><name>PLUS_REGISTER</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>clip_plus</name><operator>.</operator><name>available</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clip_own_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clip_gen_set_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>adjust_clip_reg</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rp</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rp</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>clip_unnamed</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>clip_unnamed_saved</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>clip_unnamed</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>clip_unnamed</name> <operator>&amp;</operator> <name>CLIP_UNNAMED_PLUS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>clip_plus</name><operator>.</operator><name>available</name></name><operator>)</operator></expr>
?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'*'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>clip_unnamed_saved</name> <operator>&amp;</operator> <name>CLIP_UNNAMED_PLUS</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>clip_plus</name><operator>.</operator><name>available</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'*'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>clip_star</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>rp</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>clip_plus</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>rp</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
