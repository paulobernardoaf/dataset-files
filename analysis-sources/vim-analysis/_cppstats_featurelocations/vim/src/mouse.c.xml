<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\mouse.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_DOUBLE_CLICK</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>long</name></type>
<name>time_diff_ms</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>t2</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<return>return <expr><operator>(</operator><name><name>t2</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>t1</name><operator>-&gt;</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal>
<operator>+</operator> <operator>(</operator><name><name>t2</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>t1</name><operator>-&gt;</operator><name>tv_usec</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_mouse_class</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>mb_get_class</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_iswordc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"-+*/%&lt;&gt;&amp;|^!="</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>find_start_of_word</name><parameter_list>(<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cclass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cclass</name> <operator>=</operator> <call><name>get_mouse_class</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_mouse_class</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>cclass</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>find_end_of_word</name><parameter_list>(<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cclass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cclass</name> <operator>=</operator> <call><name>get_mouse_class</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>line</name><index>[<expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>+</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_mouse_class</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>cclass</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERM_POPUP_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_POPUP_SETPOS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEED_VCOL2COL</name></cpp:macro></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_fpos_of_mouse</name><parameter_list>(<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>mpos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>mouse_row</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>mouse_col</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>IN_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>FAIL_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IN_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>IN_STATUS_LINE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>IN_SEP_LINE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>curwin</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IN_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>mouse_comp_pos</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mpos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IN_STATUS_LINE</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>mpos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <call><name>vcol2col</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>mpos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mpos</name><operator>-&gt;</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name><name>mpos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mpos</name><operator>-&gt;</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>IN_BUFFER</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





































<function><type><name>int</name></type>
<name>do_mouse</name><parameter_list>(
<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, 
<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fixindent</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_always</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>got_click</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>which_button</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_click</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_drag</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>jump_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pos_T</name></type> <name>start_visual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>moved</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>in_status_line</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>in_tab_line</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>in_sep_line</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>pos_T</name></type> <name>save_cursor</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>old_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pos_T</name></type> <name>orig_cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>leftcol</name></decl>, <decl><type ref="prev"/><name>rightcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>end_visual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_active</name> <init>= <expr><name>VIsual_active</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_mode</name> <init>= <expr><name>VIsual_mode</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>regname</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>save_cursor</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<if_stmt><if>if <condition>(<expr><name>do_always</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>do_always</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mouse_has</name><argument_list>(<argument><expr><name>MOUSE_VISUAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>State</name> <operator>==</operator> <name>NORMAL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>mouse_has</name><argument_list>(<argument><expr><name>MOUSE_NORMAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>which_button</name> <operator>=</operator> <call><name>get_mouse_button</name><argument_list>(<argument><expr><call><name>KEY2TERMCAP1</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_click</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_drag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_drag</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>vpeekc</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_mouse_row</name> <init>= <expr><name>mouse_row</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_mouse_col</name> <init>= <expr><name>mouse_col</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>safe_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>nc</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vungetc</name><argument_list>(<argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_row</name> <operator>=</operator> <name>save_mouse_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_col</name> <operator>=</operator> <name>save_mouse_col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_MOUSEMOVE</name></expr>)</condition>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ui_may_remove_balloon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_bevalterm</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>profile_setlimit</name><argument_list>(<argument><expr><name>p_bdlay</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bevalexpr_due</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bevalexpr_due_set</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>popup_handle_mouse_moved</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_drag</name> <operator>&amp;&amp;</operator> <name>drag_status_line</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>drag_status_line</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_mouseshape</name><argument_list>(<argument><expr><name>SHAPE_IDX_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_drag</name> <operator>&amp;&amp;</operator> <name>drag_sep_line</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>drag_sep_line</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_mouseshape</name><argument_list>(<argument><expr><name>SHAPE_IDX_VSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>is_click</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>got_click</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_click</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_drag</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>got_click</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>in_tab_line</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>in_tab_line</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>is_click</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>which_button</name> <operator>==</operator> <name>MOUSE_RIGHT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>Ctrl_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stuffnumReadbuff</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>Ctrl_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_click</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>which_button</name> <operator>!=</operator> <name>MOUSE_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_SHIFT</name> <operator>|</operator> <name>MOD_MASK_CTRL</name> <operator>|</operator> <name>MOD_MASK_ALT</name>
<operator>|</operator> <name>MOD_MASK_META</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>is_click</name>
<operator>||</operator> <operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_MULTI_CLICK</name><operator>)</operator>
<operator>||</operator> <name>which_button</name> <operator>==</operator> <name>MOUSE_MIDDLE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_SHIFT</name><operator>|</operator><name>MOD_MASK_ALT</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>mouse_model_popup</name><argument_list>()</argument_list></call>
<operator>&amp;&amp;</operator> <name>which_button</name> <operator>==</operator> <name>MOUSE_LEFT</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_ALT</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>mouse_model_popup</name><argument_list>()</argument_list></call>
<operator>&amp;&amp;</operator> <name>which_button</name> <operator>==</operator> <name>MOUSE_RIGHT</name><operator>)</operator></expr>
)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_click</name> <operator>&amp;&amp;</operator> <name>which_button</name> <operator>==</operator> <name>MOUSE_MIDDLE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>oap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>regname</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>regname</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>which_button</name> <operator>==</operator> <name>MOUSE_MIDDLE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>==</operator> <name>NORMAL</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>oap</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>VIsual_select</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>Ctrl_G</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stuffReadbuff</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\"+p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>K_MIDDLEMOUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>do_always</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>mouse_has</name><argument_list>(<argument><expr><name>MOUSE_NORMAL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert_reg</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <name>regname</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>regname</name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>REPLACE_FLAG</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>yank_register_mline</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>insert_reg</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>do_put</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>BACKWARD</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>fixindent</name> <operator>|</operator> <name>PUT_CURSEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>AppendCharToRedobuff</name><argument_list>(<argument><expr><name>Ctrl_R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AppendCharToRedobuff</name><argument_list>(<argument><expr><ternary><condition><expr><name>fixindent</name></expr> ?</condition><then> <expr><name>Ctrl_P</name></expr> </then><else>: <expr><name>Ctrl_O</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AppendCharToRedobuff</name><argument_list>(<argument><expr><ternary><condition><expr><name>regname</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="char">'"'</literal></expr> </then><else>: <expr><name>regname</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_click</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jump_flags</name> <operator>|=</operator> <name>MOUSE_FOCUS</name> <operator>|</operator> <name>MOUSE_DID_MOVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>start_visual</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>mouse_row</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>firstwin</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_drag</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>in_tab_line</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>TabPageIdxs</name><index>[<expr><name>mouse_col</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tabpage_move</name><argument_list>(<argument><expr><ternary><condition><expr><name>c1</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">9999</literal></expr> </then><else>: <expr><ternary><condition><expr><name>c1</name> <operator>&lt;</operator> <call><name>tabpage_index</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name>c1</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>c1</name></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>is_click</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>cmdwin_type</name> <operator>==</operator> <literal type="number">0</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>&amp;&amp;</operator> <name>mouse_col</name> <operator>&lt;</operator> <name>Columns</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>in_tab_line</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>TabPageIdxs</name><index>[<expr><name>mouse_col</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_MULTI_CLICK</name><operator>)</operator> <operator>==</operator> <name>MOD_MASK_2CLICK</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>end_visual_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tabpage_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tabpage_move</name><argument_list>(<argument><expr><ternary><condition><expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">9999</literal></expr> </then><else>: <expr><name>c1</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><call><name>goto_tabpage</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>old_curwin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>end_visual_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <operator>-</operator><literal type="number">999</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>find_tabpage</name><argument_list>(<argument><expr><operator>-</operator><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>curtab</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>first_tabpage</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tabpage_close</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tabpage_close_other</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>is_drag</name> <operator>&amp;&amp;</operator> <name>in_tab_line</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>TabPageIdxs</name><index>[<expr><name>mouse_col</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tabpage_move</name><argument_list>(<argument><expr><ternary><condition><expr><name>c1</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">9999</literal></expr> </then><else>: <expr><name>c1</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>mouse_model_popup</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>which_button</name> <operator>==</operator> <name>MOUSE_RIGHT</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_SHIFT</name> <operator>|</operator> <name>MOD_MASK_CTRL</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POPUP_SETPOS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_click</name></expr>)</condition><block type="pseudo"><block_content>


<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>is_click</name> <operator>||</operator> <name>is_drag</name></expr>)</condition><block type="pseudo"><block_content>


<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERM_POPUP_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERM_POPUP_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><operator>!</operator><name>is_click</name></expr>)</condition><block type="pseudo"><block_content>


<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>jump_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>p_mousem</name></expr></argument>, <argument><expr><literal type="string">"popup_setpos"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>pos_T</name></type> <name>m_pos</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name><name>mouse_row</name> <argument_list type="generic">&lt; <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_winrow</name></name>
<operator>||</operator> <name>mouse_row</name></expr></argument>
&gt;</argument_list></name> <argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jump_flags</name> <operator>=</operator> <name>MOUSE_MAY_STOP_VIS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>get_fpos_of_mouse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_pos</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>IN_BUFFER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jump_flags</name> <operator>=</operator> <name>MOUSE_MAY_STOP_VIS</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>LT_POS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>VIsual</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>LT_POS</name><argument_list>(<argument><expr><name>m_pos</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>LT_POS</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name>m_pos</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><call><name>LT_POS</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>LT_POS</name><argument_list>(<argument><expr><name>m_pos</name></expr></argument>, <argument><expr><name>VIsual</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>LT_POS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>m_pos</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>jump_flags</name> <operator>=</operator> <name>MOUSE_MAY_STOP_VIS</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>getvcols</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>VIsual</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>leftcol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rightcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m_pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m_pos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name>leftcol</name> <operator>||</operator> <name><name>m_pos</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name>rightcol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jump_flags</name> <operator>=</operator> <name>MOUSE_MAY_STOP_VIS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>jump_flags</name> <operator>=</operator> <name>MOUSE_MAY_STOP_VIS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>jump_flags</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>jump_flags</name> <operator>=</operator> <call><name>jump_to_mouse</name><argument_list>(<argument><expr><name>jump_flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>which_button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_curbuf</name><argument_list>(<argument><expr><ternary><condition><expr><name>VIsual_active</name></expr> ?</condition><then> <expr><name>INVERTED</name></expr> </then><else>: <expr><name>VALID</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>show_popupmenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_click</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>jump_flags</name> <operator>&amp;</operator> <name>CURSOR_MOVED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>FALSE</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>which_button</name> <operator>==</operator> <name>MOUSE_LEFT</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_SHIFT</name><operator>|</operator><name>MOD_MASK_ALT</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>which_button</name> <operator>=</operator> <name>MOUSE_RIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mod_mask</name> <operator>&amp;=</operator> <operator>~</operator><name>MOD_MASK_SHIFT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>NORMAL</name> <operator>|</operator> <name>INSERT</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_SHIFT</name> <operator>|</operator> <name>MOD_MASK_CTRL</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>which_button</name> <operator>==</operator> <name>MOUSE_LEFT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_click</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jump_flags</name> <operator>|=</operator> <name>MOUSE_MAY_STOP_VIS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>mouse_has</name><argument_list>(<argument><expr><name>MOUSE_VISUAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jump_flags</name> <operator>|=</operator> <name>MOUSE_MAY_VIS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>which_button</name> <operator>==</operator> <name>MOUSE_RIGHT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_click</name> <operator>&amp;&amp;</operator> <name>VIsual_active</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>LT_POS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>VIsual</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>start_visual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_visual</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>start_visual</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_visual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>jump_flags</name> <operator>|=</operator> <name>MOUSE_FOCUS</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mouse_has</name><argument_list>(<argument><expr><name>MOUSE_VISUAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jump_flags</name> <operator>|=</operator> <name>MOUSE_MAY_VIS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_drag</name> <operator>&amp;&amp;</operator> <name>oap</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>got_click</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_click</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_drag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jump_flags</name> <operator>|=</operator> <name>MOUSE_RELEASED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>jump_flags</name> <operator>=</operator> <call><name>jump_to_mouse</name><argument_list>(<argument><expr><name>jump_flags</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>oap</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name><operator>)</operator></expr></else></ternary></expr></argument>, <argument><expr><name>which_button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>jump_flags</name> <operator>&amp;</operator> <name>MOUSE_WINBAR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>moved</name> <operator>=</operator> <operator>(</operator><name>jump_flags</name> <operator>&amp;</operator> <name>CURSOR_MOVED</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>in_status_line</name> <operator>=</operator> <operator>(</operator><name>jump_flags</name> <operator>&amp;</operator> <name>IN_STATUS_LINE</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>in_sep_line</name> <operator>=</operator> <operator>(</operator><name>jump_flags</name> <operator>&amp;</operator> <name>IN_SEP_LINE</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>isNetbeansBuffer</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>jump_flags</name> <operator>&amp;</operator> <operator>(</operator><name>IN_STATUS_LINE</name> <operator>|</operator> <name>IN_SEP_LINE</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name>KEY2TERMCAP1</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_LEFTRELEASE</name> <operator>||</operator> <name>key</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_MIDDLERELEASE</name>
<operator>||</operator> <name>key</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_RIGHTRELEASE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>netbeans_button_release</name><argument_list>(<argument><expr><name>which_button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>old_curwin</name> <operator>&amp;&amp;</operator> <name>oap</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><name>is_drag</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>jump_flags</name> <operator>&amp;</operator> <operator>(</operator><name>MOUSE_FOLD_CLOSE</name> <operator>|</operator> <name>MOUSE_FOLD_OPEN</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <name>which_button</name> <operator>==</operator> <name>MOUSE_LEFT</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>jump_flags</name> <operator>&amp;</operator> <name>MOUSE_FOLD_OPEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>openFold</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>closeFold</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>==</operator> <name>old_curwin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>save_cursor</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>jump_flags</name> <operator>&amp;</operator> <name>IN_OTHER_WIN</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name><name>clip_star</name><operator>.</operator><name>available</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clip_modeless</name><argument_list>(<argument><expr><name>which_button</name></expr></argument>, <argument><expr><name>is_click</name></expr></argument>, <argument><expr><name>is_drag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>is_drag</name> <operator>&amp;&amp;</operator> <call><name>get_scrolloff_value</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mouse_row</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_dragging</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_dragging</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>is_drag</name> <operator>&amp;&amp;</operator> <name>mouse_row</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>in_status_line</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>scroll_redraw</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>start_visual</name><operator>.</operator><name>lnum</name></name></expr>)</condition> 
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_ALT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <name>Ctrl_V</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>getvcols</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_visual</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_visual</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>leftcol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rightcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>&gt;</operator> <operator>(</operator><name>leftcol</name> <operator>+</operator> <name>rightcol</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>end_visual</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>leftcol</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>end_visual</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>rightcol</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator>
<operator>(</operator><name><name>start_visual</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name><name>end_visual</name><operator>.</operator><name>lnum</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>end_visual</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>start_visual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>start_visual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>end_visual</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>end_visual</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>start_visual</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>LT_POS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>start_visual</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>end_visual</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>LT_POS</name><argument_list>(<argument><expr><name>end_visual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>start_visual</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>end_visual</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>start_visual</name><operator>.</operator><name>lnum</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name><name>start_visual</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator>
<name><name>end_visual</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>start_visual</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>end_visual</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>


<else>else
<block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <name><name>start_visual</name><operator>.</operator><name>lnum</name></name><operator>)</operator> <operator>-</operator>
<operator>(</operator><name><name>end_visual</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>start_visual</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>end_visual</name></expr>;</expr_stmt></block_content></block></if>
<else>else 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator>
<operator>(</operator><name><name>start_visual</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name><name>end_visual</name><operator>.</operator><name>col</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>end_visual</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>start_visual</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>Ctrl_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>which_button</name> <operator>==</operator> <name>MOUSE_MIDDLE</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <name>regname</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>regname</name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>yank_register_mline</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mouse_past_bottom</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>FORWARD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>mouse_past_eol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>FORWARD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fixindent</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>dir</name> <operator>==</operator> <name>BACKWARD</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'['</literal></expr> </then><else>: <expr><literal type="char">']'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'p'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>dir</name> <operator>==</operator> <name>FORWARD</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'p'</literal></expr> </then><else>: <expr><literal type="char">'P'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>prep_redo</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>where_paste_started</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>do_put</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>fixindent</name> <operator>|</operator> <name>PUT_CURSEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_MULTI_CLICK</name><operator>)</operator> <operator>==</operator> <name>MOD_MASK_2CLICK</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>bt_quickfix</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_llist_ref</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".cc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".ll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>got_click</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if type="elseif">else if <condition>(<expr><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_help</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_MULTI_CLICK</name><operator>)</operator> <operator>==</operator> <name>MOD_MASK_2CLICK</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>Ctrl_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>Ctrl_RSB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_click</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
</block_content>}</block></if>



<if type="elseif">else if <condition>(<expr><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_SHIFT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>VIsual_select</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>Ctrl_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>which_button</name> <operator>==</operator> <name>MOUSE_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>in_status_line</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>is_drag</name> <operator>||</operator> <name>is_click</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>drag_status_line</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>drag_status_line</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_mouseshape</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>in_sep_line</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>is_drag</name> <operator>||</operator> <name>is_click</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>drag_sep_line</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>drag_sep_line</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_mouseshape</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_MULTI_CLICK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>NORMAL</name> <operator>|</operator> <name>INSERT</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>mouse_has</name><argument_list>(<argument><expr><name>MOUSE_VISUAL</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_click</name> <operator>||</operator> <operator>!</operator><name>VIsual_active</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>orig_cursor</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>check_visual_highlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>orig_cursor</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>
<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>may_start_select</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_MULTI_CLICK</name><operator>)</operator> <operator>==</operator> <name>MOD_MASK_2CLICK</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_ALT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <name>Ctrl_V</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_MULTI_CLICK</name><operator>)</operator> <operator>==</operator> <name>MOD_MASK_3CLICK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'V'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_MULTI_CLICK</name><operator>)</operator> <operator>==</operator> <name>MOD_MASK_4CLICK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <name>Ctrl_V</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><name><name>clip_star</name><operator>.</operator><name>vmode</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_MULTI_CLICK</name><operator>)</operator> <operator>==</operator> <name>MOD_MASK_2CLICK</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_click</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>end_visual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>gc</name> <operator>=</operator> <call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end_visual</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end_visual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>oap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>oap</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name>VIsual_mode</name> <operator>==</operator> <literal type="char">'v'</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_iswordc</name><argument_list>(<argument><expr><call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end_visual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>EQUAL_POS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>VIsual</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>pos</name> <operator>=</operator> <call><name>findmatch</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MLINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'V'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>LT_POS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>VIsual</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>VIsual</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>is_click</name> <operator>||</operator> <name>is_drag</name><operator>)</operator></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>LT_POS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>orig_cursor</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>find_start_of_word</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>find_end_of_word</name><argument_list>(<argument><expr><operator>&amp;</operator><name>VIsual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>find_start_of_word</name><argument_list>(<argument><expr><operator>&amp;</operator><name>VIsual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>ml_get_cursor</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+=</operator>
<call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>find_end_of_word</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_click</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>old_active</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_ALT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <name>Ctrl_V</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>old_active</name> <operator>&amp;&amp;</operator> <name>mode_displayed</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>p_smd</name> <operator>&amp;&amp;</operator> <name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>old_active</name> <operator>||</operator> <name>VIsual_mode</name> <operator>!=</operator> <name>old_mode</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>moved</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ins_mouse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pos_T</name></type> <name>tpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>old_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mouse_has</name><argument_list>(<argument><expr><name>MOUSE_INSERT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>undisplay_dollar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tpos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>do_mouse</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>BACKWARD</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>new_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>old_curwin</name> <operator>&amp;&amp;</operator> <call><name>win_valid</name><argument_list>(<argument><expr><name>old_curwin</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>old_curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>bt_prompt</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_prompt_insert</name></name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>start_arrow</name><argument_list>(<argument><expr><ternary><condition><expr><name>curwin</name> <operator>==</operator> <name>old_curwin</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>tpos</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>new_curwin</name> <operator>&amp;&amp;</operator> <call><name>win_valid</name><argument_list>(<argument><expr><name>new_curwin</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>new_curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_can_cindent</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>redraw_statuslines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ins_mousescroll</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pos_T</name></type> <name>tpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>old_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_scroll</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tpos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mouse_row</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mouse_col</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name>mouse_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name>mouse_col</name></expr>;</expr_stmt>


<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>FIND_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>==</operator> <name>old_curwin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>undisplay_dollar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pum_visible</name><argument_list>()</argument_list></call> <operator>||</operator> <name>curwin</name> <operator>!=</operator> <name>old_curwin</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>MSCR_DOWN</name> <operator>||</operator> <name>dir</name> <operator>==</operator> <name>MSCR_UP</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_SHIFT</name> <operator>|</operator> <name>MOD_MASK_CTRL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>scroll_redraw</name><argument_list>(<argument><expr><name>dir</name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>scroll_redraw</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="number">3L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popup_set_firstline</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>step</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_SHIFT</name> <operator>|</operator> <name>MOD_MASK_CTRL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>dir</name> <operator>==</operator> <name>MSCR_RIGHT</name></expr> ?</condition><then> <expr><operator>-</operator><name>step</name></expr> </then><else>: <expr><name>step</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gui_do_horiz_scroll</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>did_scroll</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>old_curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>pum_visible</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>did_scroll</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ins_compl_show_pum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EQUAL_POS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>tpos</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>start_arrow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_can_cindent</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>is_mouse_key</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>c</name> <operator>==</operator> <name>K_LEFTMOUSE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_LEFTMOUSE_NM</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_LEFTDRAG</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_LEFTRELEASE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_LEFTRELEASE_NM</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MOUSEMOVE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MIDDLEMOUSE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MIDDLEDRAG</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MIDDLERELEASE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_RIGHTMOUSE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_RIGHTDRAG</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_RIGHTRELEASE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MOUSEDOWN</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MOUSEUP</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MOUSELEFT</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MOUSERIGHT</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_X1MOUSE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_X1DRAG</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_X1RELEASE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_X2MOUSE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_X2DRAG</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_X2RELEASE</name></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> struct <name>mousetable</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>pseudo_code</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_click</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_drag</name></decl>;</decl_stmt> 
}</block> <decl><name><name>mouse_table</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_LEFTMOUSE</name></expr>, <expr><name>MOUSE_LEFT</name></expr>, <expr><name>TRUE</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_LEFTMOUSE_NM</name></expr>, <expr><name>MOUSE_LEFT</name></expr>, <expr><name>TRUE</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_LEFTDRAG</name></expr>, <expr><name>MOUSE_LEFT</name></expr>, <expr><name>FALSE</name></expr>, <expr><name>TRUE</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_LEFTRELEASE</name></expr>, <expr><name>MOUSE_LEFT</name></expr>, <expr><name>FALSE</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_LEFTRELEASE_NM</name></expr>, <expr><name>MOUSE_LEFT</name></expr>, <expr><name>FALSE</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_MIDDLEMOUSE</name></expr>, <expr><name>MOUSE_MIDDLE</name></expr>, <expr><name>TRUE</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_MIDDLEDRAG</name></expr>, <expr><name>MOUSE_MIDDLE</name></expr>, <expr><name>FALSE</name></expr>, <expr><name>TRUE</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_MIDDLERELEASE</name></expr>, <expr><name>MOUSE_MIDDLE</name></expr>, <expr><name>FALSE</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_RIGHTMOUSE</name></expr>, <expr><name>MOUSE_RIGHT</name></expr>, <expr><name>TRUE</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_RIGHTDRAG</name></expr>, <expr><name>MOUSE_RIGHT</name></expr>, <expr><name>FALSE</name></expr>, <expr><name>TRUE</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_RIGHTRELEASE</name></expr>, <expr><name>MOUSE_RIGHT</name></expr>, <expr><name>FALSE</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_X1MOUSE</name></expr>, <expr><name>MOUSE_X1</name></expr>, <expr><name>TRUE</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_X1DRAG</name></expr>, <expr><name>MOUSE_X1</name></expr>, <expr><name>FALSE</name></expr>, <expr><name>TRUE</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_X1RELEASE</name></expr>, <expr><name>MOUSE_X1</name></expr>, <expr><name>FALSE</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_X2MOUSE</name></expr>, <expr><name>MOUSE_X2</name></expr>, <expr><name>TRUE</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_X2DRAG</name></expr>, <expr><name>MOUSE_X2</name></expr>, <expr><name>FALSE</name></expr>, <expr><name>TRUE</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_X2RELEASE</name></expr>, <expr><name>MOUSE_X2</name></expr>, <expr><name>FALSE</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_MOUSEMOVE</name></expr>, <expr><name>MOUSE_RELEASE</name></expr>, <expr><name>FALSE</name></expr>, <expr><name>TRUE</name></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_IGNORE</name></expr>, <expr><name>MOUSE_RELEASE</name></expr>, <expr><name>FALSE</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>





<function><type><name>int</name></type>
<name>get_mouse_button</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_click</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_drag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>mouse_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pseudo_code</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name><name>mouse_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pseudo_code</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>is_click</name> <operator>=</operator> <name><name>mouse_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_click</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>is_drag</name> <operator>=</operator> <name><name>mouse_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_drag</name></expr>;</expr_stmt>
<return>return <expr><name><name>mouse_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>button</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>get_pseudo_mouse_code</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>is_click</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_drag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>mouse_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pseudo_code</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <name><name>mouse_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>button</name>
<operator>&amp;&amp;</operator> <name>is_click</name> <operator>==</operator> <name><name>mouse_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_click</name>
<operator>&amp;&amp;</operator> <name>is_drag</name> <operator>==</operator> <name><name>mouse_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_drag</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><name><name>mouse_col</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>mouse_col</name></expr></argument> &gt;</argument_list></name> <name>MOUSE_COLOFF</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mouse_col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_col</name> <operator>-=</operator> <name>MOUSE_COLOFF</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mouse_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pseudo_code</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_LEFTMOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_LEFTMOUSE_NM</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mouse_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pseudo_code</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_LEFTRELEASE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_LEFTRELEASE_NM</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name><name>mouse_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pseudo_code</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_IGNORE</name></expr>;</return> 
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMT_NORMAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMT_NETTERM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMT_DEC</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMT_JSBTERM</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMT_PTERM</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMT_URXVT</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMT_GPM</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMT_SGR</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMT_SGR_REL</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>has_mouse_termcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>set_mouse_termcode</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KE_FILLER</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_termcode</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_JSB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>KS_JSBTERM_MOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_mouse_termcode</name> <operator>|=</operator> <name>HMT_JSBTERM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_NET</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><name>n</name> <operator>==</operator> <name>KS_NETTERM_MOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_mouse_termcode</name> <operator>|=</operator> <name>HMT_NETTERM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_DEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><name>n</name> <operator>==</operator> <name>KS_DEC_MOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_mouse_termcode</name> <operator>|=</operator> <name>HMT_DEC</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_PTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><name>n</name> <operator>==</operator> <name>KS_PTERM_MOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_mouse_termcode</name> <operator>|=</operator> <name>HMT_PTERM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_URXVT</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><name>n</name> <operator>==</operator> <name>KS_URXVT_MOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_mouse_termcode</name> <operator>|=</operator> <name>HMT_URXVT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_GPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><name>n</name> <operator>==</operator> <name>KS_GPM_MOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_mouse_termcode</name> <operator>|=</operator> <name>HMT_GPM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name>n</name> <operator>==</operator> <name>KS_SGR_MOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_mouse_termcode</name> <operator>|=</operator> <name>HMT_SGR</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <name>KS_SGR_MOUSE_RELEASE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_mouse_termcode</name> <operator>|=</operator> <name>HMT_SGR_REL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>has_mouse_termcode</name> <operator>|=</operator> <name>HMT_NORMAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>del_mouse_termcode</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KE_FILLER</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>del_termcode</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_JSB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>KS_JSBTERM_MOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_mouse_termcode</name> <operator>&amp;=</operator> <operator>~</operator><name>HMT_JSBTERM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_NET</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><name>n</name> <operator>==</operator> <name>KS_NETTERM_MOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_mouse_termcode</name> <operator>&amp;=</operator> <operator>~</operator><name>HMT_NETTERM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_DEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><name>n</name> <operator>==</operator> <name>KS_DEC_MOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_mouse_termcode</name> <operator>&amp;=</operator> <operator>~</operator><name>HMT_DEC</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_PTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><name>n</name> <operator>==</operator> <name>KS_PTERM_MOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_mouse_termcode</name> <operator>&amp;=</operator> <operator>~</operator><name>HMT_PTERM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_URXVT</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><name>n</name> <operator>==</operator> <name>KS_URXVT_MOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_mouse_termcode</name> <operator>&amp;=</operator> <operator>~</operator><name>HMT_URXVT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_GPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><name>n</name> <operator>==</operator> <name>KS_GPM_MOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_mouse_termcode</name> <operator>&amp;=</operator> <operator>~</operator><name>HMT_GPM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name>n</name> <operator>==</operator> <name>KS_SGR_MOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_mouse_termcode</name> <operator>&amp;=</operator> <operator>~</operator><name>HMT_SGR</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <name>KS_SGR_MOUSE_RELEASE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>has_mouse_termcode</name> <operator>&amp;=</operator> <operator>~</operator><name>HMT_SGR_REL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>has_mouse_termcode</name> <operator>&amp;=</operator> <operator>~</operator><name>HMT_NORMAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>setmouse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>checkfor</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>update_mouseshape</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_mouse</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name>has_mouse_termcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>cur_tmode</name> <operator>!=</operator> <name>TMODE_RAW</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>mch_setmouse</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_VISUAL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>State</name> <operator>==</operator> <name>HITRETURN</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>ASKMORE</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>SETWSIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_RETURN</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_INSERT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_COMMAND</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>State</name> <operator>==</operator> <name>CONFIRM</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>EXTERNCMD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_NORMAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>mouse_has</name><argument_list>(<argument><expr><name>checkfor</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_setmouse</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_setmouse</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>








<function><type><name>int</name></type>
<name>mouse_has</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>p_mouse</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>MOUSE_A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>MOUSE_HELP</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>MOUSE_RETURN</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_help</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default> <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> <break>break;</break>
</block_content>}</block></switch></block_content></block></for>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>mouse_model_popup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>p_mousem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>



























<function><type><name>int</name></type>
<name>jump_to_mouse</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>inclusive</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>which_button</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>on_status_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>on_sep_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>in_winbar</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>in_popup_win</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type><name>click_in_popup_win</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_row</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_col</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type><name>dragwin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>did_drag</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>old_curwin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>old_cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>mouse_row</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>mouse_col</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>mouse_char</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>mouse_past_bottom</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_past_eol</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOUSE_RELEASED</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>dragwin</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>did_drag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>MOUSE_FOCUS</name> <operator>|</operator> <name>MOUSE_DID_MOVE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dragwin</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_drag</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>click_in_popup_win</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>popup_dragwin</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popup_close_for_mouse_click</name><argument_list>(<argument><expr><name>click_in_popup_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>popup_dragwin</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>click_in_popup_win</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MOUSE_DID_MOVE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name>prev_row</name> <operator>==</operator> <name>mouse_row</name>
<operator>&amp;&amp;</operator> <name>prev_col</name> <operator>==</operator> <name>mouse_col</name></expr>)</condition>
<block>{<block_content>
<label><name>retnomove</name>:</label>


<if_stmt><if>if <condition>(<expr><name>on_status_line</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IN_STATUS_LINE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>on_sep_line</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IN_SEP_LINE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>in_winbar</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_MULTI_CLICK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MOUSE_RELEASED</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>FAIL_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IN_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>winbar_click</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>IN_OTHER_WIN</name> <operator>|</operator> <name>MOUSE_WINBAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOUSE_MAY_STOP_VIS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>end_visual_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IN_OTHER_WIN</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>in_popup_win</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>click_in_popup_win</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>popup_dragwin</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>popup_drag</name><argument_list>(<argument><expr><name>popup_dragwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>IN_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>IN_OTHER_WIN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>IN_BUFFER</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_row</name> <operator>=</operator> <name>mouse_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_col</name> <operator>=</operator> <name>mouse_col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOUSE_SETPOS</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>retnomove</name>;</goto></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name>Rows</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;=</operator> <name>Columns</name>
<operator>&amp;&amp;</operator> <name>ScreenLines</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_char</name> <operator>=</operator> <name><name>ScreenLines</name><index>[<expr><name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_char</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>old_curwin</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_cursor</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MOUSE_FOCUS</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>IN_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>FIND_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IN_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dragwin</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>on_sep_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in_popup_win</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>which_button</name> <operator>==</operator> <name>MOUSE_LEFT</name> <operator>&amp;&amp;</operator> <call><name>popup_close_if_on_X</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>IN_UNKNOWN</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>POPF_DRAG</name> <operator>|</operator> <name>POPF_RESIZE</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>popup_on_border</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>popup_dragwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>popup_start_drag</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>IN_UNKNOWN</name></expr>;</return>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_close</name></name> <operator>==</operator> <name>POPCLOSE_CLICK</name>
<operator>&amp;&amp;</operator> <name>which_button</name> <operator>==</operator> <name>MOUSE_LEFT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>click_in_popup_win</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>which_button</name> <operator>==</operator> <name>MOUSE_LEFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>popup_handle_scrollbar_click</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>IN_OTHER_WIN</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>IN_UNKNOWN</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>in_popup_win</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>popup_dragwin</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>winbar_click</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_winbar</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>IN_OTHER_WIN</name> <operator>|</operator> <name>MOUSE_WINBAR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>in_winbar</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>on_status_line</name> <operator>=</operator> <name>row</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dragwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>on_status_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>on_sep_line</name> <operator>=</operator> <name>col</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dragwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>on_sep_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>on_status_line</name> <operator>&amp;&amp;</operator> <name>on_sep_line</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>stl_connected</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>on_sep_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>on_status_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>VIsual_active</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name>
<operator>||</operator> <operator>(</operator><operator>!</operator><name>on_status_line</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>on_sep_line</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><name>col</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fdc</name></name></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>col</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fdc</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>cmdwin_type</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wp</name> <operator>==</operator> <name>curwin</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MOUSE_MAY_STOP_VIS</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>end_visual_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wp</name> <operator>!=</operator> <name>curwin</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>on_sep_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>on_status_line</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IN_STATUS_LINE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>IN_OTHER_WIN</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>popup_is_popup</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>IN_OTHER_WIN</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><name>dragwin</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MOUSE_RELEASED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>old_curwin</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_DOUBLE_CLICK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>set_mouse_topline</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>term_win_entered</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>on_status_line</name></expr>)</condition> 
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>==</operator> <name>old_curwin</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IN_STATUS_LINE</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>IN_STATUS_LINE</name> <operator>|</operator> <name>CURSOR_MOVED</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>on_sep_line</name></expr>)</condition> 
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>==</operator> <name>old_curwin</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IN_SEP_LINE</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>IN_SEP_LINE</name> <operator>|</operator> <name>CURSOR_MOVED</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>gui_prev_topline</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>gui_prev_topfill</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>on_status_line</name> <operator>&amp;&amp;</operator> <name>which_button</name> <operator>==</operator> <name>MOUSE_LEFT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dragwin</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>row</name> <operator>-</operator> <name><name>dragwin</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>-</operator> <name><name>dragwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <literal type="number">1</literal>
<operator>-</operator> <name>on_status_line</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_drag_status_line</name><argument_list>(<argument><expr><name>dragwin</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_drag</name> <operator>|=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>IN_STATUS_LINE</name></expr>;</return> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>on_sep_line</name> <operator>&amp;&amp;</operator> <name>which_button</name> <operator>==</operator> <name>MOUSE_LEFT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dragwin</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>col</name> <operator>-</operator> <name><name>dragwin</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>-</operator> <name><name>dragwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <literal type="number">1</literal>
<operator>-</operator> <name>on_sep_line</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_drag_vsep_line</name><argument_list>(<argument><expr><name>dragwin</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_drag</name> <operator>|=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>IN_SEP_LINE</name></expr>;</return> 
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>in_winbar</name></expr>)</condition>
<block>{<block_content>

<return>return <expr><name>IN_OTHER_WIN</name> <operator>|</operator> <name>MOUSE_WINBAR</name></expr>;</return>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else 
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOUSE_MAY_STOP_VIS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>end_visual_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IN_OTHER_WIN</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>in_popup_win</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>popup_dragwin</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>popup_drag</name><argument_list>(<argument><expr><name>popup_dragwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>IN_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>click_in_popup_win</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>IN_OTHER_WIN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>row</name> <operator>-=</operator> <call><name>W_WINROW</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>first</name> <operator>=</operator> <name>TRUE</name></expr>;</init> <condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&lt;</operator> <call><name>diff_check</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>plines</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&gt;</operator> <operator>-</operator><name>row</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&lt;</operator> <call><name>diff_check</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_topfill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator>
<operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_CROW</name><operator>|</operator><name>VALID_BOTLINE</name><operator>|</operator><name>VALID_BOTLINE_AP</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>first</name> <operator>=</operator> <name>TRUE</name></expr>;</init> <condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>plines</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&gt;</operator> <name>row</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator>
<call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>check_topfill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator>
<operator>~</operator><operator>(</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_CROW</name><operator>|</operator><name>VALID_BOTLINE</name><operator>|</operator><name>VALID_BOTLINE_AP</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>row</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>mouse_dragging</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>VALID_TOPLINE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<expr><ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><name>col</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdc</name></name></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>col</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdc</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>cmdwin_type</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_char</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><call><name>mouse_comp_pos</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_past_bottom</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MOUSE_MAY_VIS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>VIsual_active</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>check_visual_highlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>old_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>may_start_select</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_smd</name> <operator>&amp;&amp;</operator> <name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>coladvance</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>inclusive</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>inclusive</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mouse_past_eol</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>inclusive</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>inclusive</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>IN_BUFFER</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>old_curwin</name> <operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>old_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <name><name>old_cursor</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>|=</operator> <name>CURSOR_MOVED</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mouse_char</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>|=</operator> <name>MOUSE_FOLD_OPEN</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>mouse_char</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>|=</operator> <name>MOUSE_FOLD_CLOSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>nv_mousescroll</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>old_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mouse_row</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mouse_col</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name>mouse_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name>mouse_col</name></expr>;</expr_stmt>


<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>FIND_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_has_scrollbar</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <name>MSCR_UP</name> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <name>MSCR_DOWN</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>term_use_loop</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><call><name>send_keys_to_term</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr></argument>, <argument><expr><name>mod_mask</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_SHIFT</name> <operator>|</operator> <name>MOD_MASK_CTRL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>onepage</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr> ?</condition><then> <expr><name>FORWARD</name></expr> </then><else>: <expr><name>BACKWARD</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nv_scroll_line</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>popup_set_firstline</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>step</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_SHIFT</name> <operator>|</operator> <name>MOD_MASK_CTRL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <name>MSCR_RIGHT</name></expr> ?</condition><then> <expr><operator>-</operator><name>step</name></expr> </then><else>: <expr><operator>+</operator><name>step</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_do_horiz_scroll</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>old_curwin</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_cul</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redraw_for_cursorline</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>old_curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>nv_mouse</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_mouse</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr></argument>, <argument><expr><name>BACKWARD</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>check_termcode_mouse</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>slen</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key_name</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>modifiers_start</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>modifiers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_XTERM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_GPM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYSMOUSE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>bytes</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_bytes</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>mouse_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_click</name></decl>, <decl><type ref="prev"/><name>is_drag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wheel_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current_button</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>held_button</name> <init>= <expr><name>MOUSE_RELEASE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>orig_num_clicks</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>orig_mouse_code</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_DOUBLE_CLICK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>orig_mouse_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>orig_mouse_row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>orig_mouse_time</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>mouse_time</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>timediff</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>is_click</name> <operator>=</operator> <name>is_drag</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_XTERM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_GPM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYSMOUSE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_MOUSE</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_GPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_GPM_MOUSE</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>






















<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>num_bytes</name> <operator>=</operator> <call><name>get_bytes_from_buf</name><argument_list>(<argument><expr><name>tp</name> <operator>+</operator> <operator>*</operator><name>slen</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num_bytes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_col</name> <operator>=</operator> <literal type="number">128</literal> <operator>*</operator> <operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">' '</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>+</operator> <name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="char">' '</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_row</name> <operator>=</operator> <literal type="number">128</literal> <operator>*</operator> <operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="char">' '</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>+</operator> <name><name>bytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <literal type="char">' '</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>num_bytes</name> <operator>=</operator> <call><name>get_bytes_from_buf</name><argument_list>(<argument><expr><name>tp</name> <operator>+</operator> <operator>*</operator><name>slen</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num_bytes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_col</name> <operator>=</operator> <name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">' '</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_row</name> <operator>=</operator> <name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="char">' '</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>slen</name> <operator>+=</operator> <name>num_bytes</name></expr>;</expr_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>get_termcode_len</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>tp</name> <operator>+</operator> <operator>*</operator><name>slen</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><operator>*</operator><name>slen</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>==</operator> <name>mouse_code</name>
<operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><operator>*</operator><name>slen</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><operator>*</operator><name>slen</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name>
<operator>||</operator> <operator>(</operator><name><name>tp</name><index>[<expr><operator>*</operator><name>slen</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><operator>*</operator><name>slen</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name><operator>)</operator><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>slen</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_URXVT_MOUSE</name>
<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_SGR_MOUSE</name>
<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_SGR_MOUSE_RELEASE</name></expr>)</condition>
<block>{<block_content>






















<expr_stmt><expr><name>p</name> <operator>=</operator> <name>modifiers_start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_SGR_MOUSE</name>
<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_SGR_MOUSE_RELEASE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_code</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_SGR_MOUSE_RELEASE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_RELEASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mouse_col</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mouse_row</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>



<expr_stmt><expr><operator>*</operator><name>modifiers</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_MOUSE</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_GPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_GPM_MOUSE</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_URXVT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_URXVT_MOUSE</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_SGR_MOUSE</name>
<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_SGR_MOUSE_RELEASE</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>






<if_stmt><if>if <condition>(<expr><name>mouse_code</name> <operator>&gt;=</operator> <name>MOUSEWHEEL_LOW</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_GPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>KS_GPM_MOUSE</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>use_xterm_mouse</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>mouse_code</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <name>MOUSE_DRAG</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>wheel_code</name> <operator>=</operator> <name>mouse_code</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_XTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>held_button</name> <operator>==</operator> <name>MOUSE_RELEASE</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>&amp;&amp;</operator> <operator>(</operator><name>mouse_code</name> <operator>==</operator> <literal type="number">0x23</literal> <operator>||</operator> <name>mouse_code</name> <operator>==</operator> <literal type="number">0x24</literal>
<operator>||</operator> <name>mouse_code</name> <operator>==</operator> <literal type="number">0x40</literal> <operator>||</operator> <name>mouse_code</name> <operator>==</operator> <literal type="number">0x41</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>wheel_code</name> <operator>=</operator> <name>mouse_code</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>mouse_code</name> <operator>&gt;=</operator> <literal type="number">0x40</literal></expr> ?</condition><then> <expr><literal type="number">0x40</literal></expr> </then><else>: <expr><literal type="number">0x23</literal></expr></else></ternary><operator>)</operator>
<operator>+</operator> <name>MOUSEWHEEL_LOW</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>use_xterm_mouse</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mouse_code</name> <operator>&amp;</operator> <name>MOUSE_DRAG_XTERM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_DRAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>mouse_code</name> <operator>&amp;</operator> <name>MOUSE_DRAG</name> <operator>&amp;</operator> <operator>~</operator><name>MOUSE_CLICK_MASK</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mouse_code</name> <operator>&amp;</operator> <name>MOUSE_RELEASE</name><operator>)</operator> <operator>==</operator> <name>MOUSE_RELEASE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stop_xterm_trace</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>start_xterm_trace</name><argument_list>(<argument><expr><name>mouse_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_NET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_NETTERM_MOUSE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mc</name></decl>, <decl><type ref="prev"/><name>mr</name></decl>;</decl_stmt>




<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tp</name> <operator>+</operator> <operator>*</operator><name>slen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mr</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mc</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mouse_col</name> <operator>=</operator> <name>mc</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_row</name> <operator>=</operator> <name>mr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <name>MOUSE_LEFT</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>slen</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <operator>(</operator><name>tp</name> <operator>+</operator> <operator>*</operator><name>slen</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_JSB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_JSBTERM_MOUSE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mult</name></decl>, <decl><type ref="prev"/><name>val</name></decl>, <decl><type ref="prev"/><name>iter</name></decl>, <decl><type ref="prev"/><name>button</name></decl>, <decl><type ref="prev"/><name>status</name></decl>;</decl_stmt>















<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tp</name> <operator>+</operator> <operator>*</operator><name>slen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>button</name> <operator>=</operator> <name>mouse_code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'L'</literal></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case> <break>break;</break> 
<default>default:</default> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></switch>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'M'</literal></expr>:</case> <expr_stmt><expr><name>button</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case> <break>break;</break> 
<default>default:</default> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></switch>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'R'</literal></expr>:</case> <expr_stmt><expr><name>button</name> <operator>|=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case> <break>break;</break> 
<default>default:</default> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></switch>
<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>mult</name> <operator>=</operator> <literal type="number">100</literal></expr><operator>,</operator> <expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr><operator>,</operator>
<expr><name>mult</name> <operator>/=</operator> <literal type="number">10</literal></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <name>mult</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt></block_content></block></for>
<expr_stmt><expr><name>mouse_col</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>mult</name> <operator>=</operator> <literal type="number">100</literal></expr><operator>,</operator> <expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr><operator>,</operator>
<expr><name>mult</name> <operator>/=</operator> <literal type="number">10</literal></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <name>mult</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt></block_content></block></for>
<expr_stmt><expr><name>mouse_row</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name>button</name> <operator>|=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <break>break;</break> 
<case>case <expr><literal type="char">'x'</literal></expr>:</case> <break>break;</break> 
<default>default:</default> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></switch>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>button</name> <operator>|=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <break>break;</break> 
<case>case <expr><literal type="char">'x'</literal></expr>:</case> <break>break;</break> 
<default>default:</default> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'\033'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>status</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'D'</literal></expr>:</case> 
<case>case <expr><literal type="char">'S'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_MIDDLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_MIDDLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>button</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>held_button</name> <operator>=</operator> <name>mouse_code</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_DRAG</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>is_drag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_MIDDLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_LEFT</name> <operator>|</operator> <name>MOUSE_RELEASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_MIDDLE</name> <operator>|</operator> <name>MOUSE_RELEASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_RIGHT</name> <operator>|</operator> <name>MOUSE_RELEASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>button</name> <operator>&amp;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>slen</name> <operator>+=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <operator>(</operator><name>tp</name> <operator>+</operator> <operator>*</operator><name>slen</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_DEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_DEC_MOUSE</name></expr>)</condition>
<block>{<block_content>



















































<decl_stmt><decl><type><name>int</name></type> <name>Pe</name></decl>, <decl><type ref="prev"/><name>Pb</name></decl>, <decl><type ref="prev"/><name>Pr</name></decl>, <decl><type ref="prev"/><name>Pc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tp</name> <operator>+</operator> <operator>*</operator><name>slen</name></expr>;</expr_stmt>


<expr_stmt><expr><name>Pe</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>Pb</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>Pr</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>Pc</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'&amp;'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'w'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>Pe</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><name>Pb</name> <operator>&amp;=</operator> <literal type="number">7</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>Pb</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <name>MOUSE_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Pb</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <name>MOUSE_MIDDLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Pb</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <name>MOUSE_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Pb</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>held_button</name> <operator>=</operator> <name>mouse_code</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_DRAG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>WantQueryMouse</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>is_drag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <name>MOUSE_LEFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>WantQueryMouse</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <name>MOUSE_RELEASE</name> <operator>|</operator> <name>MOUSE_LEFT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <name>MOUSE_MIDDLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>WantQueryMouse</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <name>MOUSE_RELEASE</name> <operator>|</operator> <name>MOUSE_MIDDLE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <name>MOUSE_RIGHT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>WantQueryMouse</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <name>MOUSE_RELEASE</name> <operator>|</operator> <name>MOUSE_RIGHT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
<case>case <expr><literal type="number">9</literal></expr>:</case> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
<case>case <expr><literal type="number">10</literal></expr>:</case> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
<default>default:</default> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></switch>

<expr_stmt><expr><name>mouse_col</name> <operator>=</operator> <name>Pc</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_row</name> <operator>=</operator> <name>Pr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>slen</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <operator>(</operator><name>tp</name> <operator>+</operator> <operator>*</operator><name>slen</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_PTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_PTERM_MOUSE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>, <decl><type ref="prev"/><name>num_clicks</name></decl>, <decl><type ref="prev"/><name>action</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tp</name> <operator>+</operator> <operator>*</operator><name>slen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>action</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mouse_row</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mouse_col</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>button</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>button</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <name>MOUSE_LEFT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <name>MOUSE_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>mouse_code</name> <operator>=</operator> <name>MOUSE_MIDDLE</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>action</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">31</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_clicks</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case> 
<expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_RELEASE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">33</literal></expr>:</case> 
<expr_stmt><expr><name>held_button</name> <operator>=</operator> <name>mouse_code</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_code</name> <operator>|=</operator> <name>MOUSE_DRAG</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>slen</name> <operator>+=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <operator>(</operator><name>tp</name> <operator>+</operator> <operator>*</operator><name>slen</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<expr_stmt><expr><name>current_button</name> <operator>=</operator> <operator>(</operator><name>mouse_code</name> <operator>&amp;</operator> <name>MOUSE_CLICK_MASK</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>current_button</name> <operator>==</operator> <name>MOUSE_RELEASE</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_XTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>wheel_code</name> <operator>==</operator> <literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>








<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mouse_code</name> <operator>&amp;</operator> <name>MOUSE_DRAG</name><operator>)</operator> <operator>==</operator> <name>MOUSE_DRAG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_drag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>current_button</name> <operator>=</operator> <name>held_button</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>wheel_code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_DOUBLE_CLICK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_GPM</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>KS_GPM_MOUSE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>KS_GPM_MOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>



<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mouse_time</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>orig_mouse_time</name><operator>.</operator><name>tv_sec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>






<expr_stmt><expr><name>timediff</name> <operator>=</operator> <name>p_mouset</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>timediff</name> <operator>=</operator> <call><name>time_diff_ms</name><argument_list>(<argument><expr><operator>&amp;</operator><name>orig_mouse_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mouse_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>orig_mouse_time</name> <operator>=</operator> <name>mouse_time</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mouse_code</name> <operator>==</operator> <name>orig_mouse_code</name>
<operator>&amp;&amp;</operator> <name>timediff</name> <operator>&lt;</operator> <name>p_mouset</name>
<operator>&amp;&amp;</operator> <name>orig_num_clicks</name> <operator>!=</operator> <literal type="number">4</literal>
<operator>&amp;&amp;</operator> <name>orig_mouse_col</name> <operator>==</operator> <name>mouse_col</name>
<operator>&amp;&amp;</operator> <name>orig_mouse_row</name> <operator>==</operator> <name>mouse_row</name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>is_mouse_topline</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call>


<operator>||</operator> <operator>(</operator><name>mouse_row</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>firstwin</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>orig_num_clicks</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>orig_num_clicks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>orig_mouse_col</name> <operator>=</operator> <name>mouse_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>orig_mouse_row</name> <operator>=</operator> <name>mouse_row</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_mouse_topline</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_GPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>orig_num_clicks</name> <operator>=</operator> <call><name>NUM_MOUSE_CLICKS</name><argument_list>(<argument><expr><name>mouse_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>orig_num_clicks</name> <operator>=</operator> <call><name>NUM_MOUSE_CLICKS</name><argument_list>(<argument><expr><name>mouse_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>is_click</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>orig_mouse_code</name> <operator>=</operator> <name>mouse_code</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_drag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>held_button</name> <operator>=</operator> <name>mouse_code</name> <operator>&amp;</operator> <name>MOUSE_CLICK_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>orig_mouse_code</name> <operator>&amp;</operator> <name>MOUSE_SHIFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>orig_mouse_code</name> <operator>&amp;</operator> <name>MOUSE_CTRL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>orig_mouse_code</name> <operator>&amp;</operator> <name>MOUSE_ALT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>orig_num_clicks</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_2CLICK</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>orig_num_clicks</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_3CLICK</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>orig_num_clicks</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_4CLICK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wheel_code</name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>wheel_code</name> <operator>&amp;</operator> <name>MOUSE_RELEASE</name><operator>)</operator> <operator>!=</operator> <name>MOUSE_RELEASE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wheel_code</name> <operator>&amp;</operator> <name>MOUSE_CTRL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wheel_code</name> <operator>&amp;</operator> <name>MOUSE_ALT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>wheel_code</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>
?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_MOUSEUP</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_MOUSEDOWN</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>held_button</name> <operator>=</operator> <name>MOUSE_RELEASE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_pseudo_mouse_code</name><argument_list>(<argument><expr><name>current_button</name></expr></argument>,
<argument><expr><name>is_click</name></expr></argument>, <argument><expr><name>is_drag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>mouse_col</name> <operator>&gt;=</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_col</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mouse_row</name> <operator>&gt;=</operator> <name>Rows</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mouse_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type>
<name>mouse_comp_pos</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rowp</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>colp</name></decl></parameter>,
<parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>lnump</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>plines_cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><operator>*</operator><name>colp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><operator>*</operator><name>rowp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>row</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cache_idx</name> <init>= <expr><name>lnum</name> <operator>-</operator> <name><name>win</name><operator>-&gt;</operator><name>w_topline</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>plines_cache</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>plines_cache</name><index>[<expr><name>cache_idx</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>plines_cache</name><index>[<expr><name>cache_idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_p_diff</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>win</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>row</name> <operator>-=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>row</name> <operator>-=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>plines_win_nofill</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>plines_win</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>plines_cache</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>plines_cache</name><index>[<expr><name>cache_idx</name></expr>]</index></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>row</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>win</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>row</name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>retval</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>win_col_off2</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <name>off</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>row</name> <operator>*</operator> <operator>(</operator><name><name>win</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>off</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_skipcol</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>win</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name><name>win</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>col</name> <operator>-=</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>netbeans_gutter_click</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>colp</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rowp</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lnump</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>win_T</name> <modifier>*</modifier></type>
<name>mouse_find_win</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rowp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>colp</name></decl></parameter>, <parameter><decl><type><name>mouse_find_T</name> <name>popup</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>pwp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>popup</name> <operator>!=</operator> <name>IGNORE_POPUP</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>popup_reset_handled</name><argument_list>(<argument><expr><name>POPUP_HANDLED_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>wp</name> <operator>=</operator> <call><name>find_next_popup</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>POPUP_HANDLED_1</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rowp</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>rowp</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <call><name>popup_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>*</operator><name>colp</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name>
<operator>&amp;&amp;</operator> <operator>*</operator><name>colp</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <call><name>popup_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pwp</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>pwp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>popup</name> <operator>==</operator> <name>FAIL_POPUP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>rowp</name> <operator>-=</operator> <name><name>pwp</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>colp</name> <operator>-=</operator> <name><name>pwp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</expr_stmt>
<return>return <expr><name>pwp</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>topframe</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rowp</name> <operator>-=</operator> <name><name>firstwin</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_LEAF</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>fp</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</init> <condition><expr><name><name>fp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>fp</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>colp</name> <operator>&lt;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_width</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>colp</name> <operator>-=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_width</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<for>for <control>(<init><expr><name>fp</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</init> <condition><expr><name><name>fp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>fp</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rowp</name> <operator>&lt;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>rowp</name> <operator>-=</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_height</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name><name>fp</name><operator>-&gt;</operator><name>fr_win</name></name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>rowp</name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winbar_height</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>wp</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_VCOL2COL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>int</name></type>
<name>vcol2col</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vcol</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>vcol</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>win_lbr_chartabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>f_getmousepos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>mouse_row</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>mouse_col</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>winid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>winrow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>wincol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>varnumber_T</name></type> <name>column</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_dict_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"screenrow"</literal></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>mouse_row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"screencol"</literal></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>mouse_col</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>FIND_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>top_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>top_off</name> <operator>=</operator> <call><name>popup_top_extra</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>left_off</name> <operator>=</operator> <call><name>popup_left_extra</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>popup_height</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <name>height</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>winid</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>winrow</name> <operator>=</operator> <name>row</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wincol</name> <operator>=</operator> <name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>-=</operator> <name>top_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <name>left_off</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mouse_comp_pos</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>column</name> <operator>=</operator> <name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"winid"</literal></expr></argument>, <argument><expr><name>winid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"winrow"</literal></expr></argument>, <argument><expr><name>winrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"wincol"</literal></expr></argument>, <argument><expr><name>wincol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"line"</literal></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"column"</literal></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
