<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats_featurelocations\vim\src\map.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>




<decl_stmt><decl><type><specifier>static</specifier> <name>mapblock_T</name> <modifier>*</modifier></type><name>first_abbr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 




<expr_stmt><expr><specifier>static</specifier> <name>mapblock_T</name> <operator>*</operator><operator>(</operator><name><name>maphash</name><index>[<expr><literal type="number">256</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>maphash_valid</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_HASH</name><parameter_list>(<parameter><type><name>mode</name></type></parameter>, <parameter><type><name>c1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((mode) &amp; (NORMAL + VISUAL + SELECTMODE + OP_PENDING + TERMINAL)) ? (c1) : ((c1) ^ 0x80))</cpp:value></cpp:define>




<function><type><name>mapblock_T</name> <modifier>*</modifier></type>
<name>get_maphash_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>maphash</name><index>[<expr><call><name>MAP_HASH</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>mapblock_T</name> <modifier>*</modifier></type>
<name>get_buf_maphash_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><call><name>MAP_HASH</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>is_maphash_valid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>maphash_valid</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>validate_maphash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>maphash_valid</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>maphash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>maphash</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maphash_valid</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>map_free</name><parameter_list>(<parameter><decl><type><name>mapblock_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>mpp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mp</name> <operator>=</operator> <operator>*</operator><name>mpp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_orig_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mpp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>map_mode_to_chars</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>mapmode</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <operator>(</operator><name>INSERT</name> <operator>+</operator> <name>CMDLINE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>INSERT</name> <operator>+</operator> <name>CMDLINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>LANGMAP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <operator>(</operator><name>NORMAL</name> <operator>+</operator> <name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name> <operator>+</operator> <name>OP_PENDING</name><operator>)</operator><operator>)</operator>
<operator>==</operator> <name>NORMAL</name> <operator>+</operator> <name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name> <operator>+</operator> <name>OP_PENDING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>OP_PENDING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>TERMINAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <operator>(</operator><name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>VISUAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>SELECTMODE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>mapmode</name><operator>.</operator><name>ga_data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>showmap</name><parameter_list>(
<parameter><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>local</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mapchars</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>message_filtered</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>message_filtered</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_didout</name> <operator>||</operator> <name>msg_silent</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mapchars</name> <operator>=</operator> <call><name>map_mode_to_chars</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mapchars</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>mapchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>mapchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>mapchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>++</operator><name>len</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>msg_outtrans_special</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name> <operator>==</operator> <name>REMAP_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name> <operator>==</operator> <name>REMAP_SCRIPT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"&amp;"</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>local</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"&lt;Nop&gt;"</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>


<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_unescape_csi</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_outtrans_special</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>last_set_msg</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_script_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>








































<function><type><name>int</name></type>
<name>do_map</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>maptype</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>abbrev</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>mpp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>hasarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>haskey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_print</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keyround</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>keys_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>alt_keys_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_backslash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>abbr_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>map_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unique</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nowait</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>silent</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>special</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>expr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>did_simplify</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>noremap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>orig_rhs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>keys</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>map_table</name> <operator>=</operator> <name>maphash</name></expr>;</expr_stmt>
<expr_stmt><expr><name>abbr_table</name> <operator>=</operator> <operator>&amp;</operator><name>first_abbr</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>maptype</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>noremap</name> <operator>=</operator> <name>REMAP_NONE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>noremap</name> <operator>=</operator> <name>REMAP_YES</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><literal type="string">"&lt;buffer&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>keys</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>map_table</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_maphash</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>abbr_table</name> <operator>=</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_first_abbr</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><literal type="string">"&lt;nowait&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>keys</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nowait</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><literal type="string">"&lt;silent&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>keys</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>silent</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><literal type="string">"&lt;special&gt;"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>keys</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>special</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><literal type="string">"&lt;script&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>keys</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>noremap</name> <operator>=</operator> <name>REMAP_SCRIPT</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><literal type="string">"&lt;expr&gt;"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>keys</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>expr</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><literal type="string">"&lt;unique&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>keys</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>unique</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>

<expr_stmt><expr><call><name>validate_maphash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>p</name> <operator>=</operator> <name>keys</name></expr>;</expr_stmt>
<expr_stmt><expr><name>do_backslash</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_BSLASH</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>maptype</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>Ctrl_V</name> <operator>||</operator> <operator>(</operator><name>do_backslash</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rhs</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hasarg</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>rhs</name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>haskey</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>keys</name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>do_print</name> <operator>=</operator> <operator>!</operator><name>haskey</name> <operator>||</operator> <operator>(</operator><name>maptype</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>hasarg</name><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>maptype</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>haskey</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><name>haskey</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>REPTERM_FROM_PART</name> <operator>|</operator> <name>REPTERM_DO_LT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>special</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REPTERM_SPECIAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>new_keys</name> <operator>=</operator> <call><name>replace_termcodes</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keys_buf</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>did_simplify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>did_simplify</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>replace_termcodes</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alt_keys_buf</name></expr></argument>,
<argument><expr><name>flags</name> <operator>|</operator> <name>REPTERM_NO_SIMPLIFY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <name>new_keys</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>orig_rhs</name> <operator>=</operator> <name>rhs</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hasarg</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><literal type="string">"&lt;nop&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>rhs</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>replace_termcodes</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg_buf</name></expr></argument>,
<argument><expr><name>REPTERM_DO_LT</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>special</name></expr> ?</condition><then> <expr><name>REPTERM_SPECIAL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>





<for>for <control>(<init><expr><name>keyround</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>keyround</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>keyround</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>did_it</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_local</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_hash</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keyround</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>alt_keys_buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <name>alt_keys_buf</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>alt_keys_buf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>do_print</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keys</name> <operator>=</operator> <name>alt_keys_buf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>haskey</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>MAXMAPLEN</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>abbrev</name> <operator>&amp;&amp;</operator> <name>maptype</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>, <decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>same</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>vim_iswordp</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>keys</name> <operator>+</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>keys</name> <operator>+</operator> <name>len</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>vim_iswordp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>same</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>last</name> <operator>!=</operator> <name>first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>same</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>same</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>same</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>haskey</name> <operator>&amp;&amp;</operator> <name>hasarg</name> <operator>&amp;&amp;</operator> <name>abbrev</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>no_abbr</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<if_stmt><if>if <condition>(<expr><name>do_print</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>map_table</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_maphash</name></name> <operator>&amp;&amp;</operator> <name>haskey</name> <operator>&amp;&amp;</operator> <name>hasarg</name> <operator>&amp;&amp;</operator> <name>maptype</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <literal type="number">256</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>hash</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>abbrev</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>first_abbr</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>( <init>;</init> <condition><expr><name>mp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>mode</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name> <operator>==</operator> <name>len</name>
<operator>&amp;&amp;</operator> <name>unique</name>
<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>abbrev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(
<argument><expr><literal type="string">"E224: global abbreviation already exists for %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(
<argument><expr><literal type="string">"E225: global mapping already exists for %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>map_table</name> <operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_maphash</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>hasarg</name> <operator>&amp;&amp;</operator> <name>maptype</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <literal type="number">256</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>hash</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>abbrev</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_first_abbr</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>( <init>;</init> <condition><expr><name>mp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mp</name><operator>-&gt;</operator><name>m_simplified</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>mode</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>haskey</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>showmap</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_local</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>, <argument><expr><name>keys</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>showmap</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_local</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>







<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>round</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>maptype</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>round</name> <operator>&lt;=</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><name>did_it</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>round</name></expr></incr>)</control>
<block>{<block_content>

<for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <literal type="number">256</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>hash</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>abbrev</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <name>abbr_table</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>map_table</name><index>[<expr><name>hash</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>mp</name> <operator>=</operator> <operator>*</operator><name>mpp</name></expr>;</init> <condition><expr><name>mp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <operator>*</operator><name>mpp</name></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>mode</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name><operator>)</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>haskey</name></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mp</name><operator>-&gt;</operator><name>m_simplified</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>showmap</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>map_table</name> <operator>!=</operator> <name>maphash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_it</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>round</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>maptype</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>abbrev</name> <operator>||</operator> <name>round</name> <operator>||</operator> <name>n</name> <operator>&gt;</operator> <name>len</name>
<operator>||</operator> <operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>keys</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name><operator>)</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_it</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>hasarg</name></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mp</name><operator>-&gt;</operator><name>m_simplified</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>showmap</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>map_table</name> <operator>!=</operator> <name>maphash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_it</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>!=</operator> <name>len</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name><operator>)</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>unique</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>abbrev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(
<argument><expr><literal type="string">"E226: abbreviation already exists for %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(
<argument><expr><literal type="string">"E227: mapping already exists for %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>mode</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>did_it</name></expr>)</condition> 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newstr</name> <init>= <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name> <operator>=</operator> <name>newstr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_orig_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_orig_str</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>orig_rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name> <operator>=</operator> <name>noremap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_nowait</name></name> <operator>=</operator> <name>nowait</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_silent</name></name> <operator>=</operator> <name>silent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_simplified</name></name> <operator>=</operator>
<name>did_simplify</name> <operator>&amp;&amp;</operator> <name>keyround</name> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_expr</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_script_ctx</name></name> <operator>=</operator> <name>current_sctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_script_ctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>+=</operator> <name>SOURCING_LNUM</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>did_it</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>map_free</name><argument_list>(<argument><expr><name>mpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue> 
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>new_hash</name> <operator>=</operator> <call><name>MAP_HASH</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>abbrev</name> <operator>&amp;&amp;</operator> <name>new_hash</name> <operator>!=</operator> <name>hash</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mpp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name> <operator>=</operator> <name><name>map_table</name><index>[<expr><name>new_hash</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map_table</name><index>[<expr><name>new_hash</name></expr>]</index></name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>

<continue>continue;</continue> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>maptype</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_it</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>keys</name> <operator>==</operator> <name>Ctrl_C</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>map_table</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_maphash</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_mapped_ctrl_c</name></name> <operator>&amp;=</operator> <operator>~</operator><name>mode</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mapped_ctrl_c</name> <operator>&amp;=</operator> <operator>~</operator><name>mode</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>haskey</name> <operator>||</operator> <operator>!</operator><name>hasarg</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_it</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>did_local</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>abbrev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No abbreviation found"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No mapping found"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>theend</name>;</goto> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>did_it</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 


<expr_stmt><expr><name>mp</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>mapblock_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keys</name> <operator>==</operator> <name>Ctrl_C</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>map_table</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_maphash</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_mapped_ctrl_c</name></name> <operator>|=</operator> <name>mode</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mapped_ctrl_c</name> <operator>|=</operator> <name>mode</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_orig_str</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>orig_rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_orig_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name> <operator>=</operator> <name>noremap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_nowait</name></name> <operator>=</operator> <name>nowait</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_silent</name></name> <operator>=</operator> <name>silent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_simplified</name></name> <operator>=</operator> <name>did_simplify</name> <operator>&amp;&amp;</operator> <name>keyround</name> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_expr</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_script_ctx</name></name> <operator>=</operator> <name>current_sctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_script_ctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>+=</operator> <name>SOURCING_LNUM</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>abbrev</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name> <operator>=</operator> <operator>*</operator><name>abbr_table</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>abbr_table</name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>MAP_HASH</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name> <operator>=</operator> <name><name>map_table</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map_table</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<label><name>theend</name>:</label>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>keys_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>alt_keys_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>arg_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_map_mode</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>cmdp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>modec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>cmdp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>modec</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>INSERT</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>LANGMAP</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>CMDLINE</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'o'</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>VISUAL</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>SELECTMODE</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'o'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>OP_PENDING</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>TERMINAL</name></expr>;</expr_stmt></block_content></block></if> 
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>forceit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>INSERT</name> <operator>+</operator> <name>CMDLINE</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name> <operator>+</operator> <name>NORMAL</name> <operator>+</operator> <name>OP_PENDING</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cmdp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><name>mode</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>map_clear</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmdp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>arg</name></type> <name>UNUSED</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>abbr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>local</name></decl>;</decl_stmt>

<expr_stmt><expr><name>local</name> <operator>=</operator> <operator>(</operator><call><name>STRCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;buffer&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>local</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>get_map_mode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmdp</name></expr></argument>, <argument><expr><name>forceit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>map_clear_int</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>local</name></expr></argument>, <argument><expr><name>abbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>map_clear_int</name><parameter_list>(
<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>local</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>abbr</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>mpp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_hash</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>validate_maphash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hash</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>abbr</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>local</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_first_abbr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><name>first_abbr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>local</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><name><name>maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>mpp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <operator>*</operator><name>mpp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>mode</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>mode</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><call><name>map_free</name><argument_list>(<argument><expr><name>mpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_hash</name> <operator>=</operator> <call><name>MAP_HASH</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>abbr</name> <operator>&amp;&amp;</operator> <name>new_hash</name> <operator>!=</operator> <name>hash</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mpp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>local</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><name>new_hash</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><name>new_hash</name></expr>]</index></name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name> <operator>=</operator> <name><name>maphash</name><index>[<expr><name>new_hash</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>maphash</name><index>[<expr><name>new_hash</name></expr>]</index></name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>mode_str2flags</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>modechars</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>modechars</name></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>NORMAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>modechars</name></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>modechars</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>VISUAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>modechars</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>SELECTMODE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>modechars</name></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>OP_PENDING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>modechars</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>INSERT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>modechars</name></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>LANGMAP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>modechars</name></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CMDLINE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>mode</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>map_to_exists</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>modechars</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>abbr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>replace_termcodes</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>REPTERM_DO_LT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>map_to_exists_mode</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><call><name>mode_str2flags</name><argument_list>(<argument><expr><name>modechars</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>abbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>int</name></type>
<name>map_to_exists_mode</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>abbr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exp_buffer</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>validate_maphash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hash</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>abbr</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>exp_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_first_abbr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>first_abbr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>exp_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>mp</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>mode</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>rhs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>exp_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>exp_buffer</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>




<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>expand_mapmodes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>expand_isabbrev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>expand_buffer</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>















<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>translate_mapping</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cpo_bslash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cpo_special</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ga</name><operator>.</operator><name>ga_itemsize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ga</name><operator>.</operator><name>ga_growsize</name></name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cpo_bslash</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_BSLASH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cpo_special</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_SPECI</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>str</name></expr>;</condition> <incr><expr><operator>++</operator><name>str</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_MODIFIER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>str</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cpo_special</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_ZERO</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>modifiers</name></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cpo_special</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><call><name>get_special_key_name</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>modifiers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_J</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_V</name>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>cpo_special</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>cpo_bslash</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><ternary><condition><expr><name>cpo_bslash</name></expr> ?</condition><then> <expr><name>Ctrl_V</name></expr> </then><else>: <expr><literal type="char">'\\'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>set_context_in_map_cmd</name><parameter_list>(
<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>isabbrev</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>isunmap</name></decl></parameter>, 
<parameter><decl><type><name>cmdidx_T</name></type> <name>cmdidx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>forceit</name> <operator>&amp;&amp;</operator> <name>cmdidx</name> <operator>!=</operator> <name>CMD_map</name> <operator>&amp;&amp;</operator> <name>cmdidx</name> <operator>!=</operator> <name>CMD_unmap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>isunmap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>expand_mapmodes</name> <operator>=</operator> <call><name>get_map_mode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>forceit</name> <operator>||</operator> <name>isabbrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>expand_mapmodes</name> <operator>=</operator> <name>INSERT</name> <operator>+</operator> <name>CMDLINE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isabbrev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>expand_mapmodes</name> <operator>+=</operator> <name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name> <operator>+</operator> <name>NORMAL</name> <operator>+</operator> <name>OP_PENDING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>expand_isabbrev</name> <operator>=</operator> <name>isabbrev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_MAPPINGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>expand_buffer</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;buffer&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>expand_buffer</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;unique&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;nowait&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;silent&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;special&gt;"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;script&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;expr&gt;"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></for>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>ExpandMappings</name><parameter_list>(
<parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>regmatch</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_file</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>validate_maphash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>round</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;silent&gt;"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;unique&gt;"</literal></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;script&gt;"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;expr&gt;"</literal></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>expand_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;buffer&gt;"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;nowait&gt;"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;special&gt;"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><name>regmatch</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>file</name><operator>)</operator><index>[<expr><name>count</name><operator>++</operator></expr>]</index> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hash</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>expand_isabbrev</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>first_abbr</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>expand_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>mp</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>expand_mapmodes</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>translate_mapping</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vim_regexec</name><argument_list>(<argument><expr><name>regmatch</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>file</name><operator>)</operator><index>[<expr><name>count</name><operator>++</operator></expr>]</index> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for> 
</block_content>}</block></for> 

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for> 

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr3</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>sort_strings</name><argument_list>(<argument><expr><operator>*</operator><name>file</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <operator>*</operator><name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr3</name> <operator>=</operator> <name>ptr1</name> <operator>+</operator> <name>count</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ptr2</name> <operator>&lt;</operator> <name>ptr3</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><operator>*</operator><name>ptr1</name></expr></argument>, <argument><expr><operator>*</operator><name>ptr2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name>ptr1</name> <operator>=</operator> <operator>*</operator><name>ptr2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>*</operator><name>ptr2</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>FAIL</name></expr> </then><else>: <expr><name>OK</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>



















<function><type><name>int</name></type>
<name>check_abbr</name><parameter_list>(
<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mincol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scol</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>tb</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_id</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vim_abbr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>noremap_keys</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>Ctrl_RSB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mb_prevptr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_iswordp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vim_abbr</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if> 
<else>else
<block>{<block_content>
<expr_stmt><expr><name>vim_abbr</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_id</name> <operator>=</operator> <call><name>vim_iswordp</name><argument_list>(<argument><expr><call><name>mb_prevptr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>ptr</name> <operator>+</operator> <name>mincol</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mb_prevptr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><name>vim_abbr</name> <operator>&amp;&amp;</operator> <name>is_id</name> <operator>!=</operator> <call><name>vim_iswordp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>clen</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>scol</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>ptr</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vim_abbr</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if> 
<else>else
<block>{<block_content>
<expr_stmt><expr><name>vim_abbr</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_id</name> <operator>=</operator> <call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>scol</name> <operator>=</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>scol</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_isspace</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>scol</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>vim_abbr</name> <operator>||</operator> <name>is_id</name> <operator>==</operator> <call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>scol</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition> <incr><expr><operator>--</operator><name>scol</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scol</name> <operator>&lt;</operator> <name>mincol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scol</name> <operator>=</operator> <name>mincol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>scol</name> <operator>&lt;</operator> <name>col</name></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>scol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>col</name> <operator>-</operator> <name>scol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_first_abbr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mp2</name> <operator>=</operator> <name>first_abbr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>mp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mp2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>( <init>;</init> <condition><expr><name>mp</name></expr>;</condition> <incr><expr><ternary><condition><expr><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name> <operator>==</operator> <name>NULL</name></expr>
?</condition><then> <expr><operator>(</operator><name>mp</name> <operator>=</operator> <name>mp2</name><operator>,</operator> <name>mp2</name> <operator>=</operator> <name>NULL</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name><operator>)</operator></expr></else></ternary></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>qlen</name> <init>= <expr><name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>match</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strbyte</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>, <argument><expr><name>K_SPECIAL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>qe</name> <init>= <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>qe</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>qe</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_unescape_csi</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>match</name> <operator>=</operator> <operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>State</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name>qlen</name> <operator>==</operator> <name>len</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>mp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>











<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>Ctrl_RSB</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tb</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>K_SECOND</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>K_THIRD</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name>ABBR_OFF</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">' '</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'~'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tb</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>Ctrl_V</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <name>ABBR_OFF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>-=</operator> <name>ABBR_OFF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tb</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tb</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>tb</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ins_typebuf</name><argument_list>(<argument><expr><name>tb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_silent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_expr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>eval_map_expr</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ins_typebuf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_silent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_expr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Ctrl_H</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>clen</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ins_typebuf</name><argument_list>(<argument><expr><name>tb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_silent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>eval_map_expr</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>save_cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_msg_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_msg_row</name></decl>;</decl_stmt>



<expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>expr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>vim_unescape_csi</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><operator>++</operator><name>textlock</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ex_normal_lock</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>save_cursor</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_msg_col</name> <operator>=</operator> <name>msg_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_msg_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>eval_to_string</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>textlock</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>ex_normal_lock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>save_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>save_msg_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>save_msg_row</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>vim_strsave_escape_csi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>vim_strsave_escape_csi</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>




<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>add_char2buf</name><argument_list>(<argument><expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>MB_CPTR2LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>vim_unescape_csi</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>p</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>KE_FILLER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>CSI</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_EXTRA</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CSI</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>makemap</name><parameter_list>(
<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>,
<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>abbr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_cpo</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>validate_maphash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>abbr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>abbr</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>abbr</name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hash</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>abbr</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_first_abbr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>first_abbr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>mp</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name> <operator>==</operator> <name>REMAP_SCRIPT</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>



<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_EXTRA</name>
<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_SNR</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>




<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c3</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>abbr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <literal type="string">"abbr"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <literal type="string">"map"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<switch>switch <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>NORMAL</name> <operator>+</operator> <name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name> <operator>+</operator> <name>OP_PENDING</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>NORMAL</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VISUAL</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SELECTMODE</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OP_PENDING</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NORMAL</name> <operator>+</operator> <name>VISUAL</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NORMAL</name> <operator>+</operator> <name>SELECTMODE</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NORMAL</name> <operator>+</operator> <name>OP_PENDING</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VISUAL</name> <operator>+</operator> <name>OP_PENDING</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SELECTMODE</name> <operator>+</operator> <name>OP_PENDING</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NORMAL</name> <operator>+</operator> <name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NORMAL</name> <operator>+</operator> <name>VISUAL</name> <operator>+</operator> <name>OP_PENDING</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c3</name> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NORMAL</name> <operator>+</operator> <name>SELECTMODE</name> <operator>+</operator> <name>OP_PENDING</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c3</name> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name> <operator>+</operator> <name>OP_PENDING</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CMDLINE</name> <operator>+</operator> <name>INSERT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>abbr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <literal type="string">"map!"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CMDLINE</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>INSERT</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LANGMAP</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'l'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TERMINAL</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E228: makemap: Illegal mode"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></switch>
<do>do 
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_cpo</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>did_cpo</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr> </then><else>: <expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></else></ternary><operator>)</operator></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>K_SPECIAL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>did_cpo</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>did_cpo</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"let s:cpo_save=&amp;cpo"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"set cpo&amp;vim"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&amp;&amp;</operator> <call><name>putc</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name> <operator>!=</operator> <name>REMAP_YES</name> <operator>&amp;&amp;</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"nore"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fputs</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" &lt;buffer&gt;"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_nowait</name></name> <operator>&amp;&amp;</operator> <call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" &lt;nowait&gt;"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_silent</name></name> <operator>&amp;&amp;</operator> <call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" &lt;silent&gt;"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name> <operator>==</operator> <name>REMAP_SCRIPT</name>
<operator>&amp;&amp;</operator> <call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"&lt;script&gt;"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_expr</name></name> <operator>&amp;&amp;</operator> <call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" &lt;expr&gt;"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>( <expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>put_escstr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>
<operator>||</operator> <call><name>putc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>put_escstr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>
<operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>c3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c3</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>c1</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>;</do>
</block_content>}</block></for>
</block_content>}</block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>did_cpo</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"let &amp;cpo=s:cpo_save"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"unlet s:cpo_save"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>put_escstr</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>strstart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>strstart</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>what</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"&lt;Nop&gt;"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>str</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>str</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>



<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mb_unescape</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>fputc</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
<expr_stmt><expr><operator>--</operator><name>str</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name>what</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_MODIFIER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>modifiers</name></expr>)</condition> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fputs</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>get_special_key_name</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>modifiers</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>IF_EB</name><argument_list>(<argument><expr><literal type="string">"\\\026\n"</literal></expr></argument>, <argument><expr><literal type="string">"\\"</literal> <name>CTRL_V_STR</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"&lt;NL&gt;"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">' '</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'~'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'|'</literal>
<operator>||</operator> <operator>(</operator><name>what</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>what</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>str</name> <operator>==</operator> <name>strstart</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>what</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>putc</name><argument_list>(<argument><expr><name>Ctrl_V</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>putc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>check_map_keycodes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>abbr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<function_decl><type><name>ESTACK_CHECK_DECLARATION</name></type>

<name>validate_maphash</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>estack_push</name><argument_list>(<argument><expr><name>ETYPE_INTERNAL</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"mappings"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ESTACK_CHECK_SETUP</name></macro>



<for>for <control>(<init><expr><name>bp</name> <operator>=</operator> <name>firstbuf</name></expr>;</init> <condition>;</condition> <incr><expr><name>bp</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>b_next</name></name></expr></incr>)</control>
<block>{<block_content>


<for>for <control>(<init><expr><name>abbr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>abbr</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>abbr</name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hash</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>abbr</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash</name></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>b_first_abbr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>first_abbr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>( <init>;</init> <condition><expr><name>mp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>add_termcap_entry</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<function_decl><type><name>ESTACK_CHECK_NOW</name></type>
<name>estack_pop</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>check_map</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>keys</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>exact</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>ign_mod</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>abbr</name></decl></parameter>, 
<parameter><decl><type><name>mapblock_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>mp_ptr</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>local_ptr</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>minlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>local</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>validate_maphash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>local</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>local</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>local</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hash</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>abbr</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>local</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_first_abbr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>first_abbr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>local</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>( <init>;</init> <condition><expr><name>mp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr></incr>)</control>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>mode</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>exact</name> <operator>||</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name> <operator>==</operator> <name>len</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>minlen</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>minlen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ign_mod</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_MODIFIER</name>
<operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name> <operator>-</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>minlen</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>minlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mp_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>mp_ptr</name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>local_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>local_ptr</name> <operator>=</operator> <name>local</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>get_maparg</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exact</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>which</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>keys_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>abbr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>get_dict</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffer_local</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keys</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>which</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>abbr</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>get_dict</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>which</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>which</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>get_map_mode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>which</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>replace_termcodes</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keys_buf</name></expr></argument>,
<argument><expr><name>REPTERM_FROM_PART</name> <operator>|</operator> <name>REPTERM_DO_LT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>check_map</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>exact</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>abbr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>keys_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>get_dict</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rhs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rhs</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;Nop&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>str2special_save</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>rettv_dict_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name> <operator>&amp;&amp;</operator> <name>rhs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><call><name>str2special_save</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mapmode</name> <init>= <expr><call><name>map_mode_to_chars</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"lhs"</literal></expr></argument>, <argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"rhs"</literal></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_orig_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"noremap"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name></expr> ?</condition><then> <expr><literal type="number">1L</literal></expr> </then><else>: <expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"script"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name> <operator>==</operator> <name>REMAP_SCRIPT</name></expr>
?</condition><then> <expr><literal type="number">1L</literal></expr> </then><else>: <expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"expr"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>mp</name><operator>-&gt;</operator><name>m_expr</name></name></expr> ?</condition><then> <expr><literal type="number">1L</literal></expr> </then><else>: <expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"silent"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>mp</name><operator>-&gt;</operator><name>m_silent</name></name></expr> ?</condition><then> <expr><literal type="number">1L</literal></expr> </then><else>: <expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"sid"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>mp</name><operator>-&gt;</operator><name>m_script_ctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"lnum"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>mp</name><operator>-&gt;</operator><name>m_script_ctx</name><operator>.</operator><name>sc_lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"buffer"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>buffer_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"nowait"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>mp</name><operator>-&gt;</operator><name>m_nowait</name></name></expr> ?</condition><then> <expr><literal type="number">1L</literal></expr> </then><else>: <expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>, <argument><expr><name>mapmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>mapmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIS_SEL</name></cpp:macro> <cpp:value>(VISUAL+SELECTMODE)</cpp:value></cpp:define> 




<struct>struct <name>initmap</name>
<block>{
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>initmap</name></name></type> <name><name>initmappings</name><index>[]</index></name> <init>=
<expr><block>{

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;S-Insert&gt; \"*P"</literal></expr>, <expr><name>NORMAL</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;S-Insert&gt; \"-d\"*P"</literal></expr>, <expr><name>VIS_SEL</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;S-Insert&gt; &lt;C-R&gt;&lt;C-O&gt;*"</literal></expr>, <expr><name>INSERT</name><operator>+</operator><name>CMDLINE</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;C-Insert&gt; \"*y"</literal></expr>, <expr><name>VIS_SEL</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;S-Del&gt; \"*d"</literal></expr>, <expr><name>VIS_SEL</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;C-Del&gt; \"*d"</literal></expr>, <expr><name>VIS_SEL</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;C-X&gt; \"*d"</literal></expr>, <expr><name>VIS_SEL</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>initmap</name></name></type> <name><name>cinitmappings</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\316w &lt;C-Home&gt;"</literal></expr>, <expr><name>NORMAL</name><operator>+</operator><name>VIS_SEL</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\316w &lt;C-Home&gt;"</literal></expr>, <expr><name>INSERT</name><operator>+</operator><name>CMDLINE</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\316u &lt;C-End&gt;"</literal></expr>, <expr><name>NORMAL</name><operator>+</operator><name>VIS_SEL</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\316u &lt;C-End&gt;"</literal></expr>, <expr><name>INSERT</name><operator>+</operator><name>CMDLINE</name></expr>}</block></expr>,


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\316\324 \"*P"</literal></expr>, <expr><name>NORMAL</name></expr>}</block></expr>, 
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\316\324 \"-d\"*P"</literal></expr>, <expr><name>VIS_SEL</name></expr>}</block></expr>, 
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\316\324 \022\017*"</literal></expr>, <expr><name>INSERT</name></expr>}</block></expr>, 
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\316\325 \"*y"</literal></expr>, <expr><name>VIS_SEL</name></expr>}</block></expr>, 
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\316\327 \"*d"</literal></expr>, <expr><name>VIS_SEL</name></expr>}</block></expr>, 
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\316\330 \"*d"</literal></expr>, <expr><name>VIS_SEL</name></expr>}</block></expr>, 
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\030 \"*d"</literal></expr>, <expr><name>VIS_SEL</name></expr>}</block></expr>, 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\316\324 P"</literal></expr>, <expr><name>NORMAL</name></expr>}</block></expr>, 
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\316\324 \"-dP"</literal></expr>, <expr><name>VIS_SEL</name></expr>}</block></expr>, 
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\316\324 \022\017\""</literal></expr>, <expr><name>INSERT</name></expr>}</block></expr>, 
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\316\325 y"</literal></expr>, <expr><name>VIS_SEL</name></expr>}</block></expr>, 
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\316\327 d"</literal></expr>, <expr><name>VIS_SEL</name></expr>}</block></expr>, 
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\316\330 d"</literal></expr>, <expr><name>VIS_SEL</name></expr>}</block></expr>, 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>initmap</name></name></type> <name><name>initmappings</name><index>[]</index></name> <init>=
<expr><block>{


<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;D-v&gt; \"*P"</literal></expr>, <expr><name>NORMAL</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;D-v&gt; \"-d\"*P"</literal></expr>, <expr><name>VIS_SEL</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;D-v&gt; &lt;C-R&gt;*"</literal></expr>, <expr><name>INSERT</name><operator>+</operator><name>CMDLINE</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;D-c&gt; \"*y"</literal></expr>, <expr><name>VIS_SEL</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;D-x&gt; \"*d"</literal></expr>, <expr><name>VIS_SEL</name></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;Backspace&gt; \"-d"</literal></expr>, <expr><name>VIS_SEL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VIS_SEL</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type>
<name>init_mappings</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>cinitmappings</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>initmap</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_map</name><argument_list>(<argument><expr><name><name>cinitmappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>arg</name></expr></argument>, <argument><expr><name><name>cinitmappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>initmappings</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>initmap</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_map</name><argument_list>(<argument><expr><name><name>initmappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>arg</name></expr></argument>, <argument><expr><name><name>initmappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>void</name></type>
<name>add_map</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cpo_save</name> <init>= <expr><name>p_cpo</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_map</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <name>cpo_save</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LANGMAP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>














<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>to</name></decl>;</decl_stmt>
}</block></struct></type> <name>langmap_entry_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>langmap_mapga</name></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>langmap_set_entry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>langmap_entry_T</name> <modifier>*</modifier></type><name>entries</name> <init>= <expr><operator>(</operator><name>langmap_entry_T</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>langmap_mapga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>langmap_mapga</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>a</name> <operator>!=</operator> <name>b</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>-</operator> <name>from</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>langmap_mapga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 


<expr_stmt><expr><name>entries</name> <operator>=</operator> <operator>(</operator><name>langmap_entry_T</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>langmap_mapga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>entries</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>entries</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>langmap_mapga</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <name>a</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>langmap_entry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>langmap_mapga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>from</name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>langmap_adjust_mb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>langmap_entry_T</name> <modifier>*</modifier></type><name>entries</name> <init>= <expr><operator>(</operator><name>langmap_entry_T</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>langmap_mapga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>langmap_mapga</name><operator>.</operator><name>ga_len</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>a</name> <operator>!=</operator> <name>b</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>-</operator> <name>c</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>c</name></expr>;</return> 
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>langmap_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>langmap_mapchar</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for> 
<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>langmap_mapga</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>langmap_entry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>langmap_set</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>langmap_mapga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>langmap_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>p_langmap</name></expr>;</init> <condition><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<for>for <control>(<init><expr><name>p2</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">';'</literal></expr>;</condition>
<incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p2</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<while>while <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>from</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2char</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p2</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2char</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2char</name>)<argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>to</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E357: 'langmap': Matching character missing for %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>transchar</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>langmap_set_entry</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>langmap_mapchar</name><index>[<expr><name>from</name> <operator>&amp;</operator> <literal type="number">255</literal></expr>]</index></name> <operator>=</operator> <name>to</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E358: 'langmap': Extra characters after semicolon: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_exmap</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isabbrev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmdp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cmdp</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>get_map_mode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmdp</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name> <operator>||</operator> <name>isabbrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>do_map</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>cmdp</name> <operator>==</operator> <literal type="char">'n'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><operator>(</operator><operator>*</operator><name>cmdp</name> <operator>==</operator> <literal type="char">'u'</literal><operator>)</operator></expr></else></ternary></expr></argument>,
<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>isabbrev</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>isabbrev</name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><name>e_noabbr</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><name>e_nomap</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_abbreviate</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>do_exmap</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_map</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>secure</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>secure</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>do_exmap</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_unmap</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>do_exmap</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_mapclear</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>map_clear</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>ex_abclear</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>map_clear</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
